digraph  {
6 [label="1_\ import\ java\.io\.BufferedReader;", type_label=expression_statement];
12 [label="2_\ import\ java\.io\.IOException;", type_label=expression_statement];
18 [label="3_\ import\ java\.io\.InputStreamReader;", type_label=expression_statement];
24 [label="4_\ import\ java\.io\.PrintWriter;", type_label=expression_statement];
30 [label="6_\ import\ java\.util\.StringTokenizer;", type_label=expression_statement];
36 [label="9_\ public\ class\ Main\ ", type_label=class_declaration];
40 [label="11_\ private\ final\ static\ FastReader\ in\ =\ new\ FastReader\(\);", type_label=expression_statement];
48 [label="12_\ private\ static\ final\ PrintWriter\ out\ =\ new\ PrintWriter\(System\.out\);", type_label=expression_statement];
59 [label="15_\ \ public\ static\ int\ solve\ \(String\ s\)", type_label=method_declaration];
68 [label="16_\ if\(s\.contains\(\"R\"\)\)", type_label=if];
76 [label="17_\ if\(s\.charAt\(0\)\ ==\ 'R'\ \&\&\ s\.charAt\(1\)\ ==\ 'R'\ \&\&\ s\.charAt\(2\)\ ==\ 'R'\)", type_label=if];
102 [label="18_\ return\ 3;", type_label=return];
104 [label="19_\ if\(s\.charAt\(0\)\ ==\ 'R'\ \&\&\ s\.charAt\(1\)\ ==\ 'R'\ \|\|\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ s\.charAt\(1\)\ ==\ 'R'\ \&\&\ s\.charAt\(2\)\ ==\ 'R'\)", type_label=if];
138 [label="21_\ return\ 2;", type_label=return];
141 [label="23_\ return\ 1;", type_label=return];
143 [label="26_\ return\ 0;", type_label=return];
145 [label="30_\ \ public\ static\ void\ main\ \(String\[\]\ args\)", type_label=method_declaration];
156 [label="32_\ out\.println\(solve\(in\.next\(\)\)\);", type_label=expression_statement];
168 [label="34_\ out\.flush\(\);", type_label=expression_statement];
173 [label="37_\ private\ static\ final\ class\ FastReader\ ", type_label=class_declaration];
177 [label="38_\ private\ static\ BufferedReader\ BF;", type_label=expression_statement];
182 [label="39_\ private\ static\ StringTokenizer\ ST;", type_label=expression_statement];
187 [label="41_\ \ public\ FastReader\ \(\)", type_label=constructor_declaration];
192 [label="42_\ BF\ =\ new\ BufferedReader\(new\ InputStreamReader\(System\.in\)\);", type_label=expression_statement];
204 [label="43_\ ST\ =\ null;", type_label=expression_statement];
208 [label="47_\ \ public\ final\ String\ next\ \(\)", type_label=method_declaration];
214 [label="48_\ while\(ST\ ==\ null\ \|\|\ !ST\.hasMoreTokens\(\)\)", type_label=while];
226 [label="49_\ try", type_label=try];
228 [label="50_\ ST\ =\ new\ StringTokenizer\(BF\.readLine\(\)\);", type_label=expression_statement];
238 [label="51_\ catch\ \(IOException\ e\)", type_label=catch];
244 [label="52_\ e\.printStackTrace\(\);", type_label=expression_statement];
249 [label="55_\ return\ ST\.nextToken\(\);", type_label=return];
254 [label="59_\ \ final\ int\ nextInt\ \(\)", type_label=method_declaration];
260 [label="60_\ return\ Integer\.parseInt\(next\(\)\);", type_label=return];
1 [label="1_\ start_node", type_label=start];
6 -> 12  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
12 -> 18  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
18 -> 24  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
24 -> 30  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
30 -> 36  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
36 -> 40  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
40 -> 48  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
40 -> 173  [color=red, controlflow_type="constructor_call|45", edge_type=CFG_edge, key=0, label=constructor_call, target_constructor=187];
40 -> 156  [key=0, used_def=in];
48 -> 145  [color=red, controlflow_type=main_method_next, edge_type=CFG_edge, key=0, label=main_method_next];
48 -> 156  [key=0, used_def=out];
59 -> 68  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
59 -> 68  [key=1, used_def=s];
68 -> 76  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
68 -> 76  [key=1, used_def=s];
68 -> 143  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
76 -> 102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
76 -> 104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
76 -> 104  [key=1, used_def=s];
102 -> 156  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
102 -> 156  [key=1];
104 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 141  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
138 -> 156  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
138 -> 156  [key=1];
141 -> 156  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
141 -> 156  [key=1];
143 -> 156  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
143 -> 156  [key=1];
145 -> 156  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
156 -> 168  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
156 -> 168  [key=1, used_def=out];
156 -> 59  [color=red, controlflow_type="method_call|161", edge_type=CFG_edge, key=0, label=method_call];
156 -> 59  [key=1];
156 -> 208  [color=red, controlflow_type="method_call|164", edge_type=CFG_edge, key=0, label=method_call];
173 -> 177  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
173 -> 40  [key=0];
177 -> 182  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
177 -> 40  [key=0];
182 -> 187  [color=red, controlflow_type=constructor_next, edge_type=CFG_edge, key=0, label=constructor_next];
182 -> 40  [key=0];
187 -> 192  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
187 -> 40  [key=0];
192 -> 204  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
192 -> 228  [key=0, used_def=BF];
192 -> 40  [key=0];
204 -> 40  [color=red, controlflow_type=class_return, edge_type=CFG_edge, key=0, label=class_return];
204 -> 40  [key=1];
204 -> 214  [key=0, used_def=ST];
208 -> 214  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
214 -> 226  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
214 -> 249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
214 -> 249  [key=1, used_def=ST];
226 -> 228  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
228 -> 238  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
228 -> 214  [color=red, controlflow_type=try_exit, edge_type=CFG_edge, key=0, label=try_exit];
228 -> 214  [key=1, used_def=ST];
228 -> 228  [key=0, used_def=BF];
238 -> 244  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
238 -> 244  [key=1, used_def=e];
244 -> 214  [color=red, controlflow_type=catch_exit, edge_type=CFG_edge, key=0, label=catch_exit];
249 -> 156  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
249 -> 156  [key=1];
249 -> 260  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
249 -> 260  [key=1];
249 -> 214  [key=0, used_def=ST];
254 -> 260  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
260 -> 208  [color=red, controlflow_type="method_call|265", edge_type=CFG_edge, key=0, label=method_call];
1 -> 36  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
