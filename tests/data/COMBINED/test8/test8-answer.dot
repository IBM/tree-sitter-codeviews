digraph  {
6 [label="1_\ class\ Lamp\ ", type_label=class_declaration];
9 [label="2_\ static\ boolean\ passedElement;", type_label=expression_statement];
14 [label="3_\ boolean\ ele2;", type_label=expression_statement];
18 [label="4_\ Lamp\ babylamp;", type_label=expression_statement];
22 [label="5_\ \ Lamp\ \(\)", type_label=constructor_declaration];
26 [label="6_\ wierdFn\(passedElement\);", type_label=expression_statement];
31 [label="8_\ \ void\ wierdFn\ \(boolean\ somethingStatic\)", type_label=method_declaration];
39 [label="9_\ somethingStatic\ =\ true;", type_label=expression_statement];
43 [label="10_\ newfunc\(this\);", type_label=expression_statement];
48 [label="12_\ \ void\ newfunc\ \(Lamp\ r\)", type_label=method_declaration];
56 [label="13_\ this\.ele2\ =\ true;", type_label=expression_statement];
62 [label="17_\ class\ Main\ ", type_label=class_declaration];
65 [label="18_\ \ static\ boolean\ fn\ \(Lamp\ dog,\ Lamp\ cat\)", type_label=method_declaration];
77 [label="19_\ cat\.ele2\ =\ true;", type_label=expression_statement];
83 [label="20_\ dog\.ele2\ =\ false;", type_label=expression_statement];
89 [label="21_\ cat\.wierdFn\(dog\.babylamp\.ele2\);", type_label=expression_statement];
99 [label="22_\ if\(dog\.ele2\ !=\ true\)", type_label=if];
107 [label="23_\ dog\.ele2\ =\ true;", type_label=expression_statement];
113 [label="25_\ return\ dog\.ele2;", type_label=return];
117 [label="27_\ \ public\ static\ void\ main\ \(String\[\]\ args\)", type_label=method_declaration];
128 [label="28_\ Lamp\ in\ =\ new\ Lamp\(\);", type_label=expression_statement];
135 [label="29_\ Lamp\ out\ =\ new\ Lamp\(\);", type_label=expression_statement];
142 [label="30_\ boolean\ z\ =\ fn\(in,\ out\);", type_label=expression_statement];
151 [label="31_\ System\.out\.println\(in\.ele2\);", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
6 -> 9  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
6 -> 128  [key=0];
6 -> 135  [key=0];
9 -> 14  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
9 -> 26  [key=0, used_def=passedElement];
9 -> 128  [key=0];
9 -> 135  [key=0];
14 -> 18  [color=red, controlflow_type=class_next, edge_type=CFG_edge, key=0, label=class_next];
14 -> 128  [key=0];
14 -> 135  [key=0];
18 -> 22  [color=red, controlflow_type=constructor_next, edge_type=CFG_edge, key=0, label=constructor_next];
18 -> 128  [key=0];
18 -> 135  [key=0];
22 -> 26  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
22 -> 128  [key=0];
22 -> 135  [key=0];
26 -> 31  [color=red, controlflow_type="method_call|27", edge_type=CFG_edge, key=0, label=method_call];
26 -> 31  [key=1];
26 -> 128  [color=red, controlflow_type=class_return, edge_type=CFG_edge, key=0, label=class_return];
26 -> 128  [key=1];
26 -> 135  [color=red, controlflow_type=class_return, edge_type=CFG_edge, key=0, label=class_return];
26 -> 135  [key=1];
31 -> 39  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
39 -> 43  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
43 -> 26  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
43 -> 89  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
43 -> 48  [color=red, controlflow_type="method_call|44", edge_type=CFG_edge, key=0, label=method_call];
43 -> 48  [key=1];
48 -> 56  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
56 -> 43  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
62 -> 117  [color=red, controlflow_type=main_method_next, edge_type=CFG_edge, key=0, label=main_method_next];
65 -> 77  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
65 -> 89  [key=0, used_def=cat];
65 -> 99  [key=0, used_def="dog.ele2"];
65 -> 113  [key=0, used_def="dog.ele2"];
77 -> 83  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
77 -> 89  [key=0, used_def=cat];
83 -> 89  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
83 -> 99  [key=0, used_def="dog.ele2"];
83 -> 113  [key=0, used_def="dog.ele2"];
89 -> 99  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
89 -> 31  [color=red, controlflow_type="method_call|90", edge_type=CFG_edge, key=0, label=method_call];
89 -> 31  [key=1];
99 -> 107  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
99 -> 113  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
107 -> 113  [color=red, controlflow_type="next_line 2", edge_type=CFG_edge, key=0, label="next_line 2"];
107 -> 113  [key=1, used_def="dog.ele2"];
113 -> 142  [color=red, controlflow_type=method_return, edge_type=CFG_edge, key=0, label=method_return];
113 -> 142  [key=1];
117 -> 128  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
128 -> 135  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
128 -> 6  [color=red, controlflow_type="constructor_call|132", edge_type=CFG_edge, key=0, label=constructor_call, target_constructor=22];
128 -> 142  [key=0, used_def=in];
128 -> 151  [key=0, used_def="in.ele2"];
135 -> 142  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
135 -> 142  [key=1, used_def=out];
135 -> 6  [color=red, controlflow_type="constructor_call|139", edge_type=CFG_edge, key=0, label=constructor_call, target_constructor=22];
142 -> 151  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
142 -> 65  [color=red, controlflow_type="method_call|146", edge_type=CFG_edge, key=0, label=method_call];
142 -> 65  [key=1];
1 -> 62  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
