digraph  {
11 [label="5_\ public\ class\ Sentence\ ", type_label=class_declaration];
15 [label="7_\ private\ readonly\ object\ balanceLock\ =\ new\ object\(\);", type_label=expression_statement];
26 [label="8_\ private\ decimal\ balance;", type_label=expression_statement];
32 [label="9_\ \ public\ Sentence\ \(string\ s\)", type_label=constructor_declaration];
40 [label="11_\ Value\ =\ s;", type_label=expression_statement];
45 [label="12_\ decimal\ appliedAmount\ =\ 0\ ;", type_label=local_declaration];
52 [label="13_\ lock\ \(\ balanceLock\ \)", type_label=lock];
55 [label="15_\ if\ \(\ balance\ >=\ amount\ \)", type_label=if];
60 [label="17_\ balance\ \-=\ amount;", type_label=expression_statement];
65 [label="18_\ appliedAmount\ =\ amount;", type_label=expression_statement];
70 [label="21_\ return\ appliedAmount;", type_label=expression_statement];
72 [label="24_\ \ public\ string\ Value\ \{\ get;\ set;\ \}", type_label=property_declaration];
79 [label="26_\ \ public\ char\ GetFirstCharacter\ \(\)", type_label=method_declaration];
85 [label="28_\ try", type_label=try];
87 [label="30_\ return\ Value\[0\];", type_label=expression_statement];
93 [label="32_\ catch\ \(NullReferenceException\ e\)", type_label=catch];
98 [label="34_\ throw;", type_label=expression_statement];
99 [label="38_\ class\ Program\ ", type_label=class_declaration];
102 [label="40_\ \ double\ getAverage\ \(int\[\]\ arr,\ int\ size\)", type_label=method_declaration];
115 [label="41_\ int\ i\ ;", type_label=local_declaration];
120 [label="42_\ double\ avg\ ;", type_label=local_declaration];
125 [label="43_\ int\ sum\ =\ 0\ ;", type_label=local_declaration];
132 [label="44_\ int\ val\ =\ 2\ ;", type_label=local_declaration];
139 [label="45_\ Debug\.Assert\(val\ !=\ 2,\ \"\ Value\ should\ not\ be\ 2\.\"\);", type_label=expression_statement];
151 [label="46_\ for\ \(\ i\ =\ 0\ ;\ i\ <\ size\ ;\ \+\+i\ \)", type_label=for];
162 [label="47_\ sum\ \+=\ arr\[i\];", type_label=expression_statement];
171 [label="49_\ var\ s\ =\ new\ Sentence\(null\)\ ;", type_label=local_declaration];
182 [label="50_\ Console\.WriteLine\(\$\"The\ first\ character\ is\ \{s\.GetFirstCharacter\(\)\}\"\);", type_label=expression_statement];
197 [label="51_\ avg\ =\ \(double\)sum\ /\ size;", type_label=expression_statement];
206 [label="52_\ return\ avg;", type_label=expression_statement];
208 [label="54_\ \ static\ void\ Main\ \(string\[\]\ args\)", type_label=method_declaration];
219 [label="56_\ Program\ app\ =\ new\ Program\(\)\ ;", type_label=local_declaration];
228 [label="58_\ int\ \[\]\ balance\ =\ new\ int\[\]\{1000,\ 2,\ 3,\ 17,\ 50\}\ ;", type_label=local_declaration];
246 [label="59_\ double\ avg\ ;", type_label=local_declaration];
251 [label="62_\ avg\ =\ app\.getAverage\(balance,\ 5\ \)\ ;", type_label=expression_statement];
264 [label="63_\ int\ number\ =\ 0\ ;", type_label=local_declaration];
271 [label="65_\ while\ \(\ number\ <\ 5\ \)", type_label=while];
276 [label="67_\ Console\.WriteLine\(number\);", type_label=expression_statement];
284 [label="68_\ number\ =\ number\ \+\ 1;", type_label=expression_statement];
291 [label="71_\ Console\.ReadLine\(\);", type_label=expression_statement];
297 [label="72_\ int\ number\ =\ 0\ ;", type_label=local_declaration];
304 [label="73_\ do", type_label=do];
306 [label="75_\ Console\.WriteLine\(number\);", type_label=expression_statement];
314 [label="76_\ number\ =\ number\ \+\ 1;", type_label=expression_statement];
321 [label="77_\ while\(number\ <\ 5\)", type_label=while];
324 [label="78_\ int\ number\ =\ 5\ ;", type_label=local_declaration];
331 [label="80_\ for\ \(\ int\ i\ =\ 0\ ;\ i\ <\ number\ ;\ i\+\+\ \)", type_label=for];
343 [label="81_\ Console\.WriteLine\(i\);", type_label=expression_statement];
351 [label="83_\ for\ \(\ int\ outer\ =\ 0\ ;\ outer\ <\ 5\ ;\ outer\+\+\ \)", type_label=for];
364 [label="85_\ for\ \(\ int\ inner\ =\ 0\ ;\ inner\ <\ 5\ ;\ inner\+\+\ \)", type_label=for];
377 [label="87_\ if\ \(\ inner\ >\ outer\ \)", type_label=if];
382 [label="89_\ break;", type_label=expression_statement];
383 [label="92_\ Console\.Write\(\$\"\{inner\}\ \"\);", type_label=expression_statement];
394 [label="94_\ Console\.WriteLine\(\);", type_label=expression_statement];
400 [label="96_\ foreach\ \(\ int\ i\ in\ ProduceEvenNumbers\(9\)\ \)", type_label=foreach];
409 [label="98_\ Console\.Write\(i\);", type_label=expression_statement];
417 [label="99_\ Console\.Write\(\"\ \"\);", type_label=expression_statement];
425 [label="103_\ IEnumerable<int>\ ProduceEvenNumbers\ \(int\ upto\)", type_label=local_function];
436 [label="105_\ for\ \(\ int\ i\ =\ 0\ ;\ i\ <=\ upto\ ;\ i\ \+=\ 2\ \)", type_label=for];
451 [label="107_\ yield\ return\ i;", type_label=expression_statement];
453 [label="111_\ Console\.ReadLine\(\);", type_label=expression_statement];
459 [label="112_\ var\ matrices\ =\ new\ Dictionary<string,\ int\[\]\[\]>\\n\ \ \ \ \ \ \ \ \{\\n\ \ \ \ \ \ \ \ \ \ \ \ \[\"A\"\]\ =\ new\[\]\\n\ \ \ \ \ \ \ \ \ \ \ \ \{\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ new\[\]\ \{\ 1,\ 2,\ 3,\ 4\ \},\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ new\[\]\ \{\ 4,\ 3,\ 2,\ 1\ \}\\n\ \ \ \ \ \ \ \ \ \ \ \ \},\\n\ \ \ \ \ \ \ \ \ \ \ \ \[\"B\"\]\ =\ new\[\]\\n\ \ \ \ \ \ \ \ \ \ \ \ \{\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ new\[\]\ \{\ 5,\ 6,\ 7,\ 8\ \},\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ new\[\]\ \{\ 8,\ 7,\ 6,\ 5\ \}\\n\ \ \ \ \ \ \ \ \ \ \ \ \},\\n\ \ \ \ \ \ \ \ \}\ ;", type_label=local_declaration];
516 [label="126_\ CheckMatrices\(matrices,\ 4\);", type_label=expression_statement];
524 [label="128_\ void\ CheckMatrices\ \(Dictionary<string,\ int\[\]\[\]>\ matrixLookup,\ int\ target\)", type_label=local_function];
543 [label="130_\ foreach\ \(\ var\ \(key,\ matrix\)\ in\ matrixLookup\ \)", type_label=foreach];
550 [label="132_\ for\ \(\ int\ row\ =\ 0\ ;\ row\ <\ matrix\.Length\ ;\ row\+\+\ \)", type_label=for];
565 [label="134_\ for\ \(\ int\ col\ =\ 0\ ;\ col\ <\ matrix\[row\]\.Length\ ;\ col\+\+\ \)", type_label=for];
584 [label="136_\ if\ \(\ matrix\[row\]\[col\]\ ==\ target\ \)", type_label=if];
597 [label="138_\ goto\ Found;", type_label=expression_statement];
599 [label="142_\ Console\.WriteLine\(\$\"Not\ found\ \{target\}\ in\ matrix\ \{key\}\.\"\);", type_label=expression_statement];
614 [label="143_\ continue;", type_label=expression_statement];
615 [label="145_\ Found", type_label=label];
617 [label="146_\ Console\.WriteLine\(\$\"Found\ \{target\}\ in\ matrix\ \{key\}\.\"\);", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
11 -> 32  [color=green, key=0];
11 -> 40  [color=green, key=0];
11 -> 52  [color=green, key=0];
11 -> 55  [color=green, key=0];
11 -> 60  [color=green, key=0];
11 -> 65  [color=green, key=0];
11 -> 72  [color=green, key=0];
11 -> 87  [color=green, key=0];
11 -> 171  [key=0];
15 -> 32  [key=0, used_def=balanceLock];
15 -> 52  [key=0, used_def=balanceLock];
15 -> 171  [key=0];
26 -> 32  [key=0, used_def=balance];
26 -> 52  [key=0, used_def=balance];
26 -> 55  [key=0, used_def=balance];
26 -> 60  [key=0, used_def=balance];
26 -> 171  [key=0];
32 -> 11  [color=green, key=0];
32 -> 40  [color=green, key=0];
32 -> 52  [color=green, key=0];
32 -> 55  [color=green, key=0];
32 -> 60  [color=green, key=0];
32 -> 65  [color=green, key=0];
32 -> 171  [key=0];
40 -> 11  [color=green, key=0];
40 -> 32  [color=green, key=0];
40 -> 171  [key=0];
45 -> 32  [key=0, used_def=appliedAmount];
45 -> 65  [color=orange, key=0];
45 -> 70  [key=0, used_def=appliedAmount];
45 -> 171  [key=0];
52 -> 11  [color=green, key=0];
52 -> 32  [color=green, key=0];
52 -> 55  [color=green, key=0];
52 -> 60  [color=green, key=0];
52 -> 65  [color=green, key=0];
52 -> 171  [key=0];
55 -> 11  [color=green, key=0];
55 -> 32  [color=green, key=0];
55 -> 52  [color=green, key=0];
55 -> 60  [color=green, key=0];
55 -> 65  [color=green, key=0];
55 -> 171  [key=0];
60 -> 11  [color=green, key=0];
60 -> 26  [color=orange, key=0];
60 -> 32  [color=green, key=0];
60 -> 52  [color=green, key=0];
60 -> 55  [color=green, key=0];
60 -> 65  [color=green, key=0];
60 -> 171  [key=0];
65 -> 11  [color=green, key=0];
65 -> 32  [color=green, key=0];
65 -> 45  [color=orange, key=0];
65 -> 52  [color=green, key=0];
65 -> 55  [color=green, key=0];
65 -> 60  [color=green, key=0];
65 -> 171  [key=0];
70 -> 11  [color=green, key=0];
70 -> 171  [key=0];
72 -> 11  [color=green, key=0];
72 -> 87  [color=green, key=0];
72 -> 171  [key=0];
99 -> 219  [key=0];
102 -> 151  [key=0, used_def=size];
102 -> 162  [key=0, used_def=arr];
102 -> 197  [key=0, used_def=size];
115 -> 151  [key=0, used_def=i];
120 -> 197  [color=orange, key=0];
125 -> 162  [key=0, used_def=sum];
125 -> 197  [key=0, used_def=sum];
132 -> 139  [key=0, used_def=val];
151 -> 151  [key=0, used_def=i];
151 -> 162  [key=0, used_def=i];
162 -> 162  [key=0, used_def=sum];
171 -> 182  [key=0, used_def=s];
197 -> 206  [key=0, used_def=avg];
219 -> 251  [key=0, used_def=app];
228 -> 251  [key=0, used_def=balance];
246 -> 251  [color=orange, key=0];
264 -> 271  [key=0, used_def=number];
264 -> 276  [key=0, used_def=number];
264 -> 284  [key=0, used_def=number];
264 -> 297  [color=orange, key=0];
271 -> 321  [color=green, key=0];
276 -> 321  [color=green, key=0];
284 -> 276  [key=0, used_def=number];
284 -> 284  [key=0, used_def=number];
284 -> 297  [color=orange, key=0];
284 -> 321  [color=green, key=0];
297 -> 306  [key=0, used_def=number];
297 -> 314  [key=0, used_def=number];
306 -> 321  [color=green, key=0];
314 -> 306  [key=0, used_def=number];
314 -> 314  [key=0, used_def=number];
314 -> 321  [color=green, key=0];
314 -> 324  [color=orange, key=0];
324 -> 331  [key=0, used_def=number];
331 -> 331  [key=0, used_def=i];
331 -> 343  [key=0, used_def=i];
351 -> 351  [key=0, used_def=outer];
351 -> 364  [key=0, used_def=outer];
351 -> 377  [key=0, used_def=outer];
364 -> 351  [key=0, used_def=inner];
364 -> 364  [key=0, used_def=inner];
364 -> 377  [key=0, used_def=inner];
364 -> 383  [key=0, used_def=inner];
400 -> 409  [key=0, used_def=i];
425 -> 436  [color=green, key=0];
436 -> 436  [key=0, used_def=i];
436 -> 451  [key=0, used_def=i];
459 -> 516  [key=0, used_def=matrices];
459 -> 524  [color=green, key=0];
516 -> 524  [color=green, key=0];
524 -> 543  [color=green, key=0];
524 -> 550  [color=green, key=0];
524 -> 565  [color=green, key=0];
524 -> 584  [color=green, key=0];
524 -> 597  [color=green, key=0];
524 -> 599  [color=green, key=0];
524 -> 615  [color=green, key=0];
524 -> 617  [color=green, key=0];
543 -> 550  [color=green, key=0];
543 -> 565  [color=green, key=0];
543 -> 584  [color=green, key=0];
543 -> 599  [color=green, key=0];
543 -> 617  [color=green, key=0];
550 -> 543  [color=green, key=0];
550 -> 550  [key=0, used_def=row];
550 -> 565  [color=green, key=0];
550 -> 584  [color=green, key=0];
550 -> 597  [color=green, key=0];
550 -> 599  [color=green, key=0];
550 -> 615  [color=green, key=0];
550 -> 617  [color=green, key=0];
565 -> 543  [color=green, key=0];
565 -> 550  [key=0, used_def=col];
565 -> 565  [key=0, used_def=col];
565 -> 584  [color=green, key=0];
565 -> 597  [color=green, key=0];
565 -> 599  [color=green, key=0];
565 -> 615  [color=green, key=0];
565 -> 617  [color=green, key=0];
584 -> 543  [color=green, key=0];
584 -> 550  [color=green, key=0];
584 -> 565  [color=green, key=0];
584 -> 597  [color=green, key=0];
584 -> 599  [color=green, key=0];
584 -> 615  [color=green, key=0];
584 -> 617  [color=green, key=0];
597 -> 550  [color=green, key=0];
597 -> 565  [color=green, key=0];
597 -> 584  [color=green, key=0];
597 -> 615  [color=green, key=0];
599 -> 543  [color=green, key=0];
599 -> 550  [color=green, key=0];
599 -> 565  [color=green, key=0];
599 -> 584  [color=green, key=0];
599 -> 617  [color=green, key=0];
615 -> 550  [color=green, key=0];
615 -> 565  [color=green, key=0];
615 -> 584  [color=green, key=0];
615 -> 597  [color=green, key=0];
}
