public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcenter);}
public void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);if (src.tailBlkIdx != 0)addAll(src.tailBlock, 0, src.tailBlkIdx);}
public void writeByte(byte b) {if (upto == blockSize) {if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}
public ObjectId getObjectId() {return objectId;}
public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {request = beforeClientExecution(request);return executeDeleteDomainEntry(request);}
public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}
public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem() {this(true);_header.setBATCount(1);_header.setBATArray(new int[]{1});BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}
public void init(int address) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice != null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;}
public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}
public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}
public QueryParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}
public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) {request = beforeClientExecution(request);return executeGetShardIterator(request);}
public ModifyStrategyRequest() {super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis");setMethod(MethodType.POST);}
public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}}
public EscherOptRecord getOptRecord() {return _optRecord;}
public synchronized int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {this.sentenceOp = sentenceOp;}
public void print(String str) {write(str != null ? str : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause) {super(functionName, cause);this.functionName = functionName;}
public V next() {return super.nextEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException("read past EOF: " + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException("read past EOF: " + this);readInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0;                    }}}
public TagQueueResult tagQueue(TagQueueRequest request) {request = beforeClientExecution(request);return executeTagQueue(request);}
public void remove() {throw new UnsupportedOperationException();}
public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheSubnetGroup(request);}
public void setParams(String params) {super.setParams(params);language = country = variant = "";StringTokenizer st = new StringTokenizer(params, ",");if (st.hasMoreTokens())language = st.nextToken();if (st.hasMoreTokens())country = st.nextToken();if (st.hasMoreTokens())variant = st.nextToken();}
public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationVersion(request);}
public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length != other.length) {return false; }for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}
public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}
public GetDashboardResult getDashboard(GetDashboardRequest request) {request = beforeClientExecution(request);return executeGetDashboard(request);}
public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {request = beforeClientExecution(request);return executeAssociateSigninDelegateGroupsWithAccount(request);}
public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\\Q");int apos = 0;int k;while ((k = string.indexOf("\\E", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");apos = k + 2;}return sb.append(string.substring(apos)).append("\\E").toString();}
public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) {request = beforeClientExecution(request);return executeGetIceServerConfig(request);}
public String toString() {return getClass().getName() + " [" +getValueAsString() +"]";}
public String toString(String field) {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void incRef() {refCount.incrementAndGet();}
public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}
public void setProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}
public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}
public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}
public String getNewPrefix() {return this.newPrefix;}
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
public GetGatewayResponsesResult getGatewayResponses(GetGatewayResponsesRequest request) {request = beforeClientExecution(request);return executeGetGatewayResponses(request);}
public void setPosition(long pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}
public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {setBootstrapActionConfig(bootstrapActionConfig);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeShort(field_6_author.length());out.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if (field_7_padding != null) {out.writeByte(field_7_padding.intValue());}}
public int lastIndexOf(String string) {return lastIndexOf(string, count);}
public boolean add(E object) {return addLastImpl(object);}
public void unsetSection(String section, String subsection) {ConfigSnapshot src, res;do {src = state.get();res = unsetSection(src, section, subsection);} while (!state.compareAndSet(src, res));}
public final String getTagName() {return tagName;}
public void addSubRecord(int index, SubRecord element) {subrecords.add(index, element);}
public boolean remove(Object o) {synchronized (mutex) {return delegate().remove(o);}}
public DoubleMetaphoneFilter create(TokenStream input) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long length() {return inCoreLength();}
public void setValue(boolean newValue) {value = newValue;}
public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}
public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public CreateRepoRequest() {super("cr", "2016-06-07", "CreateRepo", "cr");setUriPattern("/repos");setMethod(MethodType.PUT);}
public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public void remove() {if (expectedModCount == list.modCount) {if (lastLink != null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}
public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateHostedConnection(request);}
public int getBeginIndex() {return start;}
public static final WeightedTerm[] getTerms(Query query){return getTerms(query,false);}
public ByteBuffer compact() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public String getHumanishName() throws IllegalArgumentException {String s = getPath();if ("/".equals(s) || "".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split("[\\" + File.separatorChar + "/]"); elseelements = s.split("/+"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}
public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstanceLifecycleConfig(request);}
public String getAccessKeySecret() {return this.accessKeySecret;}
public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}
public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {request = beforeClientExecution(request);return executeDescribeVoices(request);}
public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) {request = beforeClientExecution(request);return executeListMonitoringExecutions(request);}
public DescribeJobRequest(String vaultName, String jobId) {setVaultName(vaultName);setJobId(jobId);}
public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}
public GetApisResult getApis(GetApisRequest request) {request = beforeClientExecution(request);return executeGetApis(request);}
public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) {request = beforeClientExecution(request);return executeDeleteSmsChannel(request);}
public TrackingRefUpdate getTrackingRefUpdate() {return trackingRefUpdate;}
public void print(boolean b) {print(String.valueOf(b));}
public QueryNode getChild() {return getChildren().get(0);}
public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}
public AreaRecord(RecordInputStream in) {field_1_formatFlags            = in.readShort();}
public GetThumbnailRequest() {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayVpcAttachments(request);}
public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request);}
public OrdRange getOrdRange(String dim) {return prefixToOrdRange.get(dim);}
public String toString() {String symbol = "";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);}
public E peek() {return peekFirstImpl();}
public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {request = beforeClientExecution(request);return executeCreateWorkspaces(request);}
public NumberFormatIndexRecord clone() {return copy();}
public DescribeRepositoriesResult describeRepositories(DescribeRepositoriesRequest request) {request = beforeClientExecution(request);return executeDescribeRepositories(request);}
public SparseIntArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}
public HyphenatedWordsFilter create(TokenStream input) {return new HyphenatedWordsFilter(input);}
public CreateDistributionWithTagsResult createDistributionWithTags(CreateDistributionWithTagsRequest request) {request = beforeClientExecution(request);return executeCreateDistributionWithTags(request);}
public RandomAccessFile(String fileName, String mode) throws FileNotFoundException {this(new File(fileName), mode);}
public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeDeleteWorkspaceImage(request);}
public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, "");return sb.toString();}
public UpdateDistributionResult updateDistribution(UpdateDistributionRequest request) {request = beforeClientExecution(request);return executeUpdateDistribution(request);}
public HSSFColor getColor(short index){if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) {return HSSFColorPredefined.AUTOMATIC.getColor();}byte[] b = _palette.getColor(index);return (b == null) ? null : new CustomColor(index, b);}
public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {throw new NotImplementedFunctionException(_functionName);}
public void serialize(LittleEndianOutput out) {out.writeShort((short)field_1_number_crn_records);out.writeShort((short)field_2_sheet_table_index);}
public DescribeDBEngineVersionsResult describeDBEngineVersions() {return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());}
public FormatRun(short character, short fontIndex) {this._character = character;this._fontIndex = fontIndex;}
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i) {char ch = chars[i];result[resultIndex++] = (byte) (ch >> 8);result[resultIndex++] = (byte) ch;}return result;}
public UploadArchiveResult uploadArchive(UploadArchiveRequest request) {request = beforeClientExecution(request);return executeUploadArchive(request);}
public List<Token> getHiddenTokensToLeft(int tokenIndex) {return getHiddenTokensToLeft(tokenIndex, -1);}
public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;AutomatonQuery other = (AutomatonQuery) obj;if (!compiled.equals(other.compiled))return false;if (term == null) {if (other.term != null)return false;} else if (!term.equals(other.term))return false;return true;}
public SpanQuery makeSpanClause() {SpanQuery [] spanQueries = new SpanQuery[size()];Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();int i = 0;while (sqi.hasNext()) {SpanQuery sq = sqi.next();float boost = weightBySpanQuery.get(sq);if (boost != 1f) {sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.length == 1)return spanQueries[0];elsereturn new SpanOrQuery(spanQueries);}
public StashCreateCommand stashCreate() {return new StashCreateCommand(repo);}
public FieldInfo fieldInfo(String fieldName) {return byName.get(fieldName);}
public DescribeEventSourceResult describeEventSource(DescribeEventSourceRequest request) {request = beforeClientExecution(request);return executeDescribeEventSource(request);}
public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) {request = beforeClientExecution(request);return executeGetDocumentAnalysis(request);}
public CancelUpdateStackResult cancelUpdateStack(CancelUpdateStackRequest request) {request = beforeClientExecution(request);return executeCancelUpdateStack(request);}
public ModifyLoadBalancerAttributesResult modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {request = beforeClientExecution(request);return executeModifyLoadBalancerAttributes(request);}
public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {request = beforeClientExecution(request);return executeSetInstanceProtection(request);}
public ModifyDBProxyResult modifyDBProxy(ModifyDBProxyRequest request) {request = beforeClientExecution(request);return executeModifyDBProxy(request);}
public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {outputs = ArrayUtil.grow(outputs, count+1);}if (count == endOffsets.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}
public FetchLibrariesRequest() {super("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean exists() {return fs.exists(objects);}
public FilterOutputStream(OutputStream out) {this.out = out;}
public ScaleClusterRequest() {super("CS", "2015-12-15", "ScaleCluster", "csk");setUriPattern("/clusters/[ClusterId]");setMethod(MethodType.PUT);}
public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);}
public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) {request = beforeClientExecution(request);return executeListObjectParentPaths(request);}
public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheSubnetGroups(request);}
public void setSharedFormula(boolean flag) {field_5_options =sharedFormula.setShortBoolean(field_5_options, flag);}
public boolean isReuseObjects() {return reuseObjects;}
public ErrorNode addErrorNode(Token badToken) {ErrorNodeImpl t = new ErrorNodeImpl(badToken);addAnyChild(t);t.setParent(this);return t;}
public LatvianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public EventSubscription removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {request = beforeClientExecution(request);return executeRemoveSourceIdentifierFromSubscription(request);}
public static TokenFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}
public AddAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public GetThreatIntelSetResult getThreatIntelSet(GetThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeGetThreatIntelSet(request);}
public RevFilter clone() {return new Binary(a.clone(), b.clone());}
public boolean equals( Object o ) {return o instanceof ArmenianStemmer;}
public final boolean hasArray() {return protectedHasArray();}
public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request) {request = beforeClientExecution(request);return executeUpdateContributorInsights(request);}
public void unwriteProtectWorkbook() {records.remove(fileShare);records.remove(writeProtect);fileShare = null;writeProtect = null;}
public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {super(dedup, analyzer);this.expand = expand;}
public RequestSpotInstancesResult requestSpotInstances(RequestSpotInstancesRequest request) {request = beforeClientExecution(request);return executeRequestSpotInstances(request);}
public byte[] getObjectData() {return findObjectRecord().getObjectData();}
public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}
public String toString() {return getKey() + ": " + getValue(); }
public ListTextTranslationJobsResult listTextTranslationJobs(ListTextTranslationJobsRequest request) {request = beforeClientExecution(request);return executeListTextTranslationJobs(request);}
public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {request = beforeClientExecution(request);return executeGetContactMethods(request);}
public static short lookupIndexByName(String name) {FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null) {fd = getInstanceCetab().getFunctionByNameInternal(name);if (fd == null) {return -1;}}return (short) fd.getIndex();}
public DescribeAnomalyDetectorsResult describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {request = beforeClientExecution(request);return executeDescribeAnomalyDetectors(request);}
public static String insertId(String message, ObjectId changeId) {return insertId(message, changeId, false);}
public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {long sz = db.getObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}
public ImportInstallationMediaResult importInstallationMedia(ImportInstallationMediaRequest request) {request = beforeClientExecution(request);return executeImportInstallationMedia(request);}
public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {request = beforeClientExecution(request);return executePutLifecycleEventHookExecutionStatus(request);}
public NumberPtg(LittleEndianInput in)  {this(in.readDouble());}
public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionConfig(request);}
public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {request = beforeClientExecution(request);return executeDescribeDetector(request);}
public ReportInstanceStatusResult reportInstanceStatus(ReportInstanceStatusRequest request) {request = beforeClientExecution(request);return executeReportInstanceStatus(request);}
public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}
public TokenStream create(TokenStream input) {return new PortugueseStemFilter(input);}
public FtCblsSubRecord() {reserved = new byte[ENCODED_SIZE];}
@Override public boolean remove(Object object) {synchronized (mutex) {return c.remove(object);}}
public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIp(request);}
public String toString() {return precedence + " >= _p";}
public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) {request = beforeClientExecution(request);return executeListStreamProcessors(request);}
public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}
public WindowProtectRecord(int options) {_options = options;}
public UnbufferedCharStream(int bufferSize) {n = 0;data = new int[bufferSize];}
public GetOperationsResult getOperations(GetOperationsRequest request) {request = beforeClientExecution(request);return executeGetOperations(request);}
public void copyRawTo(byte[] b, int o) {NB.encodeInt32(b, o, w1);NB.encodeInt32(b, o + 4, w2);NB.encodeInt32(b, o + 8, w3);NB.encodeInt32(b, o + 12, w4);NB.encodeInt32(b, o + 16, w5);}
public WindowOneRecord(RecordInputStream in) {field_1_h_hold            = in.readShort();field_2_v_hold            = in.readShort();field_3_width             = in.readShort();field_4_height            = in.readShort();field_5_options           = in.readShort();field_6_active_sheet      = in.readShort();field_7_first_visible_tab = in.readShort();field_8_num_selected_tabs = in.readShort();field_9_tab_width_ratio   = in.readShort();}
public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) {request = beforeClientExecution(request);return executeStopWorkspaces(request);}
public void close() throws IOException {if (isOpen) {isOpen = false;try {dump();} finally {try {channel.truncate(fileLength);} finally {try {channel.close();} finally {fos.close();}}}}}
public DescribeMatchmakingRuleSetsResult describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmakingRuleSets(request);}
public String getPronunciation(int wordId, char surface[], int off, int len) {return null; }
public String getPath() {return pathStr;}
public static double devsq(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {double m = 0;double s = 0;int n = v.length;for (int i=0; i<n; i++) {s += v[i];}m = s / n;s = 0;for (int i=0; i<n; i++) {s += (v[i]- m) * (v[i] - m);}r = (n == 1)? 0: s;}return r;}
public DescribeResizeResult describeResize(DescribeResizeRequest request) {request = beforeClientExecution(request);return executeDescribeResize(request);}
public final boolean hasPassedThroughNonGreedyDecision() {return passedThroughNonGreedyDecision;}
public int end() {return end(0);}
public void traverse(CellHandler handler) {int firstRow = range.getFirstRow();int lastRow = range.getLastRow();int firstColumn = range.getFirstColumn();int lastColumn = range.getLastColumn();final int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {currentRow = sheet.getRow(ctx.rowNumber);if (currentRow == null) {continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {currentCell = currentRow.getCell(ctx.colNumber);if (currentCell == null) {continue;}if (isEmpty(currentCell) && !traverseEmptyCells) {continue;}long rowSize = ArithmeticUtils.mulAndCheck((long)ArithmeticUtils.subAndCheck(ctx.rowNumber, firstRow), (long)width);ctx.ordinalNumber = ArithmeticUtils.addAndCheck(rowSize, (ctx.colNumber - firstColumn + 1));handler.onCell(currentCell, ctx);}}}
public int getReadIndex() {return pos;}
public int compareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.get().compareTo(this.bytes.get());elsereturn Float.compare(this.boost, other.boost);}
public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = delete(s, i, len);i--;break;default:break;}}return len;}
public void serialize(LittleEndianOutput out) {out.writeShort(_options);}
public DiagnosticErrorListener(boolean exactOnly) {this.exactOnly = exactOnly;}
public KeySchemaElement(String attributeName, KeyType keyType) {setAttributeName(attributeName);setKeyType(keyType.toString());}
public GetAssignmentResult getAssignment(GetAssignmentRequest request) {request = beforeClientExecution(request);return executeGetAssignment(request);}
public boolean hasObject(AnyObjectId id) {return findOffset(id) != -1;}
public GroupingSearch setAllGroups(boolean allGroups) {this.allGroups = allGroups;return this;}
public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.multiValued = v;}
public int getCellsVal() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0) {size++;}}return size;}
public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnector(request);}
public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}
public void write(byte[] b) {int len = b.length;checkPosition(len);System.arraycopy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}
public RebaseResult getRebaseResult() {return this.rebaseResult;}
public static int getNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) {for (int i = 0; i < usableBitSetSizes.length; i++) {int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation);if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {return usableBitSetSizes[i];}}return -1;}
public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {request = beforeClientExecution(request);return executeDescribeDashboard(request);}
public CreateSegmentResult createSegment(CreateSegmentRequest request) {request = beforeClientExecution(request);return executeCreateSegment(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[DBCELL]\n");buffer.append("    .rowoffset = ").append(HexDump.intToHex(field_1_row_offset)).append("\n");for (int k = 0; k < field_2_cell_offsets.length; k++) {buffer.append("    .cell_").append(k).append(" = ").append(HexDump.shortToHex(field_2_cell_offsets[ k ])).append("\n");}buffer.append("[/DBCELL]\n");return buffer.toString();}
public List<String> getUndeletedList() {return undeletedList;}
public String toString() {return "[INTERFACEEND/]\n";}
public MergeScheduler clone() {return this;}
public PlainTextDictionary(Reader reader) {in = new BufferedReader(reader);}
public StringBuilder append(CharSequence csq) {if (csq == null) {appendNull();} else {append0(csq, 0, csq.length());}return this;}
public ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request) {request = beforeClientExecution(request);return executeListAssociatedStacks(request);}
public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += v[i];}m = s / v.length;s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += Math.abs(v[i]-m);}r = s / v.length;return r;}
public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}
public GetDiskResult getDisk(GetDiskRequest request) {request = beforeClientExecution(request);return executeGetDisk(request);}
public DBClusterParameterGroup createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterParameterGroup(request);}
public static CharBuffer wrap(char[] array, int start, int charCount) {Arrays.checkOffsetAndCount(array.length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.position = start;buf.limit = start + charCount;return buf;}
public SubmoduleStatusType getType() {return type;}
public DescribeGameServerGroupResult describeGameServerGroup(DescribeGameServerGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGameServerGroup(request);}
public Pattern pattern() {return pattern;}
public V setValue(V object) {throw new UnsupportedOperationException();}
public StringBuilder stem(CharSequence word) {CharSequence cmd = stemmer.getLastOnPath(word);if (cmd == null)return null;buffer.setLength(0);buffer.append(word);Diff.apply(buffer, cmd);if (buffer.length() > 0)return buffer;elsereturn null;}
public RenameFaceRequest() {super("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public char requireChar(Map<String,String> args, String name) {return require(args, name).charAt(0);}
public static String toStringTree(Tree t) {return toStringTree(t, (List<String>)null);}
public String toString() {return "<deleted/>";}
public GetRepoWebhookLogListRequest() {super("cr", "2016-06-07", "GetRepoWebhookLogList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs");setMethod(MethodType.GET);}
public GetJobUnlockCodeResult getJobUnlockCode(GetJobUnlockCodeRequest request) {request = beforeClientExecution(request);return executeGetJobUnlockCode(request);}
public RemoveTagsRequest(String resourceId) {setResourceId(resourceId);}
public short getGB2312Id(char ch) {try {byte[] buffer = Character.toString(ch).getBytes("GB2312");if (buffer.length != 2) {return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1);} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}}
public BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd) {commands.addAll(cmd);return this;}
public short checkExternSheet(int sheetNumber){return (short)getOrCreateLinkTable().checkExternSheet(sheetNumber);}
@Override public boolean equals(Object object) {return c.equals(object);}
public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {AnyQueryNode andNode = (AnyQueryNode) queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.getChildren();if (children != null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null) {Query query = (Query) obj;try {bQuery.add(query, BooleanClause.Occur.SHOULD);} catch (TooManyClauses ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements());return bQuery.build();}
public DescribeStreamProcessorResult describeStreamProcessor(DescribeStreamProcessorRequest request) {request = beforeClientExecution(request);return executeDescribeStreamProcessor(request);}
public DescribeDashboardPermissionsResult describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDashboardPermissions(request);}
public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {return ref;}}
public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES     + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);}
public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}
public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {request = beforeClientExecution(request);return executeDescribeStackEvents(request);}
public void setRule(int idx, ConditionalFormattingRule cfRule){setRule(idx, (HSSFConditionalFormattingRule)cfRule);}
public CreateResolverRuleResult createResolverRule(CreateResolverRuleRequest request) {request = beforeClientExecution(request);return executeCreateResolverRule(request);}
public SeriesIndexRecord(RecordInputStream in) {field_1_index = in.readShort();}
public GetStylesRequest() {super("lubancloud", "2018-05-09", "GetStyles", "luban");setMethod(MethodType.POST);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_gridset_flag);}
public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}Toffs other = (Toffs) obj;if (getStartOffset() != other.getStartOffset()) {return false;}if (getEndOffset() != other.getEndOffset()) {return false;}return true;}
public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}
public CreateParticipantConnectionResult createParticipantConnection(CreateParticipantConnectionRequest request) {request = beforeClientExecution(request);return executeCreateParticipantConnection(request);}
public static double irr(double[] income) {return irr(income, 0.1d);}
public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeRegisterWorkspaceDirectory(request);}
public RevertCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();String imaginary = "";if (result) {String imaginaryGroup = m.group(5);boolean hasImaginaryPart = imaginaryGroup.equals("i") || imaginaryGroup.equals("j");if (imaginaryGroup.length() == 0) {return new StringEval(String.valueOf(0));}if (hasImaginaryPart) {String sign = "";String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN);if (imaginarySign.length() != 0 && !(imaginarySign.equals("+"))) {sign = imaginarySign;}String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE);if (groupImaginaryNumber.length() != 0) {imaginary = sign + groupImaginaryNumber;} else {imaginary = sign + "1";}}} else {return ErrorEval.NUM_ERROR;}return new StringEval(imaginary);}
public E pollLast() {Map.Entry<E, Object> entry = backingMap.pollLastEntry();return (entry == null) ? null : entry.getKey();}
public int readUShort(){int ch1 = readUByte();int ch2 = readUByte();return (ch2 << 8) + (ch1 << 0);}
public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {setSnapshotId(snapshotId);setAttribute(attribute.toString());setOperationType(operationType.toString());}
public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}
public V get(CharSequence cs) {if(cs == null)throw new NullPointerException();return null;}
public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter) super.create(input);return new CommonGramsQueryFilter(commonGrams);}
public String getPath() {return path;}
public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest request) {request = beforeClientExecution(request);return executeInitiateMultipartUpload(request);}
public StringBuilder insert(int offset, int i) {insert0(offset, Integer.toString(i));return this;}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int) ((block >>> shift) & 3);}}}
public TokenStream create(TokenStream input) {return new ElisionFilter(input, articles);}
public boolean eat(Row in, int remap[]) {int sum = 0;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;boolean live = false;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}
final public Token getToken(int index) {Token t = jj_lookingAhead ? jj_scanpos : token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.getNextToken();}return t;}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(" [ARRAY]\n");sb.append(" range=").append(getRange()).append("\n");sb.append(" options=").append(HexDump.shortToHex(_options)).append("\n");sb.append(" notUsed=").append(HexDump.intToHex(_field3notUsed)).append("\n");sb.append(" formula:").append("\n");Ptg[] ptgs = _formula.getTokens();for (int i = 0; i < ptgs.length; i++) {Ptg ptg = ptgs[i];sb.append(ptg).append(ptg.getRVAType()).append("\n");}sb.append("]");return sb.toString();}
public GetFolderResult getFolder(GetFolderRequest request) {request = beforeClientExecution(request);return executeGetFolder(request);}
@Override public void add(int location, E object) {throw new UnsupportedOperationException();}
public PositiveScoresOnlyCollector(Collector in) {super(in);}
public CreateRepoBuildRuleRequest() {super("cr", "2016-06-07", "CreateRepoBuildRule", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");setMethod(MethodType.PUT);}
public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}
public DrawingManager2( EscherDggRecord dgg ) {this.dgg = dgg;}
public void reset() {if (!first())reset(raw);}
public final CharsetDecoder reset() {status = INIT;implReset();return this;}
public BufferedReader(Reader in, int size) {super(in);if (size <= 0) {throw new IllegalArgumentException("size <= 0");}this.in = in;buf = new char[size];}
public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeDescribeCodeRepository(request);}
public DBSubnetGroup createDBSubnetGroup(CreateDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBSubnetGroup(request);}
public RenameBranchCommand setOldName(String oldName) {checkCallable();this.oldName = oldName;return this;}
public DeleteBranchCommand setForce(boolean force) {checkCallable();this.force = force;return this;}
public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) {request = beforeClientExecution(request);return executeStopCompilationJob(request);}
public synchronized final void incrementSecondaryProgressBy(int diff) {setSecondaryProgress(mSecondaryProgress + diff);}
public int[] clear() {return bytesStart = null;}
public String getRawPath() {return path;}
public GetUserSourceAccountRequest() {super("cr", "2016-06-07", "GetUserSourceAccount", "cr");setUriPattern("/users/sourceAccount");setMethod(MethodType.GET);}
public CreateExportJobResult createExportJob(CreateExportJobRequest request) {request = beforeClientExecution(request);return executeCreateExportJob(request);}
public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeCreateDedicatedIpPool(request);}
public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj instanceof HSSFCellStyle) {final HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {if (other._format != null) {return false;}} else if (!_format.equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}
public ReleaseHostsResult releaseHosts(ReleaseHostsRequest request) {request = beforeClientExecution(request);return executeReleaseHosts(request);}
public boolean equals(Object object) {if (this == object) {return true;}if (object instanceof Set) {Set<?> s = (Set<?>) object;try {return size() == s.size() && containsAll(s);} catch (NullPointerException ignored) {return false;} catch (ClassCastException ignored) {return false;}}return false;}
public void setRefLogMessage(String msg, boolean appendStatus) {customRefLog = true;if (msg == null && !appendStatus) {disableRefLog();} else if (msg == null && appendStatus) {refLogMessage = ""; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}}
public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}
public RecognizeCarRequest() {super("visionai-poc", "2020-04-08", "RecognizeCar");setMethod(MethodType.POST);}
public final ByteOrder order() {return ByteOrder.nativeOrder();}
public int getAheadCount() {return aheadCount;}
public boolean isNewFragment() {return false;}
public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentityConfig(request);}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return label == symbol;}
public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGateway(request);}
public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} elsereturn array;}
public CreateTransactionRequest() {super("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public BatchRefUpdate setRefLogIdent(PersonIdent pi) {refLogIdent = pi;return this;}
public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}
public ParseInfo(ProfilingATNSimulator atnSimulator) {this.atnSimulator = atnSimulator;}
public SimpleQQParser(String qqNames[], String indexField) {this.qqNames = qqNames;this.indexField = indexField;}
public DBCluster promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {request = beforeClientExecution(request);return executePromoteReadReplicaDBCluster(request);}
public DescribeCapacityReservationsResult describeCapacityReservations(DescribeCapacityReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeCapacityReservations(request);}
public String toString() {return "IndexSearcher(" + reader + "; executor=" + executor + "; sliceExecutionControlPlane " + sliceExecutor + ")";}
public final boolean incrementToken() {return false;}
public void serialize(LittleEndianOutput out) {out.writeShort(main + 1);out.writeShort(subFrom);out.writeShort(subTo);}
public void decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) {if (bitsPerValue > 32) {throw new UnsupportedOperationException("Cannot decode " + bitsPerValue + "-bits values into an int[]");}for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}
public boolean isExpectedToken(int symbol) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(getState());IntervalSet following = atn.nextTokens(s);if (following.contains(symbol)) {return true;}if ( !following.contains(Token.EPSILON) ) return false;while ( ctx!=null && ctx.invokingState>=0 && following.contains(Token.EPSILON) ) {ATNState invokingState = atn.states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = atn.nextTokens(rt.followState);if (following.contains(symbol)) {return true;}ctx = (ParserRuleContext)ctx.parent;}if ( following.contains(Token.EPSILON) && symbol == Token.EOF ) {return true;}return false;}
public UpdateStreamResult updateStream(UpdateStreamRequest request) {request = beforeClientExecution(request);return executeUpdateStream(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;} catch (EvaluationException e) {int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}
public String toString() {return getClass().getName() + " [" + _index + " " + _name + "]";}
public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {request = beforeClientExecution(request);return executeListAssignmentsForHIT(request);}
public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}
public Arc<Long> getFirstArc(FST.Arc<Long> arc) {return fst.getFirstArc(arc);}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16) {values[valuesOffset++] = (int) ((block >>> shift) & 65535);}}}
public long skip(long charCount) throws IOException {if (charCount < 0) {throw new IllegalArgumentException("charCount < 0: " + charCount);}synchronized (lock) {checkNotClosed();if (charCount == 0) {return 0;}long inSkipped;int availableFromBuffer = buf.length - pos;if (availableFromBuffer > 0) {long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0) {pos += charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.skip(requiredFromIn);} else {inSkipped = in.skip(charCount);}return inSkipped + availableFromBuffer;}}
public Map<String, Ref> getRefsMap() {return advertisedRefs;}
public UpdateApiKeyResult updateApiKey(UpdateApiKeyRequest request) {request = beforeClientExecution(request);return executeUpdateApiKey(request);}
public ObjectStream openStream() throws MissingObjectException, IOException {PackInputStream packIn;@SuppressWarnings("resource")DfsReader ctx = db.newReader();try {try {packIn = new PackInputStream(pack, objectOffset + headerLength, ctx);ctx = null; } catch (IOException packGone) {ObjectId obj = pack.getReverseIdx(ctx).findObject(objectOffset);return ctx.open(obj, type).openStream();}} finally {if (ctx != null) {ctx.close();}}int bufsz = 8192;InputStream in = new BufferedInputStream(new InflaterInputStream(packIn, packIn.ctx.inflater(), bufsz),bufsz);return new ObjectStream.Filter(type, size, in);}
public ArrayList() {array = EmptyArray.OBJECT;}
public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersion(request);}
public void resize(){resize(Double.MAX_VALUE);}
public RevFlagSet(Collection<RevFlag> s) {this();addAll(s);}
public int size() {return size;}
public final long getLong() {int newPosition = position + SizeOf.LONG;if (newPosition > limit) {throw new BufferUnderflowException();}long result = Memory.peekLong(backingArray, offset + position, order);position = newPosition;return result;}
public StringBuilder insert(int offset, long l) {insert0(offset, Long.toString(l));return this;}
public TurkishLowerCaseFilter(TokenStream in) {super(in);}
public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}
public void addIfNoOverlap( WeightedPhraseInfo wpi ){for( WeightedPhraseInfo existWpi : getPhraseList() ){if( existWpi.isOffsetOverlap( wpi ) ) {existWpi.getTermsInfos().addAll( wpi.getTermsInfos() );return;}}getPhraseList().add( wpi );}
public ThreeWayMerger newMerger(Repository db) {return new InCoreMerger(db);}
public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;}
public Collection<ParseTree> evaluate(ParseTree t) {return Trees.findAllRuleNodes(t, ruleIndex);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CFRULE]\n");buffer.append("    .condition_type   =").append(getConditionType()).append("\n");buffer.append("    OPTION FLAGS=0x").append(Integer.toHexString(getOptions())).append("\n");if (containsFontFormattingBlock()) {buffer.append(_fontFormatting).append("\n");}if (containsBorderFormattingBlock()) {buffer.append(_borderFormatting).append("\n");}if (containsPatternFormattingBlock()) {buffer.append(_patternFormatting).append("\n");}buffer.append("    Formula 1 =").append(Arrays.toString(getFormula1().getTokens())).append("\n");buffer.append("    Formula 2 =").append(Arrays.toString(getFormula2().getTokens())).append("\n");buffer.append("[/CFRULE]\n");return buffer.toString();}
public DescribeServiceUpdatesResult describeServiceUpdates(DescribeServiceUpdatesRequest request) {request = beforeClientExecution(request);return executeDescribeServiceUpdates(request);}
public String getNameName(int index){return getNameAt(index).getNameName();}
public DescribeLocationsResult describeLocations() {return describeLocations(new DescribeLocationsRequest());}
public String toString() {return "<phraseslop value='" + getValueString() + "'>" + "\n"+ getChild().toString() + "\n</phraseslop>";}
public DirCacheEntry getDirCacheEntry() {return currentSubtree == null ? currentEntry : null;}
public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}
public void trimToSize() {int s = size;if (s == array.length) {return;}if (s == 0) {array = EmptyArray.OBJECT;} else {Object[] newArray = new Object[s];System.arraycopy(array, 0, newArray, 0, s);array = newArray;}modCount++;}
public DescribeLocalGatewayVirtualInterfacesResult describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayVirtualInterfaces(request);}
public TokenStream create(TokenStream input) {return new RussianLightStemFilter(input);}
public int [] toArray(final int [] a){int[] rval;if (a.length == _limit){System.arraycopy(_array, 0, a, 0, _limit);rval = a;}else{rval = toArray();}return rval;}
public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken,long roleSessionDurationSeconds) {if (accessKeyId == null) {throw new IllegalArgumentException("Access key ID cannot be null.");}if (accessKeySecret == null) {throw new IllegalArgumentException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;this.sessionStartedTimeInMilliSeconds = System.currentTimeMillis();}
public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {if (shortCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, shortCount);position += shortCount;return this;}
public ActivateEventSourceResult activateEventSource(ActivateEventSourceRequest request) {request = beforeClientExecution(request);return executeActivateEventSource(request);}
public DescribeReceiptRuleSetResult describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDescribeReceiptRuleSet(request);}
public Filter(String name) {setName(name);}
public DoubleBuffer put(double c) {throw new ReadOnlyBufferException();}
public CreateTrafficPolicyInstanceResult createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicyInstance(request);}
public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {super(input);this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.reset(input);}
public void writeLong(long v) {writeInt((int)(v >>  0));writeInt((int)(v >> 32));}
public FileResolver() {exports = new ConcurrentHashMap<>();exportBase = new CopyOnWriteArrayList<>();}
public ValueEval getRef3DEval(Ref3DPxg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}
public DeleteDatasetResult deleteDataset(DeleteDatasetRequest request) {request = beforeClientExecution(request);return executeDeleteDataset(request);}
public StartRelationalDatabaseResult startRelationalDatabase(StartRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeStartRelationalDatabase(request);}
public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings() {return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}
static public double pmt(double r, int nper, double pv, double fv, int type) {return -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r*type) * (Math.pow(1 + r, nper) - 1));}
public DescribeDocumentVersionsResult describeDocumentVersions(DescribeDocumentVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentVersions(request);}
public ListPublishingDestinationsResult listPublishingDestinations(ListPublishingDestinationsRequest request) {request = beforeClientExecution(request);return executeListPublishingDestinations(request);}
public DeleteAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}
public static long[] grow(long[] array) {return grow(array, 1 + array.length);}
public String outputToString(Object output) {if (!(output instanceof List)) {return outputs.outputToString((T) output);} else {List<T> outputList = (List<T>) output;StringBuilder b = new StringBuilder();b.append('[');for(int i=0;i<outputList.size();i++) {if (i > 0) {b.append(", ");}b.append(outputs.outputToString(outputList.get(i)));}b.append(']');return b.toString();}}
public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));}
public StringBuilder replace(int start, int end, String str) {replace0(start, end, str);return this;}
public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}
public static double kthSmallest(double[] v, int k) {double r = Double.NaN;int index = k-1; if (v!=null && v.length > index && index >= 0) {Arrays.sort(v);r = v[index];}return r;}
public void set(int index, long value) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<boolean operation='and'/>";StringBuilder sb = new StringBuilder();sb.append("<boolean operation='and'>");for (QueryNode child : getChildren()) {sb.append("\n");sb.append(child.toString());}sb.append("\n</boolean>");return sb.toString();}
public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i=fromIx; i<toIx; i++) {result += _ptgs[i].getSize();}return result;}
public void setReadonly(boolean readonly) {if ( this.readonly && !readonly ) throw new IllegalStateException("can't alter readonly IntervalSet");this.readonly = readonly;}
public final void clearConsumingCell(FormulaCellCacheEntry cce) {if(!_consumingCells.remove(cce)) {throw new IllegalStateException("Specified formula cell is not consumed by this cell");}}
@Override public List<E> subList(int start, int end) {synchronized (mutex) {return new SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);}}
public FileHeader getFileHeader() {return file;}
public AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancers(request);}
public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}
public String toString() {return "SPL";}
public ReplaceableAttribute(String name, String value, Boolean replace) {setName(name);setValue(value);setReplace(replace);}
public final void add(IndexableField field) {fields.add(field);}
public DeleteStackSetResult deleteStackSet(DeleteStackSetRequest request) {request = beforeClientExecution(request);return executeDeleteStackSet(request);}
public GetRepoBuildRuleListRequest() {super("cr", "2016-06-07", "GetRepoBuildRuleList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");setMethod(MethodType.GET);}
public SparseArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new Object[initialCapacity];mSize = 0;}
public InvokeServiceRequest() {super("industry-brain", "2018-07-12", "InvokeService");setMethod(MethodType.POST);}
public ListAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean hasPrevious() {return link != list.voidLink;}
public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}
public CreateLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}
public String getUserInfo() {return decode(userInfo);}
public TagAttendeeResult tagAttendee(TagAttendeeRequest request) {request = beforeClientExecution(request);return executeTagAttendee(request);}
public String getRefName() {return name;}
public SpanNearQuery build() {return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered);}
public boolean isSubTotal(int rowIndex, int columnIndex) {return false;}
public DescribeDBProxiesResult describeDBProxies(DescribeDBProxiesRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxies(request);}
public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorProxy(request);}
public WindowCacheConfig fromConfig(Config rc) {setPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION,CONFIG_KEY_PACKED_GIT_USE_STRONGREFS,isPackedGitUseStrongRefs()));setPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles()));setPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit()));setPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize()));setPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));setDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit()));long maxMem = Runtime.getRuntime().maxMemory();long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThreshold());sft = Math.min(sft, maxMem / 4); sft = Math.min(sft, Integer.MAX_VALUE); setStreamFileThreshold((int) sft);return this;}
public static Date getJavaDate(double date) {return getJavaDate(date, false, null, false);}
public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {request = beforeClientExecution(request);return executeStartPersonTracking(request);}
@Override public int size() {return totalSize;}
public GetRouteResult getRoute(GetRouteRequest request) {request = beforeClientExecution(request);return executeGetRoute(request);}
public DeleteClusterResult deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[MMS]\n");buffer.append("    .addMenu        = ").append(Integer.toHexString(getAddMenuCount())).append("\n");buffer.append("    .delMenu        = ").append(Integer.toHexString(getDelMenuCount())).append("\n");buffer.append("[/MMS]\n");return buffer.toString();}
public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}
public int following(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException("offset out of bounds");} else if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());return DONE;} else if (pos >= sentenceStarts[sentenceStarts.length - 1]) {text.setIndex(text.getEndIndex());currentSentence = sentenceStarts.length - 1;return DONE;} else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2);text.setIndex(sentenceStarts[++currentSentence]);return current();}}
public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) {request = beforeClientExecution(request);return executeUpdateParameterGroup(request);}
public SeriesChartGroupIndexRecord clone() {return copy();}
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new IllegalArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]");}if (distErrPct == 0 || shape instanceof Point) {return 0;}Rectangle bbox = shape.getBoundingBox();Point ctr = bbox.getCenter();double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);return diagonalDist * distErrPct;}
public int codePointAt(int index) {if (index < 0 || index >= count) {throw indexAndLength(index);}return Character.codePointAt(value, index, count);}
public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}
public ListVaultsRequest(String accountId) {setAccountId(accountId);}
public SquashMessageFormatter() {dateFormatter = new GitDateFormatter(Format.DEFAULT);}
public GetVideoCoverRequest() {super("CloudPhoto", "2017-07-11", "GetVideoCover", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public int lastIndexOf(Object object) {int pos = size;Link<E> link = voidLink.previous;if (object != null) {while (link != voidLink) {pos--;if (object.equals(link.data)) {return pos;}link = link.previous;}} else {while (link != voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}}return -1;}
public DescribeSpotFleetRequestsResult describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetRequests(request);}
public IndexFacesResult indexFaces(IndexFacesRequest request) {request = beforeClientExecution(request);return executeIndexFaces(request);}
public RuleBasedBreakIterator getBreakIterator(int script) {switch(script) {case UScript.JAPANESE: return (RuleBasedBreakIterator)cjkBreakIterator.clone();case UScript.MYANMAR:if (myanmarAsWords) {return (RuleBasedBreakIterator)defaultBreakIterator.clone();} else {return (RuleBasedBreakIterator)myanmarSyllableIterator.clone();}default: return (RuleBasedBreakIterator)defaultBreakIterator.clone();}}
public String toString(){StringBuilder b = new StringBuilder();b.append("[DCONREF]\n");b.append("    .ref\n");b.append("        .firstrow   = ").append(firstRow).append("\n");b.append("        .lastrow    = ").append(lastRow).append("\n");b.append("        .firstcol   = ").append(firstCol).append("\n");b.append("        .lastcol    = ").append(lastCol).append("\n");b.append("    .cch            = ").append(charCount).append("\n");b.append("    .stFile\n");b.append("        .h          = ").append(charType).append("\n");b.append("        .rgb        = ").append(getReadablePath()).append("\n");b.append("[/DCONREF]\n");return b.toString();}
public int getPackedGitOpenFiles() {return packedGitOpenFiles;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FEATURE HEADER]\n");buffer.append("[/FEATURE HEADER]\n");return buffer.toString();}
public static byte[] getToUnicodeLE(String string) {return string.getBytes(UTF16LE);}
public final List<String> getFooterLines(String keyName) {return getFooterLines(new FooterKey(keyName));}
public void refresh() {super.refresh();clearReferences();}
public float get(int index) {checkIndex(index);return byteBuffer.getFloat(index * SizeOf.FLOAT);}
public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteDetector(request);}
public int[] grow() {assert bytesStart != null;return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);}
public ListExclusionsResult listExclusions(ListExclusionsRequest request) {request = beforeClientExecution(request);return executeListExclusions(request);}
public static SpatialStrategy getSpatialStrategy(int roundNumber) {SpatialStrategy result = spatialStrategyCache.get(roundNumber);if (result == null) {throw new IllegalStateException("Strategy should have been init'ed by SpatialDocMaker by now");}return result;}
public DBCluster restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {request = beforeClientExecution(request);return executeRestoreDBClusterToPointInTime(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_categoryDataType);out.writeShort(field_2_valuesDataType);out.writeShort(field_3_numCategories);out.writeShort(field_4_numValues);out.writeShort(field_5_bubbleSeriesType);out.writeShort(field_6_numBubbleValues);}
public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) {request = beforeClientExecution(request);return executePostAgentProfile(request);}
public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {if ( getTokenStream()!=null ) {TokenSource tokenSource = getTokenStream().getTokenSource();if ( tokenSource instanceof Lexer ) {Lexer lexer = (Lexer)tokenSource;return compileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedOperationException("Parser can't discover a lexer to use");}
public BacktrackDBClusterResult backtrackDBCluster(BacktrackDBClusterRequest request) {request = beforeClientExecution(request);return executeBacktrackDBCluster(request);}
public String getName() {return strategyName;}
public void copyTo(byte[] b, int o) {formatHexByte(b, o + 0, w1);formatHexByte(b, o + 8, w2);formatHexByte(b, o + 16, w3);formatHexByte(b, o + 24, w4);formatHexByte(b, o + 32, w5);}
public static final IntList lineMap(byte[] buf, int ptr, int end) {IntList map = new IntList((end - ptr) / 36);map.fillTo(1, Integer.MIN_VALUE);for (; ptr < end; ptr = nextLF(buf, ptr)) {map.add(ptr);}map.add(end);return map;}
public Set<ObjectId> getAdditionalHaves() {return Collections.emptySet();}
public synchronized long ramBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED + fields.size() * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for(SimpleTextTerms simpleTextTerms : termsCache.values()) {sizeInBytes += (simpleTextTerms!=null) ? simpleTextTerms.ramBytesUsed() : 0;}return sizeInBytes;}
public String toXml(String tab) {StringBuilder builder = new StringBuilder();builder.append(tab).append("<").append(getRecordName()).append(">\n");for (EscherRecord escherRecord : getEscherRecords()) {builder.append(escherRecord.toXml(tab + "\t"));}builder.append(tab).append("</").append(getRecordName()).append(">\n");return builder.toString();}
public TokenStream create(TokenStream input) {return new GalicianMinimalStemFilter(input);}
public String toString() {StringBuilder r = new StringBuilder();r.append("Commit");r.append("={\n");r.append("tree ");r.append(treeId != null ? treeId.name() : "NOT_SET");r.append("\n");for (ObjectId p : parentIds) {r.append("parent ");r.append(p.name());r.append("\n");}r.append("author ");r.append(author != null ? author.toString() : "NOT_SET");r.append("\n");r.append("committer ");r.append(committer != null ? committer.toString() : "NOT_SET");r.append("\n");r.append("gpgSignature ");r.append(gpgSignature != null ? gpgSignature.toString() : "NOT_SET");r.append("\n");if (encoding != null && !References.isSameObject(encoding, UTF_8)) {r.append("encoding ");r.append(encoding.name());r.append("\n");}r.append("\n");r.append(message != null ? message : "");r.append("}");return r.toString();}
public IndicNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public OptionGroup createOptionGroup(CreateOptionGroupRequest request) {request = beforeClientExecution(request);return executeCreateOptionGroup(request);}
public AssociateMemberAccountResult associateMemberAccount(AssociateMemberAccountRequest request) {request = beforeClientExecution(request);return executeAssociateMemberAccount(request);}
public void run() {doRefreshProgress(mId, mProgress, mFromUser, true);mRefreshProgressRunnable = this;}
public SetTerminationProtectionResult setTerminationProtection(SetTerminationProtectionRequest request) {request = beforeClientExecution(request);return executeSetTerminationProtection(request);}
public String getErrorHeader(RecognitionException e) {int line = e.getOffendingToken().getLine();int charPositionInLine = e.getOffendingToken().getCharPositionInLine();return "line "+line+":"+charPositionInLine;}
public CharBuffer asReadOnlyBuffer() {CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public StopSentimentDetectionJobResult stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopSentimentDetectionJob(request);}
public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {if (newObjectIds != null)return newObjectIds;return new ObjectIdSubclassMap<>();}
public void clear() {hash = hash(new byte[0]);super.clear();}
public void reset() throws IOException {synchronized (lock) {checkNotClosed();if (mark == -1) {throw new IOException("Invalid mark");}pos = mark;}}
public RefErrorPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();}
public SuspendGameServerGroupResult suspendGameServerGroup(SuspendGameServerGroupRequest request) {request = beforeClientExecution(request);return executeSuspendGameServerGroup(request);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}
public GetRepoRequest() {super("cr", "2016-06-07", "GetRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]");setMethod(MethodType.GET);}
public void setDate(Date date) {if (date != null) {setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND));} else {this.date = null;}}
public TokenStream create(TokenStream input) {return new GermanMinimalStemFilter(input);}
public Object[] toArray() {return a.clone();}
public void write(char[] buffer, int offset, int len) {Arrays.checkOffsetAndCount(buffer.length, offset, len);synchronized (lock) {expand(len);System.arraycopy(buffer, offset, this.buf, this.count, len);this.count += len;}}
public static final RevFilter after(Date ts) {return after(ts.getTime());}
public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}
public DeregisterTransitGatewayMulticastGroupMembersResult deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeDeregisterTransitGatewayMulticastGroupMembers(request);}
public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {request = beforeClientExecution(request);return executeBatchDeleteScheduledAction(request);}
public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {request = beforeClientExecution(request);return executeCreateAlgorithm(request);}
public int readUByte() {return readByte() & 0x00FF;}
public void setLength(int sz) {NB.encodeInt32(info, infoOffset + P_SIZE, sz);}
public DescribeScalingProcessTypesResult describeScalingProcessTypes() {return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());}
public ListResourceRecordSetsResult listResourceRecordSets(ListResourceRecordSetsRequest request) {request = beforeClientExecution(request);return executeListResourceRecordSets(request);}
public Token recoverInline(Parser recognizer)throws RecognitionException{InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()) {context.exception = e;}throw new ParseCancellationException(e);}
public SetTagsForResourceResult setTagsForResource(SetTagsForResourceRequest request) {request = beforeClientExecution(request);return executeSetTagsForResource(request);}
public ModifyStrategyRequest() {super("CloudCallCenter", "2017-07-05", "ModifyStrategy", "CloudCallCenter", "innerAPI");}
public DescribeVpcEndpointServicesResult describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServices(request);}
public EnableLoggingResult enableLogging(EnableLoggingRequest request) {request = beforeClientExecution(request);return executeEnableLogging(request);}
public boolean contains(Object o) {return ConcurrentHashMap.this.containsValue(o);}
public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {super(bookName, firstSheetIdentifier);_lastSheetIdentifier = lastSheetIdentifier;}
public DomainMetadataRequest(String domainName) {setDomainName(domainName);}
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}
public FetchPhotosRequest() {super("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public PrintWriter writer() {return writer;}
public NGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = getInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean isDirectoryFileConflict() {return dfConflict != null;}
public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {super(input);this.stemDerivational = stemDerivational;}
public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(fSD);out.writeInt(passwordVerifier);StringUtil.writeUnicodeString(out, title);out.write(securityDescriptor);}
public static double floor(double n, double s) {if (s==0 && n!=0) {return Double.NaN;} else {return (n==0 || s==0) ? 0 : Math.floor(n/s) * s;}}
public ByteArrayDataOutput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}
public static List<Tree> getChildren(Tree t) {List<Tree> kids = new ArrayList<Tree>();for (int i=0; i<t.getChildCount(); i++) {kids.add(t.getChild(i));}return kids;}
public void clear() {Hashtable.this.clear();}
public RefreshAllRecord(boolean refreshAll) {this(0);setRefreshAll(refreshAll);}
public DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request) {request = beforeClientExecution(request);return executeDeleteNamedQuery(request);}
public GraphvizFormatter(ConnectionCosts costs) {this.costs = costs;this.bestPathMap = new HashMap<>();sb.append(formatHeader());sb.append("  init [style=invis]\n");sb.append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n");}
public CheckMultiagentRequest() {super("visionai-poc", "2020-04-08", "CheckMultiagent");setMethod(MethodType.POST);}
public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) {request = beforeClientExecution(request);return executeListUserProfiles(request);}
public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseFromSnapshot(request);}
public StartTaskResult startTask(StartTaskRequest request) {request = beforeClientExecution(request);return executeStartTask(request);}
public Set<String> getIgnoredPaths() {return ignoredPaths;}
public FeatSmartTag(RecordInputStream in) {data = in.readRemainder();}
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.toString());setResourceRecordSet(resourceRecordSet);}
public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}
public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}
public Iterator<E> iterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}
public void visitContainedRecords(RecordVisitor rv) {if (_recs.isEmpty()) {return;}rv.visitRecord(_bofRec);for (int i = 0; i < _recs.size(); i++) {RecordBase rb = _recs.get(i);if (rb instanceof RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(EOFRecord.instance);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[FtCbls ]").append("\n");buffer.append("  size     = ").append(getDataSize()).append("\n");buffer.append("  reserved = ").append(HexDump.toHex(reserved)).append("\n");buffer.append("[/FtCbls ]").append("\n");return buffer.toString();}
public static BATBlock createEmptyBATBlock(final POIFSBigBlockSize bigBlockSize, boolean isXBAT) {BATBlock block = new BATBlock(bigBlockSize);if(isXBAT) {final int _entries_per_xbat_block = bigBlockSize.getXBATEntriesPerBlock();block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN;}return block;}
public TagResourceResult tagResource(TagResourceRequest request) {request = beforeClientExecution(request);return executeTagResource(request);}
public DeleteMailboxPermissionsResult deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executeDeleteMailboxPermissions(request);}
public ListDatasetGroupsResult listDatasetGroups(ListDatasetGroupsRequest request) {request = beforeClientExecution(request);return executeListDatasetGroups(request);}
public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {request = beforeClientExecution(request);return executeResumeProcesses(request);}
public GetPersonTrackingResult getPersonTracking(GetPersonTrackingRequest request) {request = beforeClientExecution(request);return executeGetPersonTracking(request);}
public String toFormulaString(String[] operands) {if(space.isSet(_options)) {return operands[ 0 ];} else if (optiIf.isSet(_options)) {return toFormulaString() + "(" + operands[0] + ")";} else if (optiSkip.isSet(_options)) {return toFormulaString() + operands[0];   } else {return toFormulaString() + "(" + operands[0] + ")";}}
public T merge(T first, T second) {throw new UnsupportedOperationException();}
public String toString() {return this.message.getKey() + ": " + getLocalizedMessage();}
public XPath(Parser parser, String path) {this.parser = parser;this.path = path;elements = split(path);}
public CreateAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}
public PushConnection openPush() throws TransportException {return new TcpPushConnection();}
public static void strcpy(char[] dst, int di, char[] src, int si) {while (src[si] != 0) {dst[di++] = src[si++];}dst[di] = 0;}
@Override public K getKey() {return mapEntry.getKey();}
public static int numNonnull(Object[] data) {int n = 0;if ( data == null ) return n;for (Object o : data) {if ( o!=null ) n++;}return n;}
public void add(int location, E object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(object, previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;} else {throw new IndexOutOfBoundsException();}}
public DescribeDomainResult describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}
public void flush() throws IOException {super.flush();}
public PersianCharFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean incrementToken() {if (used) {return false;}clearAttributes();termAttribute.append(value);offsetAttribute.setOffset(0, length);used = true;return true;}
public static FloatBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}
public final Edit after(Edit cut) {return new Edit(cut.endA, endA, cut.endB, endB);}
public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}
public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorTerminationCredentials(request);}
public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}
public void setNoChildReport() {letChildReport  = false;for (final PerfTask task : tasks) {if (task instanceof TaskSequence) {((TaskSequence)task).setNoChildReport();}}}
public E get(int location) {try {return a[location];} catch (ArrayIndexOutOfBoundsException e) {throw java.util.ArrayList.throwIndexOutOfBoundsException(location, a.length);}}
public DescribeDataSetResult describeDataSet(DescribeDataSetRequest request) {request = beforeClientExecution(request);return executeDescribeDataSet(request);}
public SkipWorkTreeFilter(int treeIdx) {this.treeIdx = treeIdx;}
public DescribeNetworkInterfacesResult describeNetworkInterfaces() {return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());}
public final boolean contains(int row, int col) {return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;}
public String toString() {return new String(this.chars);}
public PatchType getPatchType() {return patchType;}
public Iterator<K> iterator() {return new KeyIterator();}
public CreateScriptResult createScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}
public BytesRef next() {termUpto++;if (termUpto >= info.terms.size()) {return null;} else {info.terms.get(info.sortedTerms[termUpto], br);return br;}}
public String outputToString(CharsRef output) {return output.toString();}
public AssociateWebsiteAuthorizationProviderResult associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {request = beforeClientExecution(request);return executeAssociateWebsiteAuthorizationProvider(request);}
public void unpop(RevCommit c) {Block b = head;if (b == null) {b = free.newBlock();b.resetToMiddle();b.add(c);head = b;tail = b;return;} else if (b.canUnpop()) {b.unpop(c);return;}b = free.newBlock();b.resetToEnd();b.unpop(c);b.next = head;head = b;}
public EdgeNGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);maxGramSize = getInt(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ModifyDBParameterGroupRequest(String dBParameterGroupName, java.util.List<Parameter> parameters) {setDBParameterGroupName(dBParameterGroupName);setParameters(parameters);}
public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneLimit(request);}
public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}
public RevFilter clone() {return new PatternSearch(pattern());}
public String toString() {return "spans(" + term.toString() + ")@" +(doc == -1 ? "START" : (doc == NO_MORE_DOCS) ? "ENDDOC": doc + " - " + (position == NO_MORE_POSITIONS ? "ENDPOS" : position));}
public boolean canAppendMatch() {for (Head head : heads) {if (head != LastHead.INSTANCE) {return true;}}return false;}
public synchronized int lastIndexOf(String subString, int start) {return super.lastIndexOf(subString, start);}
public DeleteNetworkAclEntryResult deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkAclEntry(request);}
public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {request = beforeClientExecution(request);return executeAssociateMemberToGroup(request);}
public static final int committer(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);return match(b, ptr, committer);}
public int getLineNumber() { return row; }
public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}
public GetPushTemplateResult getPushTemplate(GetPushTemplateRequest request) {request = beforeClientExecution(request);return executeGetPushTemplate(request);}
public DescribeVaultResult describeVault(DescribeVaultRequest request) {request = beforeClientExecution(request);return executeDescribeVault(request);}
public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections() {return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());}
public ByteBuffer putLong(int index, long value) {throw new ReadOnlyBufferException();}
public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) {request = beforeClientExecution(request);return executeRegisterDevice(request);}
public static Format byId(int id) {for (Format format : Format.values()) {if (format.getId() == id) {return format;}}throw new IllegalArgumentException("Unknown format id: " + id);}
public DeleteAppResult deleteApp(DeleteAppRequest request) {request = beforeClientExecution(request);return executeDeleteApp(request);}
public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) {request = beforeClientExecution(request);return executeGetBaiduChannel(request);}
public FST.BytesReader getBytesReader() {return fst.getBytesReader();}
public static boolean isValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {return true;}return false;}
public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListAppliedSchemaArns(request);}
public String name() {return this.name;}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length < 1) {return ErrorEval.VALUE_INVALID;}boolean isA1style;String text;try {ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());text = OperandResolver.coerceValueToString(ve);switch (args.length) {case 1:isA1style = true;break;case 2:isA1style = evaluateBooleanArg(args[1], ec);break;default:return ErrorEval.VALUE_INVALID;}} catch (EvaluationException e) {return e.getErrorEval();}return evaluateIndirect(ec, text, isA1style);}
public final int compareTo(int[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, bs[p]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, bs[p + 1]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, bs[p + 2]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, bs[p + 3]);if (cmp != 0)return cmp;return NB.compareUInt32(w5, bs[p + 4]);}
public void removeName(int index){names.remove(index);workbook.removeName(index);}
public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}
public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public static void setEnabled(boolean enabled) {ENABLED = enabled;}
public DeleteLogPatternResult deleteLogPattern(DeleteLogPatternRequest request) {request = beforeClientExecution(request);return executeDeleteLogPattern(request);}
public boolean contains(char[] text, int off, int len) {return map.containsKey(text, off, len);}
public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber);}
public boolean handles(String commandLine) {return command.length() + 1 < commandLine.length()&& commandLine.charAt(command.length()) == ' '&& commandLine.startsWith(command);}
public static void register(MergeStrategy imp) {register(imp.getName(), imp);}
public long ramBytesUsed() {return BASE_RAM_BYTES_USED + ((index!=null)? index.ramBytesUsed() : 0);}
public HostedZone(String id, String name, String callerReference) {setId(id);setName(name);setCallerReference(callerReference);}
public GetFindingsResult getFindings(GetFindingsRequest request) {request = beforeClientExecution(request);return executeGetFindings(request);}
public DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeTopicsDetectionJob(request);}
public boolean processMatch(ValueEval eval) {if(eval instanceof NumericValueEval) {if(minimumValue == null) { minimumValue = eval;} else { double currentValue = ((NumericValueEval)eval).getNumberValue();double oldValue = ((NumericValueEval)minimumValue).getNumberValue();if(currentValue < oldValue) {minimumValue = eval;}}}return true;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_len_ref_subexpression);}
public static void main(String[] args) throws IOException {boolean printTree = false;String path = null;for(int i=0;i<args.length;i++) {if (args[i].equals("-printTree")) {printTree = true;} else {path = args[i];}}if (args.length != (printTree ? 2 : 1)) {System.out.println("\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\n");System.exit(1);}Directory dir = FSDirectory.open(Paths.get(path));TaxonomyReader r = new DirectoryTaxonomyReader(dir);printStats(r, System.out, printTree);r.close();dir.close();}
public void setByteValue(byte value) {if (!(fieldsData instanceof Byte)) {throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Byte");}fieldsData = Byte.valueOf(value);}
public static int initialize() {return initialize(DEFAULT_SEED);}
public CachingDoubleValueSource(DoubleValuesSource source) {this.source = source;cache = new HashMap<>();}
public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}
public static String join(Collection<String> parts, String separator) {return StringUtils.join(parts, separator, separator);}
public ListTaskDefinitionFamiliesResult listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {request = beforeClientExecution(request);return executeListTaskDefinitionFamilies(request);}
public ListComponentsResult listComponents(ListComponentsRequest request) {request = beforeClientExecution(request);return executeListComponents(request);}
public ActivatePhotosRequest() {super("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public CreateMatchmakingRuleSetResult createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingRuleSet(request);}
public ListAvailableManagementCidrRangesResult listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {request = beforeClientExecution(request);return executeListAvailableManagementCidrRanges(request);}
public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {if (baseObjectIds != null)return baseObjectIds;return new ObjectIdSubclassMap<>();}
public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}
public CreateDomainEntryResult createDomainEntry(CreateDomainEntryRequest request) {request = beforeClientExecution(request);return executeCreateDomainEntry(request);}
public static int getEncodedSize(Object[] values) {int result = values.length * 1;for (Object value : values) {result += getEncodedSize(value);}return result;}
public OpenNLPTokenizerFactory(Map<String,String> args) {super(args);sentenceModelFile = require(args, SENTENCE_MODEL);tokenizerModelFile = require(args, TOKENIZER_MODEL);if ( ! args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public final int getInt(int index) {checkIndex(index, SizeOf.INT);return Memory.peekInt(backingArray, offset + index, order);}
public List<Head> getNextHeads(char c) {if (matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}
public ByteBuffer putShort(short value) {throw new ReadOnlyBufferException();}
public void writeUnshared(Object object) throws IOException {writeObject(object, true);}
public int offsetByCodePoints(int index, int codePointOffset) {return Character.offsetByCodePoints(value, 0, count, index,codePointOffset);}
public static int getUniqueAlt(Collection<BitSet> altsets) {BitSet all = getAlts(altsets);if ( all.cardinality()==1 ) return all.nextSetBit(0);return ATN.INVALID_ALT_NUMBER;}
public Date getWhen() {return new Date(when);}
public RuleTagToken(String ruleName, int bypassTokenType, String label) {if (ruleName == null || ruleName.isEmpty()) {throw new IllegalArgumentException("ruleName cannot be null or empty.");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}
public DisableOrganizationAdminAccountResult disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {request = beforeClientExecution(request);return executeDisableOrganizationAdminAccount(request);}
public CreateRoomResult createRoom(CreateRoomRequest request) {request = beforeClientExecution(request);return executeCreateRoom(request);}
public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteReplicationGroup(request);}
public final CharBuffer decode(ByteBuffer buffer) {try {return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).decode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}
public Distribution(String id, String status, String domainName) {setId(id);setStatus(status);setDomainName(domainName);}
public final double[] array() {return protectedArray();}
public DateWindow1904Record(RecordInputStream in) {field_1_window = in.readShort();}
public DeleteDBSnapshotRequest(String dBSnapshotIdentifier) {setDBSnapshotIdentifier(dBSnapshotIdentifier);}
public final ParserExtension getExtension(String key) {return this.extensions.get(key);}
public void inform(ResourceLoader loader) {try {if (chunkerModelFile != null) {OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);}} catch (IOException e) {throw new IllegalArgumentException(e);}}
public CompleteVaultLockResult completeVaultLock(CompleteVaultLockRequest request) {request = beforeClientExecution(request);return executeCompleteVaultLock(request);}
public final int[] getCharIntervals() {return points.clone();}
public long ramBytesUsed() {return values.ramBytesUsed()+ super.ramBytesUsed()+ Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}
public RegisterInstancesWithLoadBalancerResult registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {request = beforeClientExecution(request);return executeRegisterInstancesWithLoadBalancer(request);}
public DescribeClusterUserKubeconfigRequest() {super("CS", "2015-12-15", "DescribeClusterUserKubeconfig", "csk");setUriPattern("/k8s/[ClusterId]/user_config");setMethod(MethodType.GET);}
public PrecisionRecord(RecordInputStream in) {field_1_precision = in.readShort();}
public void serialize(LittleEndianOutput out) {out.writeShort(getLeftRowGutter());out.writeShort(getTopColGutter());out.writeShort(getRowLevelMax());out.writeShort(getColLevelMax());}
public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteVirtualInterface(request);}
public Entry getEntry(String name) throws FileNotFoundException {if (excludes.contains(name)) {throw new FileNotFoundException(name);}Entry entry = directory.getEntry(name);return wrapEntry(entry);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[BACKUP]\n");buffer.append("    .backup          = ").append(Integer.toHexString(getBackup())).append("\n");buffer.append("[/BACKUP]\n");return buffer.toString();}
public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorOrigination(request);}
public Appendable append(char c) {write(c);return this;}
public static long generationFromSegmentsFileName(String fileName) {if (fileName.equals(OLD_SEGMENTS_GEN)) {throw new IllegalArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0");} else if (fileName.equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {return Long.parseLong(fileName.substring(1+IndexFileNames.SEGMENTS.length()),Character.MAX_RADIX);} else {throw new IllegalArgumentException("fileName \"" + fileName + "\" is not a segments file");}}
public static TagOpt fromOption(String o) {if (o == null || o.length() == 0)return AUTO_FOLLOW;for (TagOpt tagopt : values()) {if (tagopt.option().equals(o))return tagopt;}throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o));}
public StartContentModerationResult startContentModeration(StartContentModerationRequest request) {request = beforeClientExecution(request);return executeStartContentModeration(request);}
public static String quoteReplacement(String s) {StringBuilder result = new StringBuilder(s.length());for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\' || c == '$') {result.append('\\');}result.append(c);}return result.toString();}
public final void set(V newValue) {value = newValue;}
public QueryParserTokenManager(CharStream stream){input_stream = stream;}
public long valueFor(double elapsed) {double val;if (modBy == 0)val = elapsed / factor;elseval = elapsed / factor % modBy;if (type == '0')return Math.round(val);elsereturn (long) val;}
public LongBuffer get(long[] dst, int dstOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);}this.position += longCount;return this;}
public void removeErrorListeners() {_listeners.clear();}
public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource);this.channel = channel;}
public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request) {request = beforeClientExecution(request);return executeListObjectPolicies(request);}
public ObjectToPack(AnyObjectId src, int type) {super(src);flags = type << TYPE_SHIFT;}
public int stem(char s[], int len) {int numVowels = numVowels(s, len);for (int i = 0; i < affixes.length; i++) {Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}
public void recover(Parser recognizer, RecognitionException e) {if ( lastErrorIndex==recognizer.getInputStream().index() &&lastErrorStates != null &&lastErrorStates.contains(recognizer.getState()) ) {recognizer.consume();}lastErrorIndex = recognizer.getInputStream().index();if ( lastErrorStates==null ) lastErrorStates = new IntervalSet();lastErrorStates.add(recognizer.getState());IntervalSet followSet = getErrorRecoverySet(recognizer);consumeUntil(recognizer, followSet);}
public String toFormulaString() {String value = field_3_string;int len = value.length();StringBuilder sb = new StringBuilder(len + 4);sb.append(FORMULA_DELIMITER);for (int i = 0; i < len; i++) {char c = value.charAt(i);if (c == FORMULA_DELIMITER) {sb.append(FORMULA_DELIMITER);}sb.append(c);}sb.append(FORMULA_DELIMITER);return sb.toString();}
public UnlinkFaceRequest() {super("LinkFace", "2018-07-20", "UnlinkFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ConfigurationOptionSetting(String namespace, String optionName, String value) {setNamespace(namespace);setOptionName(optionName);setValue(value);}
public CharSequence getFully(CharSequence key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {CharSequence r = tries.get(i).getFully(key);if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {return result;}result.append(r);}return result;}
public DescribeMountTargetSecurityGroupsResult describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeMountTargetSecurityGroups(request);}
public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {request = beforeClientExecution(request);return executeGetApiMapping(request);}
public HttpRequest(String strUrl) {super(strUrl);}
public MemFuncPtg(int subExprLen) {field_1_len_ref_subexpression = subExprLen;}
public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {TermStatsQueue tiq = null;if (field != null) {Terms terms = MultiTerms.getTerms(reader, field);if (terms == null) {throw new RuntimeException("field " + field + " not found");}TermsEnum termsEnum = terms.iterator();tiq = new TermStatsQueue(numTerms, comparator);tiq.fill(field, termsEnum);} else {Collection<String> fields = FieldInfos.getIndexedFields(reader);if (fields.size() == 0) {throw new RuntimeException("no fields found for this index");}tiq = new TermStatsQueue(numTerms, comparator);for (String fieldName : fields) {Terms terms = MultiTerms.getTerms(reader, fieldName);if (terms != null) {tiq.fill(fieldName, terms.iterator());}}}TermStats[] result = new TermStats[tiq.size()];int count = tiq.size() - 1;while (tiq.size() != 0) {result[count] = tiq.pop();count--;}return result;}
public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsVoipChannel(request);}
public ListFacesResult listFaces(ListFacesRequest request) {request = beforeClientExecution(request);return executeListFaces(request);}
public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;}
public char get(int index) {checkIndex(index);return sequence.charAt(index);}
public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationProfile(request);}
public DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHooks(request);}
public DescribeHostReservationsResult describeHostReservations(DescribeHostReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeHostReservations(request);}
public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {if ( outerContext==null ) outerContext = RuleContext.EMPTY;if ( outerContext.parent==null || outerContext==RuleContext.EMPTY ) {return PredictionContext.EMPTY;}PredictionContext parent = EMPTY;parent = PredictionContext.fromRuleContext(atn, outerContext.parent);ATNState state = atn.states.get(outerContext.invokingState);RuleTransition transition = (RuleTransition)state.transition(0);return SingletonPredictionContext.create(parent, transition.followState.stateNumber);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXVDEX]\n");buffer.append("    .grbit1 =").append(HexDump.intToHex(_grbit1)).append("\n");buffer.append("    .grbit2 =").append(HexDump.byteToHex(_grbit2)).append("\n");buffer.append("    .citmShow =").append(HexDump.byteToHex(_citmShow)).append("\n");buffer.append("    .isxdiSort =").append(HexDump.shortToHex(_isxdiSort)).append("\n");buffer.append("    .isxdiShow =").append(HexDump.shortToHex(_isxdiShow)).append("\n");buffer.append("    .subtotalName =").append(_subtotalName).append("\n");buffer.append("[/SXVDEX]\n");return buffer.toString();}
public String toString() {StringBuilder r = new StringBuilder();r.append("BlameResult: "); r.append(getResultPath());return r.toString();}
public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {request = beforeClientExecution(request);return executeListChangeSets(request);}
public boolean isAllowNonFastForwards() {return allowNonFastForwards;}
public FeatRecord() {futureHeader = new FtrHeader();futureHeader.setRecordType(sid);}
public ShortBuffer put(short c) {throw new ReadOnlyBufferException();}
public void setQuery(CharSequence query) {this.query = query;this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, "");}
public StashApplyCommand stashApply() {return new StashApplyCommand(repo);}
public Set<String> nameSet() {return Collections.unmodifiableSet(dictionary.values());}
public static int getEffectivePort(String scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if ("http".equalsIgnoreCase(scheme)) {return 80;} else if ("https".equalsIgnoreCase(scheme)) {return 443;} else {return -1;}}
public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeListAssessmentTemplates(request);}
public Cluster restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreFromClusterSnapshot(request);}
public void addShape(HSSFShape shape) {shape.setPatriarch(this.getPatriarch());shape.setParent(this);shapes.add(shape);}
public boolean equals(Object o) {if (this == o) return true;if (o == null || getClass() != o.getClass()) return false;FacetEntry that = (FacetEntry) o;if (count != that.count) return false;if (!value.equals(that.value)) return false;return true;}
public static final int prev(byte[] b, int ptr, char chrA) {if (ptr == b.length)--ptr;while (ptr >= 0) {if (b[ptr--] == chrA)return ptr;}return ptr;}
public final boolean isDeltaRepresentation() {return deltaBase != null;}
public Token emitEOF() {int cpos = getCharPositionInLine();int line = getLine();Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1,line, cpos);emit(eof);return eof;}
public UpdateUserRequest(String userName) {setUserName(userName);}
public RevFilter negate() {return NotRevFilter.create(this);}
public void setTagger(PersonIdent taggerIdent) {tagger = taggerIdent;}
public static BufferSize automatic() {Runtime rt = Runtime.getRuntime();final long max = rt.maxMemory(); final long total = rt.totalMemory(); final long free = rt.freeMemory(); final long totalAvailableBytes = max - total + free;long sortBufferByteSize = free/2;final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes/2; } else {sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));}
public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1;while (start <= ptr && isWhitespace(raw[ptr]))ptr--;return ptr + 1;}
public TopMarginRecord( RecordInputStream in ) {field_1_margin = in.readDouble();}
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {setInfoType(infoType.toString());}
public CreatePlayerSessionsResult createPlayerSessions(CreatePlayerSessionsRequest request) {request = beforeClientExecution(request);return executeCreatePlayerSessions(request);}
public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) {request = beforeClientExecution(request);return executeCreateProxySession(request);}
public int getObjectType() {return type;}
public String getScheme() {return scheme;}
public void characters(char[] ch, int start, int length) {contents.append(ch, start, length);}
public FetchAlbumTagPhotosRequest() {super("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {request = beforeClientExecution(request);return executeDeleteMembers(request);}
public GetContactReachabilityStatusResult getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {request = beforeClientExecution(request);return executeGetContactReachabilityStatus(request);}
@Override public boolean remove(Object o) {return Impl.this.remove(o) != null;}
public E last() {return backingMap.lastKey();}
public CreateStreamingDistributionResult createStreamingDistribution(CreateStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeCreateStreamingDistribution(request);}
public boolean isAbsolute() {return absolute;}
public DisableAddOnResult disableAddOn(DisableAddOnRequest request) {request = beforeClientExecution(request);return executeDisableAddOn(request);}
public DescribeAliasResult describeAlias(DescribeAliasRequest request) {request = beforeClientExecution(request);return executeDescribeAlias(request);}
public void next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.getEntrySpan();elseptr++;if (eof())break;parseEntry();}}
public RevFilter clone() {return new Binary(a.clone(), b.clone());}
public Reader create(Reader input) {return new PersianCharFilter(input);}
public String option() {return option;}
public String toString() {final StringBuilder sb = new StringBuilder("[");for (Object item : this) {if (sb.length()>1) sb.append(", ");if (item instanceof char[]) {sb.append((char[]) item);} else {sb.append(item);}}return sb.append(']').toString();}
public DescribeSignalingChannelResult describeSignalingChannel(DescribeSignalingChannelRequest request) {request = beforeClientExecution(request);return executeDescribeSignalingChannel(request);}
public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {request = beforeClientExecution(request);return executeAttachStaticIp(request);}
public String toString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.append(getClass().getName());sb.append(" [").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append("]");return sb.toString();}
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {super(BLOOM_CODEC_NAME);this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}
public ListTemplatesResult listTemplates(ListTemplatesRequest request) {request = beforeClientExecution(request);return executeListTemplates(request);}
public TimerThread(long resolution, Counter counter) {super(THREAD_NAME);this.resolution = resolution;this.counter = counter;this.setDaemon(true);}
public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}
public ListDirectoriesResult listDirectories(ListDirectoriesRequest request) {request = beforeClientExecution(request);return executeListDirectories(request);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}
public GroupingSearch disableCaching() {this.maxCacheRAMMB = null;this.maxDocsToCache = null;return this;}
public static int idealByteArraySize(int need) {for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12)return (1 << i) - 12;return need;}
public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}
public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {request = beforeClientExecution(request);return executeModifyVolume(request);}
public Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}
public ByteBuffer read(int length, long position) throws IOException {if(position >= size()) {throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");}ByteBuffer dst;if (writable) {dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);buffersToClean.add(dst);} else {channel.position(position);dst = ByteBuffer.allocate(length);int worked = IOUtils.readFully(channel, dst);if(worked == -1) {throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");}}dst.position(0);return dst;}
public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskCompleted(request);}
public synchronized final void incrementProgressBy(int diff) {setProgress(mProgress + diff);}
public MetadataDiff compareMetadata(DirCacheEntry entry) {if (entry.isAssumeValid())return MetadataDiff.EQUAL;if (entry.isUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;if (isModeDifferent(entry.getRawMode()))return MetadataDiff.DIFFER_BY_METADATA;int type = mode & FileMode.TYPE_MASK;if (type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;if (!entry.isSmudged() && entry.getLength() != (int) getEntryLength())return MetadataDiff.DIFFER_BY_METADATA;Instant cacheLastModified = entry.getLastModifiedInstant();Instant fileLastModified = getEntryLastModifiedInstant();if (timestampComparator.compare(cacheLastModified, fileLastModified,getOptions().getCheckStat() == CheckStat.MINIMAL) != 0) {return MetadataDiff.DIFFER_BY_TIMESTAMP;}if (entry.isSmudged()) {return MetadataDiff.SMUDGED;}return MetadataDiff.EQUAL;}
public static NumberRecord convertToNumberRecord(RKRecord rk) {NumberRecord num = new NumberRecord();num.setColumn(rk.getColumn());num.setRow(rk.getRow());num.setXFIndex(rk.getXFIndex());num.setValue(rk.getRKNumber());return num;}
public CharBuffer put(char[] src, int srcOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);}this.position += charCount;return this;}
public int getCells() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0 || e.ref >= 0) {size++;}}return size;}
public BeiderMorseFilterFactory(Map<String,String> args) {super(args);NameType nameType = NameType.valueOf(get(args, "nameType", NameType.GENERIC.toString()));RuleType ruleType = RuleType.valueOf(get(args, "ruleType", RuleType.APPROX.toString()));boolean concat = getBoolean(args, "concat", true);engine = new PhoneticEngine(nameType, ruleType, concat);Set<String> langs = getSet(args, "languageSet");languageSet = (null == langs || (1 == langs.size() && langs.contains("auto"))) ? null : LanguageSet.from(langs);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static double varp(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = devsq(v) /v.length;}return r;}
public PersianNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) {HashSet<WeightedTerm> terms = new HashSet<>();Predicate<String> fieldSelector = fieldName == null ? f -> true : fieldName::equals;query.visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));return terms.toArray(new WeightedTerm[0]);}
public DeleteDocumentationPartResult deleteDocumentationPart(DeleteDocumentationPartRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationPart(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[CHART]\n");sb.append("    .x     = ").append(getX()).append('\n');sb.append("    .y     = ").append(getY()).append('\n');sb.append("    .width = ").append(getWidth()).append('\n');sb.append("    .height= ").append(getHeight()).append('\n');sb.append("[/CHART]\n");return sb.toString();}
public final short get(int index) {checkIndex(index);return backingArray[offset + index];}
public String toString(){return image;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);AreaEval result = resolveRange(reA, reB);if (result == null) {return ErrorEval.NULL_INTERSECTION;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}
public void clear() {weightBySpanQuery.clear();}
public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;bi.setText(buffer.substring(start));return bi.next() + start;}
final public SrndQuery PrimaryQuery() throws ParseException {SrndQuery q;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case LPAREN:jj_consume_token(LPAREN);q = FieldsQuery();jj_consume_token(RPAREN);break;case OR:case AND:case W:case N:q = PrefixOperatorQuery();break;case TRUNCQUOTED:case QUOTED:case SUFFIXTERM:case TRUNCTERM:case TERM:q = SimpleTerm();break;default:jj_la1[5] = jj_gen;jj_consume_token(-1);throw new ParseException();}OptionalWeights(q);{if (true) return q;}throw new Error("Missing return statement in function");}
public DeleteApiKeyResult deleteApiKey(DeleteApiKeyRequest request) {request = beforeClientExecution(request);return executeDeleteApiKey(request);}
public InsertTagsRequest() {super("Ots", "2016-06-20", "InsertTags", "ots");setMethod(MethodType.POST);}
public DeleteUserByPrincipalIdResult deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {request = beforeClientExecution(request);return executeDeleteUserByPrincipalId(request);}
public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfaces(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, 8 );LittleEndian.putInt( data, offset + 8, field_1_numShapes );LittleEndian.putInt( data, offset + 12, field_2_lastMSOSPID );listener.afterRecordSerialize( offset + 16, getRecordId(), getRecordSize(), this );return getRecordSize();}
public CreateSecurityConfigurationResult createSecurityConfiguration(CreateSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateSecurityConfiguration(request);}
public DescribeClientVpnConnectionsResult describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnConnections(request);}
public static void fill(double[] array, double value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public boolean hasNext() {return nextId < cells.length;}
public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;freq = 0;return this;}
public final boolean hasAll(RevFlagSet set) {return (flags & set.mask) == set.mask;}
public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}
public Token LT(int k) {lazyInit();if ( k==0 ) return null;if ( k < 0 ) return LB(-k);int i = p + k - 1;sync(i);if ( i >= tokens.size() ) { return tokens.get(tokens.size()-1);}return tokens.get(i);}
public void removeSheet(int sheetIndex) {if (boundsheets.size() > sheetIndex) {records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);boundsheets.remove(sheetIndex);fixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for(int i=0; i<getNumNames(); i++) {NameRecord nr = getNameRecord(i);if(nr.getSheetNumber() == sheetNum1Based) {nr.setSheetNumber(0);} else if(nr.getSheetNumber() > sheetNum1Based) {nr.setSheetNumber(nr.getSheetNumber()-1);}}if (linkTable != null) {linkTable.removeSheet(sheetIndex);}}
public void removeName(String name) {int index = getNameIndex(name);removeName(index);}
public boolean equals(final Object o) {if (!(o instanceof Property)) {return false;}final Property p = (Property) o;final Object pValue = p.getValue();final long pId = p.getID();if (id != pId || (id != 0 && !typesAreEqual(type, p.getType()))) {return false;}if (value == null && pValue == null) {return true;}if (value == null || pValue == null) {return false;}final Class<?> valueClass = value.getClass();final Class<?> pValueClass = pValue.getClass();if (!(valueClass.isAssignableFrom(pValueClass)) &&!(pValueClass.isAssignableFrom(valueClass))) {return false;}if (value instanceof byte[]) {byte[] thisVal = (byte[]) value, otherVal = (byte[]) pValue;int len = unpaddedLength(thisVal);if (len != unpaddedLength(otherVal)) {return false;}for (int i=0; i<len; i++) {if (thisVal[i] != otherVal[i]) {return false;}}return true;}return value.equals(pValue);}
public GetRepoBuildListRequest() {super("cr", "2016-06-07", "GetRepoBuildList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build");setMethod(MethodType.GET);}
public MessageWriter() {buf = new ByteArrayOutputStream();enc = new OutputStreamWriter(getRawStream(), UTF_8);}
public void append(RecordBase r){_recs.add(r);}
public void close() throws IOException {if (read(skipBuffer) != -1 || actualSize != expectedSize) {throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength));}int used = bAvail - inf.getRemaining();if (0 < used) {onObjectData(src, buf, p, used);use(used);}inf.reset();}
public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {if (rec instanceof FormulaRecord) {FormulaRecord formulaRec = (FormulaRecord)rec;StringRecord cachedText;Class<? extends Record> nextClass = rs.peekNextClass();if (nextClass == StringRecord.class) {cachedText = (StringRecord) rs.getNext();} else {cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));} else {insertCell(rec);}}
public Decompressor clone() {return new DeflateDecompressor();}
public UpdateS3ResourcesResult updateS3Resources(UpdateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeUpdateS3Resources(request);}
public GroupQueryNode(QueryNode query) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));}allocate();setLeaf(false);add(query);}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {StringBuilder path = new StringBuilder();path.append("/").append(getFirstPathElement());for (QueryText pathelement : getPathElements(1)) {CharSequence value = escaper.escape(pathelement.value, Locale.getDefault(), Type.STRING);path.append("/\"").append(value).append("\"");}return path.toString();}
public void removeCellComment() {HSSFComment comment = _sheet.findCellComment(_record.getRow(), _record.getColumn());_comment = null;if (null == comment){return;}_sheet.getDrawingPatriarch().removeShape(comment);}
public void reset() {arriving = -1;leaving = -1;}
public ActivateUserResult activateUser(ActivateUserRequest request) {request = beforeClientExecution(request);return executeActivateUser(request);}
public boolean isCharsetDetected() {throw new UnsupportedOperationException();}
public Cluster modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeModifySnapshotCopyRetentionPeriod(request);}
public DeleteClusterSubnetGroupResult deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSubnetGroup(request);}
public static String decode(byte[] buffer) {return decode(buffer, 0, buffer.length);}
public int getDefaultPort() {return -1;}
public StopTaskResult stopTask(StopTaskRequest request) {request = beforeClientExecution(request);return executeStopTask(request);}
public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}
public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}
public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, String value) {boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit ? 0x01 : 0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}
public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupIngress(request);}
public void addFile(String file) {checkFileNames(Collections.singleton(file));setFiles.add(namedForThisSegment(file));}
public void setSize(int width, int height) {mWidth = width;mHeight = height;}
public final void setPrecedenceFilterSuppressed(boolean value) {if (value) {this.reachesIntoOuterContext |= 0x40000000;}else {this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;}}
public IntervalSet LOOK(ATNState s, RuleContext ctx) {return LOOK(s, null, ctx);}
public void serialize(LittleEndianOutput out) {out.writeShort(getOptionFlags());out.writeShort(getRowHeight());}
public Builder(boolean dedup) {this.dedup = dedup;}
public Hashtable(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException("Load factor: " + loadFactor);}}
public Object get(CharSequence key) {final int bucket = normalCompletion.getBucket(key);return bucket == -1 ? null : Long.valueOf(bucket);}
public ListHyperParameterTuningJobsResult listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {request = beforeClientExecution(request);return executeListHyperParameterTuningJobs(request);}
public DeleteTableResult deleteTable(String tableName) {return deleteTable(new DeleteTableRequest().withTableName(tableName));}
public final boolean lessThan(TextFragment fragA, TextFragment fragB){if (fragA.getScore() == fragB.getScore())return fragA.fragNum > fragB.fragNum;elsereturn fragA.getScore() < fragB.getScore();}
public void freeBefore(int pos) {assert pos >= 0;assert pos <= nextPos;final int newCount = nextPos - pos;assert newCount <= count: "newCount=" + newCount + " count=" + count;assert newCount <= buffer.length: "newCount=" + newCount + " buf.length=" + buffer.length;count = newCount;}
public UpdateHITTypeOfHITResult updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {request = beforeClientExecution(request);return executeUpdateHITTypeOfHIT(request);}
public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateRecommenderConfiguration(request);}
public int compareTo(BytesRef other) {return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,other.bytes, other.offset, other.offset + other.length);}
public int stem(char s[], int len) {if (len > 4 && s[len-1] == 's')len--;if (len > 5 &&(endsWith(s, len, "ene") ||  (endsWith(s, len, "ane") &&useNynorsk                 )))return len - 3;if (len > 4 &&(endsWith(s, len, "er") ||   endsWith(s, len, "en") ||   endsWith(s, len, "et") ||   (endsWith(s, len, "ar") &&useNynorsk                 )))return len - 2;if (len > 3)switch(s[len-1]) {case 'a':     case 'e':     return len - 1;}return len;}
public DescribeDBSnapshotsResult describeDBSnapshots(DescribeDBSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSnapshots(request);}
public SortedSetDocValuesFacetField(String dim, String label) {super("dummy", TYPE);FacetField.verifyLabel(label);FacetField.verifyLabel(dim);this.dim = dim;this.label = label;}
public CreateDocumentationPartResult createDocumentationPart(CreateDocumentationPartRequest request) {request = beforeClientExecution(request);return executeCreateDocumentationPart(request);}
public String getValue() {return value;}
public ShortBuffer asReadOnlyBuffer() {return duplicate();}
public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}
public static org.apache.poi.hssf.record.Record createSingleRecord(RecordInputStream in) {I_RecordCreator constructor = _recordCreatorsById.get(Integer.valueOf(in.getSid()));if (constructor == null) {return new UnknownRecord(in);}return constructor.create(in);}
public int getCount() {return mTabs.size();}
public DeleteApplicationReferenceDataSourceResult deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationReferenceDataSource(request);}
public CreateProjectVersionResult createProjectVersion(CreateProjectVersionRequest request) {request = beforeClientExecution(request);return executeCreateProjectVersion(request);}
public IntBuffer slice() {return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);}
public final byte get() {if (position == limit) {throw new BufferUnderflowException();}return this.block.peekByte(offset + position++);}
public LongBuffer put(int index, long c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public StoredField(String name, float value) {super(name, TYPE);fieldsData = value;}
public IntervalSet getExpectedTokensWithinCurrentRule() {ATN atn = getInterpreter().atn;ATNState s = atn.states.get(getState());return atn.nextTokens(s);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FILESHARING]\n");buffer.append("    .readonly       = ").append(getReadOnly() == 1 ? "true" : "false").append("\n");buffer.append("    .password       = ").append(Integer.toHexString(getPassword())).append("\n");buffer.append("    .username       = ").append(getUsername()).append("\n");buffer.append("[/FILESHARING]\n");return buffer.toString();}
public SubmoduleInitCommand(Repository repo) {super(repo);paths = new ArrayList<>();}
public void include(String name, AnyObjectId id) {boolean validRefName = Repository.isValidRefName(name) || Constants.HEAD.equals(name);if (!validRefName)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name));if (include.containsKey(name))throw new IllegalStateException(JGitText.get().duplicateRef + name);include.put(name, id.toObjectId());}
public Cluster enableSnapshotCopy(EnableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeEnableSnapshotCopy(request);}
public ValueFiller getValueFiller() {return new ValueFiller() {private final MutableValueFloat mval = new MutableValueFloat();@Override
public void serialize(LittleEndianOutput out) {out.writeByte(getPane());out.writeShort(getActiveCellRow());out.writeShort(getActiveCellCol());out.writeShort(getActiveCellRef());int nRefs = field_6_refs.length;out.writeShort(nRefs);for (CellRangeAddress8Bit field_6_ref : field_6_refs) {field_6_ref.serialize(out);}}
public static Counter newCounter() {return newCounter(false);}
public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public void preSerialize(){if(records.getTabpos() > 0) {TabIdRecord tir = ( TabIdRecord ) records.get(records.getTabpos());if(tir._tabids.length < boundsheets.size()) {fixTabIdRecord();}}}
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {super(delegate.getReuseStrategy());this.delegate = delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}
public ExternalBookBlock(int numberOfSheets) {_externalBookRecord = SupBookRecord.createInternalReferences((short) numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SCENARIOPROTECT]\n");buffer.append("    .protect         = ").append(getProtect()).append("\n");buffer.append("[/SCENARIOPROTECT]\n");return buffer.toString();}
public PushCommand setThin(boolean thin) {checkCallable();this.thin = thin;return this;}
public int compareTo(SearcherTracker other) {return Double.compare(other.recordTimeSec, recordTimeSec);}
public ReverseStringFilter create(TokenStream in) {return new ReverseStringFilter(in);}
public BlockList() {directory = BlockList.<T> newDirectory(256);directory[0] = BlockList.<T> newBlock();tailBlock = directory[0];}
public QueryScorer(WeightedSpanTerm[] weightedTerms) {this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);for (int i = 0; i < weightedTerms.length; i++) {WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);if ((existingTerm == null) ||(existingTerm.weight < weightedTerms[i].weight)) {fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());}}skipInitExtractor = true;}
public boolean equals(Object _other) {assert neverEquals(_other);if (_other instanceof MergedGroup) {MergedGroup<?> other = (MergedGroup<?>) _other;if (groupValue == null) {return other == null;} else {return groupValue.equals(other);}} else {return false;}}
public final Charset charset() {return cs;}
public DescribeExperimentResult describeExperiment(DescribeExperimentRequest request) {request = beforeClientExecution(request);return executeDescribeExperiment(request);}
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel ){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font("Arial", 0, 10);this.foreground = forecolor;}
public String pattern() {return patternText;}
public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteRouteTable(request);}
public AssociateVPCWithHostedZoneResult associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {request = beforeClientExecution(request);return executeAssociateVPCWithHostedZone(request);}
public PutIntegrationResult putIntegration(PutIntegrationRequest request) {request = beforeClientExecution(request);return executePutIntegration(request);}
public SimpleEntry(K theKey, V theValue) {key = theKey;value = theValue;}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}
public DisassociateConnectionFromLagResult disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {request = beforeClientExecution(request);return executeDisassociateConnectionFromLag(request);}
public FileMode getOldMode() {return oldMode;}
@Override public String toString() {return m.toString();}
public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}
public String toString() {return "[Array Formula or Shared Formula]\n" + "row = " + getRow() + "\n" + "col = " + getColumn() + "\n";}
public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListDominantLanguageDetectionJobs(request);}
public String toString() {return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex;}
public static final int parseHexInt4(final byte digit) {final byte r = digits16[digit];if (r < 0)throw new ArrayIndexOutOfBoundsException();return r;}
public Attribute(String name, String value) {setName(name);setValue(value);}
public DescribeStackSetOperationResult describeStackSetOperation(DescribeStackSetOperationRequest request) {request = beforeClientExecution(request);return executeDescribeStackSetOperation(request);}
public HSSFCell getCell(int cellnum) {return getCell(cellnum, book.getMissingCellPolicy());}
public void write(byte[] b) {writeContinueIfRequired(b.length);_ulrOutput.write(b);}
public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.toString());}
public void discardResultContents() {resultContents = null;}
public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}
public void undeprecateDomain(UndeprecateDomainRequest request) {request = beforeClientExecution(request);executeUndeprecateDomain(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_3_string.length()); out.writeByte(_is16bitUnicode ? 0x01 : 0x00);if (_is16bitUnicode) {StringUtil.putUnicodeLE(field_3_string, out);} else {StringUtil.putCompressedUnicode(field_3_string, out);}}
public DeleteQueueResult deleteQueue(String queueUrl) {return deleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl));}
public void setCheckEofAfterPackFooter(boolean b) {checkEofAfterPackFooter = b;}
public void swap() {final int sBegin = beginA;final int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}
public int getPackedGitWindowSize() {return packedGitWindowSize;}
public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}
public GetCelebrityRecognitionResult getCelebrityRecognition(GetCelebrityRecognitionRequest request) {request = beforeClientExecution(request);return executeGetCelebrityRecognition(request);}
public CreateQueueRequest(String queueName) {setQueueName(queueName);}
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {super(arearef);this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.getSheetIdentifier().getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();} else {this.lastSheetName = null;}}
public void setBaseline(long clockTime) {t0 = clockTime;timeout = t0 + ticksAllowed;}
public MoveAddressToVpcResult moveAddressToVpc(MoveAddressToVpcRequest request) {request = beforeClientExecution(request);return executeMoveAddressToVpc(request);}
public String toString() {String coll = collectionModel.getName();if (coll != null) {return String.format(Locale.ROOT, "LM %s - %s", getName(), coll);} else {return String.format(Locale.ROOT, "LM %s", getName());}}
public DescribeLagsResult describeLags(DescribeLagsRequest request) {request = beforeClientExecution(request);return executeDescribeLags(request);}
public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {if (_refEval == null) {return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}
public ShortBuffer put(short[] src, int srcOffset, int shortCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);}this.position += shortCount;return this;}
public void initialize(final String cat) {this._cat=cat;}
public void write(int oneByte) throws IOException {out.write(oneByte);written++;}
public DescribeImportImageTasksResult describeImportImageTasks(DescribeImportImageTasksRequest request) {request = beforeClientExecution(request);return executeDescribeImportImageTasks(request);}
public ColumnInfoRecord(RecordInputStream in) {_firstCol = in.readUShort();_lastCol  = in.readUShort();_colWidth = in.readUShort();_xfIndex  = in.readUShort();_options   = in.readUShort();switch(in.remaining()) {case 2: field_6_reserved  = in.readUShort();break;case 1:field_6_reserved  = in.readByte();break;case 0:field_6_reserved  = 0;break;default:throw new RuntimeException("Unusual record size remaining=(" + in.remaining() + ")");}}
public Status(IndexDiff diff) {super();this.diff = diff;hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff.getChanged().isEmpty() || !diff.getRemoved().isEmpty() || !diff.getMissing().isEmpty() || !diff.getModified().isEmpty() || !diff.getConflicting().isEmpty();clean = !hasUncommittedChanges && diff.getUntracked().isEmpty();}
public CreateExperimentResult createExperiment(CreateExperimentRequest request) {request = beforeClientExecution(request);return executeCreateExperiment(request);}
public UnknownRecord clone() {return copy();}
public FloatBuffer slice() {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());FloatBuffer result = new FloatToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public DescribeSnapshotSchedulesResult describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotSchedules(request);}
public ListImagesResult listImages(ListImagesRequest request) {request = beforeClientExecution(request);return executeListImages(request);}
public Diff(int ins, int del, int rep, int noop) {INSERT = ins;DELETE = del;REPLACE = rep;NOOP = noop;}
public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(",");buffer.append(operands[ 1 ]);return buffer.toString();}
public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];for (int i = 0; i < wbEvals.length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}
public ListPhotoTagsRequest() {super("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public RandomSamplingFacetsCollector(int sampleSize, long seed) {super(false);this.sampleSize = sampleSize;this.random = new XORShift64Random(seed);this.sampledDocs = null;}
public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {request = beforeClientExecution(request);return executeAllocateStaticIp(request);}
public FeatRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved1 = in.readByte();reserved2 = in.readInt();int cref = in.readUShort();cbFeatData = in.readInt();reserved3 = in.readShort();cellRefs = new CellRangeAddress[cref];for(int i=0; i<cellRefs.length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch(isf_sharedFeatureType) {case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.log( POILogger.ERROR, "Unknown Shared Feature " + isf_sharedFeatureType + " found!");}}
public RevCommit tryFastForward(RevCommit newCommit) throws IOException,GitAPIException {Ref head = getHead();ObjectId headId = head.getObjectId();if (headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit, headCommit))return newCommit;String headName = getHeadName(head);return tryFastForward(headName, headCommit, newCommit);}
public CreateSnapshotScheduleResult createSnapshotSchedule(CreateSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeCreateSnapshotSchedule(request);}
public Record getNext() {if(!hasNext()) {throw new RuntimeException("Attempt to read past end of record stream");}_countRead ++;return _list.get(_nextIndex++);}
public String toString() {return RawParseUtils.decode(buf.toByteArray());}
public ListTablesRequest(String exclusiveStartTableName) {setExclusiveStartTableName(exclusiveStartTableName);}
public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeEnableAlarmActions(request);}
public Builder() {this(true);}
public boolean equals(Object obj) {final State other = (State) obj;return is_final == other.is_final&& Arrays.equals(this.labels, other.labels)&& referenceEquals(this.states, other.states);}
public TokenStream create(TokenStream input) {return new EnglishPossessiveFilter(input);}
public void clearFormatting() {_string = cloneStringIfRequired();_string.clearFormatting();addToSSTIfRequired();}
public int get(int index, long[] arr, int off, int len) {assert len > 0 : "len must be > 0 (got " + len + ")";assert index >= 0 && index < valueCount;len = Math.min(len, valueCount - index);Arrays.fill(arr, off, off + len, 0);return len;}
public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request) {request = beforeClientExecution(request);return executeDeleteRouteResponse(request);}
public String toPrivateString() {return format(true, false);}
public CreatePresignedDomainUrlResult createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {request = beforeClientExecution(request);return executeCreatePresignedDomainUrl(request);}
public void write(int oneChar) {doWrite(new char[] { (char) oneChar }, 0, 1);}
public SSTRecord getSSTRecord() {return sstRecord;}
public String toString() {return "term=" + term + ",field=" + field + ",value=" + valueToString() + ",docIDUpto=" + docIDUpto;}
public boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {return bloomFilter.getSaturation() > 0.9f;}
public Builder(boolean ignoreCase) {this.ignoreCase = ignoreCase;}
public String toString() {return getClass().getName()+ "(maxBasicQueries: " + maxBasicQueries+ ", queriesMade: " + queriesMade+ ")";}
public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteDataSource(request);}
public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}
public void processChildRecords() {convertRawBytesToEscherRecords();}
public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {request = beforeClientExecution(request);return executeCreateOrUpdateTags(request);}
public FileSnapshot getSnapShot() {return snapShot;}
public InputStream openResource(String resource) throws IOException {final InputStream stream = (clazz != null) ?clazz.getResourceAsStream(resource) :loader.getResourceAsStream(resource);if (stream == null)throw new IOException("Resource not found: " + resource);return stream;}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [");sb.append("sid=").append(HexDump.shortToHex(_sid));sb.append(" size=").append(_data.length);sb.append(" : ").append(HexDump.toHex(_data));sb.append("]\n");return sb.toString();}
public int nextIndex() {return index;}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return "\"" + getTermEscapeQuoted(escaper) + "\"";} else {return this.field + ":" + "\"" + getTermEscapeQuoted(escaper) + "\"";}}
public CalcModeRecord clone() {return copy();}
public boolean isOutput() {return output;}
public CreateNetworkInterfaceResult createNetworkInterface(CreateNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeCreateNetworkInterface(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_password);}
public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopDominantLanguageDetectionJob(request);}
public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) {this.connectionTimeoutInMilliseconds = milliseconds;return this;}
public GetGatewayGroupResult getGatewayGroup(GetGatewayGroupRequest request) {request = beforeClientExecution(request);return executeGetGatewayGroup(request);}
public FloatBuffer slice() {return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);}
public static String join(Collection<String> parts, String separator,String lastSeparator) {StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.size() - 1;for (String part : parts) {sb.append(part);if (i == lastIndex - 1) {sb.append(lastSeparator);} else if (i != lastIndex) {sb.append(separator);}i++;}return sb.toString();}
public String toString() {return "(" + a.toString() + " AND " + b.toString() + ")"; }
public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {setTopicArn(topicArn);setNextToken(nextToken);}
public byte readByte() {return bytes[pos--];}
public TerminateClientVpnConnectionsResult terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeTerminateClientVpnConnections(request);}
public ReceiveMessageRequest(String queueUrl) {setQueueUrl(queueUrl);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_barSpace);out.writeShort(field_2_categorySpace);out.writeShort(field_3_formatFlags);}
public Object common(Object output1, Object output2) {return outputs.common((T) output1, (T) output2);}
public CreateVariableResult createVariable(CreateVariableRequest request) {request = beforeClientExecution(request);return executeCreateVariable(request);}
public static final int match(byte[] b, int ptr, byte[] src) {if (ptr + src.length > b.length)return -1;for (int i = 0; i < src.length; i++, ptr++)if (b[ptr] != src[i])return -1;return ptr;}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_rectX1 =  LittleEndian.getInt( data, pos + size );size+=4;field_2_rectY1 =  LittleEndian.getInt( data, pos + size );size+=4;field_3_rectX2 =  LittleEndian.getInt( data, pos + size );size+=4;field_4_rectY2 =  LittleEndian.getInt( data, pos + size );size+=4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining);}return 8 + size + bytesRemaining;}
public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeCreateCloudFrontOriginAccessIdentity(request);}
public boolean isNamespaceAware() {return getFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES);}
public void setOverridable(boolean on) {overridable = on;}
public String getClassName() {return className;}
public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}
public int indexOfKey(int key) {return binarySearch(mKeys, 0, mSize, key);}
public BlankRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_xf  = in.readShort();}
public long length() {return length;}
public PasswordRecord(RecordInputStream in) {field_1_password = in.readShort();}
public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException("Load factor: " + loadFactor);}}
public void run() {long lastReopenStartNS = System.nanoTime();while (!finish) {while (!finish) {reopenLock.lock();try {boolean hasWaiting = waitingGen > searchingGen;final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);final long sleepNS = nextReopenStartNS - System.nanoTime();if (sleepNS > 0) {reopenCond.awaitNanos(sleepNS);} else {break;}} catch (InterruptedException ie) {Thread.currentThread().interrupt();return;} finally {reopenLock.unlock();}}if (finish) {break;}lastReopenStartNS = System.nanoTime();refreshStartGen = writer.getMaxCompletedSequenceNumber();try {manager.maybeRefreshBlocking();} catch (IOException ioe) {throw new RuntimeException(ioe);}}}
public DeleteLoginProfileRequest(String userName) {setUserName(userName);}
public E pollFirst() {return (size == 0) ? null : removeFirstImpl();}
public CreatePhotoRequest() {super("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String getName() {return "resolve"; }
public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;int offset, count = maxScan;for( offset = start; offset < buffer.length() && count > 0; count-- ){if( boundaryChars.contains( buffer.charAt( offset ) ) ) return offset;offset++;}return start;}
public void setObjectChecker(ObjectChecker oc) {objCheck = oc;}
public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}
public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}
public DeregisterWorkspaceDirectoryResult deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeDeregisterWorkspaceDirectory(request);}
public ChartFRTInfoRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();verOriginator = in.readByte();verWriter = in.readByte();int cCFRTID = in.readShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++) {rgCFRTID[i] = new CFRTID(in);}}
public Merger newMerger(Repository db) {return new OneSide(db, treeIndex);}
public CreateDataSourceFromRedshiftResult createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRedshift(request);}
public void clearDFA() {for (int d = 0; d < decisionToDFA.length; d++) {decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);}}
public void removeName(String name) {int index = getNameIndex(name);removeName(index);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( "[RightMargin]\n" );buffer.append( "    .margin               = " ).append( " (" ).append( getMargin() ).append( " )\n" );buffer.append( "[/RightMargin]\n" );return buffer.toString();}
public RefreshAllRecord clone() {return copy();}
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new RegexpQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new PointQueryNodeProcessor());add(new PointRangeQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}
public String formatAsString(String sheetName, boolean useAbsoluteAddress) {StringBuilder sb = new StringBuilder();if (sheetName != null) {sb.append(SheetNameFormatter.format(sheetName));sb.append("!");}CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(),useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsoluteAddress, useAbsoluteAddress);sb.append(cellRefFrom.formatAsString());if(!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()){sb.append(':');sb.append(cellRefTo.formatAsString());}return sb.toString();}
public ByteBuffer put(int index, byte value) {throw new ReadOnlyBufferException();}
public void mode(int m) {_mode = m;}
public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}
public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}
public ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}
public static double max(double[] values) {double max = Double.NEGATIVE_INFINITY;for (double value : values) {max = Math.max(max, value);}return max;}
public UpdateRepoWebhookRequest() {super("cr", "2016-06-07", "UpdateRepoWebhook", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]");setMethod(MethodType.POST);}
public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[SXPI]\n");for (int i = 0; i < _fieldInfos.length; i++) {sb.append("    item[").append(i).append("]=");_fieldInfos[i].appendDebugInfo(sb);sb.append('\n');}sb.append("[/SXPI]\n");return sb.toString();}
public boolean isSuccessful() {if (mergeResult != null)return mergeResult.getMergeStatus().isSuccessful();else if (rebaseResult != null)return rebaseResult.getStatus().isSuccessful();return true;}
public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}
public DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeConnections(request);}
public DeletePhotosRequest() {super("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public void add(E object) {iterator.add(object);subList.sizeChanged(true);end++;}
public static ByteBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteHeapByteBuffer(capacity);}
public SrndQuery getSubQuery(int qn) {return queries.get(qn);}
public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.min(currentPayloadScore, currentScore);}}
public String toString(){StringBuilder sb = new StringBuilder();sb.append("[BLANK]\n");sb.append("    row= ").append(HexDump.shortToHex(getRow())).append("\n");sb.append("    col= ").append(HexDump.shortToHex(getColumn())).append("\n");sb.append("    xf = ").append(HexDump.shortToHex(getXFIndex())).append("\n");sb.append("[/BLANK]\n");return sb.toString();}
public DescribeLogPatternResult describeLogPattern(DescribeLogPatternRequest request) {request = beforeClientExecution(request);return executeDescribeLogPattern(request);}
public RegisterTransitGatewayMulticastGroupMembersResult registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeRegisterTransitGatewayMulticastGroupMembers(request);}
public GetPhoneNumberSettingsResult getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberSettings(request);}
public ObjectId getData() {return data;}
public boolean isDirect() {return false;}
public DeleteServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}
public StringBuffer append(double d) {RealToString.getInstance().appendDouble(this, d);return this;}
public GetEvaluationResult getEvaluation(GetEvaluationRequest request) {request = beforeClientExecution(request);return executeGetEvaluation(request);}
public LinkedDataRecord getDataName(){return dataName;}
public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else if (findPos >= regionEnd) {matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}
public GetLifecyclePolicyPreviewResult getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicyPreview(request);}
public SinglePositionTokenStream(String word) {termAtt = addAttribute(CharTermAttribute.class);posIncrAtt = addAttribute(PositionIncrementAttribute.class);this.word = word;returned = true;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_gridlines);}
public String toString() {final StringBuilder s = new StringBuilder();s.append(Constants.typeString(getType()));s.append(' ');s.append(name());s.append(' ');s.append(commitTime);s.append(' ');appendCoreFlags(s);return s.toString();}
public LsRemoteCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}
public void collapseRow(int rowNumber) {int startRow = findStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = getRow(startRow);int nextRowIx = writeHidden(rowRecord, startRow);RowRecord row = getRow(nextRowIx);if (row == null) {row = createRow(nextRowIx);insertRow(row);}row.setColapsed(true);}
public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {request = beforeClientExecution(request);return executeAssociateSkillGroupWithRoom(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SERIESLIST]\n");buffer.append("    .seriesNumbers= ").append(" (").append( Arrays.toString(getSeriesNumbers()) ).append(" )");buffer.append("\n");buffer.append("[/SERIESLIST]\n");return buffer.toString();}
public QueryConfigHandler getQueryConfigHandler() {return this.queryConfig;}
public String getClassArg() {if (null != originalArgs) {String className = originalArgs.get(CLASS_NAME);if (null != className) {return className;}}return getClass().getName();}
public ListSpeechSynthesisTasksResult listSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request) {request = beforeClientExecution(request);return executeListSpeechSynthesisTasks(request);}
public UpdateJourneyStateResult updateJourneyState(UpdateJourneyStateRequest request) {request = beforeClientExecution(request);return executeUpdateJourneyState(request);}
public void removePresentationFormat() {remove1stProperty(PropertyIDMap.PID_PRESFORMAT);}
public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol) {this();addCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}
public void delete(int key) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {if (mValues[i] != DELETED) {mValues[i] = DELETED;mGarbage = true;}}}
public CreateBranchCommand setStartPoint(RevCommit startPoint) {checkCallable();this.startCommit = startPoint;this.startPoint = null;return this;}
public int centerX() {return x + w / 2;}
public ListPresetsResult listPresets() {return listPresets(new ListPresetsRequest());}
public DeleteFolderContentsResult deleteFolderContents(DeleteFolderContentsRequest request) {request = beforeClientExecution(request);return executeDeleteFolderContents(request);}
public GetConsoleOutputResult getConsoleOutput(GetConsoleOutputRequest request) {request = beforeClientExecution(request);return executeGetConsoleOutput(request);}
public PutMailboxPermissionsResult putMailboxPermissions(PutMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executePutMailboxPermissions(request);}
public Cluster disableSnapshotCopy(DisableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeDisableSnapshotCopy(request);}
public static String stripExtension(String filename) {int idx = filename.indexOf('.');if (idx != -1) {filename = filename.substring(0, idx);}return filename;}
public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}
public int lastIndexOf(final int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[ rval ]){break;}}return rval;}
public void setCountsByTime(int[] counts, long msecStep) {countsByTime = counts;countsByTimeStepMSec = msecStep;}
public FeatHdrRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved = in.readByte();cbHdrData = in.readInt();rgbHdrData = in.readRemainder();}
public CopyOnWriteArrayList() {elements = EmptyArray.OBJECT;}
public WriteRequest(DeleteRequest deleteRequest) {setDeleteRequest(deleteRequest);}
public void readFully(byte[] buf){_in.readFully(buf);}
public static Cell getCell(Row row, int columnIndex) {Cell cell = row.getCell(columnIndex);if (cell == null) {cell = row.createCell(columnIndex);}return cell;}
public void setPackConfig(PackConfig pc) {this.packConfig = pc;}
public String getSignerName() {return "HMAC-SHA1";}
public IntervalSet or(IntSet a) {IntervalSet o = new IntervalSet();o.addAll(this);o.addAll(a);return o;}
public String toString() {return getClass().getName() + " [" +_value +"]";}
public DescribeVpcEndpointServicePermissionsResult describeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServicePermissions(request);}
public static byte[] copyOfRange(byte[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public ListTopicsRequest(String nextToken) {setNextToken(nextToken);}
public void finish(FieldInfos fis, int numDocs) throws IOException {if (!pendingDocs.isEmpty()) {flush();numDirtyChunks++; }if (numDocs != this.numDocs) {throw new RuntimeException("Wrote " + this.numDocs + " docs, finish called with numDocs=" + numDocs);}indexWriter.finish(numDocs, vectorsStream.getFilePointer());vectorsStream.writeVLong(numChunks);vectorsStream.writeVLong(numDirtyChunks);CodecUtil.writeFooter(vectorsStream);}
public boolean isIndexTerm(BytesRef term, TermStats stats) {if (count >= interval) {count = 1;return true;} else {count++;return false;}}
public AssociateDhcpOptionsResult associateDhcpOptions(AssociateDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeAssociateDhcpOptions(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {return evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}
public void disconnect() {if (sock.isConnected())sock.disconnect();}
public PredictionContext add(PredictionContext ctx) {if ( ctx==PredictionContext.EMPTY ) return PredictionContext.EMPTY;PredictionContext existing = cache.get(ctx);if ( existing!=null ) {return existing;}cache.put(ctx, ctx);return ctx;}
public UploadLayerPartResult uploadLayerPart(UploadLayerPartRequest request) {request = beforeClientExecution(request);return executeUploadLayerPart(request);}
public String getScriptText() {return getScriptText(null, null);}
public DescribeClusterSubnetGroupsResult describeClusterSubnetGroups() {return describeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}
public char setIndex(int position) {if (position < getBeginIndex() || position > getEndIndex())throw new IllegalArgumentException("Illegal Position: " + position);index = start + position;return current();}
public GetPhoneNumberOrderResult getPhoneNumberOrder(GetPhoneNumberOrderRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberOrder(request);}
public EpsilonTransition(ATNState target, int outermostPrecedenceReturn) {super(target);this.outermostPrecedenceReturn = outermostPrecedenceReturn;}
public DiffCommand setContextLines(int contextLines) {this.contextLines = contextLines;return this;}
public RejectVpcPeeringConnectionResult rejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeRejectVpcPeeringConnection(request);}
public static boolean equals(int[] array1, int[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public static void main(String[] args) throws IOException {if (args.length<1) {System.err.println("Usage: java QualityQueriesFinder <index-dir>");System.exit(1);}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.open(Paths.get(args[0])));String q[] = qqf.bestQueries("body",20);for (int i=0; i<q.length; i++) {System.out.println(newline+formatQueryAsTrecTopic(i,q[i],null,null));}}
public CharsRef(char[] chars, int offset, int length) {this.chars = chars;this.offset = offset;this.length = length;assert isValid();}
public UpdateIPSetResult updateIPSet(UpdateIPSetRequest request) {request = beforeClientExecution(request);return executeUpdateIPSet(request);}
public void print(Object obj) {print(String.valueOf(obj));}
public String toString() {return "IndexFileDeleter.CommitPoint(" + segmentsFileName + ")";}
public synchronized boolean waitForGeneration(long targetGen, int maxMS) throws InterruptedException {if (targetGen > searchingGen) {reopenLock.lock();waitingGen = Math.max(waitingGen, targetGen);try {reopenCond.signal();} finally {reopenLock.unlock();}long startMS = System.nanoTime()/1000000;while (targetGen > searchingGen) {if (maxMS < 0) {wait();} else {long msLeft = (startMS + maxMS) - System.nanoTime()/1000000;if (msLeft <= 0) {return false;} else {wait(msLeft);}}}}return true;}
public StringBuffer append(boolean b) {return append(b ? "true" : "false");}
public ByteBuffer put(int index, byte b) {throw new ReadOnlyBufferException();}
public int getLineCount() {return lineCount;}
public boolean equals( Object o ) {return o instanceof DutchStemmer;}
public CreateNotificationSubscriptionResult createNotificationSubscription(CreateNotificationSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateNotificationSubscription(request);}
public boolean isOutdated() {return snapshot.isModified(getFile());}
public DescribeVirtualInterfacesResult describeVirtualInterfaces() {return describeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}
public void onChanged() {buildMap();for (DataSetObserver o : mObservers) {o.onChanged();}}
public DeleteEventTrackerResult deleteEventTracker(DeleteEventTrackerRequest request) {request = beforeClientExecution(request);return executeDeleteEventTracker(request);}
public boolean matches(ValueEval x) {if (x instanceof BlankEval) {switch(getCode()) {case CmpOp.NONE:case CmpOp.EQ:return _value.length() == 0;case CmpOp.NE:return _value.length() != 0;}return false;}if(!(x instanceof StringEval)) {return false;}String testedValue = ((StringEval) x).getStringValue();if (testedValue.length() < 1 && _value.length() < 1) {switch(getCode()) {case CmpOp.NONE: return true;case CmpOp.EQ:   return false;case CmpOp.NE:   return true;}return false;}if (_pattern != null) {return evaluate(_pattern.matcher(testedValue).matches());}return evaluate(testedValue.compareToIgnoreCase(_value));}
public ListWebsiteAuthorizationProvidersResult listWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request) {request = beforeClientExecution(request);return executeListWebsiteAuthorizationProviders(request);}
public void write(char[] buf, int offset, int count) {doWrite(buf, offset, count);}
public String formatAsString() {if(isWholeColumnReference()) {returnCellReference.convertNumToColString(_firstCell.getCol())+ ":" +CellReference.convertNumToColString(_lastCell.getCol());}StringBuilder sb = new StringBuilder(32);sb.append(_firstCell.formatAsString());if(!_isSingleCell) {sb.append(CELL_DELIMITER);if(_lastCell.getSheetName() == null) {sb.append(_lastCell.formatAsString());} else {_lastCell.appendCellReference(sb);}}return sb.toString();}
public Graphics create(){return new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel );}
public DoubleDocValues(ValueSource vs) {this.vs = vs;}
public static CharArraySet getDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}
public DeleteLoadBalancerPolicyResult deleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancerPolicy(request);}
public ReplicationGroup decreaseReplicaCount(DecreaseReplicaCountRequest request) {request = beforeClientExecution(request);return executeDecreaseReplicaCount(request);}
public Result update(RevWalk walk) throws IOException {requireCanDoUpdate();try {return result = updateImpl(walk, new Store() {@OverrideResult execute(Result status) throws IOException {if (status == Result.NO_CHANGE)return status;return doUpdate(status);}});} catch (IOException x) {result = Result.IO_FAILURE;throw x;}}
public Set<String> getChanged() {return Collections.unmodifiableSet(diff.getChanged());}
public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, "");return sb.toString();}
public int createPlaceholder() {return _offset++;}
@Override public boolean equals(Object o) {if (o instanceof Map.Entry) {Map.Entry other = (Map.Entry) o;return (key == null ? other.getKey() == null : key.equals(other.getKey()))&& (value == null ? other.getValue() == null : value.equals(other.getValue()));}return false;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.log(d0);if (Double.compare(d1, Math.E) == 0) {result = logE;} else {result = logE / Math.log(d1);}NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public DeleteFilterResult deleteFilter(DeleteFilterRequest request) {request = beforeClientExecution(request);return executeDeleteFilter(request);}
public CreateInstanceSnapshotResult createInstanceSnapshot(CreateInstanceSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstanceSnapshot(request);}
public List<Token> getTokens(int start, int stop) {return getTokens(start, stop, null);}
public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,String facetField,boolean facetFieldMultivalued,BytesRef facetPrefix,int initialSize) {if (facetFieldMultivalued) {return new MV(groupField, facetField, facetPrefix, initialSize);} else {return new SV(groupField, facetField, facetPrefix, initialSize);}}
public RenameAlbumRequest() {super("CloudPhoto", "2017-07-11", "RenameAlbum", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
@Override public boolean contains(Object object) {synchronized (mutex) {return c.contains(object);}}
public CharBuffer put(char[] src, int srcOffset, int charCount) {if (charCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, charCount);position += charCount;return this;}
public LegendRecord(RecordInputStream in) {field_1_xAxisUpperLeft = in.readInt();field_2_yAxisUpperLeft = in.readInt();field_3_xSize          = in.readInt();field_4_ySize          = in.readInt();field_5_type           = in.readByte();field_6_spacing        = in.readByte();field_7_options        = in.readShort();}
public static byte[] encodedTypeString(int typeCode) {switch (typeCode) {case OBJ_COMMIT:return ENCODED_TYPE_COMMIT;case OBJ_TREE:return ENCODED_TYPE_TREE;case OBJ_BLOB:return ENCODED_TYPE_BLOB;case OBJ_TAG:return ENCODED_TYPE_TAG;default:throw new IllegalArgumentException(MessageFormat.format(JGitText.get().badObjectType, Integer.valueOf(typeCode)));}}
public ObjectId getCalulatedPatchId() {return ObjectId.fromRaw(digest.digest());}
public DefaultRowHeightRecord() {field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}
public final ByteBuffer encode(CharBuffer buffer) {try {return newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).encode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}
public final FloatBuffer get(float[] dst, int dstOffset, int floatCount) {if (floatCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, floatCount);position += floatCount;return this;}
public boolean hasNext() {return nextEntry != null;}
public DeleteNatGatewayResult deleteNatGateway(DeleteNatGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteNatGateway(request);}
public String resolveNameXText(int refIndex, int definedNameIndex) {return linkTable.resolveNameXText(refIndex, definedNameIndex, this);}
public void setMultiFields(CharSequence[] fields) {if (fields == null) {fields = new CharSequence[0];}getQueryConfigHandler().set(ConfigurationKeys.MULTI_FIELDS, fields);}
public boolean isCancelled() {lock.lock();try {return pm.isCancelled();} finally {lock.unlock();}}
public RemoveTargetsResult removeTargets(RemoveTargetsRequest request) {request = beforeClientExecution(request);return executeRemoveTargets(request);}
public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, boolean transpositions) {super(term.field());if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {throw new IllegalArgumentException("maxEdits must be between 0 and " + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0) {throw new IllegalArgumentException("prefixLength cannot be negative.");}if (maxExpansions <= 0) {throw new IllegalArgumentException("maxExpansions must be positive.");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;int[] codePoints = FuzzyTermsEnum.stringToUTF32(term.text());this.termLength = codePoints.length;this.automata = FuzzyTermsEnum.buildAutomata(term.text(), codePoints, prefixLength, transpositions, maxEdits);setRewriteMethod(new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(maxExpansions));this.ramBytesUsed = calculateRamBytesUsed(term, this.automata);}
public CheckoutCommand checkout() {return new CheckoutCommand(repo);}
public ValueEval evaluate(String sheetName, int rowIndex, int columnIndex) {EvaluationCell cell = _sewb.getEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.getCellType()) {case BOOLEAN:return BoolEval.valueOf(cell.getBooleanCellValue());case ERROR:return ErrorEval.valueOf(cell.getErrorCellValue());case FORMULA:return _evaluator.evaluate(cell);case NUMERIC:return new NumberEval(cell.getNumericCellValue());case STRING:return new StringEval(cell.getStringCellValue());case BLANK:return null;default:throw new IllegalStateException("Bad cell type (" + cell.getCellType() + ")");}}
public PutFileSystemPolicyResult putFileSystemPolicy(PutFileSystemPolicyRequest request) {request = beforeClientExecution(request);return executePutFileSystemPolicy(request);}
public long fileLength(String name) throws IOException {ensureOpen();FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));if (e == null)throw new FileNotFoundException(name);return e.length;}
public DescribeCacheClustersResult describeCacheClusters() {return describeCacheClusters(new DescribeCacheClustersRequest());}
public void setObjectId(RevObject obj) {setObjectId(obj, obj.getType());}
public boolean rowHasCells(int row) {if (row >= records.length) {return false;}CellValueRecordInterface[] rowCells=records[row];if(rowCells==null) return false;for(int col=0;col<rowCells.length;col++) {if(rowCells[col]!=null) return true;}return false;}
public TokenStream create(TokenStream input) {return new SpanishLightStemFilter(input);}
public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}
public DescribePublicIpv4PoolsResult describePublicIpv4Pools(DescribePublicIpv4PoolsRequest request) {request = beforeClientExecution(request);return executeDescribePublicIpv4Pools(request);}
public IndexRevision(IndexWriter writer) throws IOException {IndexDeletionPolicy delPolicy = writer.getConfig().getIndexDeletionPolicy();if (!(delPolicy instanceof SnapshotDeletionPolicy)) {throw new IllegalArgumentException("IndexWriter must be created with SnapshotDeletionPolicy");}this.writer = writer;this.sdp = (SnapshotDeletionPolicy) delPolicy;this.commit = sdp.snapshot();this.version = revisionVersion(commit);this.sourceFiles = revisionFiles(commit);}
public void setTabIdArray(short[] array) {_tabids = array.clone();}
public UpdateObjectAttributesResult updateObjectAttributes(UpdateObjectAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateObjectAttributes(request);}
public GetGameSessionLogUrlResult getGameSessionLogUrl(GetGameSessionLogUrlRequest request) {request = beforeClientExecution(request);return executeGetGameSessionLogUrl(request);}
public RefCount(T object) {this.object = object;}
public ByteBuffer put(int index, byte b) {checkIndex(index);backingArray[offset + index] = b;return this;}
public IntervalSet LOOK(ATNState s, ATNState stopState, RuleContext ctx) {IntervalSet r = new IntervalSet();boolean seeThruPreds = true; PredictionContext lookContext = ctx != null ? PredictionContext.fromRuleContext(s.atn, ctx) : null;_LOOK(s, stopState, lookContext,r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}
public int getValidationType() {return _validationType;}
public DeleteTagCommand tagDelete() {return new DeleteTagCommand(repo);}
public SortRescorer(Sort sort) {this.sort = sort;}
public void verifyBelongsToWorkbook(HSSFWorkbook wb) {if(wb.getWorkbook() != _workbook) {throw new IllegalArgumentException("This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?");}}
public StringBuffer insert(int index, Object obj) {return insert(index, obj == null ? "null" : obj.toString());}
public boolean containsKey(CharSequence cs) {if(cs == null)throw new NullPointerException();return false;}
public int compareTo(HSSFRichTextString r) {return _string.compareTo(r._string);}
public RequestSpotInstancesRequest(String spotPrice) {setSpotPrice(spotPrice);}
public ObjectId getNewObjectId() {return newObjectId;}
public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}
public LengthFilterFactory(Map<String, String> args) {super(args);min = requireInt(args, MIN_KEY);max = requireInt(args, MAX_KEY);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public TruncateTokenFilter(TokenStream input, int length) {super(input);if (length < 1)throw new IllegalArgumentException("length parameter must be a positive number: " + length);this.length = length;}
public ListDomainsResult listDomains() {return listDomains(new ListDomainsRequest());}
public ArabicStemFilter create(TokenStream input) {return new ArabicStemFilter(input);}
public PushCommand setRefSpecs(RefSpec... specs) {checkCallable();this.refSpecs.clear();Collections.addAll(refSpecs, specs);return this;}
public BlameGenerator setDiffAlgorithm(DiffAlgorithm algorithm) {diffAlgorithm = algorithm;return this;}
public GroupingSearch setIncludeMaxScore(boolean includeMaxScore) {this.includeMaxScore = includeMaxScore;return this;}
public Field[] createIndexableFields(Shape shape) {double distErr = SpatialArgs.calcDistanceFromErrPct(shape, distErrPct, ctx);return createIndexableFields(shape, distErr);}
public PutMethodResponseResult putMethodResponse(PutMethodResponseRequest request) {request = beforeClientExecution(request);return executePutMethodResponse(request);}
public LegacyCredentials(Credential legacyCrendential) {this.legacyCredential = legacyCrendential;}
public DescribeFeatureTransformationResult describeFeatureTransformation(DescribeFeatureTransformationRequest request) {request = beforeClientExecution(request);return executeDescribeFeatureTransformation(request);}
public DeleteRouteResult deleteRoute(DeleteRouteRequest request) {request = beforeClientExecution(request);return executeDeleteRoute(request);}
public AssociatePhoneNumbersWithVoiceConnectorResult associatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeAssociatePhoneNumbersWithVoiceConnector(request);}
public long ramBytesUsed() {long size = BASE_RAM_BYTES_USED + RamUsageEstimator.shallowSizeOf(blocks);if (blocks.length > 0) {size += (blocks.length - 1) * bytesUsedPerBlock;size += RamUsageEstimator.sizeOf(blocks[blocks.length - 1]);}return size;}
public short readShort(){return _in.readShort();}
public UpdatePipelineNotificationsResult updatePipelineNotifications(UpdatePipelineNotificationsRequest request) {request = beforeClientExecution(request);return executeUpdatePipelineNotifications(request);}
public StringWriter append(char c) {write(c);return this;}
public Iterator<V> iterator() {return new ValueIterator();}
public UnitsRecord(RecordInputStream in) {field_1_units = in.readShort();}
public boolean isEmpty() {return first;}
public String toString() {return "ANY_DIFF"; }
public UpdateDomainNameResult updateDomainName(UpdateDomainNameRequest request) {request = beforeClientExecution(request);return executeUpdateDomainName(request);}
public DeleteSnapshotRequest(String snapshotId) {setSnapshotId(snapshotId);}
public void readFully(byte[] buf) {readFully(buf, 0, buf.length);}
public SliceReader(IntBlockPool pool) {this.pool = pool;}
public void setDeltaSearchMemoryLimit(long memoryLimit) {deltaSearchMemoryLimit = memoryLimit;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[BOOKBOOL]\n");buffer.append("    .savelinkvalues  = ").append(Integer.toHexString(getSaveLinkValues())).append("\n");buffer.append("[/BOOKBOOL]\n");return buffer.toString();}
public DescribeTransitGatewayAttachmentsResult describeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayAttachments(request);}
public CreateVpcResult createVpc(CreateVpcRequest request) {request = beforeClientExecution(request);return executeCreateVpc(request);}
public DescribeElasticGpusResult describeElasticGpus(DescribeElasticGpusRequest request) {request = beforeClientExecution(request);return executeDescribeElasticGpus(request);}
public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putInt(position++ * SizeOf.INT, c);return this;}
public UpdateEndpointsBatchResult updateEndpointsBatch(UpdateEndpointsBatchRequest request) {request = beforeClientExecution(request);return executeUpdateEndpointsBatch(request);}
public void fromRaw(byte[] bs, int p) {w1 = NB.decodeInt32(bs, p);w2 = NB.decodeInt32(bs, p + 4);w3 = NB.decodeInt32(bs, p + 8);w4 = NB.decodeInt32(bs, p + 12);w5 = NB.decodeInt32(bs, p + 16);}
public static OpenSshConfig get(FS fs) {File home = fs.userHome();if (home == null)home = new File(".").getAbsoluteFile(); final File config = new File(new File(home, SshConstants.SSH_DIR),SshConstants.CONFIG);return new OpenSshConfig(home, config);}
public VCenterRecord(RecordInputStream in) {field_1_vcenter = in.readShort();}
public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {ensureOpen();ReplicationSession session = sessions.get(sessionID);if (session != null && session.isExpired(expirationThresholdMilllis)) {releaseSession(sessionID);session = null;}if (session == null) {throw new SessionExpiredException("session (" + sessionID + ") expired while obtaining file: source=" + source+ " file=" + fileName);}sessions.get(sessionID).markAccessed();return session.revision.revision.open(source, fileName);}
public DownloadDefaultKeyPairResult downloadDefaultKeyPair(DownloadDefaultKeyPairRequest request) {request = beforeClientExecution(request);return executeDownloadDefaultKeyPair(request);}
public DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(request);}
public ResetEbsDefaultKmsKeyIdResult resetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request) {request = beforeClientExecution(request);return executeResetEbsDefaultKmsKeyId(request);}
public int getPropertiesPerBlock() {return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {return this.evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}
public GetFindingsStatisticsResult getFindingsStatistics(GetFindingsStatisticsRequest request) {request = beforeClientExecution(request);return executeGetFindingsStatistics(request);}
public DBCluster modifyDBCluster(ModifyDBClusterRequest request) {request = beforeClientExecution(request);return executeModifyDBCluster(request);}
public LimitTokenCountFilterFactory(Map<String, String> args) {super(args);maxTokenCount = requireInt(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = getBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public MatchNoDocsQuery build(QueryNode queryNode) throws QueryNodeException {if (!(queryNode instanceof MatchNoDocsQueryNode)) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass().getName()));}return new MatchNoDocsQuery();}
public GetUserPolicyRequest(String userName, String policyName) {setUserName(userName);setPolicyName(policyName);}
public Cluster rotateEncryptionKey(RotateEncryptionKeyRequest request) {request = beforeClientExecution(request);return executeRotateEncryptionKey(request);}
public int getLinesAdded() {return nAdded;}
public List<Token> getHiddenTokensToLeft(int tokenIndex, int channel) {lazyInit();if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {throw new IndexOutOfBoundsException(tokenIndex+" not in 0.."+(tokens.size()-1));}if (tokenIndex == 0) {return null;}int prevOnChannel =previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);if ( prevOnChannel == tokenIndex - 1 ) return null;int from = prevOnChannel+1;int to = tokenIndex-1;return filterForChannel(from, to, channel);}
public ValidDBInstanceModificationsMessage describeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeValidDBInstanceModifications(request);}
public final void add(RevFlag flag) {flags |= flag.mask;}
public void clear() {Iterator<E> it = iterator();while (it.hasNext()) {it.next();it.remove();}}
public RegisterImageResult registerImage(RegisterImageRequest request) {request = beforeClientExecution(request);return executeRegisterImage(request);}
public boolean equals(Object other) {return sameClassAs(other) &&term.equals(((TermQuery) other).term);}
public URI(String scheme, String authority, String path, String query,String fragment) throws URISyntaxException {if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {throw new URISyntaxException(path, "Relative path");}StringBuilder uri = new StringBuilder();if (scheme != null) {uri.append(scheme);uri.append(':');}if (authority != null) {uri.append("AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path != null) {PATH_ENCODER.appendEncoded(uri, path);}if (query != null) {uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment != null) {uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.toString(), false);}
public BlameGenerator(Repository repository, String path) {this.repository = repository;this.resultPath = PathFilter.create(path);idBuf = new MutableObjectId();setFollowFileRenames(true);initRevPool(false);remaining = -1;}
public synchronized void writeTo(OutputStream out) throws IOException {out.write(buf, 0, count);}
public DeletableItem(String name, java.util.List<Attribute> attributes) {setName(name);setAttributes(attributes);}
public DescribeGroupResult describeGroup(DescribeGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGroup(request);}
public EnableVpcClassicLinkResult enableVpcClassicLink(EnableVpcClassicLinkRequest request) {request = beforeClientExecution(request);return executeEnableVpcClassicLink(request);}
public DescribeStacksResult describeStacks() {return describeStacks(new DescribeStacksRequest());}
public CharBuffer duplicate() {return copy(this);}
public static double mod(double n, double d) {if (d == 0) {return Double.NaN;}else if (sign(n) == sign(d)) {return n % d;}else {return ((n % d) + d) % d;}}
public static String getLocalizedMessage(String key, Locale locale) {Object message = getResourceBundleObject(key, locale);if (message == null) {return "Message with key:" + key + " and locale: " + locale+ " not found.";}return message.toString();}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return "";return getChild().toQueryString(escapeSyntaxParser) + "^"+ getValueString();}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return "";return "( " + getChild().toQueryString(escapeSyntaxParser) + " )";}
public GetInvalidationResult getInvalidation(GetInvalidationRequest request) {request = beforeClientExecution(request);return executeGetInvalidation(request);}
public String formatAsString() {return formatAsString(null, false);}
public final int prefixCompare(byte[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, mask(1, NB.decodeInt32(bs, p)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, mask(2, NB.decodeInt32(bs, p + 4)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, mask(3, NB.decodeInt32(bs, p + 8)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, mask(4, NB.decodeInt32(bs, p + 12)));if (cmp != 0)return cmp;return NB.compareUInt32(w5, mask(5, NB.decodeInt32(bs, p + 16)));}
public AddApplicationInputProcessingConfigurationResult addApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request) {request = beforeClientExecution(request);return executeAddApplicationInputProcessingConfiguration(request);}
public static TermRangeQuery newStringRange(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {BytesRef lower = lowerTerm == null ? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null ? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}
static public double fv(double r, int nper, double pmt, double pv, int type) {return -(pv * Math.pow(1 + r, nper) + pmt * (1+r*type) * (Math.pow(1 + r, nper) - 1) / r);}
public int checkExternSheet(int firstSheetIndex, int lastSheetIndex) {int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.length; i++) {SupBookRecord ebr = _externalBookBlocks[i].getExternalBookRecord();if (ebr.isInternalReferences()) {thisWbIndex = i;break;}}if (thisWbIndex < 0) {throw new RuntimeException("Could not find 'internal references' EXTERNALBOOK");}int i = _externSheetRecord.getRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (i >= 0) {return i;}return _externSheetRecord.addRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}
public DescribeSentimentDetectionJobResult describeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeSentimentDetectionJob(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[UNITS]\n");buffer.append("    .units                = ").append("0x").append(HexDump.toHex(  getUnits ())).append(" (").append( getUnits() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/UNITS]\n");return buffer.toString();}
public NavigableMap<K, V> tailMap(K from, boolean inclusive) {Bound fromBound = inclusive ? INCLUSIVE : EXCLUSIVE;return subMap(from, fromBound, null, NO_BOUND);}
public static int compareTo(Ref o1, Ref o2) {return o1.getName().compareTo(o2.getName());}
public PutEventsConfigurationResult putEventsConfiguration(PutEventsConfigurationRequest request) {request = beforeClientExecution(request);return executePutEventsConfiguration(request);}
public DetachFromIndexResult detachFromIndex(DetachFromIndexRequest request) {request = beforeClientExecution(request);return executeDetachFromIndex(request);}
public RebaseCommand rebase() {return new RebaseCommand(repo);}
public SearchGroup<T> next() {assert iter.hasNext();final SearchGroup<T> group = iter.next();if (group.sortValues == null) {throw new IllegalArgumentException("group.sortValues is null; you must pass fillFields=true to the first pass collector");}return group;}
public UpdateMLModelResult updateMLModel(UpdateMLModelRequest request) {request = beforeClientExecution(request);return executeUpdateMLModel(request);}
public CreateIPSetResult createIPSet(CreateIPSetRequest request) {request = beforeClientExecution(request);return executeCreateIPSet(request);}
public FieldDateResolutionFCListener(QueryConfigHandler config) {this.config = config;}
@Override public boolean containsValue(Object value) {HashMapEntry[] tab = table;int len = tab.length;if (value == null) {for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (e.value == null) {return true;}}}return entryForNullKey != null && entryForNullKey.value == null;}for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return entryForNullKey != null && value.equals(entryForNullKey.value);}
public DescribeWorkspaceBundlesResult describeWorkspaceBundles(DescribeWorkspaceBundlesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceBundles(request);}
public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -1;return this;}
public void serialize(LittleEndianOutput out) {out.writeShort(sid); out.writeShort(_reserved0);out.writeInt(_engineId);}
public static CharBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteCharArrayBuffer(capacity);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(">=");buffer.append(operands[ 1 ]);return buffer.toString();}
public DeletePipelineResult deletePipeline(DeletePipelineRequest request) {request = beforeClientExecution(request);return executeDeletePipeline(request);}
public InterfaceHdrRecord(int codePage) {_codepage = codePage;}
public DescribeScalingParametersResult describeScalingParameters(DescribeScalingParametersRequest request) {request = beforeClientExecution(request);return executeDescribeScalingParameters(request);}
public Entry<K, V> higherEntry(K key) {return immutableCopy(findBounded(key, HIGHER));}
public CreateSpotDatafeedSubscriptionRequest(String bucket) {setBucket(bucket);}
public String getLocalizedMessage() {return getLocalizedMessage(Locale.getDefault());}
public UDFFinder getUDFFinder(){return _uBook.getUDFFinder();}
public ExternalName getExternalName(String nameName, String sheetName, int externalWorkbookNumber) {throw new IllegalStateException("XSSF-style external names are not supported for HSSF");}
public OldFormulaRecord(RecordInputStream ris) {super(ris, ris.getSid() == biff2_sid);if (isBiff2()) {field_4_value = ris.readDouble();} else {long valueLongBits  = ris.readLong();specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);if (specialCachedValue == null) {field_4_value = Double.longBitsToDouble(valueLongBits);}}if (isBiff2()) {field_5_options = (short)ris.readUByte();} else {field_5_options = ris.readShort();}int expression_len = ris.readShort();int nBytesAvailable = ris.available();field_6_parsed_expr = Formula.read(expression_len, ris, nBytesAvailable);}
public int stem(char s[], int len) {assert s.length >= len + 1 : "this stemmer requires an oversized array of at least 1";len = plural.apply(s, len);len = unification.apply(s, len);len = adverb.apply(s, len);int oldlen;do {oldlen = len;len = augmentative.apply(s, len);} while (len != oldlen);oldlen = len;len = noun.apply(s, len);if (len == oldlen) { len = verb.apply(s, len);}len = vowel.apply(s, len);for (int i = 0; i < len; i++)switch(s[i]) {case 'á': s[i] = 'a'; break;case 'é':case 'ê': s[i] = 'e'; break;case 'í': s[i] = 'i'; break;case 'ó': s[i] = 'o'; break;case 'ú': s[i] = 'u'; break;}return len;}
public boolean sameProperties(FontRecord other) {returnfield_1_font_height         == other.field_1_font_height &&field_2_attributes          == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight         == other.field_4_bold_weight &&field_5_super_sub_script    == other.field_5_super_sub_script &&field_6_underline           == other.field_6_underline &&field_7_family              == other.field_7_family &&field_8_charset             == other.field_8_charset &&field_9_zero                == other.field_9_zero &&Objects.equals(this.field_11_font_name, other.field_11_font_name);}
public String toFormulaString() {return FormulaError.REF.getString();}
public StartTextDetectionResult startTextDetection(StartTextDetectionRequest request) {request = beforeClientExecution(request);return executeStartTextDetection(request);}
public DeleteMessageBatchRequestEntry(String id, String receiptHandle) {setId(id);setReceiptHandle(receiptHandle);}
public PatternCaptureGroupTokenFilter create(TokenStream input) {return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}
public SigningCertificate(String userName, String certificateId, String certificateBody, StatusType status) {setUserName(userName);setCertificateId(certificateId);setCertificateBody(certificateBody);setStatus(status.toString());}
public DistributionConfig(String callerReference, Boolean enabled) {setCallerReference(callerReference);setEnabled(enabled);}
public FastCharStream(Reader r) {input = r;}
public int end(int group) {ensureMatch();return matchOffsets[(group * 2) + 1];}
public final Map.Entry<K, V> next() { return nextEntry(); }
public BlameCommand setTextComparator(RawTextComparator textComparator) {this.textComparator = textComparator;return this;}
public final T pop() {if (size > 0) {T result = heap[1];       heap[1] = heap[size];     heap[size] = null;        size--;downHeap(1);              return result;} else {return null;}}
public String toString() {return getClass().getSimpleName() + "(fields=" + fields.size() + ",delegate=" + postingsReader + ")";}
public static String shortenRefName(String noteRefName) {if (noteRefName.startsWith(Constants.R_NOTES))return noteRefName.substring(Constants.R_NOTES.length());return noteRefName;}
public DescribeDomainsResult describeDomains() {return describeDomains(new DescribeDomainsRequest());}
public int available() {return ccis.available();}
public GetContentModerationResult getContentModeration(GetContentModerationRequest request) {request = beforeClientExecution(request);return executeGetContentModeration(request);}
public PrintStream(OutputStream out) {super(out);if (out == null) {throw new NullPointerException();}}
public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}
public GetIntegrationResult getIntegration(GetIntegrationRequest request) {request = beforeClientExecution(request);return executeGetIntegration(request);}
public void setVisibility(int v) {if (getVisibility() != v) {super.setVisibility(v);if (mIndeterminate) {if (v == GONE || v == INVISIBLE) {stopAnimation();} else {startAnimation();}}}}
public boolean matches(char s[], int len) {if (!super.matches(s, len))return false;for (int i = 0; i < exceptions.length; i++)if (endsWith(s, len, exceptions[i]))return false;return true;}
public DescribeFleetCapacityResult describeFleetCapacity(DescribeFleetCapacityRequest request) {request = beforeClientExecution(request);return executeDescribeFleetCapacity(request);}
public UploadPackInternalServerErrorException(Throwable why) {initCause(why);}
public GetNetworkResult getNetwork(GetNetworkRequest request) {request = beforeClientExecution(request);return executeGetNetwork(request);}
public AllocatePrivateVirtualInterfaceResult allocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAllocatePrivateVirtualInterface(request);}
public GetDeploymentResult getDeployment(GetDeploymentRequest request) {request = beforeClientExecution(request);return executeGetDeployment(request);}
public UpdateRepoAuthorizationRequest() {super("cr", "2016-06-07", "UpdateRepoAuthorization", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]");setMethod(MethodType.POST);}
public void foldToASCII(char[] input, int length){final int maxSizeNeeded = 4 * length;if (output.length < maxSizeNeeded) {output = new char[ArrayUtil.oversize(maxSizeNeeded, Character.BYTES)];}outputPos = foldToASCII(input, 0, output, 0, length);if (preserveOriginal && needToPreserve(input, length)) {state = captureState();}}
public boolean hasEntry(String name) {if (excludes.contains(name)) {return false;}return directory.hasEntry(name);}
public void setLockMessage(String msg) {lockMessage = msg;}
public ReflogCommand reflog() {return new ReflogCommand(repo);}
public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeShort(getFirstColumn());out.writeShort(getLastColumn());}
public static int response(java.net.HttpURLConnection c)throws IOException {try {return c.getResponseCode();} catch (ConnectException ce) {final URL url = c.getURL();final String host = (url == null) ? "<null>" : url.getHost(); if ("Connection timed out: connect".equals(ce.getMessage())) throw new ConnectException(MessageFormat.format(JGitText.get().connectionTimeOut, host));throw new ConnectException(ce.getMessage() + " " + host); }}
public static void fill(long[] array, long value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public void serialize(LittleEndianOutput out) {out.writeInt(getPositionOfBof());out.writeShort(field_2_option_flags);String name = field_5_sheetname;out.writeByte(name.length());out.writeByte(field_4_isMultibyteUnicode);if (isMultibyte()) {StringUtil.putUnicodeLE(name, out);} else {StringUtil.putCompressedUnicode(name, out);}}
public static String getNonBlankTextOrFail(Element e) throws ParserException {String v = getText(e);if (null != v)v = v.trim();if (null == v || 0 == v.length()) {throw new ParserException(e.getTagName() + " has no text");}return v;}
public void buildFieldConfig(FieldConfig fieldConfig) {Map<String, Float> fieldBoostMap = this.config.get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap != null) {Float boost = fieldBoostMap.get(fieldConfig.getField());if (boost != null) {fieldConfig.set(ConfigurationKeys.BOOST, boost);}}}
public PutLifecyclePolicyResult putLifecyclePolicy(PutLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executePutLifecyclePolicy(request);}
public SortedSet<E> subSet(E start, E end) {return subSet(start, true, end, false);}
public void setParams(String params) {super.setParams(params);if (params != null) {int multiplier;if (params.endsWith("s")) {multiplier = 1;params = params.substring(0, params.length()-1);} else if (params.endsWith("m")) {multiplier = 60;params = params.substring(0, params.length()-1);} else if (params.endsWith("h")) {multiplier = 3600;params = params.substring(0, params.length()-1);} else {multiplier = 1;}waitTimeSec = Double.parseDouble(params) * multiplier;} else {throw new IllegalArgumentException("you must specify the wait time, eg: 10.0s, 4.5m, 2h");}}
public PutAttributesRequest(String domainName, String itemName, java.util.List<ReplaceableAttribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}
public DescribeStreamConsumerResult describeStreamConsumer(DescribeStreamConsumerRequest request) {request = beforeClientExecution(request);return executeDescribeStreamConsumer(request);}
public void freeze() {this.frozen = true;}
public FuzzyLikeThisQueryBuilder(Analyzer analyzer) {this.analyzer = analyzer;}
public DBClusterSnapshot copyDBClusterSnapshot(CopyDBClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCopyDBClusterSnapshot(request);}
public OutputStreamDataOutput(OutputStream os) {this.os = os;}
public String findPattern(String pat) {int k = super.find(pat);if (k >= 0) {return unpackValues(k);}return "";}
public static int murmurhash3_x86_32(BytesRef bytes, int seed) {return murmurhash3_x86_32(bytes.bytes, bytes.offset, bytes.length, seed);}
public boolean isOverridable() {return overridable;}
public UpdateMemberResult updateMember(UpdateMemberRequest request) {request = beforeClientExecution(request);return executeUpdateMember(request);}
public CopyFpgaImageResult copyFpgaImage(CopyFpgaImageRequest request) {request = beforeClientExecution(request);return executeCopyFpgaImage(request);}
public void inform(ResourceLoader loader) {try { OpenNLPOpsFactory.getPOSTaggerModel(posTaggerModelFile, loader);} catch (IOException e) {throw new IllegalArgumentException(e);}}
public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) {super(firstRow, lastRow, firstCol, lastCol);if (lastRow < firstRow || lastCol < firstCol) {throw new IllegalArgumentException("Invalid cell range, having lastRow < firstRow || lastCol < firstCol, " +"had rows " + lastRow + " >= " + firstRow + " or cells " + lastCol + " >= " + firstCol);}}
public boolean equals(ATNConfig a, ATNConfig b) {if ( a==b ) return true;if ( a==null || b==null ) return false;return a.state.stateNumber==b.state.stateNumber&& a.context.equals(b.context);}
public PushCommand setPushTags() {refSpecs.add(Transport.REFSPEC_TAGS);return this;}
public CreateEvaluationResult createEvaluation(CreateEvaluationRequest request) {request = beforeClientExecution(request);return executeCreateEvaluation(request);}
public DescribeOrderableDBInstanceOptionsResult describeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeOrderableDBInstanceOptions(request);}
public long getPosition() {return (long) currentBlockIndex * blockSize + currentBlockUpto;}
public TokenStream create(TokenStream input) {return new FrenchLightStemFilter(input);}
public AssignPrivateIpAddressesResult assignPrivateIpAddresses(AssignPrivateIpAddressesRequest request) {request = beforeClientExecution(request);return executeAssignPrivateIpAddresses(request);}
public boolean setExecute(File f, boolean canExec) {return false;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup) {try {ValueEval lookupValue = OperandResolver.getSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.resolveTableArrayArg(table_array);boolean isRangeLookup;try {isRangeLookup = LookupUtils.resolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);} catch(RuntimeException e) {isRangeLookup = true;}int rowIndex = LookupUtils.lookupIndexOfValue(lookupValue, LookupUtils.createColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.resolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = createResultColumnVector(tableArray, colIndex);return resultCol.getItem(rowIndex);} catch (EvaluationException e) {return e.getErrorEval();}}
public CreateGameSessionResult createGameSession(CreateGameSessionRequest request) {request = beforeClientExecution(request);return executeCreateGameSession(request);}
public RowRecord getRow(int rowIndex) {int maxrow = SpreadsheetVersion.EXCEL97.getLastRowIndex();if (rowIndex < 0 || rowIndex > maxrow) {throw new IllegalArgumentException("The row number must be between 0 and " + maxrow + ", but had: " + rowIndex);}return _rowRecords.get(Integer.valueOf(rowIndex));}
public DescribeClientPropertiesResult describeClientProperties(DescribeClientPropertiesRequest request) {request = beforeClientExecution(request);return executeDescribeClientProperties(request);}
public Builder(CompositeReader reader) {this.reader = reader;}
public synchronized void mark(int readlimit) {in.mark(readlimit);}
public void print(int inum) {print(String.valueOf(inum));}
public static final ObjectId fromRaw(int[] is) {return fromRaw(is, 0);}
public String toString() {return slice.toString()+":"+ postingsEnum;}
public void serialize(LittleEndianOutput out) {out.writeShort(getMode());}
@Override public int size() {return Impl.this.size();}
public static int hashCode(Object... objects) {return Arrays.hashCode(objects);}
public ByteBuffer putFloat(int index, float value) {throw new ReadOnlyBufferException();}
public ListJournalS3ExportsForLedgerResult listJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request) {request = beforeClientExecution(request);return executeListJournalS3ExportsForLedger(request);}
public DeleteMessageBatchResult deleteMessageBatch(DeleteMessageBatchRequest request) {request = beforeClientExecution(request);return executeDeleteMessageBatch(request);}
public final void write(LittleEndianOutput out) {out.writeByte(getSid() + getPtgClass());writeCoordinates(out);}
public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {if (buckets < 1 || buckets > 255) {throw new IllegalArgumentException("Buckets must be >= 1 and <= 255: "+ buckets);}if (sorter == null) throw new IllegalArgumentException("BytesRefSorter must not be null.");this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}
public void incRef() {refCount.incrementAndGet();}
public boolean supports(CredentialItem... items) {for (CredentialItem i : items) {if (i instanceof CredentialItem.Username)continue;else if (i instanceof CredentialItem.Password)continue;elsereturn false;}return true;}
public DeleteVpnConnectionRequest(String vpnConnectionId) {setVpnConnectionId(vpnConnectionId);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 4) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}
public void print(double d) {print(String.valueOf(d));}
public UpdateUserProfileResult updateUserProfile(UpdateUserProfileRequest request) {request = beforeClientExecution(request);return executeUpdateUserProfile(request);}
public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public GetFederationTokenRequest(String name) {setName(name);}
public static Cell translateUnicodeValues(Cell cell) {String s = cell.getRichStringCellValue().getString();boolean foundUnicode = false;String lowerCaseStr = s.toLowerCase(Locale.ROOT);for (UnicodeMapping entry : unicodeMappings) {String key = entry.entityName;if (lowerCaseStr.contains(key)) {s = s.replaceAll(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode) {cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(s));}return cell;}
public CreateChangeSetResult createChangeSet(CreateChangeSetRequest request) {request = beforeClientExecution(request);return executeCreateChangeSet(request);}
public SubmoduleStatusCommand(Repository repo) {super(repo);paths = new ArrayList<>();}
public int getResultStart() {return outRegion.resultStart;}
public static BigInteger round(BigInteger bi, int nBits) {if (nBits < 1) {return bi;}return bi.add(HALF_BITS[nBits]);}
public static Date round(Date date, Resolution resolution) {return new Date(round(date.getTime(), resolution));}
public static int compareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex) {if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.length) ? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.length && li < longArray.length&& shortArray[si] == longArray[li]) {si++;li++;}if (si == shortArray.length) {return 0;} else {if (li == longArray.length)return 1;elsereturn (shortArray[si] > longArray[li]) ? 1 : -1;}}
public AttachInternetGatewayResult attachInternetGateway(AttachInternetGatewayRequest request) {request = beforeClientExecution(request);return executeAttachInternetGateway(request);}
public synchronized boolean containsValue(Object value) {if (value == null) {throw new NullPointerException();}HashtableEntry[] tab = table;int len = tab.length;for (int i = 0; i < len; i++) {for (HashtableEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return false;}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append( operands[0] );buffer.append("<=");buffer.append( operands[1] );return buffer.toString();}
public void write(String str) {write(str.toCharArray());}
public Sort(SortField... fields) {setSort(fields);}
public DescribeEventCategoriesResult describeEventCategories(DescribeEventCategoriesRequest request) {request = beforeClientExecution(request);return executeDescribeEventCategories(request);}
public UpdateDeviceResult updateDevice(UpdateDeviceRequest request) {request = beforeClientExecution(request);return executeUpdateDevice(request);}
public CreateWorkerBlockResult createWorkerBlock(CreateWorkerBlockRequest request) {request = beforeClientExecution(request);return executeCreateWorkerBlock(request);}
public synchronized void reset() throws IOException {throw new IOException();}
public final void setReader(Reader input) {if (input == null) {throw new NullPointerException("input must not be null");} else if (this.input != ILLEGAL_STATE_READER) {throw new IllegalStateException("TokenStream contract violation: close() call missing");}this.inputPending = input;setReaderTestPoint();}
public GetUsagePlanKeysResult getUsagePlanKeys(GetUsagePlanKeysRequest request) {request = beforeClientExecution(request);return executeGetUsagePlanKeys(request);}
public String toString(){StringBuilder sb = new StringBuilder();sb.append( "subInfos=(" );for( SubInfo si : subInfos )sb.append( si.toString() );sb.append( ")/" ).append( totalBoost ).append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );return sb.toString();}
public TokenStream create(TokenStream input) {return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}
public DescribeFleetUtilizationResult describeFleetUtilization(DescribeFleetUtilizationRequest request) {request = beforeClientExecution(request);return executeDescribeFleetUtilization(request);}
public void inform(ResourceLoader loader) throws IOException {InputStream stream = null;try {if (dictFile != null) dictionary = getWordSet(loader, dictFile, false);stream = loader.openResource(hypFile);final InputSource is = new InputSource(stream);is.setEncoding(encoding); is.setSystemId(hypFile);hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);} finally {IOUtils.closeWhileHandlingException(stream);}}
public DeclineInvitationsResult declineInvitations(DeclineInvitationsRequest request) {request = beforeClientExecution(request);return executeDeclineInvitations(request);}
public DescribeAutoScalingGroupsResult describeAutoScalingGroups() {return describeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}
public String toString() {return String.format("pushMode(%d)", mode);}
public CreateBranchCommand setStartPoint(String startPoint) {checkCallable();this.startPoint = startPoint;this.startCommit = null;return this;}
public DBInstance stopDBInstance(StopDBInstanceRequest request) {request = beforeClientExecution(request);return executeStopDBInstance(request);}
public SuggestWordQueue(int size, Comparator<SuggestWord> comparator){super(size);this.comparator = comparator;}
public LBCookieStickinessPolicy(String policyName, Long cookieExpirationPeriod) {setPolicyName(policyName);setCookieExpirationPeriod(cookieExpirationPeriod);}
public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators) {if (firstSheetIndex < 0) {throw new IllegalArgumentException("Invalid firstSheetIndex: " + firstSheetIndex + ".");}if (lastSheetIndex < firstSheetIndex) {throw new IllegalArgumentException("Invalid lastSheetIndex: " + lastSheetIndex + " for firstSheetIndex: " + firstSheetIndex + ".");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators.clone();}
public RevokeTokenRequest() {super("OnsMqtt", "2019-12-11", "RevokeToken", "onsmqtt");setMethod(MethodType.POST);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), true);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, true);} catch (EvaluationException e) {return e.getErrorEval();}}
public String toFormulaString() {return "";}
public byte readByte() throws IOException {if (bufferPos == bufferSize) {refill();}assert bufferPos == buffer.position() : "bufferPos=" + bufferPos + " vs buffer.position()=" + buffer.position();bufferPos++;return buffer.get();}
public ListTargetsByRuleResult listTargetsByRule(ListTargetsByRuleRequest request) {request = beforeClientExecution(request);return executeListTargetsByRule(request);}
public DisassociateQualificationFromWorkerResult disassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request) {request = beforeClientExecution(request);return executeDisassociateQualificationFromWorker(request);}
public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;CompiledAutomaton other = (CompiledAutomaton) obj;if (type != other.type) return false;if (type == AUTOMATON_TYPE.SINGLE) {if (!term.equals(other.term)) return false;} else if (type == AUTOMATON_TYPE.NORMAL) {if (!runAutomaton.equals(other.runAutomaton)) return false;}return true;}
public static CharFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}
public String toString() {String[] units = { "bytes", "KiB", "MiB", "GiB" };long sz = getIndexSize();int u = 0;while (1024 <= sz && u < units.length - 1) {int rem = (int) (sz % 1024);sz /= 1024;if (rem != 0)sz++;u++;}return "DeltaIndex[" + sz + " " + units[u] + "]";}
public SimilarityConfig build() {return new SimilarityConfig(this);}
public void mark(int readLimit) throws IOException {throw new IOException();}
public void collect(int doc) throws IOException {final long time = clock.get();if (time - timeout > 0L) {if (greedy) {in.collect(doc);}throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );}in.collect(doc);}
public LocalFile(File directory, int inCoreLimit) {super(inCoreLimit);this.directory = directory;}
@Override public E remove(int index) {Object[] a = array;int s = size;if (index >= s) {throwIndexOutOfBoundsException(index, s);}@SuppressWarnings("unchecked") E result = (E) a[index];System.arraycopy(a, index + 1, a, index, --s - index);a[s] = null;  size = s;modCount++;return result;}
public RequestUploadCredentialsResult requestUploadCredentials(RequestUploadCredentialsRequest request) {request = beforeClientExecution(request);return executeRequestUploadCredentials(request);}
public void copyTo(OutputStream out) throws MissingObjectException,IOException {if (isLarge()) {try (ObjectStream in = openStream()) {final long sz = in.getSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz) {int n = in.read(tmp);if (n < 0)throw new EOFException();out.write(tmp, 0, n);copied += n;}if (0 <= in.read())throw new EOFException();}} else {out.write(getCachedBytes());}}
@Override public V remove(Object key) {if (key == null) {return removeNullKey();}int hash = secondaryHash(key.hashCode());HashMapEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);for (HashMapEntry<K, V> e = tab[index], prev = null;e != null; prev = e, e = e.next) {if (e.hash == hash && key.equals(e.key)) {if (prev == null) {tab[index] = e.next;} else {prev.next = e.next;}modCount++;size--;postRemove(e);return e.value;}}return null;}
public RevFilter negate() {return a;}
public DescribeVpcsResult describeVpcs(DescribeVpcsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcs(request);}
public UpdateGameSessionQueueResult updateGameSessionQueue(UpdateGameSessionQueueRequest request) {request = beforeClientExecution(request);return executeUpdateGameSessionQueue(request);}
public String getTitle() {return title;}
public final void setNewHeads(List<Head> newHeads) {if (this.newHeads != null)throw new IllegalStateException(JGitText.get().propertyIsAlreadyNonNull);this.newHeads = newHeads;}
public ObjectId getExpectedOldObjectId() {return expectedOldObjectId;}
public GetRecordsResult getRecords(GetRecordsRequest request) {request = beforeClientExecution(request);return executeGetRecords(request);}
public Deleted3DPxg(int externalWorkbookNumber, String sheetName) {this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}
public void execute(Lexer lexer) {lexer.skip();}
public DescribeScheduledInstancesResult describeScheduledInstances(DescribeScheduledInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeScheduledInstances(request);}
public MultiFields(Fields[] subs, ReaderSlice[] subSlices) {this.subs = subs;this.subSlices = subSlices;}
public int peekNextSid() {if(!hasNext()) {return -1;}return _list.get(_nextIndex).getSid();}
public ConfigureAgentResult configureAgent(ConfigureAgentRequest request) {request = beforeClientExecution(request);return executeConfigureAgent(request);}
public GetStreamingDistributionResult getStreamingDistribution(GetStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistribution(request);}
public ListTrialComponentsResult listTrialComponents(ListTrialComponentsRequest request) {request = beforeClientExecution(request);return executeListTrialComponents(request);}
public ByteBuffer putShort(int index, short value) {throw new ReadOnlyBufferException();}
public int compareNormalised(NormalisedDecimal other) {int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp != 0) {return cmp;}if (_wholePart > other._wholePart) {return 1;}if (_wholePart < other._wholePart) {return -1;}return _fractionalPart - other._fractionalPart;}
public TokenStream create(TokenStream input) {return new JapaneseKatakanaStemFilter(input, minimumLength);}
public EnableAvailabilityZonesForLoadBalancerResult enableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request) {request = beforeClientExecution(request);return executeEnableAvailabilityZonesForLoadBalancer(request);}
public UpdateEnvironmentResult updateEnvironment(UpdateEnvironmentRequest request) {request = beforeClientExecution(request);return executeUpdateEnvironment(request);}
public ListTagsForDomainResult listTagsForDomain(ListTagsForDomainRequest request) {request = beforeClientExecution(request);return executeListTagsForDomain(request);}
public static double log(double base, double x) {return Math.log(x) / Math.log(base);}
public final void writeBoolean(boolean val) throws IOException {out.write(val ? 1 : 0);written++;}
public boolean equals(Object other) {if (!(other instanceof ByteBuffer)) {return false;}ByteBuffer otherBuffer = (ByteBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}
public DescribeVirtualGatewaysResult describeVirtualGateways() {return describeVirtualGateways(new DescribeVirtualGatewaysRequest());}
public FieldConfig getFieldConfig(String fieldName) {FieldConfig fieldConfig = new FieldConfig(StringUtils.toString(fieldName));for (FieldConfigListener listener : this.listeners) {listener.buildFieldConfig(fieldConfig);}return fieldConfig;}
public void setProperty(Row row, int column) {Cell cell = CellUtil.getCell(row, column);CellUtil.setCellStyleProperty(cell, _propertyName, _propertyValue);}
public RebootInstancesResult rebootInstances(RebootInstancesRequest request) {request = beforeClientExecution(request);return executeRebootInstances(request);}
public Predicate(int ruleIndex, int predIndex, boolean isCtxDependent) {this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}
public void fillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right  = findBiggest(xPoints);int bottom = findBiggest(yPoints);int left   = findSmallest(xPoints);int top    = findSmallest(yPoints);HSSFPolygon shape = escherGroup.createPolygon(new HSSFChildAnchor(left,top,right,bottom) );shape.setPolygonDrawArea(right - left, bottom - top);shape.setPoints(addToAll(xPoints, -left), addToAll(yPoints, -top));shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());}
public ListEventsRequest() {super("Status", "2020-01-17", "ListEvents", "StatusAPI");setMethod(MethodType.POST);}
public ListIAMPolicyAssignmentsResult listIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request) {request = beforeClientExecution(request);return executeListIAMPolicyAssignments(request);}
public CountingOutputStream(OutputStream out) {this.out = out;}
public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = BytesRef.deepCopyOf(target);seekPending = true;}}
public void seek(long pos) throws IOException {if (pos != getFilePointer()) {final long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos-bufferSize;final int delta = (int) (pos - alignedPos);if (delta != 0) {refill();buffer.position(delta);bufferPos = delta;} else {bufferPos = bufferSize;}}}
public void clear() {removeAllElements();}
public QueryCustomerByPhoneRequest() {super("xspace", "2017-07-20", "QueryCustomerByPhone");setUriPattern("/customerbyphone");setMethod(MethodType.POST);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return this.evaluate(srcRowIndex, srcColumnIndex, arg0, null);}
public ListDashboardVersionsResult listDashboardVersions(ListDashboardVersionsRequest request) {request = beforeClientExecution(request);return executeListDashboardVersions(request);}
public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public DeleteHostedZoneResult deleteHostedZone(DeleteHostedZoneRequest request) {request = beforeClientExecution(request);return executeDeleteHostedZone(request);}
public CreateReceiptRuleResult createReceiptRule(CreateReceiptRuleRequest request) {request = beforeClientExecution(request);return executeCreateReceiptRule(request);}
public Result rename() throws IOException {try {result = doRename();return result;} catch (IOException err) {result = Result.IO_FAILURE;throw err;}}
public DescribeDBInstancesResult describeDBInstances() {return describeDBInstances(new DescribeDBInstancesRequest());}
public String toString() {if (label != null) {return label + ":" + tag;}return tag;}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {return "[DELETEDCHILD]";}
public CreateAccountResult createAccount(CreateAccountRequest request) {request = beforeClientExecution(request);return executeCreateAccount(request);}
public Map.Entry<K,V> next() {HashEntry<K,V> e = super.nextEntry();return new WriteThroughEntry(e.key, e.value);}
public BaseRef(RefEval re) {_refEval = re;_areaEval = null;_firstRowIndex = re.getRow();_firstColumnIndex = re.getColumn();_height = 1;_width = 1;}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (block >>> shift) & 3;}}}
public void unrollRecursionContexts(ParserRuleContext _parentctx) {_precedenceStack.pop();_ctx.stop = _input.LT(-1);ParserRuleContext retctx = _ctx; if ( _parseListeners != null ) {while ( _ctx != _parentctx ) {triggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.parent;}}else {_ctx = _parentctx;}retctx.parent = _parentctx;if (_buildParseTrees && _parentctx != null) {_parentctx.addChild(retctx);}}
public CancelBundleTaskRequest(String bundleId) {setBundleId(bundleId);}
public void add(CharsRef input, CharsRef output, boolean includeOrig) {add(input, countWords(input), output, countWords(output), includeOrig);}
public SetIdentityDkimEnabledResult setIdentityDkimEnabled(SetIdentityDkimEnabledRequest request) {request = beforeClientExecution(request);return executeSetIdentityDkimEnabled(request);}
public GetResolverEndpointResult getResolverEndpoint(GetResolverEndpointRequest request) {request = beforeClientExecution(request);return executeGetResolverEndpoint(request);}
public void setText(String value) {string = value;start = offset = 0;end = value.length();}
public String toString() {return toString(0);}
public void adjustIndex(int offset) {_firstSheetIndex += offset;_lastSheetIndex += offset;}
public GalicianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ListRepositoryAssociationsResult listRepositoryAssociations(ListRepositoryAssociationsRequest request) {request = beforeClientExecution(request);return executeListRepositoryAssociations(request);}
public void setParams(String params) {super.setParams(params);maxNumSegments = (int)Double.parseDouble(params);}
public char getChar() {return (char) getShort();}
public void next(int delta) {if (delta == 1) {prevPtr = currPtr;currPtr = nextPtr;if (!eof())parseEntry();return;}final int end = raw.length;int ptr = nextPtr;while (--delta > 0 && ptr != end) {prevPtr = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (delta != 0)throw new ArrayIndexOutOfBoundsException(delta);currPtr = ptr;if (!eof())parseEntry();}
public Type getType() {return type;}
public CharBuffer duplicate() {return copy(this, mark);}
public NGramFilterFactory(Map<String, String> args) {super(args);minGramSize = requireInt(args, "minGramSize");maxGramSize = requireInt(args, "maxGramSize");preserveOriginal = getBoolean(args, "preserveOriginal", NGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public AddRoleToDBClusterResult addRoleToDBCluster(AddRoleToDBClusterRequest request) {request = beforeClientExecution(request);return executeAddRoleToDBCluster(request);}
public BlameGenerator setTextComparator(RawTextComparator comparator) {textComparator = comparator;return this;}
public  PatternCaptureGroupFilterFactory(Map<String,String> args) {super(args);pattern = getPattern(args, "pattern");preserveOriginal = args.containsKey("preserve_original") ? Boolean.parseBoolean(args.get("preserve_original")) : true;}
public CreateObjectResult createObject(CreateObjectRequest request) {request = beforeClientExecution(request);return executeCreateObject(request);}
@Override public String getActions() { return null; }
public void onChanged() {if (mAdapter != null) {post(new Runnable() {@Override
public CreateResourceGroupResult createResourceGroup(CreateResourceGroupRequest request) {request = beforeClientExecution(request);return executeCreateResourceGroup(request);}
public static RevFilter has(RevFlag a) {final RevFlagSet s = new RevFlagSet();s.add(a);return new HasAll(s);}
@Override public int size() {return totalSize;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_index_extern_sheet);out.writeInt(unused1);}
public String toString() {return this.getClass().getSimpleName() + "@" + directory + " lockFactory=" + lockFactory;}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}
public CancelDataRepositoryTaskResult cancelDataRepositoryTask(CancelDataRepositoryTaskRequest request) {request = beforeClientExecution(request);return executeCancelDataRepositoryTask(request);}
public DateFormatTokenizer(String format) {this.format = format;}
public static int getBiasedExponent(long rawBits) {return Math.toIntExact((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}
public String toString() {return "IB " + distribution.toString() + "-" + lambda.toString()+ normalization.toString();}
public String getName() {return name;}
public boolean inContext(String context) {return false;}
public String toString() {String desc;File directory = getDirectory();if (directory != null)desc = directory.getPath();elsedesc = getClass().getSimpleName() + "-" + System.identityHashCode(this);return "Repository[" + desc + "]"; }
public int serialize(int offset, byte [] data) {LittleEndian.putInt(data, offset+0, field_13_border_styles1);LittleEndian.putInt(data, offset+4, field_14_border_styles2);return 8;}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}
public PipedWriter(PipedReader destination) throws IOException {super(destination);connect(destination);}
public String dequote(byte[] in, int ip, int ie) {boolean inquote = false;final byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie) {final byte b = in[ip++];switch (b) {case '\'':inquote = !inquote;continue;case '\\':if (inquote || ip == ie)r[rPtr++] = b; elser[rPtr++] = in[ip++];continue;default:r[rPtr++] = b;continue;}}return RawParseUtils.decode(UTF_8, r, 0, rPtr);}
public Status getStatus() {return myStatus;}
public DeltaRecord(RecordInputStream in) {field_1_max_change = in.readDouble();}
public void serialize(LittleEndianOutput out) {out.writeShort(getCount());}
public ListPartsRequest(String vaultName, String uploadId) {setVaultName(vaultName);setUploadId(uploadId);}
public void set(int index, long value) {final int o = index >>> 2;final int b = index & 3;final int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}
public void setRunInBackground(int deltaPri) {runInBackground = true;this.deltaPri = deltaPri;}
public TeeInputStream(InputStream src, OutputStream dst) {this.src = src;this.dst = dst;}
public void addChild(final Property property)throws IOException{String name = property.getName();if (_children_names.contains(name)){throw new IOException("Duplicate name \"" + name + "\"");}_children_names.add(name);_children.add(property);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {int result;if (arg0 instanceof TwoDEval) {result = ((TwoDEval) arg0).getWidth();} else if (arg0 instanceof RefEval) {result = 1;} else { return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}
public ListModelsResult listModels(ListModelsRequest request) {request = beforeClientExecution(request);return executeListModels(request);}
public ExtensionQuery(QueryParser topLevelParser, String field, String rawQueryString) {this.field = field;this.rawQueryString = rawQueryString;this.topLevelParser = topLevelParser;}
public String toString() {return resourceDescription;}
public GetDeploymentInstanceResult getDeploymentInstance(GetDeploymentInstanceRequest request) {request = beforeClientExecution(request);return executeGetDeploymentInstance(request);}
public MappingCharFilterFactory(Map<String,String> args) {super(args);mapping = get(args, "mapping");if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean promptPassphrase(String msg) {CredentialItem.StringType v = newPrompt(msg);if (provider.get(uri, v)) {passphrase = v.getValue();return true;}passphrase = null;return false;}
public DescribeReservedDBInstancesResult describeReservedDBInstances() {return describeReservedDBInstances(new DescribeReservedDBInstancesRequest());}
public UnsubscribeFromDatasetResult unsubscribeFromDataset(UnsubscribeFromDatasetRequest request) {request = beforeClientExecution(request);return executeUnsubscribeFromDataset(request);}
public int available() throws IOException {if (buf == null) {throw new IOException();}return buf.length - pos + in.available();}
@Override public V remove(Object key) {return isInBounds(key) ? TreeMap.this.remove(key) : null;}
public void insertSST() {LOG.log(DEBUG, "creating new SST via insertSST!");sst = new SSTRecord();records.add(records.size() - 1, createExtendedSST());records.add(records.size() - 2, sst);}
public AddApplicationCloudWatchLoggingOptionResult addApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request) {request = beforeClientExecution(request);return executeAddApplicationCloudWatchLoggingOption(request);}
public ListCampaignsResult listCampaigns(ListCampaignsRequest request) {request = beforeClientExecution(request);return executeListCampaigns(request);}
public void execute(Lexer lexer) {lexer.more();}
public SetFaceCoverRequest() {super("CloudPhoto", "2017-07-11", "SetFaceCover", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public GetInstanceAccessResult getInstanceAccess(GetInstanceAccessRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccess(request);}
public void clear() {value = null;}
public GetFederationTokenResult getFederationToken(GetFederationTokenRequest request) {request = beforeClientExecution(request);return executeGetFederationToken(request);}
public int first() {currentSentence = 0;text.setIndex(text.getBeginIndex());return current();}
public QueryPhraseMap getFieldTermMap( String fieldName, String term ){QueryPhraseMap rootMap = getRootMap( fieldName );return rootMap == null ? null : rootMap.subMap.get( term );}
@Override public boolean contains(Object object) {if (object instanceof Multiset.Entry) {Multiset.Entry<?> entry = (Multiset.Entry<?>) object;Object element = entry.getElement();int entryCount = entry.getCount();return entryCount > 0 && count(element) == entryCount;}return false;}
public DeleteLexiconResult deleteLexicon(DeleteLexiconRequest request) {request = beforeClientExecution(request);return executeDeleteLexicon(request);}
public DomainMetadataResult domainMetadata(DomainMetadataRequest request) {request = beforeClientExecution(request);return executeDomainMetadata(request);}
public RevFlag getReinterestingFlag() {return REINTERESTING;}
public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException {final int code = posix_fadvise(fd, offset, len, advise);if (code != 0) {throw new RuntimeException("posix_fadvise failed code=" + code);}}
public DeleteSchemaResult deleteSchema(DeleteSchemaRequest request) {request = beforeClientExecution(request);return executeDeleteSchema(request);}
public CreateBatchInferenceJobResult createBatchInferenceJob(CreateBatchInferenceJobRequest request) {request = beforeClientExecution(request);return executeCreateBatchInferenceJob(request);}
public BitField(final int mask){_mask = mask;int count       = 0;int bit_pattern = mask;if (bit_pattern != 0){while ((bit_pattern & 1) == 0){count++;bit_pattern >>= 1;}}_shift_count = count;}
public boolean failed() {return !failingPaths.isEmpty();}
public String toString() {StringBuilder b = new StringBuilder();for(int i=0;i<len;i++) {if (i > 0) {b.append(' ');}b.append(Integer.toBinaryString(bytes[i].value));}return b.toString();}
public final void remove() {if (modCount != expectedModCount)throw new ConcurrentModificationException();if (lastReturned == null)throw new IllegalStateException();LinkedHashMap.this.remove(lastReturned.key);lastReturned = null;expectedModCount = modCount;}
public boolean shouldBeRecursive() {return path.shouldBeRecursive() || ANY_DIFF.shouldBeRecursive();}
public DeleteQueueRequest(String queueUrl) {setQueueUrl(queueUrl);}
public ExternalName getExternalName(int externSheetIndex, int externNameIndex) {String nameName = linkTable.resolveNameXText(externSheetIndex, externNameIndex, this);if(nameName == null) {return null;}int ix = linkTable.resolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}
public RegisterUserResult registerUser(RegisterUserRequest request) {request = beforeClientExecution(request);return executeRegisterUser(request);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return fixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}
public final byte[] array() {return protectedArray();}
public int readUByte() {byte[] buf = new byte[1];try {checkEOF(read(buf), 1);} catch (IOException e) {throw new RuntimeException(e);}return LittleEndian.getUByte(buf);}
public static AttrPtg createSkip(int dist) {return new AttrPtg(optiSkip.set(0), dist, null, -1);}
public DescribeUserHierarchyGroupResult describeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request) {request = beforeClientExecution(request);return executeDescribeUserHierarchyGroup(request);}
public User(String path, String userName, String userId, String arn, java.util.Date createDate) {setPath(path);setUserName(userName);setUserId(userId);setArn(arn);setCreateDate(createDate);}
public OpenNLPLemmatizerFilter create(TokenStream in) {try {NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.getLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(in, lemmatizerOp);} catch (IOException e) {throw new RuntimeException(e);}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}
public RebootInstanceRequest() {super("HPC", "2016-06-03", "RebootInstance", "hpc");setMethod(MethodType.POST);}
public ListContainerInstancesResult listContainerInstances(ListContainerInstancesRequest request) {request = beforeClientExecution(request);return executeListContainerInstances(request);}
public ListClustersResult listClusters(ListClustersRequest request) {request = beforeClientExecution(request);return executeListClusters(request);}
public static boolean equals(boolean[] array1, boolean[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 5;values[valuesOffset++] = (byte0 >>> 2) & 7;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);values[valuesOffset++] = (byte1 >>> 4) & 7;values[valuesOffset++] = (byte1 >>> 1) & 7;final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 >>> 3) & 7;values[valuesOffset++] = byte2 & 7;}}
public GetRelationalDatabaseSnapshotResult getRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseSnapshot(request);}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos = offset + 8;field_1_blipTypeWin32 = data[pos];field_2_blipTypeMacOS = data[pos + 1];System.arraycopy( data, pos + 2, field_3_uid, 0, 16 );field_4_tag = LittleEndian.getShort( data, pos + 18 );field_5_size = LittleEndian.getInt( data, pos + 20 );field_6_ref = LittleEndian.getInt( data, pos + 24 );field_7_offset = LittleEndian.getInt( data, pos + 28 );field_8_usage = data[pos + 32];field_9_name = data[pos + 33];field_10_unused2 = data[pos + 34];field_11_unused3 = data[pos + 35];bytesRemaining -= 36;int bytesRead = 0;if (bytesRemaining > 0) {field_12_blipRecord = (EscherBlipRecord) recordFactory.createRecord( data, pos + 36 );bytesRead = field_12_blipRecord.fillFields( data, pos + 36, recordFactory );}pos += 36 + bytesRead;bytesRemaining -= bytesRead;_remainingData = IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, pos, _remainingData, 0, bytesRemaining );return bytesRemaining + 8 + 36 + (field_12_blipRecord == null ? 0 : field_12_blipRecord.getRecordSize()) ;}
@Override public int size() {return size;}
public PhoneNumberValidateResult phoneNumberValidate(PhoneNumberValidateRequest request) {request = beforeClientExecution(request);return executePhoneNumberValidate(request);}
public CreateTransformJobResult createTransformJob(CreateTransformJobRequest request) {request = beforeClientExecution(request);return executeCreateTransformJob(request);}
public synchronized int search(Object o) {final Object[] dumpArray = elementData;final int size = elementCount;if (o != null) {for (int i = size - 1; i >= 0; i--) {if (o.equals(dumpArray[i])) {return size - i;}}} else {for (int i = size - 1; i >= 0; i--) {if (dumpArray[i] == null) {return size - i;}}}return -1;}
public DescribeCacheParametersRequest(String cacheParameterGroupName) {setCacheParameterGroupName(cacheParameterGroupName);}
public void clear() {synchronized (mutex) {delegate().clear();}}
public boolean hasRevSort(RevSort sort) {return sorting.contains(sort);}
public StashListCommand stashList() {return new StashListCommand(repo);}
public PutGroupPolicyRequest(String groupName, String policyName, String policyDocument) {setGroupName(groupName);setPolicyName(policyName);setPolicyDocument(policyDocument);}
public String toString() {return super.get() + "=" + value;}
public void writeByte(int v) {checkPosition(1);_buf[_writeIndex++] = (byte)v;}
public CountryRecord(RecordInputStream in) {field_1_default_country = in.readShort();field_2_current_country = in.readShort();}
public UpdateContainerAgentResult updateContainerAgent(UpdateContainerAgentRequest request) {request = beforeClientExecution(request);return executeUpdateContainerAgent(request);}
public DescribeNodeConfigurationOptionsResult describeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeNodeConfigurationOptions(request);}
public AddImageRequest() {super("ImageSearch", "2019-03-25", "AddImage", "imagesearch");setUriPattern("/v2/image/add");setMethod(MethodType.POST);}
public BorderFormatting() {field_13_border_styles1    = 0;field_14_border_styles2    = 0;}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[0]);buffer.append(" ");buffer.append(operands[1]);return buffer.toString();}
public ListTagsForStreamResult listTagsForStream(ListTagsForStreamRequest request) {request = beforeClientExecution(request);return executeListTagsForStream(request);}
public HSSFName createName(){NameRecord nameRecord = workbook.createName();HSSFName newName = new HSSFName(this, nameRecord);names.add(newName);return newName;}
public CreateLogPatternResult createLogPattern(CreateLogPatternRequest request) {request = beforeClientExecution(request);return executeCreateLogPattern(request);}
public GetTransitGatewayRouteTablePropagationsResult getTransitGatewayRouteTablePropagations(GetTransitGatewayRouteTablePropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayRouteTablePropagations(request);}
public void setup() throws Exception {super.setup();String inputDirProp = getRunData().getConfig().get(ADDINDEXES_INPUT_DIR, null);if (inputDirProp == null) {throw new IllegalArgumentException("config parameter " + ADDINDEXES_INPUT_DIR + " not specified in configuration");}inputDir = FSDirectory.open(Paths.get(inputDirProp));}
public StashDropCommand setAll(boolean all) {this.all = all;return this;}
public ListTrainingJobsForHyperParameterTuningJobResult listTrainingJobsForHyperParameterTuningJob(ListTrainingJobsForHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeListTrainingJobsForHyperParameterTuningJob(request);}
public String toString() {return String.format("Match %s; found %d labels",succeeded() ? "succeeded" : "failed",getLabels().size());}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double result;try {double d = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = evaluate(d);checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public CacheSecurityGroup authorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeCacheSecurityGroupIngress(request);}
public String getInflectionType() {return dictionary.getInflectionType(wordId);}
@Override public boolean remove(Object o) {return contains(o) &&(removeValuesForKey(((Multiset.Entry<?>) o).getElement()) > 0);}
public RevCommit next() {RevCommit r = next;next = nextForIterator();return r;}
public BatchAssociateUserStackResult batchAssociateUserStack(BatchAssociateUserStackRequest request) {request = beforeClientExecution(request);return executeBatchAssociateUserStack(request);}
public ScenarioProtectRecord clone() {return copy();}
public final Class getBundleClass() {return bundleClass;}
public void nextBuffer() {if (1+bufferUpto == buffers.length) {int[][] newBuffers = new int[(int) (buffers.length*1.5)][];System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);buffers = newBuffers;}buffer = buffers[1+bufferUpto] = allocator.getIntBlock();bufferUpto++;intUpto = 0;intOffset += INT_BLOCK_SIZE;}
public DeleteVpnGatewayRequest(String vpnGatewayId) {setVpnGatewayId(vpnGatewayId);}
public static Encoder getEncoder(Format format, int version, int bitsPerValue) {checkVersion(version);return BulkOperation.of(format, bitsPerValue);}
public ClassificationResult(T assignedClass, double score) {this.assignedClass = assignedClass;this.score = score;}
public CreateRelationalDatabaseSnapshotResult createRelationalDatabaseSnapshot(CreateRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseSnapshot(request);}
public NameRecord addName(NameRecord name) {getOrCreateLinkTable().addName(name);return name;}
public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeByte(getFirstColumn());out.writeByte(getLastColumn());}
public String getKey() {return key;}
public GetBlockPublicAccessConfigurationResult getBlockPublicAccessConfiguration(GetBlockPublicAccessConfigurationRequest request) {request = beforeClientExecution(request);return executeGetBlockPublicAccessConfiguration(request);}
public static long getResultSize(byte[] delta) {int p = 0;int c;do {c = delta[p++] & 0xff;} while ((c & 0x80) != 0);long resLen = 0;int shift = 0;do {c = delta[p++] & 0xff;resLen |= ((long) (c & 0x7f)) << shift;shift += 7;} while ((c & 0x80) != 0);return resLen;}
public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + Integer.BYTES);}
public NoteRecord() {field_6_author = "";field_3_flags = 0;field_7_padding = DEFAULT_PADDING; }
public CellReference[] getAllReferencedCells() {if(_isSingleCell) {return  new CellReference[] { _firstCell, };}int minRow = Math.min(_firstCell.getRow(), _lastCell.getRow());int maxRow = Math.max(_firstCell.getRow(), _lastCell.getRow());int minCol = Math.min(_firstCell.getCol(), _lastCell.getCol());int maxCol = Math.max(_firstCell.getCol(), _lastCell.getCol());String sheetName = _firstCell.getSheetName();List<CellReference> refs = new ArrayList<>();for(int row=minRow; row<=maxRow; row++) {for(int col=minCol; col<=maxCol; col++) {CellReference ref = new CellReference(sheetName, row, col, _firstCell.isRowAbsolute(), _firstCell.isColAbsolute());refs.add(ref);}}return refs.toArray(new CellReference[0]);}
public String[] listAll() {ensureOpen();String[] res = entries.keySet().toArray(new String[entries.size()]);for (int i = 0; i < res.length; i++) {res[i] = segmentName + res[i];}return res;}
public UpdateDataRetentionResult updateDataRetention(UpdateDataRetentionRequest request) {request = beforeClientExecution(request);return executeUpdateDataRetention(request);}
public CreateDistributionRequest(DistributionConfig distributionConfig) {setDistributionConfig(distributionConfig);}
public DescribeBatchPredictionsResult describeBatchPredictions(DescribeBatchPredictionsRequest request) {request = beforeClientExecution(request);return executeDescribeBatchPredictions(request);}
public float getScore(int index) {return scores[index];}
public BatchUpdatePhoneNumberResult batchUpdatePhoneNumber(BatchUpdatePhoneNumberRequest request) {request = beforeClientExecution(request);return executeBatchUpdatePhoneNumber(request);}
public LMSimilarity(CollectionModel collectionModel) {this.collectionModel = collectionModel;}
public GetGlobalSettingsResult getGlobalSettings(GetGlobalSettingsRequest request) {request = beforeClientExecution(request);return executeGetGlobalSettings(request);}
public CreateHITTypeResult createHITType(CreateHITTypeRequest request) {request = beforeClientExecution(request);return executeCreateHITType(request);}
public MLTConfig build() {return new MLTConfig(this);}
public CharsRef(String string) {this.chars = string.toCharArray();this.offset = 0;this.length = chars.length;}
public ListFargateProfilesResult listFargateProfiles(ListFargateProfilesRequest request) {request = beforeClientExecution(request);return executeListFargateProfiles(request);}
public Entry<K, V> floorEntry(K key) {return immutableCopy(findBounded(key, FLOOR));}
public boolean equals( Object o ) {return o instanceof NorwegianStemmer;}
public DeleteVaultNotificationsResult deleteVaultNotifications(DeleteVaultNotificationsRequest request) {request = beforeClientExecution(request);return executeDeleteVaultNotifications(request);}
public static boolean endsWith(char s[], int len, String suffix) {final int suffixLen = suffix.length();if (suffixLen > len)return false;for (int i = suffixLen - 1; i >= 0; i--)if (s[len -(suffixLen - i)] != suffix.charAt(i))return false;return true;}
public synchronized void setRequireDimCount(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.requireDimCount = v;}
public HSSFName getName(String name) {int nameIndex = getNameIndex(name);if (nameIndex < 0) {return null;}return names.get(nameIndex);}
public ScriptBootstrapActionConfig(String path, java.util.List<String> args) {setPath(path);setArgs(args);}
public RegisterApplicationRevisionResult registerApplicationRevision(RegisterApplicationRevisionRequest request) {request = beforeClientExecution(request);return executeRegisterApplicationRevision(request);}
public SendTestEventNotificationResult sendTestEventNotification(SendTestEventNotificationRequest request) {request = beforeClientExecution(request);return executeSendTestEventNotification(request);}
public void setRefLogIdent(PersonIdent pi) {refLogIdent = pi;}
public GetDomainDeliverabilityCampaignResult getDomainDeliverabilityCampaign(GetDomainDeliverabilityCampaignRequest request) {request = beforeClientExecution(request);return executeGetDomainDeliverabilityCampaign(request);}
public String toFormulaString() {StringBuilder b = new StringBuilder();b.append("{");for (int y = 0; y < _nRows; y++) {if (y > 0) {b.append(";");}for (int x = 0; x < _nColumns; x++) {if (x > 0) {b.append(",");}Object o = _arrayValues[getValueIndex(x, y)];b.append(getConstantText(o));}}b.append("}");return b.toString();}
public ShingleFilterFactory(Map<String, String> args) {super(args);maxShingleSize = getInt(args, "maxShingleSize", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);if (maxShingleSize < 2) {throw new IllegalArgumentException("Invalid maxShingleSize (" + maxShingleSize + ") - must be at least 2");}minShingleSize = getInt(args, "minShingleSize", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);if (minShingleSize < 2) {throw new IllegalArgumentException("Invalid minShingleSize (" + minShingleSize + ") - must be at least 2");}if (minShingleSize > maxShingleSize) {throw new IllegalArgumentException("Invalid minShingleSize (" + minShingleSize + ") - must be no greater than maxShingleSize (" + maxShingleSize + ")");}outputUnigrams = getBoolean(args, "outputUnigrams", true);outputUnigramsIfNoShingles = getBoolean(args, "outputUnigramsIfNoShingles", false);tokenSeparator = get(args, "tokenSeparator", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);fillerToken = get(args, "fillerToken", ShingleFilter.DEFAULT_FILLER_TOKEN);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public UpdateRelationalDatabaseParametersResult updateRelationalDatabaseParameters(UpdateRelationalDatabaseParametersRequest request) {request = beforeClientExecution(request);return executeUpdateRelationalDatabaseParameters(request);}
public static Collection<ParseTree> findAllRuleNodes(ParseTree t, int ruleIndex) {return findAllNodes(t, ruleIndex, false);}
public int getObjectCount() {return entryCount;}
public ActionTransition(ATNState target, int ruleIndex, int actionIndex, boolean isCtxDependent) {super(target);this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;this.isCtxDependent = isCtxDependent;}
public long get(int index) {final int blockOffset = index / valuesPerBlock;final long skip = ((long) blockOffset) << 3;try {in.seek(startPointer + skip);long block = in.readLong();final int offsetInBlock = index % valuesPerBlock;return (block >>> (offsetInBlock * bitsPerValue)) & mask;} catch (IOException e) {throw new IllegalStateException("failed", e);}}
public String getSignerType() {return "BEARERTOKEN";}
public PipedOutputStream(PipedInputStream target) throws IOException {connect(target);}
public DeleteLedgerResult deleteLedger(DeleteLedgerRequest request) {request = beforeClientExecution(request);return executeDeleteLedger(request);}
public GetCognitoEventsResult getCognitoEvents(GetCognitoEventsRequest request) {request = beforeClientExecution(request);return executeGetCognitoEvents(request);}
public NameXPtg getNameXPtg(String name, SheetIdentifier sheet) {int sheetRefIndex = getSheetExtIx(sheet);return _iBook.getNameXPtg(name, sheetRefIndex, _uBook.getUDFFinder());}
public ListResolverEndpointsResult listResolverEndpoints(ListResolverEndpointsRequest request) {request = beforeClientExecution(request);return executeListResolverEndpoints(request);}
public String readLine() {try {return reader.readLine();} catch (IOException e) {throw new IOError(e);}}
public int hash2(char carray[]) {int hash = 5381;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}
public static long toBookSheetColumn(int bookIndex, int sheetIndex, int columnIndex) {return ((bookIndex   & 0xFFFFL) << 48)  +((sheetIndex  & 0xFFFFL) << 32) +((columnIndex & 0xFFFFL) << 0);}
public CreateConfigurationProfileResult createConfigurationProfile(CreateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationProfile(request);}
public ReplicationGroup startMigration(StartMigrationRequest request) {request = beforeClientExecution(request);return executeStartMigration(request);}
public OffsetLimitTokenFilter(TokenStream input, int offsetLimit) {super(input);this.offsetLimit = offsetLimit;}
public final void write(byte[] b, int off, int len)throws IOException {while (0 < len) {final int n = Math.min(len, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK);count += n;if (checkCancelAt <= count) {if (writeMonitor.isCancelled()) {throw new IOException(JGitText.get().packingCancelledDuringObjectsWriting);}checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK;}out.write(b, off, n);md.update(b, off, n);off += n;len -= n;}}
public Cell merge(Cell m, Cell e) {Cell n = new Cell();if (m.skip != e.skip) {return null;}if (m.cmd >= 0) {if (e.cmd >= 0) {if (m.cmd == e.cmd) {n.cmd = m.cmd;} else {return null;}} else {n.cmd = m.cmd;}} else {n.cmd = e.cmd;}if (m.ref >= 0) {if (e.ref >= 0) {if (m.ref == e.ref) {if (m.skip == e.skip) {n.ref = m.ref;} else {return null;}} else {return null;}} else {n.ref = m.ref;}} else {n.ref = e.ref;}n.cnt = m.cnt + e.cnt;n.skip = m.skip;return n;}
public GetCampaignActivitiesResult getCampaignActivities(GetCampaignActivitiesRequest request) {request = beforeClientExecution(request);return executeGetCampaignActivities(request);}
public long estimateBytesUsed() {return bytesUsed;}
public FunctionNameEval(String functionName) {_functionName = functionName;}
public final float averageBytesPerChar() {return averageBytesPerChar;}
public CreateCacheSecurityGroupRequest(String cacheSecurityGroupName, String description) {setCacheSecurityGroupName(cacheSecurityGroupName);setDescription(description);}
public void removeAt(int index) {System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));mSize--;}
public DescribeIndexFieldsResult describeIndexFields(DescribeIndexFieldsRequest request) {request = beforeClientExecution(request);return executeDescribeIndexFields(request);}
public void remove(int key) {delete(key);}
public ShortBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());ShortToByteBufferAdapter buf = new ShortToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public void addDbcell(int cell){if (field_5_dbcells == null){field_5_dbcells = new IntList();}field_5_dbcells.add(cell);}
public DeleteSubnetResult deleteSubnet(DeleteSubnetRequest request) {request = beforeClientExecution(request);return executeDeleteSubnet(request);}
public List<HSSFPictureData> getAllPictures(){List<HSSFPictureData> pictures = new ArrayList<>();for (org.apache.poi.hssf.record.Record r : workbook.getRecords()) {if (r instanceof AbstractEscherHolderRecord) {((AbstractEscherHolderRecord) r).decode();List<EscherRecord> escherRecords = ((AbstractEscherHolderRecord) r).getEscherRecords();searchForPictures(escherRecords, pictures);}}return Collections.unmodifiableList(pictures);}
public DescribeWorkspacesConnectionStatusResult describeWorkspacesConnectionStatus(DescribeWorkspacesConnectionStatusRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspacesConnectionStatus(request);}
public String toString() {return "MultiDocsAndPositionsEnum(" + Arrays.toString(getSubs()) + ")";}
public InvokeServiceAsyncRequest() {super("industry-brain", "2018-07-12", "InvokeServiceAsync");setMethod(MethodType.POST);}
public AuthorizeSecurityGroupIngressRequest(String groupName, java.util.List<IpPermission> ipPermissions) {setGroupName(groupName);setIpPermissions(ipPermissions);}
public static byte[] readData(InputStream stream, String section ) throws IOException {try {StringBuilder sectionText = new StringBuilder();boolean inSection = false;int c = stream.read();while ( c != -1 ) {switch ( c ) {case '[':inSection = true;break;case '\n':case '\r':inSection = false;sectionText = new StringBuilder();break;case ']':inSection = false;if ( sectionText.toString().equals( section ) ) return readData( stream, '[' );sectionText = new StringBuilder();break;default:if ( inSection ) sectionText.append( (char) c );}c = stream.read();}} finally {stream.close();}throw new IOException( "Section '" + section + "' not found" );}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {int number;try {number = OperandResolver.coerceValueToInt(numberVE);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}if (number < 0) {return ErrorEval.NUM_ERROR;}return new NumberEval(factorial(number).longValue());}
public final LexerActionExecutor getLexerActionExecutor() {return lexerActionExecutor;}
public EnableUserResult enableUser(EnableUserRequest request) {request = beforeClientExecution(request);return executeEnableUser(request);}
public void fillSlice(BytesRef b, long start, int length) {assert length >= 0: "length=" + length;assert length <= blockSize+1: "length=" + length;b.length = length;if (length == 0) {return;}final int index = (int) (start >> blockBits);final int offset = (int) (start & blockMask);if (blockSize - offset >= length) {b.bytes = blocks[index];b.offset = offset;} else {b.bytes = new byte[length];b.offset = 0;System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));}}
public DescribeJournalS3ExportResult describeJournalS3Export(DescribeJournalS3ExportRequest request) {request = beforeClientExecution(request);return executeDescribeJournalS3Export(request);}
public void setCoordinates(int x1, int y1, int x2, int y2) {_spgrRecord.setRectY1(y1);_spgrRecord.setRectY2(y2);_spgrRecord.setRectX1(x1);_spgrRecord.setRectX2(x2);}
public DescribeTagsResult describeTags(DescribeTagsRequest request) {request = beforeClientExecution(request);return executeDescribeTags(request);}
public int doLogic() {return 1;}
public DeleteCustomerGatewayResult deleteCustomerGateway(DeleteCustomerGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteCustomerGateway(request);}
public static Map newContext(IndexSearcher searcher) {Map context = new IdentityHashMap();context.put("searcher", searcher);return context;}
public NameRecord getSpecificBuiltinRecord(byte builtInCode, int sheetNumber) {Iterator<NameRecord> iterator = _definedNames.iterator();while (iterator.hasNext()) {NameRecord record = iterator.next();if (record.getBuiltInName() == builtInCode && record.getSheetNumber() == sheetNumber) {return record;}}return null;}
public final double readDouble() throws IOException {return Double.longBitsToDouble(readLong());}
public void write(byte[] buffer, int offset, int count) throws IOException {super.write(buffer, offset, count);}
public TokenStream create(TokenStream input) {return new PersianNormalizationFilter(input);}
public SpanishLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SmallDocSet(int size) {intSet = new SentinelIntSet(size, -1);}
public RawCharSequence(byte[] buf, int start, int end) {buffer = buf;startPtr = start;endPtr = end;}
public GetCustomVerificationEmailTemplateResult getCustomVerificationEmailTemplate(GetCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeGetCustomVerificationEmailTemplate(request);}
public SendMessageBatchRequest(String queueUrl, java.util.List<SendMessageBatchRequestEntry> entries) {setQueueUrl(queueUrl);setEntries(entries);}
public void writeInt(int v) {writeContinueIfRequired(4);_ulrOutput.writeInt(v);}
public DescribeDataSourcesResult describeDataSources(DescribeDataSourcesRequest request) {request = beforeClientExecution(request);return executeDescribeDataSources(request);}
public ListRoomsResult listRooms(ListRoomsRequest request) {request = beforeClientExecution(request);return executeListRooms(request);}
public char getConversion() {return c;}
public boolean equals(Object _other) {FieldAndTerm other = (FieldAndTerm) _other;return other.field.equals(field) && term.bytesEquals(other.term);}
public CreateConfigurationSetEventDestinationResult createConfigurationSetEventDestination(CreateConfigurationSetEventDestinationRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSetEventDestination(request);}
public Ole10Native(String label, String filename, String command, byte[] data) {setLabel(label);setFileName(filename);setCommand(command);setDataBuffer(data);mode = EncodingMode.parsed;}
public String toString() {StringBuilder sb = new StringBuilder();if (fetchResult != null)sb.append(fetchResult.toString());elsesb.append("No fetch result");sb.append("\n");if (mergeResult != null)sb.append(mergeResult.toString());else if (rebaseResult != null)sb.append(rebaseResult.toString());elsesb.append("No update result");return sb.toString();}
public static Cell createCell(Row row, int column, String value) {return createCell(row, column, value, null);}
public TokenStream create(TokenStream input) {return new HindiNormalizationFilter(input);}
public DescribeAddressesResult describeAddresses() {return describeAddresses(new DescribeAddressesRequest());}
public SimpleQQParser(String qqName, String indexField) {this(new String[] { qqName }, indexField);}
public void dispatch(RefsChangedListener listener) {listener.onRefsChanged(this);}
public SnowballFilter(TokenStream in, String name) {super(in);try {Class<? extends SnowballStemmer> stemClass =Class.forName("org.tartarus.snowball.ext." + name + "Stemmer").asSubclass(SnowballStemmer.class);stemmer = stemClass.getConstructor().newInstance();} catch (Exception e) {
public UpgradeAppliedSchemaResult upgradeAppliedSchema(UpgradeAppliedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradeAppliedSchema(request);}
public String getParent() {int length = path.length(), firstInPath = 0;if (separatorChar == '\\' && length > 2 && path.charAt(1) == ':') {firstInPath = 2;}int index = path.lastIndexOf(separatorChar);if (index == -1 && firstInPath > 0) {index = 2;}if (index == -1 || path.charAt(length - 1) == separatorChar) {return null;}if (path.indexOf(separatorChar) == index&& path.charAt(firstInPath) == separatorChar) {return path.substring(0, index + 1);}return path.substring(0, index);}
public BufferedChecksumIndexInput(IndexInput main) {super("BufferedChecksumIndexInput(" + main + ")");this.main = main;this.digest = new BufferedChecksum(new CRC32());}
public final void remove(RevFlagSet set) {flags &= ~set.mask;}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;return true;}
public GetFaceSearchResult getFaceSearch(GetFaceSearchRequest request) {request = beforeClientExecution(request);return executeGetFaceSearch(request);}
public DescribeUserStackAssociationsResult describeUserStackAssociations(DescribeUserStackAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeUserStackAssociations(request);}
public void close() throws IOException {in.close();in = new ClosedInputStream();}
public CreateBranchCommand branchCreate() {return new CreateBranchCommand(repo);}
public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(wOffset);out.writeShort(at);out.writeShort(grbit);if(unused != null)out.writeShort(unused);}
public StringBuilder insert(int offset, Object obj) {insert0(offset, obj == null ? "null" : obj.toString());return this;}
public int next() {int res = child;if (child != TaxonomyReader.INVALID_ORDINAL) {child = siblings[child];}return res;}
public DeleteStackResult deleteStack(DeleteStackRequest request) {request = beforeClientExecution(request);return executeDeleteStack(request);}
public NorwegianMinimalStemFilterFactory(Map<String,String> args) {super(args);String variant = get(args, "variant");if (variant == null || "nb".equals(variant)) {flags = BOKMAAL;} else if ("nn".equals(variant)) {flags = NYNORSK;} else if ("no".equals(variant)) {flags = BOKMAAL | NYNORSK;} else {throw new IllegalArgumentException("invalid variant: " + variant);}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {return "Z(" + z + ")";}
public static org.apache.poi.hssf.record.Record create(RecordInputStream in) {switch (in.remaining()) {case 0:return instance;case 2:return new InterfaceHdrRecord(in);}throw new RecordFormatException("Invalid record data size: " + in.remaining());}
public int getCellsPnt() {int size = 0;for (Row row : rows)size += row.getCellsPnt();return size;}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerActionExecutor)) {return false;}LexerActionExecutor other = (LexerActionExecutor)obj;return hashCode == other.hashCode&& Arrays.equals(lexerActions, other.lexerActions);}
public static final Analyzer createAnalyzer(String className) throws Exception{final Class<? extends Analyzer> clazz = Class.forName(className).asSubclass(Analyzer.class);try {Constructor<? extends Analyzer> cnstr = clazz.getConstructor(Version.class);return cnstr.newInstance(Version.LATEST);} catch (NoSuchMethodException nsme) {return clazz.getConstructor().newInstance();}}
public GetSegmentVersionsResult getSegmentVersions(GetSegmentVersionsRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersions(request);}
public int getDeltaBaseCacheLimit() {return deltaBaseCacheLimit;}
public GroupMerger(Sort groupSort) {groupComp = new GroupComparator<>(groupSort);queue = new TreeSet<>(groupComp);groupsSeen = new HashMap<>();}
public long get(int index) {final int o = index >>> 4;final int b = index & 15;final int shift = b << 2;return (blocks[o] >>> shift) & 15L;}
public FileIdCluster( int drawingGroupId, int numShapeIdsUsed ) {this.field_1_drawingGroupId = drawingGroupId;this.field_2_numShapeIdsUsed = numShapeIdsUsed;}
public CharArrayIterator clone() {CharArrayIterator clone = new CharArrayIterator();clone.setText(array, start, length);clone.index = index;return clone;}
public DescribeReservedNodesResult describeReservedNodes(DescribeReservedNodesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedNodes(request);}
public ObjectWalk(Repository repo, int depth) {super(repo);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag("UNSHALLOW"); this.REINTERESTING = newFlag("REINTERESTING"); this.DEEPEN_NOT = newFlag("DEEPEN_NOT"); }
public boolean isRefLogDisabled() {return refLogMessage == null;}
public SetLoadBalancerListenerSSLCertificateResult setLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request) {request = beforeClientExecution(request);return executeSetLoadBalancerListenerSSLCertificate(request);}
public DescribeRulesPackagesResult describeRulesPackages(DescribeRulesPackagesRequest request) {request = beforeClientExecution(request);return executeDescribeRulesPackages(request);}
public byte readByte() throws IOException {return primitiveTypes.readByte();}
public String getConversion() {return s;}
public StandardSyntaxParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}
public TokenStream create(TokenStream input) {return new TurkishLowerCaseFilter(input);}
public String toString() {return "B";}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return evaluate(srcRowIndex, srcColumnIndex, arg0, DEFAULT_ARG1);}
public void doubleField(FieldInfo fieldInfo, double value) {doc.add(new StoredField(fieldInfo.name, value));}
public GetDistributionConfigRequest(String id) {setId(id);}
public DescribeCacheSecurityGroupsResult describeCacheSecurityGroups() {return describeCacheSecurityGroups(new DescribeCacheSecurityGroupsRequest());}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double d;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);d = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}if (d == 0.0) { return NumberEval.ZERO;}return new NumberEval(d / 100);}
public boolean containsCell(int rowIndex, int columnIndex) {if (columnIndex < _firstColumnIndex) {return false;}if (columnIndex > _lastColumnIndex) {return false;}if (rowIndex < _firstRowIndex) {return false;}if (rowIndex > _lastRowIndex) {return false;}return true;}
public GetSegmentVersionResult getSegmentVersion(GetSegmentVersionRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersion(request);}
public final FloatBuffer put(float[] src, int srcOffset, int byteCount) {throw new ReadOnlyBufferException();}
public final IntBuffer put(int[] src) {return put(src, 0, src.length);}
public SearchFaceRequest() {super("LinkFace", "2018-07-20", "SearchFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public TagStreamResult tagStream(TagStreamRequest request) {request = beforeClientExecution(request);return executeTagStream(request);}
public String getAccessKeyId() {return this.accessKeyId;}
public ET previous() {if (expectedModCount == list.modCount) {if (link != list.voidLink) {lastLink = link;link = link.previous;pos--;return lastLink.data;}throw new NoSuchElementException();}throw new ConcurrentModificationException();}
public CreateLBCookieStickinessPolicyResult createLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request) {request = beforeClientExecution(request);return executeCreateLBCookieStickinessPolicy(request);}
public CreateDataSourceFromRDSResult createDataSourceFromRDS(CreateDataSourceFromRDSRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRDS(request);}
public CreateReceiptFilterResult createReceiptFilter(CreateReceiptFilterRequest request) {request = beforeClientExecution(request);return executeCreateReceiptFilter(request);}
public final byte get(int index) {checkIndex(index);return backingArray[offset + index];}
public CherryPickCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}
public ATNDeserializationOptions() {this.verifyATN = true;this.generateRuleBypassTransitions = false;}
public ListIdentityPoliciesResult listIdentityPolicies(ListIdentityPoliciesRequest request) {request = beforeClientExecution(request);return executeListIdentityPolicies(request);}
public static boolean isValidCode(int errorCode) {for (FormulaError error : values()) {if (error.getCode() == errorCode) return true;if (error.getLongCode() == errorCode) return true;}return false;}
public RKRecord(RecordInputStream in) {super(in);field_4_rk_number = in.readInt();}
public void copyTo(ByteBuffer b) {b.put(toHexByteArray());}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[DAT]\n");buffer.append("    .options              = ").append("0x").append(HexDump.toHex(  getOptions ())).append(" (").append( getOptions() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("         .horizontalBorder         = ").append(isHorizontalBorder()).append('\n');buffer.append("         .verticalBorder           = ").append(isVerticalBorder()).append('\n');buffer.append("         .border                   = ").append(isBorder()).append('\n');buffer.append("         .showSeriesKey            = ").append(isShowSeriesKey()).append('\n');buffer.append("[/DAT]\n");return buffer.toString();}
public UpdateDashboardResult updateDashboard(UpdateDashboardRequest request) {request = beforeClientExecution(request);return executeUpdateDashboard(request);}
public RegisterTagRequest() {super("CloudPhoto", "2017-07-11", "RegisterTag", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DiffCommand setPathFilter(TreeFilter pathFilter) {this.pathFilter = pathFilter;return this;}
public boolean markSupported() {return true;}
public String toString() {StringBuilder sb = new StringBuilder(getClass().getSimpleName() + ": ");sb.append("maxThreadCount=").append(maxThreadCount).append(", ");sb.append("maxMergeCount=").append(maxMergeCount).append(", ");sb.append("ioThrottle=").append(doAutoIOThrottle);return sb.toString();}
public synchronized void println(String str) {print(str);newline();}
public UpdateApiResult updateApi(UpdateApiRequest request) {request = beforeClientExecution(request);return executeUpdateApi(request);}
public FlushStageAuthorizersCacheResult flushStageAuthorizersCache(FlushStageAuthorizersCacheRequest request) {request = beforeClientExecution(request);return executeFlushStageAuthorizersCache(request);}
public BasicQueryFactory(int maxBasicQueries) {this.maxBasicQueries = maxBasicQueries;this.queriesMade = 0;}
public TrackingRefUpdate getTrackingRefUpdate(String localName) {return updates.get(localName);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CATLAB]\n");buffer.append("    .rt      =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt=").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .wOffset =").append(HexDump.shortToHex(wOffset)).append('\n');buffer.append("    .at      =").append(HexDump.shortToHex(at)).append('\n');buffer.append("    .grbit   =").append(HexDump.shortToHex(grbit)).append('\n');if(unused != null)buffer.append("    .unused  =").append(HexDump.shortToHex(unused)).append('\n');buffer.append("[/CATLAB]\n");return buffer.toString();}
public EnableDirectoryResult enableDirectory(EnableDirectoryRequest request) {request = beforeClientExecution(request);return executeEnableDirectory(request);}
public IntBuffer put(int[] src, int srcOffset, int intCount) {if (intCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, intCount);position += intCount;return this;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PROT4REVPASSWORD]\n");buffer.append("    .password = ").append(HexDump.shortToHex(field_1_password)).append("\n");buffer.append("[/PROT4REVPASSWORD]\n");return buffer.toString();}
public DescribeProjectVersionsResult describeProjectVersions(DescribeProjectVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeProjectVersions(request);}
public UpdateHostedZoneCommentResult updateHostedZoneComment(UpdateHostedZoneCommentRequest request) {request = beforeClientExecution(request);return executeUpdateHostedZoneComment(request);}
public Rescorer getRescorer(Bindings bindings) {return new ExpressionRescorer(this, bindings);}
public SortedSet<E> headSet(E end) {return headSet(end, false);}
final public QueryNode DisjQuery(CharSequence field) throws ParseException {QueryNode first, c;Vector<QueryNode> clauses = null;first = ConjQuery(field);label_2:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case OR:;break;default:jj_la1[3] = jj_gen;break label_2;}jj_consume_token(OR);c = ConjQuery(field);if (clauses == null) {clauses = new Vector<QueryNode>();clauses.addElement(first);}clauses.addElement(c);}if (clauses != null) {{if (true) return new OrQueryNode(clauses);}} else {{if (true) return first;}}throw new Error("Missing return statement in function");}
public DataValidationConstraint createExplicitListConstraint(String[] listOfValues) {return DVConstraint.createExplicitListConstraint(listOfValues);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {String s0;String s1;try {s0 = evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}return BoolEval.valueOf(s0.equals(s1));}
public boolean offer(E o) {return addLastImpl(o);}
public ListInvalidationsRequest(String distributionId) {setDistributionId(distributionId);}
public TagPhotoRequest() {super("CloudPhoto", "2017-07-11", "TagPhoto", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public CreateFleetResult createFleet(CreateFleetRequest request) {request = beforeClientExecution(request);return executeCreateFleet(request);}
public GetTransitGatewayAttachmentPropagationsResult getTransitGatewayAttachmentPropagations(GetTransitGatewayAttachmentPropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayAttachmentPropagations(request);}
public ListWorkteamsResult listWorkteams(ListWorkteamsRequest request) {request = beforeClientExecution(request);return executeListWorkteams(request);}
public DetachVpnGatewayResult detachVpnGateway(DetachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeDetachVpnGateway(request);}
public ListGeoLocationsResult listGeoLocations() {return listGeoLocations(new ListGeoLocationsRequest());}
public String toString() {return getClass().getName() + " [" +getStringValue() +"]";}
public static double decodeNumber(int number) {long raw_number = number;raw_number = raw_number >> 2;double rvalue = 0;if ((number & 0x02) == 0x02){rvalue = raw_number;}else{rvalue = Double.longBitsToDouble(raw_number << 34);}if ((number & 0x01) == 0x01){rvalue /= 100;}return rvalue;}
public long get(long index) {assert index >= 0 && index < valueCount;final int block = (int) (index >>> blockShift);final int idx = (int) (index & blockMask);return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);}
public UpdatePublishingDestinationResult updatePublishingDestination(UpdatePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeUpdatePublishingDestination(request);}
public void notifyDeleteCell(EvaluationCell cell) {int sheetIndex = getSheetIndex(cell.getSheet());_cache.notifyDeleteCell(_workbookIx, sheetIndex, cell);}
public Request<GetPolicyRequest> marshall(GetPolicyRequest getPolicyRequest) {if (getPolicyRequest == null) {throw new SdkClientException("Invalid argument passed to marshall(...)");}Request<GetPolicyRequest> request = new DefaultRequest<GetPolicyRequest>(getPolicyRequest, "AmazonIdentityManagement");request.addParameter("Action", "GetPolicy");request.addParameter("Version", "2010-05-08");request.setHttpMethod(HttpMethodName.POST);if (getPolicyRequest.getPolicyArn() != null) {request.addParameter("PolicyArn", StringUtils.fromString(getPolicyRequest.getPolicyArn()));}return request;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval real_num, ValueEval i_num) {return this.evaluate(srcRowIndex, srcColumnIndex, real_num, i_num, new StringEval(DEFAULT_SUFFIX));}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_numShapes   =  LittleEndian.getInt( data, pos + size );     size += 4;field_2_lastMSOSPID =  LittleEndian.getInt( data, pos + size );     size += 4;return getRecordSize();}
public final CharsetEncoder reset() {status = INIT;implReset();return this;}
public void emit(Token token) {this._token = token;}
public AbstractTreeIterator createSubtreeIterator(ObjectReader reader)throws IncorrectObjectTypeException, IOException {if (currentSubtree == null)throw new IncorrectObjectTypeException(getEntryObjectId(),Constants.TYPE_TREE);return new DirCacheBuildIterator(this, currentSubtree);}
public GreekLowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public URI relativize(URI relative) {if (relative.opaque || opaque) {return relative;}if (scheme == null ? relative.scheme != null : !scheme.equals(relative.scheme)) {return relative;}if (authority == null ? relative.authority != null : !authority.equals(relative.authority)) {return relative;}String thisPath = normalize(path, false);String relativePath = normalize(relative.path, false);if (!thisPath.equals(relativePath)) {thisPath = thisPath.substring(0, thisPath.lastIndexOf('/') + 1);if (!relativePath.startsWith(thisPath)) {return relative;}}URI result = new URI();result.fragment = relative.fragment;result.query = relative.query;result.path = relativePath.substring(thisPath.length());result.setSchemeSpecificPart();return result;}
public Reader freeze(boolean trim) {if (frozen) {throw new IllegalStateException("already frozen");}if (didSkipBytes) {throw new IllegalStateException("cannot freeze when copy(BytesRef, BytesRef) was used");}if (trim && upto < blockSize) {final byte[] newBlock = new byte[upto];System.arraycopy(currentBlock, 0, newBlock, 0, upto);currentBlock = newBlock;}if (currentBlock == null) {currentBlock = EMPTY_BYTES;}addBlock(currentBlock);frozen = true;currentBlock = null;return new PagedBytes.Reader(this);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length == 2) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}if (args.length == 3) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}
public Cluster createCluster(CreateClusterRequest request) {request = beforeClientExecution(request);return executeCreateCluster(request);}
public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,Directory dir, OpenMode mode) throws IOException {super(primary);this.dir = dir;if (mode == OpenMode.CREATE) {clearPriorSnapshots();}loadPriorSnapshots();if (mode == OpenMode.APPEND && nextWriteGen == 0) {throw new IllegalStateException("no snapshots stored in this directory");}}
public String getText(RuleContext ctx) {return getText(ctx.getSourceInterval());}
public final float get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public DeleteDataSetResult deleteDataSet(DeleteDataSetRequest request) {request = beforeClientExecution(request);return executeDeleteDataSet(request);}
public boolean contains(Object o) {return containsKey(o);}
public boolean matches(char s[], int len) {return super.matches(s, len) && !exceptions.contains(s, 0, len);}
public int getDeltaSearchWindowSize() {return deltaSearchWindowSize;}
public GetDomainNameResult getDomainName(GetDomainNameRequest request) {request = beforeClientExecution(request);return executeGetDomainName(request);}
public DeleteAccessLogSettingsResult deleteAccessLogSettings(DeleteAccessLogSettingsRequest request) {request = beforeClientExecution(request);return executeDeleteAccessLogSettings(request);}
public QueryValueSource(Query q, float defVal) {this.q = q;this.defVal = defVal;}
@Override public Object[] toArray() {return snapshot().toArray();}
public String toLexerString() {if ( s0==null ) return "";DFASerializer serializer = new LexerDFASerializer(this);return serializer.toString();}
public void clear() {fill(0, size(), 0);}
public GetStreamingDistributionConfigResult getStreamingDistributionConfig(GetStreamingDistributionConfigRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistributionConfig(request);}
public UpdateDomainContactResult updateDomainContact(UpdateDomainContactRequest request) {request = beforeClientExecution(request);return executeUpdateDomainContact(request);}
public ListIterator<E> listIterator(int location) {return new LinkIterator<E>(this, location);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[STARTBLOCK]\n");buffer.append("    .rt              =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt        =").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .iObjectKind     =").append(HexDump.shortToHex(iObjectKind)).append('\n');buffer.append("    .iObjectContext  =").append(HexDump.shortToHex(iObjectContext)).append('\n');buffer.append("    .iObjectInstance1=").append(HexDump.shortToHex(iObjectInstance1)).append('\n');buffer.append("    .iObjectInstance2=").append(HexDump.shortToHex(iObjectInstance2)).append('\n');buffer.append("[/STARTBLOCK]\n");return buffer.toString();}
public long get(int index) {final int o = index / 7;final int b = index % 7;final int shift = b * 9;return (blocks[o] >>> shift) & 511L;}
public String toString(String field) {StringBuilder buffer = new StringBuilder();boolean needParens = (getLowFreqMinimumNumberShouldMatch() > 0);if (needParens) {buffer.append("(");}for (int i = 0; i < terms.size(); i++) {Term t = terms.get(i);buffer.append(newTermQuery(t, null).toString());if (i != terms.size() - 1) buffer.append(", ");}if (needParens) {buffer.append(")");}if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {buffer.append('~');buffer.append("(");buffer.append(getLowFreqMinimumNumberShouldMatch());buffer.append(getHighFreqMinimumNumberShouldMatch());buffer.append(")");}return buffer.toString();}
public String[] getStopWords(String fieldName) {Set<String> stopWords = stopWordsPerField.get(fieldName);return stopWords != null ? stopWords.toArray(new String[stopWords.size()]) : new String[0];}
public void print(float f) {print(String.valueOf(f));}
public MopenCreateGroupRequest() {super("MoPen", "2018-02-11", "MopenCreateGroup", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public SmallObject(int type, byte[] data) {this.type = type;this.data = data;}
public final boolean matches(char c) {return Character.isUpperCase(c);}
public StartNotebookInstanceResult startNotebookInstance(StartNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeStartNotebookInstance(request);}
public static void putUnicodeLE(String input, byte[] output, int offset) {byte[] bytes = input.getBytes(UTF16LE);System.arraycopy(bytes, 0, output, offset, bytes.length);}
public void deleteDocument(int docID) {final int i = readerIndex(docID);getSequentialSubReaders().get(i).deleteDocument(docID - readerBase(i));}
public boolean isRelevant(String docName, QualityQuery query) {QRelJudgement qrj = judgements.get(query.getQueryID());return qrj!=null && qrj.isRelevant(docName);}
public final int getBeginB() {return beginB;}
public ModifySpotFleetRequestResult modifySpotFleetRequest(ModifySpotFleetRequestRequest request) {request = beforeClientExecution(request);return executeModifySpotFleetRequest(request);}
public UncalcedRecord() {_reserved = 0;}
public static PageOrder valueOf(int value){return _table[value];}
public static CellValue valueOf(boolean booleanValue) {return booleanValue ? TRUE : FALSE;}
public void write(String str) {buf.append(str);}
public void addListener(HSSFListener lsnr, short sid) {List<HSSFListener> list = _records.computeIfAbsent(Short.valueOf(sid), k -> new ArrayList<>(1));list.add(lsnr);}
public GetMeetingResult getMeeting(GetMeetingRequest request) {request = beforeClientExecution(request);return executeGetMeeting(request);}
public void stopTimer() {stop = true;}
public AttachLoadBalancerTargetGroupsResult attachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancerTargetGroups(request);}
public GetQueryLoggingConfigResult getQueryLoggingConfig(GetQueryLoggingConfigRequest request) {request = beforeClientExecution(request);return executeGetQueryLoggingConfig(request);}
public ListIterator<E> listIterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}
public CreateSnapshotResult createSnapshot(CreateSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateSnapshot(request);}
public boolean hasObject(AnyObjectId objectId) {try {return getObjectDatabase().has(objectId);} catch (IOException e) {throw new UncheckedIOException(e);}}
public final void sort(int from, int to) {checkRange(from, to);mergeSort(from, to);}
public <T extends EscherRecord> T getChildById( short recordId ) {for ( EscherRecord childRecord : this ) {if ( childRecord.getRecordId() == recordId ) {@SuppressWarnings( "unchecked" )final T result = (T) childRecord;return result;}}return null;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_xBasis);out.writeShort(field_2_yBasis);out.writeShort(field_3_heightBasis);out.writeShort(field_4_scale);out.writeShort(field_5_indexToFontTable);}
public static String toHex(int value) {StringBuilder sb = new StringBuilder(8);writeHex(sb, value & 0xFFFFFFFFL, 8, "");return sb.toString();}
public static Collection<Ref> sort(Collection<Ref> refs) {final List<Ref> r = new ArrayList<>(refs);Collections.sort(r, INSTANCE);return r;}
public DescribeVpcsResult describeVpcs() {return describeVpcs(new DescribeVpcsRequest());}
public ListProposalsResult listProposals(ListProposalsRequest request) {request = beforeClientExecution(request);return executeListProposals(request);}
public void close() throws IOException {flush();output.close();}
public final T get() {return object;}
public BundleInstanceRequest(String instanceId, Storage storage) {setInstanceId(instanceId);setStorage(storage);}
public void back(int delta) {if (delta == 1 && 0 <= prevPtr) {currPtr = prevPtr;prevPtr = -1;if (!eof())parseEntry();return;} else if (delta <= 0)throw new ArrayIndexOutOfBoundsException(delta);final int[] trace = new int[delta + 1];Arrays.fill(trace, -1);int ptr = 0;while (ptr != currPtr) {System.arraycopy(trace, 1, trace, 0, delta);trace[delta] = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (trace[1] == -1)throw new ArrayIndexOutOfBoundsException(delta);prevPtr = trace[0];currPtr = trace[1];parseEntry();}
public String toString() {return "pred_"+ruleIndex+":"+predIndex;}
public PatternSyntaxException(String description, String pattern, int index) {this.desc = description;this.pattern = pattern;this.index = index;}
public AlphaAnimation(float from, float to) {mStartAlpha = from;mEndAlpha = to;mCurrentAlpha = from;}
public int doLogic() throws Exception {TaxonomyWriter taxonomyWriter = getRunData().getTaxonomyWriter();if (taxonomyWriter != null) {taxonomyWriter.commit();} else {throw new IllegalStateException("TaxonomyWriter is not currently open");}return 1;}
public DeltaIndex(byte[] sourceBuffer) {src = sourceBuffer;DeltaIndexScanner scan = new DeltaIndexScanner(src, src.length);table = scan.table;tableMask = scan.tableMask;entries = new long[1 + countEntries(scan)];copyEntries(scan);}
public int previousIndex() {return pos;}
public QueryMaker getQueryMaker() {return getRunData().getQueryMaker(this);}
public JapaneseTokenizerFactory(Map<String,String> args) {super(args);mode = Mode.valueOf(get(args, MODE, JapaneseTokenizer.DEFAULT_MODE.toString()).toUpperCase(Locale.ROOT));userDictionaryPath = args.remove(USER_DICT_PATH);userDictionaryEncoding = args.remove(USER_DICT_ENCODING);discardPunctuation = getBoolean(args, DISCARD_PUNCTUATION, true);discardCompoundToken = getBoolean(args, DISCARD_COMPOUND_TOKEN, true);nbestCost = getInt(args, NBEST_COST, 0);nbestExamples = args.remove(NBEST_EXAMPLES);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public Long longValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Long.valueOf(responseMap.get(key));}
public GetLibraryRequest() {super("CloudPhoto", "2017-07-11", "GetLibrary", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public short getFontOfFormattingRun(int index) {FormatRun r = _string.getFormatRun(index);return r.getFontIndex();}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_shapeIdMax     =  LittleEndian.getInt( data, pos + size );size+=4;size+=4;field_3_numShapesSaved =  LittleEndian.getInt( data, pos + size );size+=4;field_4_drawingsSaved  =  LittleEndian.getInt( data, pos + size );size+=4;field_5_fileIdClusters.clear();int numIdClusters = (bytesRemaining-size) / 8;for (int i = 0; i < numIdClusters; i++) {int drawingGroupId = LittleEndian.getInt( data, pos + size );int numShapeIdsUsed = LittleEndian.getInt( data, pos + size + 4 );FileIdCluster fic = new FileIdCluster(drawingGroupId, numShapeIdsUsed);field_5_fileIdClusters.add(fic);maxDgId = Math.max(maxDgId, drawingGroupId);size += 8;}bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException("Expecting no remaining data but got " + bytesRemaining + " byte(s).");}return 8 + size;}
public void encode(int[] values, int valuesOffset, byte[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = writeLong(block, blocks, blocksOffset);}}
public GetTerminologyResult getTerminology(GetTerminologyRequest request) {request = beforeClientExecution(request);return executeGetTerminology(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(_character);out.writeShort(_fontIndex);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_options);}
public SearchFacesResult searchFaces(SearchFacesRequest request) {request = beforeClientExecution(request);return executeSearchFaces(request);}
public int getPositionIncrementGap(String fieldName) {return getWrappedAnalyzer(fieldName).getPositionIncrementGap(fieldName);}
public DescribeSchemaResult describeSchema(DescribeSchemaRequest request) {request = beforeClientExecution(request);return executeDescribeSchema(request);}
@Override public int size() {return BoundedMap.this.size();}
public MutableEntry cloneEntry() {final MutableEntry r = new MutableEntry();ensureId();r.idBuffer.fromObjectId(idBuffer);r.offset = offset;return r;}
public OperateEquipmentRequest() {super("industry-brain", "2018-07-12", "OperateEquipment");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public boolean add(E e) {synchronized (mutex) {return delegate().add(e);}}
public boolean equals( Object o ){if ( this == o ) {return true;}if ( !( o instanceof EscherSimpleProperty ) ) {return false;}final EscherSimpleProperty escherSimpleProperty = (EscherSimpleProperty) o;if ( propertyValue != escherSimpleProperty.propertyValue ) {return false;}if ( getId() != escherSimpleProperty.getId() ) {return false;}return true;}
public final FloatBuffer asFloatBuffer() {return FloatToByteBufferAdapter.asFloatBuffer(this);}
public void removeThumbnail() {remove1stProperty(PropertyIDMap.PID_THUMBNAIL);}
public static int compareIgnoreCase(String a, String b) {for (int i = 0; i < a.length() && i < b.length(); i++) {int d = toLowerCase(a.charAt(i)) - toLowerCase(b.charAt(i));if (d != 0)return d;}return a.length() - b.length();}
public ViewDefinitionRecord(RecordInputStream in) {rwFirst = in.readUShort();rwLast = in.readUShort();colFirst = in.readUShort();colLast = in.readUShort();rwFirstHead = in.readUShort();rwFirstData = in.readUShort();colFirstData = in.readUShort();iCache = in.readUShort();reserved = in.readUShort();sxaxis4Data = in.readUShort();ipos4Data = in.readUShort();cDim = in.readUShort();cDimRw = in.readUShort();cDimCol = in.readUShort();cDimPg = in.readUShort();cDimData = in.readUShort();cRw = in.readUShort();cCol = in.readUShort();grbit = in.readUShort();itblAutoFmt = in.readUShort();int cchName = in.readUShort();int cchData = in.readUShort();name = StringUtil.readUnicodeString(in, cchName);dataField = StringUtil.readUnicodeString(in, cchData);}
public FormatRecord(RecordInputStream in) {field_1_index_code = in.readShort();int field_3_unicode_len = in.readUShort();field_3_hasMultibyte = (in.readByte() & 0x01) != 0;if (field_3_hasMultibyte) {field_4_formatstring = readStringCommon(in, field_3_unicode_len, false);} else {field_4_formatstring = readStringCommon(in, field_3_unicode_len, true);}}
public DescribeBrokerResult describeBroker(DescribeBrokerRequest request) {request = beforeClientExecution(request);return executeDescribeBroker(request);}
public void reset() {if ( getInputStream()!=null ) getInputStream().seek(0);_errHandler.reset(this);_ctx = null;_syntaxErrors = 0;matchedEOF = false;setTrace(false);_precedenceStack.clear();_precedenceStack.push(0);ATNSimulator interpreter = getInterpreter();if (interpreter != null) {interpreter.reset();}}
public boolean remove(Object o) {final RevFlag flag = (RevFlag) o;if ((mask & flag.mask) == 0)return false;mask &= ~flag.mask;for (int i = 0; i < active.size(); i++)if (active.get(i).mask == flag.mask)active.remove(i);return true;}
public String format(Passage passages[], String content) {StringBuilder sb = new StringBuilder();int pos = 0;for (Passage passage : passages) {if (passage.getStartOffset() > pos && pos > 0) {sb.append(ellipsis);}pos = passage.getStartOffset();for (int i = 0; i < passage.getNumMatches(); i++) {int start = passage.getMatchStarts()[i];assert start >= pos && start < passage.getEndOffset();append(sb, content, pos, start);int end = passage.getMatchEnds()[i];assert end > start;while (i + 1 < passage.getNumMatches() && passage.getMatchStarts()[i+1] < end) {end = passage.getMatchEnds()[++i];}end = Math.min(end, passage.getEndOffset()); sb.append(preTag);append(sb, content, start, end);sb.append(postTag);pos = end;}append(sb, content, pos, Math.max(pos, passage.getEndOffset()));pos = passage.getEndOffset();}return sb.toString();}
public DrillSidewaysResult(Facets facets, TopDocs hits) {this.facets = facets;this.hits = hits;}
public ListTrafficPolicyInstancesByPolicyResult listTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyInstancesByPolicy(request);}
public ComplexPhraseQuery(String field, String phrasedQueryStringContents,int slopFactor, boolean inOrder) {this.field = Objects.requireNonNull(field);this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);this.slopFactor = slopFactor;this.inOrder = inOrder;}
public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!term.field().equals(field)) {buffer.append(term.field());buffer.append(":");}buffer.append(getClass().getSimpleName());buffer.append(" {");buffer.append('\n');buffer.append(automaton.toString());buffer.append("}");return buffer.toString();}
public final String toFormulaString() {return getName();}
public AreaRecord clone() {return copy();}
public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null ? fst.ramBytesUsed() : 0)+ RamUsageEstimator.sizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}
public DeleteConfigurationTemplateRequest(String applicationName, String templateName) {setApplicationName(applicationName);setTemplateName(templateName);}
public List<Token> getTokens(int start, int stop, int ttype) {HashSet<Integer> s = new HashSet<Integer>(ttype);s.add(ttype);return getTokens(start,stop, s);}
public DescribeIamInstanceProfileAssociationsResult describeIamInstanceProfileAssociations(DescribeIamInstanceProfileAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeIamInstanceProfileAssociations(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval textArg) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(textArg, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String text = OperandResolver.coerceValueToString(veText1);if (text.length() == 0) {return ErrorEval.VALUE_INVALID;}int code = text.charAt(0);return new StringEval(String.valueOf(code));}
public AttachVpnGatewayResult attachVpnGateway(AttachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeAttachVpnGateway(request);}
public int compareTo(FloatBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;float thisFloat, otherFloat;while (compareRemaining > 0) {thisFloat = get(thisPos);otherFloat = otherBuffer.get(otherPos);if ((thisFloat != otherFloat)&& ((thisFloat == thisFloat) || (otherFloat == otherFloat))) {return thisFloat < otherFloat ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public Matcher useTransparentBounds(boolean value) {transparentBounds = value;useTransparentBoundsImpl(address, value);return this;}
public void remove() {if (lastEntryReturned == null)throw new IllegalStateException();if (modCount != expectedModCount)throw new ConcurrentModificationException();Hashtable.this.remove(lastEntryReturned.key);lastEntryReturned = null;expectedModCount = modCount;}
public String toFormulaString() {StringBuilder sb = new StringBuilder(64);if (externalWorkbookNumber >= 0) {sb.append('[');sb.append(externalWorkbookNumber);sb.append(']');}if (sheetName != null) {SheetNameFormatter.appendFormat(sb, sheetName);}sb.append('!');sb.append(FormulaError.REF.getString());return sb.toString();}
public String toString() {return slice.toString()+":"+ postingsEnum;}
public CreateVpnConnectionRouteResult createVpnConnectionRoute(CreateVpnConnectionRouteRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnectionRoute(request);}
public boolean hasNext() {return next != null;}
public DeleteDBSecurityGroupRequest(String dBSecurityGroupName) {setDBSecurityGroupName(dBSecurityGroupName);}
public int compare(Property o1, Property o2){String VBA_PROJECT = "_VBA_PROJECT";String name1  = o1.getName();String name2  = o2.getName();int  result = name1.length() - name2.length();if (result == 0){if (name1.compareTo(VBA_PROJECT) == 0)result = 1;else if (name2.compareTo(VBA_PROJECT) == 0)result = -1;else{if (name1.startsWith("__") && name2.startsWith("__")){result = name1.compareToIgnoreCase(name2);}else if (name1.startsWith("__")){result = 1;}else if (name2.startsWith("__")){result = -1;}elseresult = name1.compareToIgnoreCase(name2);}}return result;}
public DoubleBuffer get(double[] dst, int dstOffset, int doubleCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, doubleCount);if (doubleCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + doubleCount; ++i) {dst[i] = get();}return this;}
public CharsRef add(CharsRef prefix, CharsRef output) {assert prefix != null;assert output != null;if (prefix == NO_OUTPUT) {return output;} else if (output == NO_OUTPUT) {return prefix;} else {assert prefix.length > 0;assert output.length > 0;CharsRef result = new CharsRef(prefix.length + output.length);System.arraycopy(prefix.chars, prefix.offset, result.chars, 0, prefix.length);System.arraycopy(output.chars, output.offset, result.chars, prefix.length, output.length);result.length = prefix.length + output.length;return result;}}
public UpdateProfileResult updateProfile(UpdateProfileRequest request) {request = beforeClientExecution(request);return executeUpdateProfile(request);}
public LikeThisQueryBuilder(Analyzer analyzer, String[] defaultFieldNames) {this.analyzer = analyzer;this.defaultFieldNames = defaultFieldNames;}
public StringBuffer insert(int index, long l) {return insert(index, Long.toString(l));}
public Field(String name, BytesRef bytes, IndexableFieldType type) {if (name == null) {throw new IllegalArgumentException("name must not be null");}if (bytes == null) {throw new IllegalArgumentException("bytes must not be null");}if (type == null) {throw new IllegalArgumentException("type must not be null");}this.name = name;this.fieldsData = bytes;this.type = type;}
public void clear() {mSize = 0;}
public SrndQuery parse2(String query) throws ParseException {ReInit(new FastCharStream(new StringReader(query)));try {return TopSrndQuery();} catch (TokenMgrError tme) {throw new ParseException(tme.getMessage());}}
@Override public int size() {return (int) Math.min(this.size, Integer.MAX_VALUE);}
public DescribeConfigurationResult describeConfiguration(DescribeConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeConfiguration(request);}
public String getCharErrorDisplay(int c) {String s = getErrorDisplay(c);return "'"+s+"'";}
public DescribeHumanTaskUiResult describeHumanTaskUi(DescribeHumanTaskUiRequest request) {request = beforeClientExecution(request);return executeDescribeHumanTaskUi(request);}
public void run() {try {int n = task.runAndMaybeStats(letChildReport);if (anyExhaustibleTasks) {updateExhausted(task);}count += n;} catch (NoMoreDataException e) {exhausted = true;} catch (Exception e) {throw new RuntimeException(e);}}
public DescribeImagePermissionsResult describeImagePermissions(DescribeImagePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeImagePermissions(request);}
public SrndQuery clone() {try {return (SrndQuery)super.clone();} catch (CloneNotSupportedException cns) {throw new Error(cns);}}
public void recycleByteBlocks(byte[][] blocks, int start, int end) {final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);final int size = freeBlocks + numBlocks;if (size >= freeByteBlocks.length) {final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);freeByteBlocks = newBlocks;}final int stop = start + numBlocks;for (int i = start; i < stop; i++) {freeByteBlocks[freeBlocks++] = blocks[i];blocks[i] = null;}for (int i = stop; i < end; i++) {blocks[i] = null;}bytesUsed.addAndGet(-(end - stop) * blockSize);assert bytesUsed.get() >= 0;}
public GeohashPrefixTree(SpatialContext ctx, int maxLevels) {super(ctx, maxLevels);Rectangle bounds = ctx.getWorldBounds();if (bounds.getMinX() != -180)throw new IllegalArgumentException("Geohash only supports lat-lon world bounds. Got "+bounds);int MAXP = getMaxLevelsPossible();if (maxLevels <= 0 || maxLevels > MAXP)throw new IllegalArgumentException("maxLevels must be [1-"+MAXP+"] but got "+ maxLevels);}
public void removeName(int namenum) {_definedNames.remove(namenum);}
public CancelSpotFleetRequestsResult cancelSpotFleetRequests(CancelSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeCancelSpotFleetRequests(request);}
public GetIndustryInfoLineageListRequest() {super("industry-brain", "2018-07-12", "GetIndustryInfoLineageList");setProtocol(ProtocolType.HTTPS);}
public static double[] grow(double[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Double.BYTES));} elsereturn array;}
public void setResult(RefUpdate.Result status) {result = status;super.setResult(status);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | (byte2 >>> 4);final int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);final int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1, ValueEval arg2) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);final double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}ve = OperandResolver.getSingleValue(arg2, srcRowIndex, srcColumnIndex);int order_value = OperandResolver.coerceValueToInt(ve);final boolean order;if (order_value==0) {order = true;} else if(order_value==1) {order = false;} else {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), order);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, order);} catch (EvaluationException e) {return e.getErrorEval();}}
public DeleteEventBusResult deleteEventBus(DeleteEventBusRequest request) {request = beforeClientExecution(request);return executeDeleteEventBus(request);}
public static ByteBuffer wrap(byte[] array, int start, int byteCount) {Arrays.checkOffsetAndCount(array.length, start, byteCount);ByteBuffer buf = new ReadWriteHeapByteBuffer(array);buf.position = start;buf.limit = start + byteCount;return buf;}
public String apiVersion() {return this.apiVersion;}
public SearchResult search(SearchRequest request) {request = beforeClientExecution(request);return executeSearch(request);}
public PushCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}
public AcceptReservedInstancesExchangeQuoteResult acceptReservedInstancesExchangeQuote(AcceptReservedInstancesExchangeQuoteRequest request) {request = beforeClientExecution(request);return executeAcceptReservedInstancesExchangeQuote(request);}
public GetAuthorizationTokenResult getAuthorizationToken(GetAuthorizationTokenRequest request) {request = beforeClientExecution(request);return executeGetAuthorizationToken(request);}
public static InitCommand init() {return new InitCommand();}
public static RevFilter create(Collection<RevFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}
public static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){if ( rootIsWildcard ) {if ( a == EMPTY ) return EMPTY;  if ( b == EMPTY ) return EMPTY;  }else {if ( a == EMPTY && b == EMPTY ) return EMPTY; if ( a == EMPTY ) { int[] payloads = {b.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {b.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}if ( b == EMPTY ) { int[] payloads = {a.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {a.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}}return null;}
public ListTerminologiesResult listTerminologies(ListTerminologiesRequest request) {request = beforeClientExecution(request);return executeListTerminologies(request);}
public ModifyInstanceGroupsRequest(java.util.List<InstanceGroupModifyConfig> instanceGroups) {setInstanceGroups(instanceGroups);}
public String toString() {return "AnyObjectId[" + name() + "]";}
public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}
public static final ObjectId fromRaw(int[] is, int p) {return new ObjectId(is[p], is[p + 1], is[p + 2], is[p + 3], is[p + 4]);}
public RemoveTagsFromStreamResult removeTagsFromStream(RemoveTagsFromStreamRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromStream(request);}
public void writeChar(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeChar(value);}
public void setParams(String params) {super.setParams(params);if (params != null) {commitUserData = params;}}
public OptionGroup modifyOptionGroup(ModifyOptionGroupRequest request) {request = beforeClientExecution(request);return executeModifyOptionGroup(request);}
public CreateCommentResult createComment(CreateCommentRequest request) {request = beforeClientExecution(request);return executeCreateComment(request);}
public void setParams(String params) {super.setParams(params);userData = params;}
public SearchAvailablePhoneNumbersResult searchAvailablePhoneNumbers(SearchAvailablePhoneNumbersRequest request) {request = beforeClientExecution(request);return executeSearchAvailablePhoneNumbers(request);}
public SpanPositionCheckQuery(SpanQuery match) {this.match = Objects.requireNonNull(match);}
public boolean removeChildRecord(EscherRecord toBeRemoved) {return _childRecords.remove(toBeRemoved);}
public BytesRef clone() {return new BytesRef(bytes, offset, length);}
public ByteBuffer putLong(long value) {throw new ReadOnlyBufferException();}
@Override public boolean add(E object) {synchronized (CopyOnWriteArrayList.this) {add(slice.to - slice.from, object);return true;}}
public RevTree lookupTree(AnyObjectId id) {RevTree c = (RevTree) objects.get(id);if (c == null) {c = new RevTree(id);objects.add(c);}return c;}
public boolean equals(Object other) {return sameClassAs(other) &&func.equals(((FunctionQuery) other).func);}
public boolean changeExternalReference(String oldUrl, String newUrl) {for (ExternalBookBlock ex : _externalBookBlocks) {SupBookRecord externalRecord = ex.getExternalBookRecord();if (externalRecord.isExternalReferences()&& externalRecord.getURL().equals(oldUrl)) {externalRecord.setURL(newUrl);return true;}}return false;}
public void removeLastPrinted() {remove1stProperty(PropertyIDMap.PID_LASTPRINTED);}
public MergeCommand merge() {return new MergeCommand(repo);}
public String toString() {final Type t = getType();return t + "(" + beginA + "-" + endA + "," + beginB + "-" + endB + ")";}
public void serialize(LittleEndianOutput out) {int nItems = _list.size();out.writeShort(nItems);for (int k = 0; k < nItems; k++) {CellRangeAddress region = _list.get(k);region.serialize(out);}}
public void remove() {throw new UnsupportedOperationException("Remove not supported");}
public TagCommand setSigned(boolean signed) {this.signed = signed;return this;}
public DescribeReservedInstancesListingsResult describeReservedInstancesListings(DescribeReservedInstancesListingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstancesListings(request);}
public String getName() {return getRef().getName();}
public boolean isAllSet(final int holder){return (holder & _mask) == _mask;}
public static int getEncodedSize(String value) {int result = 2 + 1;result += value.length() * (StringUtil.hasMultibyte(value) ? 2 : 1);return result;}
public List<CharsRef> stem(char word[], int length) {if (dictionary.needsInputCleaning) {scratchSegment.setLength(0);scratchSegment.append(word, 0, length);CharSequence cleaned = dictionary.cleanInput(scratchSegment, segment);scratchBuffer = ArrayUtil.grow(scratchBuffer, cleaned.length());length = segment.length();segment.getChars(0, length, scratchBuffer, 0);word = scratchBuffer;}int caseType = caseOf(word, length);if (caseType == UPPER_CASE) {caseFoldTitle(word, length);caseFoldLower(titleBuffer, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(titleBuffer, length, true));list.addAll(doStem(lowerBuffer, length, true));return list;} else if (caseType == TITLE_CASE) {caseFoldLower(word, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(lowerBuffer, length, true));return list;} else {return doStem(word, length, false);}}
public HSSFConditionalFormattingRule createConditionalFormattingRule(String formula) {CFRuleRecord rr = CFRuleRecord.create(_sheet, formula);return new HSSFConditionalFormattingRule(_sheet, rr);}
public Record create(RecordInputStream in) {Object[] args = { in, };try {return (org.apache.poi.hssf.record.Record) _m.invoke(null, args);} catch (IllegalArgumentException | IllegalAccessException e) {throw new RuntimeException(e);} catch (InvocationTargetException e) {throw new org.apache.poi.util.RecordFormatException("Unable to construct record instance" , e.getTargetException());}}
public int set(int index, long[] arr, int off, int len) {assert len > 0 : "len must be > 0 (got " + len + ")";assert index >= 0 && index < size();len = Math.min(len, size() - index);assert off + len <= arr.length;for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {set(i, arr[o]);}return len;}
public synchronized long ramBytesUsed() {long bytes = 0;for(CachedOrds ords : ordsCache.values()) {bytes += ords.ramBytesUsed();}return bytes;}
public void writeDouble(double v) {writeLong(Double.doubleToLongBits(v));}
public String toString() {return "DocumentsWriterFlushControl [activeBytes=" + activeBytes+ ", flushBytes=" + flushBytes + "]";}
public ListSecurityConfigurationsResult listSecurityConfigurations(ListSecurityConfigurationsRequest request) {request = beforeClientExecution(request);return executeListSecurityConfigurations(request);}
public ListQualificationRequestsResult listQualificationRequests(ListQualificationRequestsRequest request) {request = beforeClientExecution(request);return executeListQualificationRequests(request);}
public void println(char[] chars) {println(new String(chars, 0, chars.length));}
public ReleaseAddressResult releaseAddress(ReleaseAddressRequest request) {request = beforeClientExecution(request);return executeReleaseAddress(request);}
public static boolean[] copyOfRange(boolean[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);boolean[] result = new boolean[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public void fillOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor( x, y, x + width, y + height ) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.setLineStyle(HSSFShape.LINESTYLE_NONE);shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setNoFill(false);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {try {String needle = TextFunction.evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);int startpos = TextFunction.evaluateIntArg(arg2, srcRowIndex, srcColumnIndex) - 1;if (startpos < 0) {return ErrorEval.VALUE_INVALID;}return eval(haystack, needle, startpos);} catch (EvaluationException e) {return e.getErrorEval();}}
public CreateInvalidationRequest(String distributionId, InvalidationBatch invalidationBatch) {setDistributionId(distributionId);setInvalidationBatch(invalidationBatch);}
public CreateUsageReportSubscriptionResult createUsageReportSubscription(CreateUsageReportSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateUsageReportSubscription(request);}
public static String fromString(String value) {return value;}
public GetDetectorsResult getDetectors(GetDetectorsRequest request) {request = beforeClientExecution(request);return executeGetDetectors(request);}
public static String fromDouble(Double d) {return Double.toString(d);}
public void writeProtectWorkbook( String password, String username ) {FileSharingRecord frec = getFileSharing();WriteAccessRecord waccess = getWriteAccess(); getWriteProtect();frec.setReadOnly((short)1);frec.setPassword((short)CryptoFunctions.createXorVerifier1(password));frec.setUsername(username);waccess.setUsername(username);}
public Process exec(String command, int timeout)throws TransportException {String ssh = SystemReader.getInstance().getenv("GIT_SSH"); boolean putty = ssh.toLowerCase(Locale.ROOT).contains("plink"); List<String> args = new ArrayList<>();args.add(ssh);if (putty&& !ssh.toLowerCase(Locale.ROOT).contains("tortoiseplink")) args.add("-batch"); if (0 < getURI().getPort()) {args.add(putty ? "-P" : "-p"); args.add(String.valueOf(getURI().getPort()));}if (getURI().getUser() != null)args.add(getURI().getUser() + "@" + getURI().getHost()); elseargs.add(getURI().getHost());args.add(command);ProcessBuilder pb = createProcess(args);try {return pb.start();} catch (IOException err) {throw new TransportException(err.getMessage(), err);}}
public void serialize(LittleEndianOutput out) {out.write(recordData);}
public UpdateFleetCapacityResult updateFleetCapacity(UpdateFleetCapacityRequest request) {request = beforeClientExecution(request);return executeUpdateFleetCapacity(request);}
public CreateDirectConnectGatewayAssociationResult createDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request) {request = beforeClientExecution(request);return executeCreateDirectConnectGatewayAssociation(request);}
public TokenStream create(TokenStream input) {if (words == null) {return input;} else {final TokenStream filter = new KeepWordFilter(input, words);return filter;}}
public final int getEndA() {return endA;}
public String getStrictHostKeyChecking() {return strictHostKeyChecking;}
public Lift(boolean changeSkip) {this.changeSkip = changeSkip;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_precision);}
public GetAuthorizerResult getAuthorizer(GetAuthorizerRequest request) {request = beforeClientExecution(request);return executeGetAuthorizer(request);}
public StringCharacterIterator(String value, int start, int end, int location) {string = value;if (start < 0 || end > string.length() || start > end|| location < start || location > end) {throw new IllegalArgumentException();}this.start = start;this.end = end;offset = location;}
public String toString() {StringBuilder buf = new StringBuilder();buf.append("ObjectToPack[");buf.append(Constants.typeString(getType()));buf.append(" ");buf.append(name());if (wantWrite())buf.append(" wantWrite");if (isReuseAsIs())buf.append(" reuseAsIs");if (isDoNotDelta())buf.append(" doNotDelta");if (isEdge())buf.append(" edge");if (getDeltaDepth() > 0)buf.append(" depth=").append(getDeltaDepth());if (isDeltaRepresentation()) {if (getDeltaBase() != null)buf.append(" base=inpack:").append(getDeltaBase().name());elsebuf.append(" base=edge:").append(getDeltaBaseId().name());}if (isWritten())buf.append(" offset=").append(getOffset());buf.append("]");return buf.toString();}
public String toString() {return "1";}
public final void readFully(byte[] dst, int offset, int byteCount) throws IOException {Streams.readFully(in, dst, offset, byteCount);}
public GetMailboxDetailsResult getMailboxDetails(GetMailboxDetailsRequest request) {request = beforeClientExecution(request);return executeGetMailboxDetails(request);}
public CharBuffer append(CharSequence csq) {if (csq != null) {return put(csq.toString());}return put("null");}
public RegisterFaceRequest() {super("LinkFace", "2018-07-20", "RegisterFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public static void checkValue(double result) throws EvaluationException {if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}}
public PutInvitationConfigurationResult putInvitationConfiguration(PutInvitationConfigurationRequest request) {request = beforeClientExecution(request);return executePutInvitationConfiguration(request);}
public QueryNode process(QueryNode queryTree) throws QueryNodeException {Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null) {throw new IllegalArgumentException("StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler");}this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;return super.process(queryTree);}
public void add(BytesRef utf8, int bucket) throws IOException {if (bucket < 0 || bucket >= buckets) {throw new IllegalArgumentException("Bucket outside of the allowed range [0, " + buckets + "): " + bucket);}scratch.grow(utf8.length + 10);scratch.clear();scratch.append((byte) bucket);scratch.append(utf8);sorter.add(scratch.get());}
public DescribeWorkspaceBundlesResult describeWorkspaceBundles() {return describeWorkspaceBundles(new DescribeWorkspaceBundlesRequest());}
public static String decode(String s) {return decode(s, false, Charsets.UTF_8);}
public void setExpire(Date expire) {this.expire = expire;expireAgeMillis = -1;}
public int DecRef() {assert count > 0: Thread.currentThread().getName() + ": RefCount is 0 pre-decrement for file \"" + fileName + "\"";return --count;}
public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {return src;}
public CreateInstancesFromSnapshotResult createInstancesFromSnapshot(CreateInstancesFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstancesFromSnapshot(request);}
public Comparator<? super E> comparator() {return backingMap.comparator();}
public boolean isValueSecure() {return valueSecure;}
public static short[] grow(short[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Short.BYTES));} elsereturn array;}
public ObjectId idFor(int type, byte[] data) {return idFor(type, data, 0, data.length);}
public CreateDomainNameResult createDomainName(CreateDomainNameRequest request) {request = beforeClientExecution(request);return executeCreateDomainName(request);}
public DeleteAddressBookResult deleteAddressBook(DeleteAddressBookRequest request) {request = beforeClientExecution(request);return executeDeleteAddressBook(request);}
public void addToolPack(UDFFinder toopack){AggregatingUDFFinder udfs = (AggregatingUDFFinder)_udfFinder;udfs.add(toopack);}
public SearchUsersResult searchUsers(SearchUsersRequest request) {request = beforeClientExecution(request);return executeSearchUsers(request);}
public String getAccessKeySecret() {return privateKeySecret;}
public void setValueAt(int index, E value) {if (mGarbage) {gc();}mValues[index] = value;}
public RefErrorPtg() {field_1_reserved = 0;}
public boolean getFlagByBit(int bitmask) {return ((flags & bitmask) != 0);}
public UpdateAccountSendingEnabledResult updateAccountSendingEnabled(UpdateAccountSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateAccountSendingEnabled(request);}
public AppCookieStickinessPolicy(String policyName, String cookieName) {setPolicyName(policyName);setCookieName(cookieName);}
public GetAccountBalanceResult getAccountBalance(GetAccountBalanceRequest request) {request = beforeClientExecution(request);return executeGetAccountBalance(request);}
public DescribeConversionTasksResult describeConversionTasks(DescribeConversionTasksRequest request) {request = beforeClientExecution(request);return executeDescribeConversionTasks(request);}
public DescribeImagesResult describeImages() {return describeImages(new DescribeImagesRequest());}
public void close() {_closed = true;}
public ListSignalingChannelsResult listSignalingChannels(ListSignalingChannelsRequest request) {request = beforeClientExecution(request);return executeListSignalingChannels(request);}
public MergeFacesRequest() {super("CloudPhoto", "2017-07-11", "MergeFaces", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DetectTextResult detectText(DetectTextRequest request) {request = beforeClientExecution(request);return executeDetectText(request);}
public DoubleBuffer get(double[] dst) {return get(dst, 0, dst.length);}
public long getCreationTime() {return decodeTS(P_CTIME);}
public TreeFilter clone() {return new Binary(a.clone(), b.clone());}
public ByteBuffer putChar(char value) {int newPosition = position + SizeOf.CHAR;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeShort(backingArray, offset + position, (short) value, order);position = newPosition;return this;}
public String toString() {return String.format("Rect [(%d,%d)-(%d,%d): %dx%d]", x, y, x + w, y + h, w, h);}
public static LongBuffer wrap(long[] array) {return wrap(array, 0, array.length);}
public CharsRef clone() {return new CharsRef(chars, offset, length);}
public SpanNearClauseFactory(IndexReader reader, String fieldName, BasicQueryFactory qf) {this.reader = reader;this.fieldName = fieldName;this.weightBySpanQuery = new HashMap<>();this.qf = qf;}
public BeginRecord clone() {return copy();}
public int start() {return start(0);}
public DescribeGameSessionQueuesResult describeGameSessionQueues(DescribeGameSessionQueuesRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessionQueues(request);}
public SubmitAttachmentStateChangesResult submitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request) {request = beforeClientExecution(request);return executeSubmitAttachmentStateChanges(request);}
public UnicodeString getString(int id ){return field_3_strings.get( id );}
public BigInteger getSignificand() {return _significand;}
public void join( AbstractEscherHolderRecord record ){rawDataContainer.concatenate(record.getRawData());}
public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} elsereturn array;}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;FlushInfo other = (FlushInfo) obj;if (estimatedSegmentSize != other.estimatedSegmentSize)return false;if (numDocs != other.numDocs)return false;return true;}
public void copyRawTo(int[] b, int o) {b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}
public ReadPipelineResult readPipeline(ReadPipelineRequest request) {request = beforeClientExecution(request);return executeReadPipeline(request);}
public BoostQueryNode(QueryNode query, float value) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));}this.value = value;setLeaf(false);allocate();add(query);}
public void setFallbackAlgorithm(DiffAlgorithm alg) {fallback = alg;}
public void add(Transition t) {find(t.min).starts.add(t);find(1+t.max).ends.add(t);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(" [FEATURE FORMULA ERRORS]\n");buffer.append("  checkCalculationErrors    = ");buffer.append("  checkEmptyCellRef         = ");buffer.append("  checkNumbersAsText        = ");buffer.append("  checkInconsistentRanges   = ");buffer.append("  checkInconsistentFormulas = ");buffer.append("  checkDateTimeFormats      = ");buffer.append("  checkUnprotectedFormulas  = ");buffer.append("  performDataValidation     = ");buffer.append(" [/FEATURE FORMULA ERRORS]\n");return buffer.toString();}
public void execute(Lexer lexer) {lexer.setType(type);}
public UpgradePublishedSchemaResult upgradePublishedSchema(UpgradePublishedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradePublishedSchema(request);}
public int readRecordSID() {readPlain(buffer, 0, LittleEndianConsts.SHORT_SIZE);int sid = LittleEndian.getUShort(buffer, 0);shouldSkipEncryptionOnCurrentRecord = isNeverEncryptedRecord(sid);return sid;}
public CreateImageBuilderStreamingURLResult createImageBuilderStreamingURL(CreateImageBuilderStreamingURLRequest request) {request = beforeClientExecution(request);return executeCreateImageBuilderStreamingURL(request);}
public SheetIdentifier(String bookName, NameIdentifier sheetIdentifier) {_bookName = bookName;_sheetIdentifier = sheetIdentifier;}
public boolean equals( Object o ) {return o instanceof PortugueseStemmer;}
public PasswordRecord clone() {return copy();}
public DescribeTableRequest(String tableName) {setTableName(tableName);}
public ModifyCacheParameterGroupResult modifyCacheParameterGroup(ModifyCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheParameterGroup(request);}
public E set(int location, E object) {ListIterator<E> it = listIterator(location);if (!it.hasNext()) {throw new IndexOutOfBoundsException();}E result = it.next();it.set(object);return result;}
public String toFormulaString() {return NumberToTextConverter.toText(field_1_value);}
public ListBootstrapActionsResult listBootstrapActions(ListBootstrapActionsRequest request) {request = beforeClientExecution(request);return executeListBootstrapActions(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(_wStyle);out.writeShort(_cLine);out.writeShort(_dxMin);StringUtil.writeUnicodeString(out, _str);if(_unused != null) {out.writeByte(_unused);}}
public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {super(input);this.synonyms = synonyms;this.ignoreCase = ignoreCase;this.fst = synonyms.fst;if (fst == null) {throw new IllegalArgumentException("fst must be non-null");}this.fstReader = fst.getBytesReader();rollBufferSize = 1+synonyms.maxHorizontalContext;futureInputs = new PendingInput[rollBufferSize];futureOutputs = new PendingOutputs[rollBufferSize];for(int pos=0;pos<rollBufferSize;pos++) {futureInputs[pos] = new PendingInput();futureOutputs[pos] = new PendingOutputs();}scratchArc = new FST.Arc<>();}
public CreateApiResult createApi(CreateApiRequest request) {request = beforeClientExecution(request);return executeCreateApi(request);}
public IndexOutput createOutput(String name, IOContext context) throws IOException {ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {return delegate.createOutput(name, context);} else {return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);}}
public void drawArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"drawArc not supported");}
public UpdateUserSettingsResult updateUserSettings(UpdateUserSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateUserSettings(request);}
public DeleteDiskSnapshotResult deleteDiskSnapshot(DeleteDiskSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteDiskSnapshot(request);}
public ColumnInfoRecord() {setColumnWidth(2275);_options = 2;_xfIndex = 0x0f;field_6_reserved = 2; }
public final long getLong(int index) {checkIndex(index, SizeOf.LONG);return Memory.peekLong(backingArray, offset + index, order);}
public DeleteKnownHostKeysResult deleteKnownHostKeys(DeleteKnownHostKeysRequest request) {request = beforeClientExecution(request);return executeDeleteKnownHostKeys(request);}
public DeleteSigningCertificateRequest(String certificateId) {setCertificateId(certificateId);}
public StopProcessingJobResult stopProcessingJob(StopProcessingJobRequest request) {request = beforeClientExecution(request);return executeStopProcessingJob(request);}
public TermsEnum getTermsEnum(Terms terms) throws IOException {switch(type) {case NONE:return TermsEnum.EMPTY;case ALL:return terms.iterator();case SINGLE:return new SingleTermsEnum(terms.iterator(), term);case NORMAL:return terms.intersect(this, null);default:throw new RuntimeException("unhandled case");}}
public void grow() {costs = ArrayUtil.grow(costs, 1+count);lastRightID = ArrayUtil.grow(lastRightID, 1+count);backPos = ArrayUtil.grow(backPos, 1+count);backWordPos = ArrayUtil.grow(backWordPos, 1+count);backIndex = ArrayUtil.grow(backIndex, 1+count);backID = ArrayUtil.grow(backID, 1+count);final Type[] newBackType = new Type[backID.length];System.arraycopy(backType, 0, newBackType, 0, backType.length);backType = newBackType;}
public int get(final int index){if (index >= _limit){throw new IndexOutOfBoundsException(index + " not accessible in a list of length " + _limit);}return _array[ index ];}
public LongBuffer slice() {return new ReadWriteLongArrayBuffer(remaining(), backingArray, offset + position);}
public ListProblemsResult listProblems(ListProblemsRequest request) {request = beforeClientExecution(request);return executeListProblems(request);}
public static double pmt(double r, double n, double p, double f, boolean t) {double retval = 0;if (r == 0) {retval = -1*(f+p)/n;}else {double r1 = r + 1;retval = ( f + p * Math.pow(r1, n) ) * r/((t ? r1 : 1) * (1 - Math.pow(r1, n)));}return retval;}
public PrintGridlinesRecord clone() {return copy();}
public HSSFCellStyle getColumnStyle(int column) {short styleIndex = _sheet.getXFIndexForColAt((short) column);if (styleIndex == 0xf) {return null;}ExtendedFormatRecord xf = _book.getExFormatAt(styleIndex);return new HSSFCellStyle(styleIndex, xf, _book);}
public Query makeLuceneQueryField(String fieldName, BasicQueryFactory qf){Query q = makeLuceneQueryFieldNoBoost(fieldName, qf);if (isWeighted()) {q = new BoostQuery(q, getWeight()); }return q;}
public double getPrecisionAt(int n) {if (n<1 || n>MAX_POINTS) {throw new IllegalArgumentException("n="+n+" - but it must be in [1,"+MAX_POINTS+"] range!");}if (n>numPoints) {return (numPoints * pAt[(int)numPoints])/n;}return pAt[n];}
public DescribeEngineDefaultParametersRequest(String dBParameterGroupFamily) {setDBParameterGroupFamily(dBParameterGroupFamily);}
public DeleteClientCertificateResult deleteClientCertificate(DeleteClientCertificateRequest request) {request = beforeClientExecution(request);return executeDeleteClientCertificate(request);}
public int compareTo(CharBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;char thisByte, otherByte;while (compareRemaining > 0) {thisByte = get(thisPos);otherByte = otherBuffer.get(otherPos);if (thisByte != otherByte) {return thisByte < otherByte ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public byte readByte(){return _in.readByte();}
public SendBounceResult sendBounce(SendBounceRequest request) {request = beforeClientExecution(request);return executeSendBounce(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double dn;try {ValueEval ve1 = OperandResolver.getSingleValue(arg1, srcRowIndex, srcColumnIndex);dn = OperandResolver.coerceValueToDouble(ve1);} catch (EvaluationException e1) {return ErrorEval.VALUE_INVALID;}if (dn < 0 || dn > 1) { return ErrorEval.NUM_ERROR;}double result;try {double[] ds = ValueCollector.collectValues(arg0);int N = ds.length;if (N == 0 || N > 8191) {return ErrorEval.NUM_ERROR;}double n = (N - 1) * dn + 1;if (n == 1d) {result = StatsLib.kthSmallest(ds, 1);} else if (Double.compare(n, N) == 0) {result = StatsLib.kthLargest(ds, 1);} else {int k = (int) n;double d = n - k;result = StatsLib.kthSmallest(ds, k) + d* (StatsLib.kthSmallest(ds, k + 1) - StatsLib.kthSmallest(ds, k));}NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public int getIndexOfFormattingRun(int index) {FormatRun r = _string.getFormatRun(index);return r.getCharacterPos();}
public void getEntryObjectId(MutableObjectId out) {out.fromRaw(idBuffer(), idOffset());}
public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} elsereturn array;}
public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public GroupingSearch setCaching(int maxDocsToCache, boolean cacheScores) {this.maxDocsToCache = maxDocsToCache;this.maxCacheRAMMB = null;this.cacheScores = cacheScores;return this;}
public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){if( !terminal ) return false;if( phraseCandidate.size() == 1 ) return true;int pos = phraseCandidate.get( 0 ).getPosition();for( int i = 1; i < phraseCandidate.size(); i++ ){int nextPos = phraseCandidate.get( i ).getPosition();if( Math.abs( nextPos - pos - 1 ) > slop ) return false;pos = nextPos;}return true;}
public Run startWorkflowExecution(StartWorkflowExecutionRequest request) {request = beforeClientExecution(request);return executeStartWorkflowExecution(request);}
public char[] nextKey() {goNext();return keys[lastPos];}
public ContainsResult contains(BytesRef value) {int hash = hashFunction.hash(value);if (hash < 0) {hash = hash * -1;}return mayContainValue(hash);}
public GetMethodResponseResult getMethodResponse(GetMethodResponseRequest request) {request = beforeClientExecution(request);return executeGetMethodResponse(request);}
public void setValue(boolean value) {_value = value ? 1 : 0;_isError = false;}
public synchronized E elementAt(int location) {if (location < elementCount) {return (E) elementData[location];}throw arrayIndexOutOfBoundsException(location, elementCount);}
public void set(int index, long value) {final int o = index >>> 3;final int b = index & 7;final int shift = b << 3;blocks[o] = (blocks[o] & ~(255L << shift)) | (value << shift);}
public IterationRecord clone() {return copy();}
public boolean requiresCommitBody() {return a.requiresCommitBody();}
public UpdateTrafficPolicyCommentResult updateTrafficPolicyComment(UpdateTrafficPolicyCommentRequest request) {request = beforeClientExecution(request);return executeUpdateTrafficPolicyComment(request);}
public UpdatePrimaryEmailAddressResult updatePrimaryEmailAddress(UpdatePrimaryEmailAddressRequest request) {request = beforeClientExecution(request);return executeUpdatePrimaryEmailAddress(request);}
public static Pattern compile(String pattern) {return new Pattern(pattern, 0);}
public static int update(int hash, int value) {final int c1 = 0xCC9E2D51;final int c2 = 0x1B873593;final int r1 = 15;final int r2 = 13;final int m = 5;final int n = 0xE6546B64;int k = value;k = k * c1;k = (k << r1) | (k >>> (32 - r1));k = k * c2;hash = hash ^ k;hash = (hash << r2) | (hash >>> (32 - r2));hash = hash * m + n;return hash;}
public void serialize(LittleEndianOutput out) {out.writeShort(getHorizontalHold());out.writeShort(getVerticalHold());out.writeShort(getWidth());out.writeShort(getHeight());out.writeShort(getOptions());out.writeShort(getActiveSheetIndex());out.writeShort(getFirstVisibleTab());out.writeShort(getNumSelectedTabs());out.writeShort(getTabWidthRatio());}
public boolean lessThan(ShardRef first, ShardRef second) {assert first != second;final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];for(int compIDX=0;compIDX<comparators.length;compIDX++) {final FieldComparator comp = comparators[compIDX];final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);if (cmp != 0) {return cmp < 0;}}return tieBreakLessThan(first, firstFD, second, secondFD, tieBreaker);}
public static int UTF8toUTF16(BytesRef bytesRef, char[] chars) {return UTF8toUTF16(bytesRef.bytes, bytesRef.offset, bytesRef.length, chars);}
public Trie optimize(Trie orig) {List<CharSequence> cmds = orig.cmds;List<Row> rows = new ArrayList<>();List<Row> orows = orig.rows;int remap[] = new int[orows.size()];Arrays.fill(remap, 1);for (int j = orows.size() - 1; j >= 0; j--) {if (eat(orows.get(j), remap)) {remap[j] = 0;}}Arrays.fill(remap, -1);rows = removeGaps(orig.root, orows, new ArrayList<Row>(), remap);return new Trie(orig.forward, remap[orig.root], cmds, rows);}
public DataValidationConstraint createCustomConstraint(String formula) {return DVConstraint.createCustomFormulaConstraint(formula);}
public ByteBuffer putInt(int index, int value) {throw new ReadOnlyBufferException();}
public DescribeLoadBalancerPolicyTypesResult describeLoadBalancerPolicyTypes() {return describeLoadBalancerPolicyTypes(new DescribeLoadBalancerPolicyTypesRequest());}
public NIOFSIndexInput clone() {NIOFSIndexInput clone = (NIOFSIndexInput)super.clone();clone.isClone = true;return clone;}
public long getTotalSLLATNLookaheadOps() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long k = 0;for (int i = 0; i < decisions.length; i++) {k += decisions[i].SLL_ATNTransitions;}return k;}
public UpdateEndpointResult updateEndpoint(UpdateEndpointRequest request) {request = beforeClientExecution(request);return executeUpdateEndpoint(request);}
public GetEmailChannelResult getEmailChannel(GetEmailChannelRequest request) {request = beforeClientExecution(request);return executeGetEmailChannel(request);}
public ListPhoneNumberOrdersResult listPhoneNumberOrders(ListPhoneNumberOrdersRequest request) {request = beforeClientExecution(request);return executeListPhoneNumberOrders(request);}
public UpdateBuildResult updateBuild(UpdateBuildRequest request) {request = beforeClientExecution(request);return executeUpdateBuild(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );int remainingBytes = 16;LittleEndian.putInt( data, offset + 4, remainingBytes );LittleEndian.putInt( data, offset + 8, field_1_rectX1 );LittleEndian.putInt( data, offset + 12, field_2_rectY1 );LittleEndian.putInt( data, offset + 16, field_3_rectX2 );LittleEndian.putInt( data, offset + 20, field_4_rectY2 );listener.afterRecordSerialize( offset + getRecordSize(), getRecordId(), offset + getRecordSize(), this );return 8 + 16;}
public CleanCommand setDryRun(boolean dryRun) {this.dryRun = dryRun;return this;}
public DescribeClusterVersionsResult describeClusterVersions(DescribeClusterVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterVersions(request);}
public DescribeWorkspacesResult describeWorkspaces(DescribeWorkspacesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaces(request);}
public void copyRawTo(int[] b, int o) {b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}
public SetStackPolicyResult setStackPolicy(SetStackPolicyRequest request) {request = beforeClientExecution(request);return executeSetStackPolicy(request);}
public String toString() {StringBuilder s = new StringBuilder();append(s, oldRef, "CREATE"); s.append(' ');append(s, newRef, "DELETE"); s.append(' ').append(getRefName());s.append(' ').append(getResult());if (getMessage() != null) {s.append(' ').append(getMessage());}return s.toString();}
public short getXFAt(int coffset) {return field_3_rks[coffset].xf;}
public ByteBuffer put(byte[] src, int srcOffset, int byteCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, byteCount);if (byteCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + byteCount; ++i) {put(src[i]);}return this;}
public ReceiveMessageResult receiveMessage(String queueUrl) {return receiveMessage(new ReceiveMessageRequest().withQueueUrl(queueUrl));}
public NativeUnixIndexInput(NativeUnixIndexInput other) throws IOException {super(other.toString());this.fis = null;channel = other.channel;this.bufferSize = other.bufferSize;buffer = ByteBuffer.allocateDirect(bufferSize);filePos = -bufferSize;bufferPos = bufferSize;isOpen = true;isClone = true;seek(other.getFilePointer());}
public Merger newMerger(Repository db, boolean inCore) {return new OneSide(db, treeIndex);}
public void flush() {synchronized (lock) {if (out != null) {try {out.flush();} catch (IOException e) {setError();}} else {setError();}}}
public DisassociateIamInstanceProfileResult disassociateIamInstanceProfile(DisassociateIamInstanceProfileRequest request) {request = beforeClientExecution(request);return executeDisassociateIamInstanceProfile(request);}
public void beginTask(String title, int totalWork) {if (!isMainThread())throw new IllegalStateException();pm.beginTask(title, totalWork);}
public void run() {try {count = task.runAndMaybeStats(letChildReport);} catch (Exception e) {throw new RuntimeException(e);}}
public TokenFilter create(TokenStream input) {return new EdgeNGramTokenFilter(input, minGramSize, maxGramSize, preserveOriginal);}
public String toString() {return "RemoteRefUpdate[remoteName="+ remoteName+ ", "+ status+ ", "+ (expectedOldObjectId != null ? expectedOldObjectId.name(): "(null)") + "..."+ (newObjectId != null ? newObjectId.name() : "(null)")+ (fastForward ? ", fastForward" : "")+ ", srcRef=" + srcRef+ (forceUpdate ? ", forceUpdate" : "") + ", message="+ (message != null ? "\"" + message + "\"" : "null") + "]";}
public ListJournalS3ExportsResult listJournalS3Exports(ListJournalS3ExportsRequest request) {request = beforeClientExecution(request);return executeListJournalS3Exports(request);}
public boolean lookingAt() {matchFound = lookingAtImpl(address, input, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}
public DescribeIdentityUsageResult describeIdentityUsage(DescribeIdentityUsageRequest request) {request = beforeClientExecution(request);return executeDescribeIdentityUsage(request);}
public void carry(RevFlag flag) {final int carry = flags & flag.mask;if (carry != 0)carryFlags(this, carry);}
public Count(){_predicate = defaultPredicate;}
public ShowNoteCommand notesShow() {return new ShowNoteCommand(repo);}
public ResolveRoomResult resolveRoom(ResolveRoomRequest request) {request = beforeClientExecution(request);return executeResolveRoom(request);}
public ValueEval getArea3DEval(Area3DPxg aptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(aptg.getSheetName(), aptg.getLastSheetName(), aptg.getExternalWorkbookNumber());return new LazyAreaEval(aptg.getFirstRow(), aptg.getFirstColumn(),aptg.getLastRow(), aptg.getLastColumn(), sre);}
public DoubleMetaphoneFilterFactory(Map<String,String> args) {super(args);inject = getBoolean(args, INJECT, true);maxCodeLength = getInt(args, MAX_CODE_LENGTH, DEFAULT_MAX_CODE_LENGTH);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PALETTE]\n");buffer.append("  numcolors     = ").append(_colors.size()).append('\n');for (int i = 0; i < _colors.size(); i++) {PColor c = _colors.get(i);buffer.append("* colornum      = ").append(i).append('\n');buffer.append(c);buffer.append("
public DocOffsetSorter(int maxDoc) {super(maxDoc / 64);this.tmpDocs = new int[maxDoc / 64];this.tmpOffsets = new long[maxDoc / 64];}
public EnableInsightRulesResult enableInsightRules(EnableInsightRulesRequest request) {request = beforeClientExecution(request);return executeEnableInsightRules(request);}
public boolean equals(Object obj) {if ( this==obj ) return true;if ( !(obj instanceof AND) ) return false;AND other = (AND)obj;return Arrays.equals(this.opnds, other.opnds);}
public static int getEncodedSize(Ptg[] ptgs) {int result = 0;for (Ptg ptg : ptgs) {result += ptg.getSize();}return result;}
public IterationRecord(boolean iterateOn) {_flags = iterationOn.setBoolean(0, iterateOn);}
public UnlinkIdentityResult unlinkIdentity(UnlinkIdentityRequest request) {request = beforeClientExecution(request);return executeUnlinkIdentity(request);}
public CreateThreatIntelSetResult createThreatIntelSet(CreateThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeCreateThreatIntelSet(request);}
public TokenizedPhraseQueryNode() {setLeaf(false);allocate();}
public DataItemRecord(RecordInputStream in) {isxvdData = in.readUShort();iiftab = in.readUShort();df = in.readUShort();isxvd = in.readUShort();isxvi = in.readUShort();ifmt = in.readUShort();name = in.readString();}
public DeleteDBParameterGroupResult deleteDBParameterGroup(DeleteDBParameterGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDBParameterGroup(request);}
public GetReservedNodeExchangeOfferingsResult getReservedNodeExchangeOfferings(GetReservedNodeExchangeOfferingsRequest request) {request = beforeClientExecution(request);return executeGetReservedNodeExchangeOfferings(request);}
public static long nextHighestPowerOfTwo(long v) {v--;v |= v >> 1;v |= v >> 2;v |= v >> 4;v |= v >> 8;v |= v >> 16;v |= v >> 32;v++;return v;}
public RunInstancesResult runInstances(RunInstancesRequest request) {request = beforeClientExecution(request);return executeRunInstances(request);}
public ChangeMessageVisibilityBatchResult changeMessageVisibilityBatch(String queueUrl, java.util.List<ChangeMessageVisibilityBatchRequestEntry> entries) {return changeMessageVisibilityBatch(new ChangeMessageVisibilityBatchRequest().withQueueUrl(queueUrl).withEntries(entries));}
public DeleteRealtimeEndpointResult deleteRealtimeEndpoint(DeleteRealtimeEndpointRequest request) {request = beforeClientExecution(request);return executeDeleteRealtimeEndpoint(request);}
public CreateDiskSnapshotResult createDiskSnapshot(CreateDiskSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateDiskSnapshot(request);}
public void mark(int readLimit) throws IOException {if (readLimit < 0) {throw new IllegalArgumentException();}synchronized (lock) {checkNotClosed();markpos = pos;}}
public TokenStream create(TokenStream input) {return new ICUNormalizer2Filter(input, normalizer);}
public ModifyImageAttributeResult modifyImageAttribute(ModifyImageAttributeRequest request) {request = beforeClientExecution(request);return executeModifyImageAttribute(request);}
public DescribeClusterSubnetGroupsResult describeClusterSubnetGroups(DescribeClusterSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterSubnetGroups(request);}
public StopQueryExecutionResult stopQueryExecution(StopQueryExecutionRequest request) {request = beforeClientExecution(request);return executeStopQueryExecution(request);}
public UpdateUserInfoRequest() {super("cr", "2016-06-07", "UpdateUserInfo", "cr");setUriPattern("/users");setMethod(MethodType.POST);}
public DiscoverInputSchemaResult discoverInputSchema(DiscoverInputSchemaRequest request) {request = beforeClientExecution(request);return executeDiscoverInputSchema(request);}
public GetEnvironmentResult getEnvironment(GetEnvironmentRequest request) {request = beforeClientExecution(request);return executeGetEnvironment(request);}
public UpdateCondition(String name, String value, Boolean exists) {setName(name);setValue(value);setExists(exists);}
public void serialize(LittleEndianOutput out) {out.writeShort(getCalcMode());}
public AmazonS3EncryptionClient(EncryptionMaterials encryptionMaterials) {this(new StaticEncryptionMaterialsProvider(encryptionMaterials));}
public void addRule(ConditionalFormattingRule cfRule){addRule((HSSFConditionalFormattingRule)cfRule);}
public Iterator<E> descendingIterator() {return descendingSet().iterator();}
public DescribeSubnetGroupsResult describeSubnetGroups(DescribeSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeSubnetGroups(request);}
public void append(String name, RevBlob blob) {append(name, REGULAR_FILE, blob);}
public NavigableMap<K, V> subMap(K from, boolean fromInclusive, K to, boolean toInclusive) {Bound fromBound = fromInclusive ? INCLUSIVE : EXCLUSIVE;Bound toBound = toInclusive ? INCLUSIVE : EXCLUSIVE;return subMap(from, fromBound, to, toBound);}
public E next() {if (expectedModCount == modCount) {try {E result = get(pos + 1);lastPosition = ++pos;return result;} catch (IndexOutOfBoundsException e) {throw new NoSuchElementException();}}throw new ConcurrentModificationException();}
static public double ipmt(double r, int per, int nper, double pv) {return ipmt(r, per, nper, pv, 0);}
public TokenStream create(TokenStream input) {if (dictionary == null) {return input;}return new DictionaryCompoundWordTokenFilter(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);}
public String toString() {StringBuilder r = new StringBuilder();r.append("(");fieldNamesToString(r);r.append(q.toString());r.append(")");return r.toString();}
public AssociateDeviceWithRoomResult associateDeviceWithRoom(AssociateDeviceWithRoomRequest request) {request = beforeClientExecution(request);return executeAssociateDeviceWithRoom(request);}
public DeleteRetentionPolicyRequest(String logGroupName) {setLogGroupName(logGroupName);}
public TypeTokenFilterFactory(Map<String,String> args) {super(args);stopTypesFiles = require(args, "types");useWhitelist = getBoolean(args, "useWhitelist", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ServerCertificate(ServerCertificateMetadata serverCertificateMetadata, String certificateBody) {setServerCertificateMetadata(serverCertificateMetadata);setCertificateBody(certificateBody);}
public final void add(RevCommit c, RevFlag queueControl) {if (!c.has(queueControl)) {c.add(queueControl);add(c);}}
public BlameCommand setFilePath(String filePath) {this.path = filePath;return this;}
public boolean isTraverseEmptyCells() {return traverseEmptyCells;}
public QueryCustomerByIdRequest() {super("xspace", "2017-07-20", "QueryCustomerById");setUriPattern("/customer");setMethod(MethodType.PUT);}
public OpenNLPPOSFilterFactory(Map<String,String> args) {super(args);posTaggerModelFile = require(args, POS_TAGGER_MODEL);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetLinkAttributesResult getLinkAttributes(GetLinkAttributesRequest request) {request = beforeClientExecution(request);return executeGetLinkAttributes(request);}
public byte[] getByteBlock() {bytesUsed.addAndGet(blockSize);return new byte[blockSize];}
public CanonicalTreeParser() {reset(EMPTY);}
public OldLabelRecord(RecordInputStream in){super(in, in.getSid() == biff2_sid);if (isBiff2()) {field_4_string_len  = (short)in.readUByte();} else {field_4_string_len   = in.readShort();}field_5_bytes = IOUtils.safelyAllocate(field_4_string_len, MAX_RECORD_LENGTH);in.read(field_5_bytes, 0, field_4_string_len);if (in.remaining() > 0) {logger.log(POILogger.INFO,"LabelRecord data remains: " + in.remaining() +" : " + HexDump.toHex(in.readRemainder()));}}
public DBCellRecord clone() {return copy();}
public GetCampaignResult getCampaign(GetCampaignRequest request) {request = beforeClientExecution(request);return executeGetCampaign(request);}
public boolean isEmpty() {return backingMap.isEmpty();}
public Object subtract(Object object, Object inc) {return outputs.subtract((T) object, (T) inc);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[COLINFO]\n");sb.append("  colfirst = ").append(getFirstColumn()).append("\n");sb.append("  collast  = ").append(getLastColumn()).append("\n");sb.append("  colwidth = ").append(getColumnWidth()).append("\n");sb.append("  xfindex  = ").append(getXFIndex()).append("\n");sb.append("  options  = ").append(HexDump.shortToHex(_options)).append("\n");sb.append("    hidden   = ").append(getHidden()).append("\n");sb.append("    olevel   = ").append(getOutlineLevel()).append("\n");sb.append("    collapsed= ").append(getCollapsed()).append("\n");sb.append("[/COLINFO]\n");return sb.toString();}
public EditList toEditList() {final EditList r = new EditList();for (HunkHeader hunk : hunks)r.addAll(hunk.toEditList());return r;}
public void setParams(String params) {super.setParams(params);if (params != null) {String[] split = params.split(",");if (split.length > 0) {commitUserData = split[0];}}}
public HSSFCell createCell(int columnIndex, CellType type){short shortCellNum = (short)columnIndex;if(columnIndex > 0x7FFF) {shortCellNum = (short)(0xffff - columnIndex);}HSSFCell cell = new HSSFCell(book, sheet, getRowNum(), shortCellNum, type);addCell(cell);sheet.getSheet().addValueRecord(getRowNum(), cell.getCellValueRecord());return cell;}
public PhraseQuery build() {Term[] terms = this.terms.toArray(new Term[this.terms.size()]);int[] positions = new int[this.positions.size()];for (int i = 0; i < positions.length; ++i) {positions[i] = this.positions.get(i);}return new PhraseQuery(slop, terms, positions);}
public ModifyInstanceEventStartTimeResult modifyInstanceEventStartTime(ModifyInstanceEventStartTimeRequest request) {request = beforeClientExecution(request);return executeModifyInstanceEventStartTime(request);}
public boolean checkShowJsonItemName() {return false;}
public Analyzer create() {return new Analyzer() {private final Integer positionIncrementGap = AnalyzerFactory.this.positionIncrementGap;private final Integer offsetGap = AnalyzerFactory.this.offsetGap;@Override
public static RevFilter create(RevFilter[] list) {if (list.length == 2)return create(list[0], list[1]);if (list.length < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.length];System.arraycopy(list, 0, subfilters, 0, list.length);return new List(subfilters);}
public DescribePrefixListsResult describePrefixLists(DescribePrefixListsRequest request) {request = beforeClientExecution(request);return executeDescribePrefixLists(request);}
public CharVector clone() {CharVector cv = new CharVector(array.clone(), blockSize);cv.n = this.n;return cv;}
public CreateDatasetImportJobResult createDatasetImportJob(CreateDatasetImportJobRequest request) {request = beforeClientExecution(request);return executeCreateDatasetImportJob(request);}
public GetRecommenderConfigurationsResult getRecommenderConfigurations(GetRecommenderConfigurationsRequest request) {request = beforeClientExecution(request);return executeGetRecommenderConfigurations(request);}
public void setOldPrefix(String prefix) {oldPrefix = prefix;}
public DescribeAvailabilityZonesResult describeAvailabilityZones() {return describeAvailabilityZones(new DescribeAvailabilityZonesRequest());}
public final boolean matches(char c) {return this.expectedCharacter == c;}
public static void putCompressedUnicode(String input, byte[] output, int offset) {byte[] bytes = input.getBytes(ISO_8859_1);System.arraycopy(bytes, 0, output, offset, bytes.length);}
public void put(int key, int value) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {mValues[i] = value;} else {i = ~i;if (mSize >= mKeys.length) {int n = ArrayUtils.idealIntArraySize(mSize + 1);int[] nkeys = new int[n];int[] nvalues = new int[n];System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);System.arraycopy(mValues, 0, nvalues, 0, mValues.length);mKeys = nkeys;mValues = nvalues;}if (mSize - i != 0) {System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);System.arraycopy(mValues, i, mValues, i + 1, mSize - i);}mKeys[i] = key;mValues[i] = value;mSize++;}}
public void clearEscherRecords(){escherRecords.clear();}
public String getSchemeSpecificPart() {return decode(schemeSpecificPart);}
public DeleteSkillAuthorizationResult deleteSkillAuthorization(DeleteSkillAuthorizationRequest request) {request = beforeClientExecution(request);return executeDeleteSkillAuthorization(request);}
public QuerySyncPicScheduleRequest() {super("LinkFace", "2018-07-20", "QuerySyncPicSchedule");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public SheetRecordCollectingListener(HSSFListener childListener) {this.childListener = childListener;}
public boolean equals( Object o ) {return o instanceof RussianStemmer;}
public void clear() {ArrayList <HSSFShape> copy = new ArrayList<>(_shapes);for (HSSFShape shape: copy){removeShape(shape);}}
public AddTagsToVaultResult addTagsToVault(AddTagsToVaultRequest request) {request = beforeClientExecution(request);return executeAddTagsToVault(request);}
public String toString() {return getClass().getSimpleName() + '@' + Integer.toHexString(hashCode());}
public final boolean equals(Object obj) {if (obj instanceof Charset) {Charset that = (Charset) obj;return this.canonicalName.equals(that.canonicalName);}return false;}
public String toString() {return source + " --> " + dest + " " + (char) min + "-" + (char) max;}
public DeleteDirectoryConfigResult deleteDirectoryConfig(DeleteDirectoryConfigRequest request) {request = beforeClientExecution(request);return executeDeleteDirectoryConfig(request);}
public static DVConstraint createTimeConstraint(int comparisonOperator, String expr1, String expr2) {if (expr1 == null) {throw new IllegalArgumentException("expr1 must be supplied");}OperatorType.validateSecondArg(comparisonOperator, expr1);String formula1 = getFormulaFromTextExpression(expr1);Double value1 = formula1 == null ? convertTime(expr1) : null;String formula2 = getFormulaFromTextExpression(expr2);Double value2 = formula2 == null ? convertTime(expr2) : null;return new DVConstraint(ValidationType.TIME, comparisonOperator, formula1, formula2, value1, value2, null);}
public String toString() {return ".";}
public RestoreDBInstanceFromDBSnapshotRequest(String dBInstanceIdentifier, String dBSnapshotIdentifier) {setDBInstanceIdentifier(dBInstanceIdentifier);setDBSnapshotIdentifier(dBSnapshotIdentifier);}
public String getName() {return seqName; }
public void readFully(byte[] buf) {readFully(buf, 0, buf.length);}
public boolean containsKey(Object o) {if(o == null)throw new NullPointerException();return false;}
public String toFormulaString() {return FormulaError.REF.getString();}
public History getWorkflowExecutionHistory(GetWorkflowExecutionHistoryRequest request) {request = beforeClientExecution(request);return executeGetWorkflowExecutionHistory(request);}
public DeleteFileSystemPolicyResult deleteFileSystemPolicy(DeleteFileSystemPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteFileSystemPolicy(request);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 1:return evaluate(srcRowIndex, srcColumnIndex, args[0]);case 0:return new NumberEval(srcColumnIndex+1);}return ErrorEval.VALUE_INVALID;}
public String getFormat(short index) {if (_movedBuiltins) {return _formats.get(index);}if(index == -1) {return null;}String fmt = _formats.size() > index ? _formats.get(index) : null;if (_builtinFormats.length > index && _builtinFormats[index] != null) {if (fmt != null) {return fmt;} else {return _builtinFormats[index];}}return fmt;}
public boolean include(RevWalk walker, RevCommit cmit)throws StopWalkException, MissingObjectException,IncorrectObjectTypeException, IOException {count++;if (count > maxCount)throw StopWalkException.INSTANCE;return true;}
public final Buffer mark() {mark = position;return this;}
public ModifyClientPropertiesResult modifyClientProperties(ModifyClientPropertiesRequest request) {request = beforeClientExecution(request);return executeModifyClientProperties(request);}
public void stopWalk() {if (parent != null)parent.stopWalk();}
public ObjectId toObjectId() {return isComplete() ? new ObjectId(w1, w2, w3, w4, w5) : null;}
public UpdateIntegrationResult updateIntegration(UpdateIntegrationRequest request) {request = beforeClientExecution(request);return executeUpdateIntegration(request);}
public PutDetectorResult putDetector(PutDetectorRequest request) {request = beforeClientExecution(request);return executePutDetector(request);}
public long getLong(String section, String name, long defaultValue) {return typedGetter.getLong(this, section, null, name, defaultValue);}
public void resetBackgroundImage(){EscherSimpleProperty property = getOptRecord().lookup(EscherPropertyTypes.FILL__PATTERNTEXTURE);if (null != property){EscherBSERecord bse = getPatriarch().getSheet().getWorkbook().getWorkbook().getBSERecord(property.getPropertyValue());bse.setRef(bse.getRef() - 1);getOptRecord().removeEscherProperty(EscherPropertyTypes.FILL__PATTERNTEXTURE);}setPropertyValue(new EscherSimpleProperty( EscherPropertyTypes.FILL__FILLTYPE, false, false, FILL_TYPE_SOLID));}
public void reset(DataInput in, long valueCount) {this.in = in;assert valueCount >= 0;this.valueCount = valueCount;off = blockSize;ord = 0;}
public ResetSnapshotAttributeResult resetSnapshotAttribute(ResetSnapshotAttributeRequest request) {request = beforeClientExecution(request);return executeResetSnapshotAttribute(request);}
public MutableValue duplicate() {MutableValueStr v = new MutableValueStr();v.value.copyBytes(value);v.exists = this.exists;return v;}
public int getColumnNumber() { return column; }
public TokenStream create(TokenStream input) {if (pattern != null) {input = new PatternKeywordMarkerFilter(input, pattern);}if (protectedWords != null) {input = new SetKeywordMarkerFilter(input, protectedWords);}return input;}
public ElisionFilter(TokenStream input, CharArraySet articles) {super(input);this.articles = articles;}
public static int strcmp(String str, char[] a, int start) {int i, d, len = str.length();for (i = 0; i < len; i++) {d = (int) str.charAt(i) - a[start + i];if (d != 0) {return d;}if (a[start + i] == 0) {return d;}}if (a[start + i] != 0) {return -a[start + i];}return 0;}
public NavigableSet<E> descendingSet() {return (descendingSet != null) ? descendingSet: (descendingSet = new TreeSet<E>(backingMap.descendingMap()));}
public DecisionInfo[] getDecisionInfo() {return decisions;}
public PushConnection openPush() throws NotSupportedException {throw new NotSupportedException(JGitText.get().pushIsNotSupportedForBundleTransport);}
public PutRecordResult putRecord(PutRecordRequest request) {request = beforeClientExecution(request);return executePutRecord(request);}
public List<? extends Token> getAllTokens() {List<Token> tokens = new ArrayList<Token>();Token t = nextToken();while ( t.getType()!=Token.EOF ) {tokens.add(t);t = nextToken();}return tokens;}
public ModifyInstanceCapacityReservationAttributesResult modifyInstanceCapacityReservationAttributes(ModifyInstanceCapacityReservationAttributesRequest request) {request = beforeClientExecution(request);return executeModifyInstanceCapacityReservationAttributes(request);}
public MoveFacePhotosRequest() {super("CloudPhoto", "2017-07-11", "MoveFacePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public RequestSpotFleetResult requestSpotFleet(RequestSpotFleetRequest request) {request = beforeClientExecution(request);return executeRequestSpotFleet(request);}
public ListApplicationSnapshotsResult listApplicationSnapshots(ListApplicationSnapshotsRequest request) {request = beforeClientExecution(request);return executeListApplicationSnapshots(request);}
public DefaultAcsClient(IClientProfile profile, AlibabaCloudCredentials credentials) {this(profile, new StaticCredentialsProvider(credentials));}
public ConcurrentRefUpdateException(String message, Ref ref,RefUpdate.Result rc) {super((rc == null) ? message : message + ". " + MessageFormat.format(JGitText.get().refUpdateReturnCodeWas, rc));this.rc = rc;this.ref = ref;}
public DeleteNetworkAclResult deleteNetworkAcl(DeleteNetworkAclRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkAcl(request);}
public ShortBuffer get(short[] dst, int dstOffset, int shortCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, shortCount);if (shortCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + shortCount; ++i) {dst[i] = get();}return this;}
public static SharedValueManager createEmpty() {return new SharedValueManager(new SharedFormulaRecord[0], new CellReference[0], new ArrayRecord[0], new TableRecord[0]);}
public DeleteCacheSecurityGroupResult deleteCacheSecurityGroup(DeleteCacheSecurityGroupRequest request) {request = beforeClientExecution(request);return executeDeleteCacheSecurityGroup(request);}
public CreateGroupRequest(String groupName) {setGroupName(groupName);}
public void setParentId(AnyObjectId newParent) {parentIds = new ObjectId[] { newParent.copy() };}
public static boolean hasConflictingAltSet(Collection<BitSet> altsets) {for (BitSet alts : altsets) {if ( alts.cardinality()>1 ) {return true;}}return false;}
public CommonRpcRequest(String product) {super(product);setAcceptFormat(FormatType.JSON);}
public K next()        { return super.nextEntry().key; }
public DeleteTransitGatewayMulticastDomainResult deleteTransitGatewayMulticastDomain(DeleteTransitGatewayMulticastDomainRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGatewayMulticastDomain(request);}
public DescribeEventsResult describeEvents(DescribeEventsRequest request) {request = beforeClientExecution(request);return executeDescribeEvents(request);}
public DescribeFleetsResult describeFleets(DescribeFleetsRequest request) {request = beforeClientExecution(request);return executeDescribeFleets(request);}
public DescribeDataRepositoryTasksResult describeDataRepositoryTasks(DescribeDataRepositoryTasksRequest request) {request = beforeClientExecution(request);return executeDescribeDataRepositoryTasks(request);}
public StartLabelDetectionResult startLabelDetection(StartLabelDetectionRequest request) {request = beforeClientExecution(request);return executeStartLabelDetection(request);}
public static long getLastCommitGeneration(String[] files) {long max = -1;for (String file : files) {if (file.startsWith(IndexFileNames.SEGMENTS) &&file.startsWith(OLD_SEGMENTS_GEN) == false) {long gen = generationFromSegmentsFileName(file);if (gen > max) {max = gen;}}}return max;}
public EnableFastSnapshotRestoresResult enableFastSnapshotRestores(EnableFastSnapshotRestoresRequest request) {request = beforeClientExecution(request);return executeEnableFastSnapshotRestores(request);}
public ListVPCAssociationAuthorizationsResult listVPCAssociationAuthorizations(ListVPCAssociationAuthorizationsRequest request) {request = beforeClientExecution(request);return executeListVPCAssociationAuthorizations(request);}
public Thumbnail(final byte[] thumbnailData){this._thumbnailData = thumbnailData;}
public final Explanation explain(BasicStats stats, double tfn) {return Explanation.match((float) (scoreTimes1pTfn(stats) / (1 + tfn)),getClass().getSimpleName() + ", computed as 1 / (tfn + 1) from:",Explanation.match((float) tfn, "tfn, normalized term frequency"));}
public static String[] parse(String line) {boolean insideQuote = false;ArrayList<String> result = new ArrayList<>();int quoteCount = 0;StringBuilder sb = new StringBuilder();for(int i = 0; i < line.length(); i++) {char c = line.charAt(i);if(c == QUOTE) {insideQuote = !insideQuote;quoteCount++;}if(c == COMMA && !insideQuote) {String value = sb.toString();value = unQuoteUnEscape(value);result.add(value);sb.setLength(0);continue;}sb.append(c);}result.add(sb.toString());if(quoteCount % 2 != 0) {return new String[0];}return result.toArray(new String[result.size()]);}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("mask(");buffer.append(maskedQuery.toString(field));buffer.append(")");buffer.append(" as ");buffer.append(this.field);return buffer.toString();}
public static RevFilter create(String pattern) {if (pattern.length() == 0)throw new IllegalArgumentException(JGitText.get().cannotMatchOnEmptyString);if (SubStringRevFilter.safe(pattern))return new SubStringSearch(pattern);return new PatternSearch(pattern);}
public NotImplementedFunctionException(String functionName) {super(functionName);this.functionName = functionName;}
public DeleteResourceResult deleteResource(DeleteResourceRequest request) {request = beforeClientExecution(request);return executeDeleteResource(request);}
public PaletteRecord() {PColor[] defaultPalette = createDefaultPalette();_colors.ensureCapacity(defaultPalette.length);Collections.addAll(_colors, defaultPalette);}
public GetRepoBuildLogsRequest() {super("cr", "2016-06-07", "GetRepoBuildLogs", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/logs");setMethod(MethodType.GET);}
public String toString() {return "SortedSetDocValuesFacetField(dim=" + dim + " label=" + label + ")";}
public Break(int main, int subFrom, int subTo) {this.main = main;this.subFrom = subFrom;this.subTo = subTo;}
public void setParams(String params) {super.setParams(params);docSize = (int) Float.parseFloat(params);}
public static double pv(double r, double n, double y, double f, boolean t) {double retval = 0;if (r == 0) {retval = -1*((n*y)+f);}else {double r1 = r + 1;retval =(( ( 1 - Math.pow(r1, n) ) / r ) * (t ? r1 : 1)  * y - f)/Math.pow(r1, n);}return retval;}
public int compareTo(File another) {return this.getPath().compareTo(another.getPath());}
public void writeByte(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeByte(value);}
public String toString() {StringBuilder buffer = new StringBuilder("[Data Table - Parent cell is an interior cell in a data table]\n");buffer.append("top left row = ").append(getRow()).append("\n");buffer.append("top left col = ").append(getColumn()).append("\n");return buffer.toString();}
public Credential() {this.refreshDate = new Date();}
public NavigableMap<K, V> subMap(K fromInclusive, K toExclusive) {return subMap(fromInclusive, INCLUSIVE, toExclusive, EXCLUSIVE);}
public DescribeLedgerResult describeLedger(DescribeLedgerRequest request) {request = beforeClientExecution(request);return executeDescribeLedger(request);}
public boolean isNoPrefix() {return noPrefix;}
public static Policy fromJson(String jsonString) {return fromJson(jsonString, new PolicyReaderOptions());}
public GetPhoneNumberResult getPhoneNumber(GetPhoneNumberRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumber(request);}
public static void writeUnicodeString(LittleEndianOutput out, String value) {int nChars = value.length();out.writeShort(nChars);boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit ? 0x01 : 0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}
public DescribeCoipPoolsResult describeCoipPools(DescribeCoipPoolsRequest request) {request = beforeClientExecution(request);return executeDescribeCoipPools(request);}
public void removeRow(Row row) {HSSFRow hrow = (HSSFRow) row;if (row.getSheet() != this) {throw new IllegalArgumentException("Specified row does not belong to this sheet");}for (Cell cell : row) {HSSFCell xcell = (HSSFCell) cell;if (xcell.isPartOfArrayFormulaGroup()) {String msg = "Row[rownum=" + row.getRowNum() + "] contains cell(s) included in a multi-cell array formula. You cannot change part of an array.";xcell.tryToDeleteArrayFormula(msg);}}if (_rows.size() > 0) {Integer key = Integer.valueOf(row.getRowNum());HSSFRow removedRow = _rows.remove(key);if (removedRow != row) {throw new IllegalArgumentException("Specified row does not belong to this sheet");}if (hrow.getRowNum() == getLastRowNum()) {_lastrow = findLastRow(_lastrow);}if (hrow.getRowNum() == getFirstRowNum()) {_firstrow = findFirstRow(_firstrow);}_sheet.removeRow(hrow.getRowRecord());if(_rows.size() == 0) {_firstrow = -1;_lastrow = -1;}}}
public static TreeFilter create(Collection<TreeFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final TreeFilter[] subfilters = new TreeFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}
public SpanOrTermsBuilder(Analyzer analyzer) {this.analyzer = analyzer;}
public boolean isReadOnly() {return byteBuffer.isReadOnly();}
public void setValuesCellRange(CellRangeAddressBase range) {Integer count = setVerticalCellRange(dataValues, range);if (count == null){return;}series.setNumValues((short)(int)count);}
public GlobalReplicationGroup modifyGlobalReplicationGroup(ModifyGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeModifyGlobalReplicationGroup(request);}
public CreateTrialResult createTrial(CreateTrialRequest request) {request = beforeClientExecution(request);return executeCreateTrial(request);}
public void preWrite() {List<Property> pList = new ArrayList<>();int i=0;for (Property p : _properties) {if (p == null) continue;p.setIndex(i++);pList.add(p);}for (Property p : pList) p.preWrite();}
public E first() {return backingMap.firstKey();}
public int available() {return data.length - ptr;}
public GetHostedZoneCountResult getHostedZoneCount(GetHostedZoneCountRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneCount(request);}
public LookupResult[] getResults() {int size = size();LookupResult[] res = new LookupResult[size];for (int i = size - 1; i >= 0; i--) {res[i] = pop();}return res;}
public void add(Transition t) {if (transitions.length < next+3) {transitions = ArrayUtil.grow(transitions, next+3);}transitions[next] = t.dest;transitions[next+1] = t.min;transitions[next+2] = t.max;next += 3;}
public String getFormatString(int formatIndex) {String format = null;if (formatIndex >= HSSFDataFormat.getNumberOfBuiltinBuiltinFormats()) {FormatRecord tfr = _customFormatRecords.get(Integer.valueOf(formatIndex));if (tfr == null) {logger.log( POILogger.ERROR, "Requested format at index " + formatIndex+ ", but it wasn't found");} else {format = tfr.getFormatString();}} else {format = HSSFDataFormat.getBuiltinFormat((short) formatIndex);}return format;}
public DisassociateDelegateFromResourceResult disassociateDelegateFromResource(DisassociateDelegateFromResourceRequest request) {request = beforeClientExecution(request);return executeDisassociateDelegateFromResource(request);}
public void readFully(byte[] dst, int offset, int byteCount) throws IOException {primitiveTypes.readFully(dst, offset, byteCount);}
public StartDocumentClassificationJobResult startDocumentClassificationJob(StartDocumentClassificationJobRequest request) {request = beforeClientExecution(request);return executeStartDocumentClassificationJob(request);}
public final float[] array() {return protectedArray();}
public void prunePacked() throws IOException {ObjectDirectory objdb = repo.getObjectDatabase();Collection<PackFile> packs = objdb.getPacks();File objects = repo.getObjectsDirectory();String[] fanout = objects.list();if (fanout != null && fanout.length > 0) {pm.beginTask(JGitText.get().pruneLoosePackedObjects, fanout.length);try {for (String d : fanout) {checkCancelled();pm.update(1);if (d.length() != 2)continue;String[] entries = new File(objects, d).list();if (entries == null)continue;for (String e : entries) {checkCancelled();if (e.length() != Constants.OBJECT_ID_STRING_LENGTH - 2)continue;ObjectId id;try {id = ObjectId.fromString(d + e);} catch (IllegalArgumentException notAnObject) {continue;}boolean found = false;for (PackFile p : packs) {checkCancelled();if (p.hasObject(id)) {found = true;break;}}if (found)FileUtils.delete(objdb.fileFor(id), FileUtils.RETRY| FileUtils.SKIP_MISSING| FileUtils.IGNORE_ERRORS);}}} finally {pm.endTask();}}}
public ListJobsByPipelineResult listJobsByPipeline(ListJobsByPipelineRequest request) {request = beforeClientExecution(request);return executeListJobsByPipeline(request);}
public SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest() {super("Domain", "2018-01-29", "SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential");setMethod(MethodType.POST);}
public DeleteDhcpOptionsResult deleteDhcpOptions(DeleteDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeDeleteDhcpOptions(request);}
public String getSheetLastNameByExternSheet(int externSheetIndex) {return _iBook.findSheetLastNameFromExternSheet(externSheetIndex);}
public InMemorySorter(Comparator<BytesRef> comparator) {this.comparator = comparator;}
public boolean isSymbolic() {return true;}
public static ValueEval chooseSingleElementFromArea(AreaEval ae,int srcCellRow, int srcCellCol) throws EvaluationException {ValueEval result = chooseSingleElementFromAreaInternal(ae, srcCellRow, srcCellCol);if (result instanceof ErrorEval) {throw new EvaluationException((ErrorEval) result);}return result;}
public int freeBlocks(int num) {assert num >= 0 : "free blocks must be >= 0 but was: "+ num;final int stop;final int count;if (num > freeBlocks) {stop = 0;count = freeBlocks;} else {stop = freeBlocks - num;count = num;}while (freeBlocks > stop) {freeByteBlocks[--freeBlocks] = null;}bytesUsed.addAndGet(-count*blockSize);assert bytesUsed.get() >= 0;return count;}
public final static String htmlEncode(String plainText){if (plainText == null || plainText.length() == 0){return "";}StringBuilder result = new StringBuilder(plainText.length());for (int index=0; index<plainText.length(); index++){char ch = plainText.charAt(index);switch (ch) {case '"':result.append("&quot;");break;case '&':result.append("&amp;");break;case '<':result.append("&lt;");break;case '>':result.append("&gt;");break;case '\'':result.append("&#x27;");break;case '/':result.append("&#x2F;");break;default:result.append(ch);}}return result.toString();}
public boolean isReuseDeltas() {return reuseDeltas;}
public static int headerLength(String codec) {return 9+codec.length();}
public StartCelebrityRecognitionResult startCelebrityRecognition(StartCelebrityRecognitionRequest request) {request = beforeClientExecution(request);return executeStartCelebrityRecognition(request);}
public synchronized void write(byte[] buffer, int offset, int length) throws IOException {checkNotClosed();if (buffer == null) {throw new NullPointerException("buffer == null");}byte[] internalBuffer = buf;if (length >= internalBuffer.length) {flushInternal();out.write(buffer, offset, length);return;}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length > (internalBuffer.length - count)) {flushInternal();}System.arraycopy(buffer, offset, internalBuffer, count, length);count += length;}
public int readRecordSID() {return _lei.readUShort();}
public ListProfileTimesResult listProfileTimes(ListProfileTimesRequest request) {request = beforeClientExecution(request);return executeListProfileTimes(request);}
public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public Cluster modifyCluster(ModifyClusterRequest request) {request = beforeClientExecution(request);return executeModifyCluster(request);}
public GetRouteResponsesResult getRouteResponses(GetRouteResponsesRequest request) {request = beforeClientExecution(request);return executeGetRouteResponses(request);}
synchronized public QueryMaker getQueryMaker(ReadTask readTask) {Class<? extends ReadTask> readTaskClass = readTask.getClass();QueryMaker qm = readTaskQueryMaker.get(readTaskClass);if (qm == null) {try {qm = qmkrClass.getConstructor().newInstance();qm.setConfig(config);} catch (Exception e) {throw new RuntimeException(e);}readTaskQueryMaker.put(readTaskClass,qm);}return qm;}
public boolean promptYesNo(String msg) {CredentialItem.YesNoType v = new CredentialItem.YesNoType(msg);return provider.get(uri, v) && v.getValue();}
public String utf8ToString() {final char[] ref = new char[length];final int len = UnicodeUtil.UTF8toUTF16(bytes, offset, length, ref);return new String(ref, 0, len);}
public ListCandidatesForAutoMLJobResult listCandidatesForAutoMLJob(ListCandidatesForAutoMLJobRequest request) {request = beforeClientExecution(request);return executeListCandidatesForAutoMLJob(request);}
public String toFormulaString(FormulaRenderingWorkbook book) {return book.resolveNameXText(this);}
public UpdateSkillGroupResult updateSkillGroup(UpdateSkillGroupRequest request) {request = beforeClientExecution(request);return executeUpdateSkillGroup(request);}
public String getValue() {return RawParseUtils.decode(enc, buffer, valStart, valEnd);}
public ListAssociatedFleetsResult listAssociatedFleets(ListAssociatedFleetsRequest request) {request = beforeClientExecution(request);return executeListAssociatedFleets(request);}
public void removeLastChild() {if ( children!=null ) {children.remove(children.size()-1);}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);final long byte2 = blocks[blocksOffset++] & 0xFF;final long byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);final long byte4 = blocks[blocksOffset++] & 0xFF;final long byte5 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);final long byte6 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;}}
public String describeParams() {StringBuilder sb = new StringBuilder();sb.append("\t").append("maxQueryTerms  : ").append(maxQueryTerms).append("\n");sb.append("\t").append("minWordLen     : ").append(minWordLen).append("\n");sb.append("\t").append("maxWordLen     : ").append(maxWordLen).append("\n");sb.append("\t").append("fieldNames     : ");String delim = "";for (String fieldName : fieldNames) {sb.append(delim).append(fieldName);delim = ", ";}sb.append("\n");sb.append("\t").append("boost          : ").append(boost).append("\n");sb.append("\t").append("minTermFreq    : ").append(minTermFreq).append("\n");sb.append("\t").append("minDocFreq     : ").append(minDocFreq).append("\n");return sb.toString();}
public RunScheduledInstancesResult runScheduledInstances(RunScheduledInstancesRequest request) {request = beforeClientExecution(request);return executeRunScheduledInstances(request);}
public static boolean isValidExcelDate(double value){return (value > -Double.MIN_VALUE);}
public CreateBranchCommand setForce(boolean force) {checkCallable();this.force = force;return this;}
public AbstractEscherHolderRecord(RecordInputStream in) {if (! DESERIALISE ) {rawDataContainer.concatenate(in.readRemainder());} else {byte[] data = in.readAllContinuedRemainder();convertToEscherRecords( 0, data.length, data );}}
public int next(int n) {currentSentence += n;if (n < 0) {if (text.getIndex() == text.getEndIndex()) {++currentSentence;}if (currentSentence < 0) {currentSentence = 0;text.setIndex(text.getBeginIndex());return DONE;} else {text.setIndex(sentenceStarts[currentSentence]);}} else if (n > 0) {if (currentSentence >= sentenceStarts.length) {currentSentence = sentenceStarts.length - 1;text.setIndex(text.getEndIndex());return DONE;} else {text.setIndex(sentenceStarts[currentSentence]);}}return current();}
public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;RunAutomaton other = (RunAutomaton) obj;if (alphabetSize != other.alphabetSize) return false;if (size != other.size) return false;if (!Arrays.equals(points, other.points)) return false;if (!accept.equals(other.accept)) return false;if (!Arrays.equals(transitions, other.transitions)) return false;return true;}
public void setOffset(long offset) {this.offset = offset;}
public DescribeKeyPairsResult describeKeyPairs() {return describeKeyPairs(new DescribeKeyPairsRequest());}
public ParseTree get(String label) {List<ParseTree> parseTrees = labels.get(label);if ( parseTrees==null || parseTrees.size()==0 ) {return null;}return parseTrees.get( parseTrees.size()-1 ); }
public ListRecordsResult listRecords(ListRecordsRequest request) {request = beforeClientExecution(request);return executeListRecords(request);}
public DetectStackResourceDriftResult detectStackResourceDrift(DetectStackResourceDriftRequest request) {request = beforeClientExecution(request);return executeDetectStackResourceDrift(request);}
public String encodeText(String originalText){return htmlEncode(originalText);}
public Collection<ParseTree> evaluate(ParseTree t) {if ( invert ) return new ArrayList<ParseTree>(); return Trees.getDescendants(t);}
public DeleteUsagePlanKeyResult deleteUsagePlanKey(DeleteUsagePlanKeyRequest request) {request = beforeClientExecution(request);return executeDeleteUsagePlanKey(request);}
public String getLocalName() {return localName;}
public DeleteDocumentResult deleteDocument(DeleteDocumentRequest request) {request = beforeClientExecution(request);return executeDeleteDocument(request);}
public int getExternalSheetIndex(String sheetName) {int sheetIndex = _uBook.getSheetIndex(sheetName);return _iBook.checkExternSheet(sheetIndex);}
public IdentityEncoder(Charset charset) {this.charset = charset;}
public static SupBookRecord createInternalReferences(short numberOfSheets) {return new SupBookRecord(false, numberOfSheets);}
public DBInstance createDBInstanceReadReplica(CreateDBInstanceReadReplicaRequest request) {request = beforeClientExecution(request);return executeCreateDBInstanceReadReplica(request);}
public DescribePartnerEventSourceResult describePartnerEventSource(DescribePartnerEventSourceRequest request) {request = beforeClientExecution(request);return executeDescribePartnerEventSource(request);}
public EnterStandbyResult enterStandby(EnterStandbyRequest request) {request = beforeClientExecution(request);return executeEnterStandby(request);}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[24];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 10; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}}}}for (int i = 0; i < 24; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public CreateCloudFrontOriginAccessIdentityRequest(CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig) {setCloudFrontOriginAccessIdentityConfig(cloudFrontOriginAccessIdentityConfig);}
public ResetFpgaImageAttributeResult resetFpgaImageAttribute(ResetFpgaImageAttributeRequest request) {request = beforeClientExecution(request);return executeResetFpgaImageAttribute(request);}
public void serialize(ContinuableRecordOutput out) {out.writeInt(_numStrings);out.writeInt(_numUniqueStrings);for ( int k = 0; k < strings.size(); k++ ){if (k % ExtSSTRecord.DEFAULT_BUCKET_SIZE == 0){int rOff = out.getTotalSize();int index = k/ExtSSTRecord.DEFAULT_BUCKET_SIZE;if (index < ExtSSTRecord.MAX_BUCKETS) {bucketAbsoluteOffsets[index] = rOff;bucketRelativeOffsets[index] = rOff;}}UnicodeString s = getUnicodeString(k);s.serialize(out);}}
public DeleteGroupMembershipResult deleteGroupMembership(DeleteGroupMembershipRequest request) {request = beforeClientExecution(request);return executeDeleteGroupMembership(request);}
public GetHostedZoneCountResult getHostedZoneCount() {return getHostedZoneCount(new GetHostedZoneCountRequest());}
public NameXPtg getNameXPtg(String name, int sheetRefIndex) {for (int i = 0; i < _externalBookBlocks.length; i++) {int definedNameIndex = _externalBookBlocks[i].getIndexOfName(name);if (definedNameIndex < 0) {continue;}int thisSheetRefIndex = findRefIndexFromExtBookIndex(i);if (thisSheetRefIndex >= 0) {if (sheetRefIndex == -1 || thisSheetRefIndex == sheetRefIndex) {return new NameXPtg(thisSheetRefIndex, definedNameIndex);}}}return null;}
public E pop() {return removeFirstImpl();}
public void set(ET object) {if (expectedModCount == list.modCount) {if (lastLink != null) {lastLink.data = object;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public ElisionFilterFactory(Map<String,String> args) {super(args);articlesFile = get(args, "articles");ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int[] grow() {final int[] ord = super.grow();if (start.length < ord.length) {start = ArrayUtil.grow(start, ord.length);end = ArrayUtil.grow(end, ord.length);freq = ArrayUtil.grow(freq, ord.length);}assert start.length >= ord.length;assert end.length >= ord.length;assert freq.length >= ord.length;return ord;}
public GetPersonalizedRankingResult getPersonalizedRanking(GetPersonalizedRankingRequest request) {request = beforeClientExecution(request);return executeGetPersonalizedRanking(request);}
public ObjectId getObjectId() {return ObjectId.fromRaw(idBuffer(), idOffset());}
public void serialize(LittleEndianOutput out) {out.writeInt(getFirstRow());out.writeInt(getLastRow());out.writeShort(getFirstCol());out.writeShort(getLastCol());out.writeShort(( short ) 0);}
public RmCommand(Repository repo) {super(repo);filepatterns = new LinkedList<>();}
public void recover(Parser recognizer, RecognitionException e) {for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()) {context.exception = e;}throw new ParseCancellationException(e);}
public static BATBlock createBATBlock(final POIFSBigBlockSize bigBlockSize, ByteBuffer data){BATBlock block = new BATBlock(bigBlockSize);byte[] buffer = new byte[LittleEndian.INT_SIZE];for(int i=0; i<block._values.length; i++) {data.get(buffer);block._values[i] = LittleEndian.getInt(buffer);}block.recomputeFree();return block;}
public byte[] toByteArray() throws IOException {final long len = length();if (Integer.MAX_VALUE < len)throw new OutOfMemoryError(JGitText.get().lengthExceedsMaximumArraySize);final byte[] out = new byte[(int) len];int outPtr = 0;for (Block b : blocks) {System.arraycopy(b.buffer, 0, out, outPtr, b.count);outPtr += b.count;}return out;}
public short clearShort(final short holder){return ( short ) clear(holder);}
public final String toString() {StringBuilder sb = new StringBuilder();String recordName = getRecordName();sb.append("[").append(recordName).append("]\n");sb.append("    .row    = ").append(HexDump.shortToHex(getRow())).append("\n");sb.append("    .col    = ").append(HexDump.shortToHex(getColumn())).append("\n");sb.append("    .xfindex= ").append(HexDump.shortToHex(getXFIndex())).append("\n");appendValueText(sb);sb.append("\n");sb.append("[/").append(recordName).append("]\n");return sb.toString();}
public IllegalFormatCodePointException(int c) {this.c = c;}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {return "@" + this.schema + ":'" + this.value + "'";}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length != 2) {return ErrorEval.VALUE_INVALID;}try {double startDateAsNumber = NumericFunction.singleOperandEvaluate(args[0], ec.getRowIndex(), ec.getColumnIndex());int months = (int) NumericFunction.singleOperandEvaluate(args[1], ec.getRowIndex(), ec.getColumnIndex());if (startDateAsNumber >= 0.0 && startDateAsNumber < 1.0) {startDateAsNumber = 1.0;}Date startDate = DateUtil.getJavaDate(startDateAsNumber, false);Calendar cal = LocaleUtil.getLocaleCalendar();cal.setTime(startDate);cal.clear(Calendar.HOUR);cal.set(Calendar.HOUR_OF_DAY, 0);cal.clear(Calendar.MINUTE);cal.clear(Calendar.SECOND);cal.clear(Calendar.MILLISECOND);cal.add(Calendar.MONTH, months + 1);cal.set(Calendar.DAY_OF_MONTH, 1);cal.add(Calendar.DAY_OF_MONTH, -1);return new NumberEval(DateUtil.getExcelDate(cal.getTime()));} catch (EvaluationException e) {return e.getErrorEval();}}
public UnicodeString getSSTString(int str) {if (sst == null) {insertSST();}UnicodeString retval = sst.getString(str);LOG.log(DEBUG, "Returning SST for index=", str, " String= ", retval);return retval;}
public String quote(String in) {final StringBuilder r = new StringBuilder();r.append('\'');int start = 0, i = 0;for (; i < in.length(); i++) {switch (in.charAt(i)) {case '\'':case '!':r.append(in, start, i);r.append('\'');r.append('\\');r.append(in.charAt(i));r.append('\'');start = i + 1;break;}}r.append(in, start, i);r.append('\'');return r.toString();}
public void clear() {lastElement = 0;currentOffset = 0;Arrays.fill(offsets, 0);pool.reset(false, true); }
public ReplaceableItem(String name, java.util.List<ReplaceableAttribute> attributes) {setName(name);setAttributes(attributes);}
public int getScore() {return score;}
public IrishLowerCaseFilter(TokenStream in) {super(in);}
public synchronized void setSecondaryProgress(int secondaryProgress) {if (mIndeterminate) {return;}if (secondaryProgress < 0) {secondaryProgress = 0;}if (secondaryProgress > mMax) {secondaryProgress = mMax;}if (secondaryProgress != mSecondaryProgress) {mSecondaryProgress = secondaryProgress;refreshProgress(R.id.secondaryProgress, mSecondaryProgress, false);}}
public static byte[] grow(byte[] array) {return grow(array, 1 + array.length);}
public List<Token> getHiddenTokensToRight(int tokenIndex) {return getHiddenTokensToRight(tokenIndex, -1);}
public DataValidityTable() {_headerRec = new DVALRecord();_validationList = new ArrayList<>();}
public EvaluationException(ErrorEval errorEval) {_errorEval = errorEval;}
public UpdateConfigurationTemplateRequest(String applicationName, String templateName) {setApplicationName(applicationName);setTemplateName(templateName);}
public DescribeAvailabilityZonesResult describeAvailabilityZones(DescribeAvailabilityZonesRequest request) {request = beforeClientExecution(request);return executeDescribeAvailabilityZones(request);}
public static int idealShortArraySize(int need) {return idealByteArraySize(need * 2) / 2;}
public NumericPayloadTokenFilterFactory(Map<String, String> args) {super(args);payload = requireFloat(args, "payload");typeMatch = require(args, "typeMatch");if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}
public DescribeResourcePermissionsResult describeResourcePermissions(DescribeResourcePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeResourcePermissions(request);}
public TokenStream create(TokenStream input) {return map.fst == null ? input : new SynonymFilter(input, map, ignoreCase);}
public List<String> getRuleInvocationStack() {return getRuleInvocationStack(_ctx);}
public void write(String s) {reserve(s.length());s.getChars(0,s.length(),buf, len);len +=s.length();}
public void clear() {map.clear();}
public DeleteWorkteamResult deleteWorkteam(DeleteWorkteamRequest request) {request = beforeClientExecution(request);return executeDeleteWorkteam(request);}
public String toString() {return "(" + a.toString() + " OR " + b.toString() + ")";}
public TreeFilter clone() {final TreeFilter[] s = new TreeFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public String toString() {StringBuilder buf = new StringBuilder();buf.append("DiffEntry[");buf.append(changeType);buf.append(" ");switch (changeType) {case ADD:buf.append(newPath);break;case COPY:buf.append(oldPath + "->" + newPath);break;case DELETE:buf.append(oldPath);break;case MODIFY:buf.append(oldPath);break;case RENAME:buf.append(oldPath + "->" + newPath);break;}buf.append("]");return buf.toString();}
public CreateRepositoryResult createRepository(CreateRepositoryRequest request) {request = beforeClientExecution(request);return executeCreateRepository(request);}
public static String toHex(String value) {return (value == null || value.length() == 0)? "[]": toHex(value.getBytes(LocaleUtil.CHARSET_1252));}
public LineFormatRecord(RecordInputStream in) {field_1_lineColor          = in.readInt();field_2_linePattern        = in.readShort();field_3_weight             = in.readShort();field_4_format             = in.readShort();field_5_colourPaletteIndex = in.readShort();}
public DescribeClusterResult describeCluster(DescribeClusterRequest request) {request = beforeClientExecution(request);return executeDescribeCluster(request);}
public UserAgentConfig getUserAgentConfig() {return userAgentConfig;}
public float getTokenScore() {String termText = termAtt.toString();WeightedTerm queryTerm = termsToFind.get(termText);if (queryTerm == null) {return 0;}if (!uniqueTermsInFragment.contains(termText)) {totalScore += queryTerm.getWeight();uniqueTermsInFragment.add(termText);}return queryTerm.getWeight();}
public void clear() {arrays.clear();}
public DescribeEndpointsResult describeEndpoints(DescribeEndpointsRequest request) {request = beforeClientExecution(request);return executeDescribeEndpoints(request);}
public String toString() {return "PATH(\"" + pathStr + "\")";}
public DictionaryCompoundWordTokenFilterFactory(Map<String, String> args) {super(args);dictFile = require(args, "dictionary");minWordSize = getInt(args, "minWordSize", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);minSubwordSize = getInt(args, "minSubwordSize", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);maxSubwordSize = getInt(args, "maxSubwordSize", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);onlyLongestMatch = getBoolean(args, "onlyLongestMatch", true);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public final void writeFloat(float val) throws IOException {writeInt(Float.floatToIntBits(val));}
public char[] toCharArray() {char newbuf[] = new char[size()];System.arraycopy(buf, 0, newbuf, 0, size());return newbuf;}
public IntervalSet getExpectedTokens() {if (recognizer != null) {return recognizer.getATN().getExpectedTokens(offendingState, ctx);}return null;}
public HindiNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public UpdateUserIdentityInfoResult updateUserIdentityInfo(UpdateUserIdentityInfoRequest request) {request = beforeClientExecution(request);return executeUpdateUserIdentityInfo(request);}
public Allocator(int blockSize) {this.blockSize = blockSize;}
public NoteMapMerger(Repository db, NoteMerger noteMerger,MergeStrategy nonNotesMergeStrategy) {this.db = db;this.reader = db.newObjectReader();this.inserter = db.newObjectInserter();this.noteMerger = noteMerger;this.nonNotesMergeStrategy = nonNotesMergeStrategy;this.objectIdPrefix = new MutableObjectId();}
public ListAliasesResult listAliases(ListAliasesRequest request) {request = beforeClientExecution(request);return executeListAliases(request);}
public STSAssumeRoleSessionCredentialsProvider withRoleSessionName(String roleSessionName) {this.roleSessionName = roleSessionName;return this;}
public IntList(int capacity) {entries = new int[capacity];}
public Result getResult() {return result;}
public int size() {return count;}
public DescribeAccountAttributesResult describeAccountAttributes() {return describeAccountAttributes(new DescribeAccountAttributesRequest());}
public String toString() {return "G";}
public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}
public GroupedFacetResult(int size, int minCount, boolean orderByCount, int totalCount, int totalMissingCount) {this.facetEntries = new TreeSet<>(orderByCount ? orderByCountAndValue : orderByValue);this.totalMissingCount = totalMissingCount;this.totalCount = totalCount;maxSize = size;currentMin = minCount;}
public FieldInfo fieldInfo(String fieldName) {return byName.get(fieldName);}
public int regionStart() {return regionStart;}
public int getPort() {return Host.this.getPort();}
public InterruptTimer(String threadName) {state = new AlarmState();autoKiller = new AutoKiller(state);thread = new AlarmThread(threadName, state);thread.start();}
public HighFrequencyDictionary(IndexReader reader, String field, float thresh) {this.reader = reader;this.field = field;this.thresh = thresh;}
public ModifyDBProxyTargetGroupResult modifyDBProxyTargetGroup(ModifyDBProxyTargetGroupRequest request) {request = beforeClientExecution(request);return executeModifyDBProxyTargetGroup(request);}
public void close() throws IOException {input.close();}
public void reset() {arriving = -1;leaving = -1;}
public SetLoadBalancerListenerSSLCertificateRequest(String loadBalancerName, Integer loadBalancerPort, String sSLCertificateId) {setLoadBalancerName(loadBalancerName);setLoadBalancerPort(loadBalancerPort);setSSLCertificateId(sSLCertificateId);}
public SpanTermQuery(Term term) {this.term = Objects.requireNonNull(term);this.termStates = null;}
public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}
public boolean equals(Object o) {if (this.getClass() != o.getClass()) return false;DocFreqValueSource other = (DocFreqValueSource)o;return this.indexedField.equals(other.indexedField) && this.indexedBytes.equals(other.indexedBytes);}
public Term getLucenePrefixTerm(String fieldName) {return new Term(fieldName, getPrefix());}
public Collection<ParseTree> evaluate(ParseTree t) {return Trees.findAllTokenNodes(t, tokenType);}
public static Signer getSigner(AlibabaCloudCredentials credentials) {if (credentials instanceof KeyPairCredentials) {return SHA256_WITH_RSA_SIGNER;} else if (credentials instanceof BearerTokenCredentials) {return BEARER_TOKEN_SIGNER;} else {return HMACSHA1_SIGNER;}}
public PutAccountSendingAttributesResult putAccountSendingAttributes(PutAccountSendingAttributesRequest request) {request = beforeClientExecution(request);return executePutAccountSendingAttributes(request);}
public static String getExtension(String filename) {final int idx = filename.indexOf('.');if (idx == -1) {return null;} else {return filename.substring(idx + 1, filename.length());}}
public RunJobFlowResult runJobFlow(RunJobFlowRequest request) {request = beforeClientExecution(request);return executeRunJobFlow(request);}
public int lastLength() {return lastLength;}
public ListStreamConsumersResult listStreamConsumers(ListStreamConsumersRequest request) {request = beforeClientExecution(request);return executeListStreamConsumers(request);}
public static SimpleFraction buildFractionMaxDenominator(double value, int maxDenominator){return buildFractionMaxDenominator(value, 0, maxDenominator, 100);}
public void seekExact(BytesRef term, TermState state) {throw new IllegalStateException("this method should never be called");}
public LsRemoteCommand setUploadPack(String uploadPack) {this.uploadPack = uploadPack;return this;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {final String hex;if (numberVE instanceof RefEval) {RefEval re = (RefEval) numberVE;hex = OperandResolver.coerceValueToString(re.getInnerValueEval(re.getFirstSheetIndex()));} else {hex = OperandResolver.coerceValueToString(numberVE);}try {return new NumberEval(BaseNumberUtils.convertToDecimal(hex, HEXADECIMAL_BASE, MAX_NUMBER_OF_PLACES));}  catch (IllegalArgumentException e) {return ErrorEval.NUM_ERROR;}}
public DescribeInstancesResult describeInstances() {return describeInstances(new DescribeInstancesRequest());}
public Collection<RevCommit> call() throws GitAPIException,InvalidRefNameException {checkCallable();try {if (repo.exactRef(Constants.R_STASH) == null)return Collections.emptyList();} catch (IOException e) {throw new InvalidRefNameException(MessageFormat.format(JGitText.get().cannotRead, Constants.R_STASH), e);}final ReflogCommand refLog = new ReflogCommand(repo);refLog.setRef(Constants.R_STASH);final Collection<ReflogEntry> stashEntries = refLog.call();if (stashEntries.isEmpty())return Collections.emptyList();final List<RevCommit> stashCommits = new ArrayList<>(stashEntries.size());try (RevWalk walk = new RevWalk(repo)) {for (ReflogEntry entry : stashEntries) {try {stashCommits.add(walk.parseCommit(entry.getNewId()));} catch (IOException e) {throw new JGitInternalException(MessageFormat.format(JGitText.get().cannotReadCommit, entry.getNewId()),e);}}}return stashCommits;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_1_error_code);}
public PutAccountSettingResult putAccountSetting(PutAccountSettingRequest request) {request = beforeClientExecution(request);return executePutAccountSetting(request);}
public static CharacterBuffer newCharacterBuffer(final int bufferSize) {if (bufferSize < 2) {throw new IllegalArgumentException("buffersize must be >= 2");}return new CharacterBuffer(new char[bufferSize], 0, 0);}
public int getLevelForDistance(double dist) {if (dist == 0)return maxLevels;for (int i = 0; i < maxLevels-1; i++) {if(dist > levelW[i] && dist > levelH[i]) {return i+1;}}return maxLevels;}
public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {return makeLuceneQueryNoBoost(qf); }
public ListDedicatedIpPoolsResult listDedicatedIpPools(ListDedicatedIpPoolsRequest request) {request = beforeClientExecution(request);return executeListDedicatedIpPools(request);}
public static ValueVector createVector(RefEval re) {return new SheetVector(re);}
public RemoveNoteCommand setObjectId(RevObject id) {checkCallable();this.id = id;return this;}
public int getSheetIndex(String sheetName) {return _uBook.getSheetIndex(sheetName);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_chartGroupIndex);}
public FontFormatting() {setFontHeight(-1);setItalic(false);setFontWieghtModified(false);setOutline(false);setShadow(false);setStrikeout(false);setEscapementType((short)0);setUnderlineType((byte)0);setFontColorIndex((short)-1);setFontStyleModified(false);setFontOutlineModified(false);setFontShadowModified(false);setFontCancellationModified(false);setEscapementTypeModified(false);setUnderlineTypeModified(false);setShort(OFFSET_FONT_NAME, 0);setInt(OFFSET_NOT_USED1, 0x00000001);setInt(OFFSET_NOT_USED2, 0x00000000);setInt(OFFSET_NOT_USED3, 0x7FFFFFFF);setShort(OFFSET_FONT_FORMATING_END, 0x0001);}
public GetFacetResult getFacet(GetFacetRequest request) {request = beforeClientExecution(request);return executeGetFacet(request);}
public IndexInput clone() {return (IndexInput) super.clone();}
public String toFormulaString(){throw new RuntimeException("Table and Arrays are not yet supported");}
public StartFleetResult startFleet(StartFleetRequest request) {request = beforeClientExecution(request);return executeStartFleet(request);}
public static FontFamily valueOf(int nativeId) {for (FontFamily ff : values()) {if (ff.nativeId == nativeId) {return ff;}}return null;}
public synchronized boolean isEmpty() {return size == 0;}
public static String encodeBytes(byte[] source) {return encodeBytes(source, 0, source.length);}
public DescribeBackupsResult describeBackups(DescribeBackupsRequest request) {request = beforeClientExecution(request);return executeDescribeBackups(request);}
public ReflectionMethodRecordCreator(Method m) {_m = m;}
public static int resolvesToJustOneViableAlt(Collection<BitSet> altsets) {return getSingleViableAlt(altsets);}
public GetGatewayResult getGateway(GetGatewayRequest request) {request = beforeClientExecution(request);return executeGetGateway(request);}
public void onFilterComplete(int count) {updateDropDownForFilter(count);}
public boolean isReadOnly() {return true;}
public FreeRefFunction findUserDefinedFunction(String functionName) {return _bookEvaluator.findUserDefinedFunction(functionName);}
public boolean equals(Object obj) {if (!(obj instanceof PrecedencePredicate)) {return false;}if (this == obj) {return true;}PrecedencePredicate other = (PrecedencePredicate)obj;return this.precedence == other.precedence;}
public int getStringWidth(String str){int width = 0;for (int i = 0; i < str.length(); i++){width += getCharWidth(str.charAt(i));}return width;}
public ByteVector(byte[] a) {blockSize = DEFAULT_BLOCK_SIZE;array = a;n = 0;}
public DeleteVerifiedEmailAddressResult deleteVerifiedEmailAddress(DeleteVerifiedEmailAddressRequest request) {request = beforeClientExecution(request);return executeDeleteVerifiedEmailAddress(request);}
public DescribeScalingActivitiesResult describeScalingActivities(DescribeScalingActivitiesRequest request) {request = beforeClientExecution(request);return executeDescribeScalingActivities(request);}
public SimpleQueryParser(Analyzer analyzer, String field) {this(analyzer, Collections.singletonMap(field, 1.0F));}
final public SrndQuery AndQuery() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries = null;Token oprt = null;q = NotQuery();label_3:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case AND:;break;default:jj_la1[1] = jj_gen;break label_3;}oprt = jj_consume_token(AND);if (queries == null) {queries = new ArrayList<SrndQuery>();queries.add(q);}q = NotQuery();queries.add(q);}{if (true) return (queries == null) ? q : getAndQuery(queries, true , oprt);}throw new Error("Missing return statement in function");}
public final int get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public AddJobFlowStepsRequest(String jobFlowId, java.util.List<StepConfig> steps) {setJobFlowId(jobFlowId);setSteps(steps);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append( operands[0] );buffer.append("<>");buffer.append( operands[1] );return buffer.toString();}
public static String toHex(short value) {StringBuilder sb = new StringBuilder(4);writeHex(sb, value & 0xFFFF, 4, "");return sb.toString();}
public static String stripSegmentName(String filename) {int idx = indexOfSegmentName(filename);if (idx != -1) {filename = filename.substring(idx);}return filename;}
public InvalidMarkException(String detailMessage) {super(detailMessage);}
public V nextElement() { return nextEntryNotFailFast().value; }
public boolean equals(Object o) {if (o instanceof PersonIdent) {final PersonIdent p = (PersonIdent) o;return getName().equals(p.getName())&& getEmailAddress().equals(p.getEmailAddress())&& when / 1000L == p.when / 1000L;}return false;}
public DetectKeyPhrasesResult detectKeyPhrases(DetectKeyPhrasesRequest request) {request = beforeClientExecution(request);return executeDetectKeyPhrases(request);}
public long skip(long byteCount) throws IOException {return Streams.skipByReading(this, byteCount);}
public ByteBuffer get(byte[] dst) {return get(dst, 0, dst.length);}
public void setHideObj(short hide){field_1_hide_obj = hide;}
public final void setLastColumnRaw(short column) {field_4_last_column = column;}
public static PrintCellComments valueOf(int value){return _table[value];}
public DBInstance deleteDBInstance(DeleteDBInstanceRequest request) {request = beforeClientExecution(request);return executeDeleteDBInstance(request);}
public String require(Map<String,String> args, String name) {String s = args.remove(name);if (s == null) {throw new IllegalArgumentException("Configuration Error: missing parameter '" + name + "'");}return s;}
public CompositeReaderContext build() {return (CompositeReaderContext) build(null, reader, 0, 0);}
public GetImageLayerRequest() {super("cr", "2016-06-07", "GetImageLayer", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/layers");setMethod(MethodType.GET);}
public ParameterNameValue(String parameterName) {setParameterName(parameterName);}
public CreateDirectConnectGatewayAssociationProposalResult createDirectConnectGatewayAssociationProposal(CreateDirectConnectGatewayAssociationProposalRequest request) {request = beforeClientExecution(request);return executeCreateDirectConnectGatewayAssociationProposal(request);}
public ListResourceDelegatesResult listResourceDelegates(ListResourceDelegatesRequest request) {request = beforeClientExecution(request);return executeListResourceDelegates(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE, ValueEval placesVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(numberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String strText1 = OperandResolver.coerceValueToString(veText1);Double number = OperandResolver.parseDouble(strText1);if (number == null) {return ErrorEval.VALUE_INVALID;}if (number.longValue() < MIN_VALUE || number.longValue() > MAX_VALUE) {return ErrorEval.NUM_ERROR;}int placesNumber;if (number < 0 || placesVE == null) {placesNumber = DEFAULT_PLACES_VALUE;} else {ValueEval placesValueEval;try {placesValueEval = OperandResolver.getSingleValue(placesVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String placesStr = OperandResolver.coerceValueToString(placesValueEval);Double placesNumberDouble = OperandResolver.parseDouble(placesStr);if (placesNumberDouble == null) {return ErrorEval.VALUE_INVALID;}placesNumber = placesNumberDouble.intValue();if (placesNumber < 0 || placesNumber == 0) {return ErrorEval.NUM_ERROR;}}String binary = Integer.toBinaryString(number.intValue());if (binary.length() > DEFAULT_PLACES_VALUE) {binary = binary.substring(binary.length() - DEFAULT_PLACES_VALUE);}if (binary.length() > placesNumber) {return ErrorEval.NUM_ERROR;}return new StringEval(binary);}
public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {final String actualCodec = in.readString();if (!actualCodec.equals(codec)) {throw new CorruptIndexException("codec mismatch: actual codec=" + actualCodec + " vs expected codec=" + codec, in);}final int actualVersion = in.readInt();if (actualVersion < minVersion) {throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);}if (actualVersion > maxVersion) {throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);}return actualVersion;}
public DescribeDefaultParametersResult describeDefaultParameters(DescribeDefaultParametersRequest request) {request = beforeClientExecution(request);return executeDescribeDefaultParameters(request);}
public SimpleSpanFragmenter(QueryScorer queryScorer, int fragmentSize) {this.fragmentSize = fragmentSize;this.queryScorer = queryScorer;}
public CreateApplicationResult createApplication(CreateApplicationRequest request) {request = beforeClientExecution(request);return executeCreateApplication(request);}
public URIish getURI() {return uri;}
public DeleteConferenceProviderResult deleteConferenceProvider(DeleteConferenceProviderRequest request) {request = beforeClientExecution(request);return executeDeleteConferenceProvider(request);}
public byte setByte(final byte holder){return ( byte ) set(holder);}
public PipedInputStream(PipedOutputStream out) throws IOException {connect(out);}
public IntBuffer slice() {byteBuffer.limit(limit * SizeOf.INT);byteBuffer.position(position * SizeOf.INT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());IntBuffer result = new IntToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public CreateDeploymentConfigResult createDeploymentConfig(CreateDeploymentConfigRequest request) {request = beforeClientExecution(request);return executeCreateDeploymentConfig(request);}
public HSSFColor findColor(byte red, byte green, byte blue){byte[] b = _palette.getColor(PaletteRecord.FIRST_COLOR_INDEX);for (short i = PaletteRecord.FIRST_COLOR_INDEX; b != null;b = _palette.getColor(++i)){if (b[0] == red && b[1] == green && b[2] == blue){return new CustomColor(i, b);}}return null;}
public boolean canEncode(char c) {return implCanEncode(CharBuffer.wrap(new char[] { c }));}
public NetworkInterface(String macAddress) {mac = macAddress;path = "/network/interfaces/macs/" + mac + "/";}
public final boolean isAccept(int state) {return accept.get(state);}
public String toStringTree() {return toStringTree((List<String>)null);}
public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {super(new Term(field, lowerTerm), toAutomaton(lowerTerm, upperTerm, includeLower, includeUpper), Integer.MAX_VALUE, true);this.lowerTerm = lowerTerm;this.upperTerm = upperTerm;this.includeLower = includeLower;this.includeUpper = includeUpper;}
public ScanResult scan(String tableName, java.util.List<String> attributesToGet) {return scan(new ScanRequest().withTableName(tableName).withAttributesToGet(attributesToGet));}
public StopLabelingJobResult stopLabelingJob(StopLabelingJobRequest request) {request = beforeClientExecution(request);return executeStopLabelingJob(request);}
public PublishSchemaResult publishSchema(PublishSchemaRequest request) {request = beforeClientExecution(request);return executePublishSchema(request);}
public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);}
public ObjectId toObjectId() {return this;}
@Override public ListIterator<E> listIterator() {return listIterator(0);}
public ExternalBookBlock() {_externalBookRecord = SupBookRecord.createAddInFunctions();_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}
public String getFragment() {return decode(fragment);}
public String toString() {return slice.toString()+":"+ postingsEnum;}
public ByteBuffer putDouble(double value) {throw new ReadOnlyBufferException();}
public static InternalWorkbook createStubWorkbook(ExternSheetRecord[] externs,BoundSheetRecord[] bounds) {return createStubWorkbook(externs, bounds, null);}
public IndexDocumentsResult indexDocuments(IndexDocumentsRequest request) {request = beforeClientExecution(request);return executeIndexDocuments(request);}
public String toStringTree(Parser recog) {return Trees.toStringTree(this, recog);}
public FieldsConsumer fieldsConsumer(SegmentWriteState state)throws IOException {if (delegatePostingsFormat == null) {throw new UnsupportedOperationException("Error - " + getClass().getName()+ " has been constructed without a choice of PostingsFormat");}FieldsConsumer fieldsConsumer = delegatePostingsFormat.fieldsConsumer(state);return new BloomFilteredFieldsConsumer(fieldsConsumer, state);}
public String toString() {return super.toString() + "(\"" + pattern.pattern() + "\")";}
public static String stripTags(String buf, int start) {if (start>0) {buf = buf.substring(start);}return buf.replaceAll("<[^>]*>", " ");}
public Reader create(Reader input) {return new JapaneseIterationMarkCharFilter(input, normalizeKanji, normalizeKana);}
public int getKeyProgressIncrement() {return mKeyProgressIncrement;}
public void ReInit(StandardSyntaxParserTokenManager tm) {token_source = tm;token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 25; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public long copyUsingLengthPrefix(BytesRef bytes) {if (bytes.length >= 32768) {throw new IllegalArgumentException("max length is 32767 (got " + bytes.length + ")");}if (upto + bytes.length + 2 > blockSize) {if (bytes.length + 2 > blockSize) {throw new IllegalArgumentException("block size " + blockSize + " is too small to store length " + bytes.length + " bytes");}if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}final long pointer = getPointer();if (bytes.length < 128) {currentBlock[upto++] = (byte) bytes.length;} else {currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));currentBlock[upto++] = (byte) (bytes.length & 0xff);}System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);upto += bytes.length;return pointer;}
public HighFreqTerm(int[] docIDs, int[] freqs, int[][] positions, byte[][][] payloads, long totalTermFreq) {this.docIDs = docIDs;this.freqs = freqs;this.positions = positions;this.payloads = payloads;this.totalTermFreq = totalTermFreq;}
public TermQuery newTermQuery(Term term) throws TooManyBasicQueries {checkMax();return new TermQuery(term);}
public HindiStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DecisionInfo[] getDecisionInfo() {return atnSimulator.getDecisionInfo();}
public String toString() {return "<regexp field='" + this.field + "' term='" + this.text + "'/>";}
public CreateStackSetResult createStackSet(CreateStackSetRequest request) {request = beforeClientExecution(request);return executeCreateStackSet(request);}
public SendMessagesResult sendMessages(SendMessagesRequest request) {request = beforeClientExecution(request);return executeSendMessages(request);}
public synchronized void setCharAt(int index, char ch) {super.setCharAt(index, ch);}
public CreateIntegrationResult createIntegration(CreateIntegrationRequest request) {request = beforeClientExecution(request);return executeCreateIntegration(request);}
public void execute(Lexer lexer) {lexer.mode(mode);}
public void readFully(byte[] dst) throws IOException {primitiveTypes.readFully(dst);}
public final void decRef() throws IOException {ensureOpen();final int rc = refCount.decrementAndGet();if (rc == 0) {boolean success = false;try {doClose();closed = true;success = true;} finally {if (!success) {refCount.incrementAndGet();}}} else if (rc < 0) {throw new IllegalStateException("too many decRef calls: refCount is " + rc + " after decrement");}}
public String toString() {if ( dfa.s0==null ) return null;StringBuilder buf = new StringBuilder();List<DFAState> states = dfa.getStates();for (DFAState s : states) {int n = 0;if ( s.edges!=null ) n = s.edges.length;for (int i=0; i<n; i++) {DFAState t = s.edges[i];if ( t!=null && t.stateNumber != Integer.MAX_VALUE ) {buf.append(getStateString(s));String label = getEdgeLabel(i);buf.append("-").append(label).append("->").append(getStateString(t)).append('\n');}}}String output = buf.toString();if ( output.length()==0 ) return null;return output;}
public static void register(Repository db) {if (db.getDirectory() != null) {FileKey key = FileKey.exact(db.getDirectory(), db.getFS());cache.registerRepository(key, db);}}
public GetConfigurationSetEventDestinationsResult getConfigurationSetEventDestinations(GetConfigurationSetEventDestinationsRequest request) {request = beforeClientExecution(request);return executeGetConfigurationSetEventDestinations(request);}
public ByteBuffer put(byte value) {throw new ReadOnlyBufferException();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {AreaEval aeRange;AreaEval aeSum;try {aeRange = convertRangeArg(arg0);aeSum = createSumRange(arg2, aeRange);} catch (EvaluationException e) {return e.getErrorEval();}return eval(srcRowIndex, srcColumnIndex, arg1, aeRange, aeSum);}
public MoPenAddGroupMemberRequest() {super("MoPen", "2018-02-11", "MoPenAddGroupMember", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public DeleteAssessmentTargetResult deleteAssessmentTarget(DeleteAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeDeleteAssessmentTarget(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXDI]\n");buffer.append("  .isxvdData = ").append(HexDump.shortToHex(isxvdData)).append("\n");buffer.append("  .iiftab = ").append(HexDump.shortToHex(iiftab)).append("\n");buffer.append("  .df = ").append(HexDump.shortToHex(df)).append("\n");buffer.append("  .isxvd = ").append(HexDump.shortToHex(isxvd)).append("\n");buffer.append("  .isxvi = ").append(HexDump.shortToHex(isxvi)).append("\n");buffer.append("  .ifmt = ").append(HexDump.shortToHex(ifmt)).append("\n");buffer.append("[/SXDI]\n");return buffer.toString();}
public String toString() {return "LL";}
public DescribeReservedInstancesOfferingsResult describeReservedInstancesOfferings(DescribeReservedInstancesOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstancesOfferings(request);}
public void setNextEnum(TermsEnum termsEnum) {this.termsEnum = termsEnum;this.boostAtt = termsEnum.attributes().addAttribute(BoostAttribute.class);}
public RevFilter clone() {return new PatternSearch(pattern());}
public GetRouteResponseResult getRouteResponse(GetRouteResponseRequest request) {request = beforeClientExecution(request);return executeGetRouteResponse(request);}
public UpdateLagResult updateLag(UpdateLagRequest request) {request = beforeClientExecution(request);return executeUpdateLag(request);}
public DescribeEndpointResult describeEndpoint(DescribeEndpointRequest request) {request = beforeClientExecution(request);return executeDescribeEndpoint(request);}
public void addPositionSpans(List<PositionSpan> positionSpans) {this.positionSpans.addAll(positionSpans);}
public boolean remove(Object object) {return backingMap.remove(object) != null;}
public ListPartsResult listParts(ListPartsRequest request) {request = beforeClientExecution(request);return executeListParts(request);}
public void setForceUpdate(boolean b) {force = b;}
public void removeCustomProperties() {if (getSectionCount() < 2) {
public int available() {return remaining();}
public GetInstanceResult getInstance(GetInstanceRequest request) {request = beforeClientExecution(request);return executeGetInstance(request);}
public UpdateSmsChannelResult updateSmsChannel(UpdateSmsChannelRequest request) {request = beforeClientExecution(request);return executeUpdateSmsChannel(request);}
public CreateEgressOnlyInternetGatewayResult createEgressOnlyInternetGateway(CreateEgressOnlyInternetGatewayRequest request) {request = beforeClientExecution(request);return executeCreateEgressOnlyInternetGateway(request);}
public GetResourcesResult getResources(GetResourcesRequest request) {request = beforeClientExecution(request);return executeGetResources(request);}
public ByteBlockPool(Allocator allocator) {this.allocator = allocator;}
public ListStepsResult listSteps(ListStepsRequest request) {request = beforeClientExecution(request);return executeListSteps(request);}
public boolean readBoolean() throws IOException {return primitiveTypes.readBoolean();}
public PutLogEventsRequest(String logGroupName, String logStreamName, java.util.List<InputLogEvent> logEvents) {setLogGroupName(logGroupName);setLogStreamName(logStreamName);setLogEvents(logEvents);}
public void reset(int sliceOffset) {this.offset = sliceOffset;}
public GetAttendeeResult getAttendee(GetAttendeeRequest request) {request = beforeClientExecution(request);return executeGetAttendee(request);}
public long getFilePointer() {return pointer + pos;}
public int serializeSimplePart(byte[] data, int pos) {LittleEndian.putShort(data, pos, getId());int recordSize = getComplexData().length;if (!sizeIncludesHeaderSize) {recordSize -= 6;}LittleEndian.putInt(data, pos + 2, recordSize);return 6;}
public CherryPickCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}
public int readDataSize() {readPlain(buffer, 0, LittleEndianConsts.SHORT_SIZE);int dataSize = LittleEndian.getUShort(buffer, 0);ccis.setNextRecordSize(dataSize);return dataSize;}
public RemoveUserFromGroupRequest(String groupName, String userName) {setGroupName(groupName);setUserName(userName);}
public PutImageResult putImage(PutImageRequest request) {request = beforeClientExecution(request);return executePutImage(request);}
public boolean stem() {limit_backward = cursor;cursor = limit;int v_1 = limit - cursor;r_endings();cursor = limit - v_1;int v_2 = limit - cursor;r_undouble();cursor = limit - v_2;int v_3 = limit - cursor;r_respell();cursor = limit - v_3;cursor = limit_backward;return true;}
public IntervalSet[] getDecisionLookahead(ATNState s) {if ( s==null ) {return null;}IntervalSet[] look = new IntervalSet[s.getNumberOfTransitions()];for (int alt = 0; alt < s.getNumberOfTransitions(); alt++) {look[alt] = new IntervalSet();Set<ATNConfig> lookBusy = new HashSet<ATNConfig>();boolean seeThruPreds = false; _LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,look[alt], lookBusy, new BitSet(), seeThruPreds, false);if ( look[alt].size()==0 || look[alt].contains(HIT_PRED) ) {look[alt] = null;}}return look;}
public static Ptg createPtg(LittleEndianInput in) {byte id = in.readByte();if (id < 0x20) {return createBasePtg(id, in);}Ptg  retval = createClassifiedPtg(id, in);if (id >= 0x60) {retval.setClass(CLASS_ARRAY);} else if (id >= 0x40) {retval.setClass(CLASS_VALUE);} else {retval.setClass(CLASS_REF);}return retval;}
public ListEntitiesDetectionJobsResult listEntitiesDetectionJobs(ListEntitiesDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListEntitiesDetectionJobs(request);}
public ListReviewableHITsResult listReviewableHITs(ListReviewableHITsRequest request) {request = beforeClientExecution(request);return executeListReviewableHITs(request);}
public OperationEvaluationContext(WorkbookEvaluator bookEvaluator, EvaluationWorkbook workbook, int sheetIndex, int srcRowNum,int srcColNum, EvaluationTracker tracker) {this(bookEvaluator, workbook, sheetIndex, srcRowNum, srcColNum, tracker, true);}
public void setMaxDocFreqPct(int maxPercentage) {setMaxDocFreq(Math.toIntExact((long) maxPercentage * ir.maxDoc() / 100));}
public final void lazySet(V newValue) {unsafe.putOrderedObject(this, valueOffset, newValue);}
public UpdateVpcLinkResult updateVpcLink(UpdateVpcLinkRequest request) {request = beforeClientExecution(request);return executeUpdateVpcLink(request);}
public void removeNoteCount() {remove1stProperty(PropertyIDMap.PID_NOTECOUNT);}
public Ref setValue(Ref value) {Ref prior = put(getKey(), value);ref = value;return prior;}
public RevCommit getSourceCommit(int idx) {return sourceCommits[idx];}
public ClassicTokenizerFactory(Map<String,String> args) {super(args);maxTokenLength = getInt(args, "maxTokenLength", StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetDistributionResult getDistribution(GetDistributionRequest request) {request = beforeClientExecution(request);return executeGetDistribution(request);}
public long seek(long ord) {long idx = ord / indexInterval;assert idx < fieldIndex.numIndexTerms;final long offset = fieldIndex.termOffsets.get(idx);final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);this.ord = idx * indexInterval;return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);}
public DescribeInterconnectsResult describeInterconnects(DescribeInterconnectsRequest request) {request = beforeClientExecution(request);return executeDescribeInterconnects(request);}
public static EvaluationException invalidValue() {return new EvaluationException(ErrorEval.VALUE_INVALID);}
public static String escapeWhitespace(String s, boolean escapeSpaces) {StringBuilder buf = new StringBuilder();for (char c : s.toCharArray()) {if ( c==' ' && escapeSpaces ) buf.append('\u00B7');else if ( c=='\t' ) buf.append("\\t");else if ( c=='\n' ) buf.append("\\n");else if ( c=='\r' ) buf.append("\\r");else buf.append(c);}return buf.toString();}
public DescribeOrderableClusterOptionsResult describeOrderableClusterOptions(DescribeOrderableClusterOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeOrderableClusterOptions(request);}
public DeleteArchiveRequest(String vaultName, String archiveId) {setVaultName(vaultName);setArchiveId(archiveId);}
public DescribeSnapshotsResult describeSnapshots(DescribeSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshots(request);}
public BatchDeleteClusterSnapshotsResult batchDeleteClusterSnapshots(BatchDeleteClusterSnapshotsRequest request) {request = beforeClientExecution(request);return executeBatchDeleteClusterSnapshots(request);}
public DescribeClientVpnRoutesResult describeClientVpnRoutes(DescribeClientVpnRoutesRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnRoutes(request);}
public String toString() {String padd = getPadding();StringBuilder sb = new StringBuilder(super.toString());sb.append(parallel ? " [" : " {");sb.append(NEW_LINE);for (final PerfTask task : tasks) {sb.append(task.toString());sb.append(NEW_LINE);}sb.append(padd);sb.append(!letChildReport ? ">" : (parallel ? "]" : "}"));if (fixedTime) {sb.append(' ').append(NumberFormat.getNumberInstance(Locale.ROOT).format(runTimeSec)).append('s');} else if (repetitions>1) {sb.append(" * ").append(repetitions);} else if (repetitions==REPEAT_EXHAUST) {sb.append(" * EXHAUST");}if (rate>0) {sb.append(",  rate: ").append(rate).append('/').append(perMin ? "min" : "sec");}if (getRunInBackground()) {sb.append(" &");int x = getBackgroundDeltaPriority();if (x != 0) {sb.append(x);}}return sb.toString();}
public void serialize(LittleEndianOutput out) {out.writeDouble(field_1_minimumAxisValue);out.writeDouble(field_2_maximumAxisValue);out.writeDouble(field_3_majorIncrement);out.writeDouble(field_4_minorIncrement);out.writeDouble(field_5_categoryAxisCross);out.writeShort(field_6_options);}
public final void makeReadOnly() {readOnly = true;}
public DescribeDirectConnectGatewaysResult describeDirectConnectGateways(DescribeDirectConnectGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeDirectConnectGateways(request);}
public GetUsagePlanKeyResult getUsagePlanKey(GetUsagePlanKeyRequest request) {request = beforeClientExecution(request);return executeGetUsagePlanKey(request);}
public DescribeVpcEndpointConnectionNotificationsResult describeVpcEndpointConnectionNotifications(DescribeVpcEndpointConnectionNotificationsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointConnectionNotifications(request);}
public UpdateGatewayGroupResult updateGatewayGroup(UpdateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeUpdateGatewayGroup(request);}
public DetachClassicLinkVpcResult detachClassicLinkVpc(DetachClassicLinkVpcRequest request) {request = beforeClientExecution(request);return executeDetachClassicLinkVpc(request);}
public ListOperationsResult listOperations() {return listOperations(new ListOperationsRequest());}
public BatchDeletePhoneNumberResult batchDeletePhoneNumber(BatchDeletePhoneNumberRequest request) {request = beforeClientExecution(request);return executeBatchDeletePhoneNumber(request);}
public void setExpireAgeMillis(long expireAgeMillis) {this.expireAgeMillis = expireAgeMillis;expire = null;}
public DeactivateEventSourceResult deactivateEventSource(DeactivateEventSourceRequest request) {request = beforeClientExecution(request);return executeDeactivateEventSource(request);}
public void readBytes(byte[] b, int offset, int len) {System.arraycopy(bytes, pos, b, offset, len);pos += len;}
public IntBuffer put(int index, int c) {throw new ReadOnlyBufferException();}
public SendUsersMessagesResult sendUsersMessages(SendUsersMessagesRequest request) {request = beforeClientExecution(request);return executeSendUsersMessages(request);}
public MissingFormatWidthException(String s) {if (s == null) {throw new NullPointerException();}this.s = s;}
public DescribeVolumesRequest(java.util.List<String> volumeIds) {setVolumeIds(volumeIds);}
public SubmitCutoutTaskRequest() {super("lubancloud", "2018-05-09", "SubmitCutoutTask", "luban");setMethod(MethodType.POST);}
public DoubleBuffer asReadOnlyBuffer() {return duplicate();}
@Override public int size() {return subMap.size();}
public CreateLabelsResult createLabels(CreateLabelsRequest request) {request = beforeClientExecution(request);return executeCreateLabels(request);}
public boolean isEmpty() {return size == 0;}
public int getRenameScore() {return outCandidate.renameScore;}
public SeriesTextRecord() {field_4_text = "";is16bit = false;}
public char get() {if (position == limit) {throw new BufferUnderflowException();}return sequence.charAt(position++);}
public static double irr(double[] values, double guess) {double x0 = guess;for (int i = 0; i < MAX_ITERATION_COUNT; i++) {final double factor = 1.0 + x0;double denominator = factor;if (denominator == 0) {return Double.NaN;}double fValue = values[0];double fDerivative = 0;for (int k = 1; k < values.length; k++) {final double value = values[k];fValue += value / denominator;denominator *= factor;fDerivative -= k * value / denominator;}if (fDerivative == 0) {return Double.NaN;}double x1 =  x0 - fValue/fDerivative;if (Math.abs(x1 - x0) <= ABSOLUTE_ACCURACY) {return x1;}x0 = x1;}return Double.NaN;}
public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, "");return sb.toString();}
public void skip() {_type = SKIP;}
public HSSFClientAnchor getPreferredSize(){return getPreferredSize(1.0);}
public void fromRaw(int[] ints) {fromRaw(ints, 0);}
public ModifyClusterParameterGroupResult modifyClusterParameterGroup(ModifyClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyClusterParameterGroup(request);}
public boolean get(URIish uri, List<CredentialItem> items)throws UnsupportedCredentialItem {return get(uri, items.toArray(new CredentialItem[0]));}
public synchronized FormatType getFormat() {return acceptFormat;}
public ListTypesResult listTypes(ListTypesRequest request) {request = beforeClientExecution(request);return executeListTypes(request);}
public K next() { return nextEntry().key; }
public StartAssessmentRunResult startAssessmentRun(StartAssessmentRunRequest request) {request = beforeClientExecution(request);return executeStartAssessmentRun(request);}
public boolean equals(Object obj) {if ( this==obj ) return true;if ( !(obj instanceof OR) ) return false;OR other = (OR)obj;return Arrays.equals(this.opnds, other.opnds);}
public boolean equals(Object other) {return ((PointTransitions) other).point == point;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3) {throw new RuntimeException("Incomplete code"+ " - don't know how to support the 'area_num' parameter yet)");}
public DescribeClusterParametersResult describeClusterParameters(DescribeClusterParametersRequest request) {request = beforeClientExecution(request);return executeDescribeClusterParameters(request);}
public String typeName() {return typeName;}
public CreateModelPackageResult createModelPackage(CreateModelPackageRequest request) {request = beforeClientExecution(request);return executeCreateModelPackage(request);}
public long ramBytesUsed() {long mem = RamUsageEstimator.shallowSizeOf(this) + RamUsageEstimator.sizeOf(offsets);if (offsets != ordinals) {mem += RamUsageEstimator.sizeOf(ordinals);}return mem;}
public final int get(int index) {checkIndex(index);return backingArray[offset + index];}
public final State captureState() {final State state = this.getCurrentState();return (state == null) ? null : state.clone();}
public String toString() {CellReference cr = new CellReference(getRow(), getColumn());return getClass().getName() + "[" +_evaluator.getSheetNameRange() +'!' +cr.formatAsString() +"]";}
public CharBuffer compact() {throw new ReadOnlyBufferException();}
public DetectCustomLabelsResult detectCustomLabels(DetectCustomLabelsRequest request) {request = beforeClientExecution(request);return executeDetectCustomLabels(request);}
public int indexOf(final int o){int rval = 0;for (; rval < _limit; rval++){if (o == _array[ rval ]){break;}}if (rval == _limit){rval = -1;   }return rval;}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;}
@Override public int indexOf(Object object) {Object[] a = array;int s = size;if (object != null) {for (int i = 0; i < s; i++) {if (object.equals(a[i])) {return i;}}} else {for (int i = 0; i < s; i++) {if (a[i] == null) {return i;}}}return -1;}
public void setObjectChecking(boolean on) {setObjectChecker(on ? new ObjectChecker() : null);}
public ModifyVpcEndpointResult modifyVpcEndpoint(ModifyVpcEndpointRequest request) {request = beforeClientExecution(request);return executeModifyVpcEndpoint(request);}
public DeleteMethodResponseResult deleteMethodResponse(DeleteMethodResponseRequest request) {request = beforeClientExecution(request);return executeDeleteMethodResponse(request);}
public StringRecord( RecordInputStream in) {int field_1_string_length           = in.readUShort();_is16bitUnicode            = in.readByte() != 0x00;if (_is16bitUnicode){_text = in.readUnicodeLEString(field_1_string_length);} else {_text = in.readCompressedUnicode(field_1_string_length);}}
public DrawingRecord(RecordInputStream in) {recordData = in.readRemainder();}
public GetProfileResult getProfile(GetProfileRequest request) {request = beforeClientExecution(request);return executeGetProfile(request);}
public DescribeTableResult describeTable(String tableName) {return describeTable(new DescribeTableRequest().withTableName(tableName));}
public GetSegmentResult getSegment(GetSegmentRequest request) {request = beforeClientExecution(request);return executeGetSegment(request);}
public IntBuffer duplicate() {return copy(this, mark);}
public PutAlarmResult putAlarm(PutAlarmRequest request) {request = beforeClientExecution(request);return executePutAlarm(request);}
public boolean matches(ValueEval x) {int testValue;if(x instanceof StringEval) {return false;} else if((x instanceof BoolEval)) {BoolEval be = (BoolEval) x;testValue = boolToInt(be.getBooleanValue());} else if((x instanceof BlankEval)) {switch (getCode()) {case CmpOp.NE:return true;default:return false;}} else if((x instanceof NumberEval)) {switch (getCode()) {case CmpOp.NE:return true;default:return false;}} else {return false;}return evaluate(testValue - _value);}
public DeleteTrialResult deleteTrial(DeleteTrialRequest request) {request = beforeClientExecution(request);return executeDeleteTrial(request);}
public String toString() {return set.toString();}
public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!getField().equals(field)) {buffer.append(getField());buffer.append(":");}buffer.append(includeLower ? '[' : '{');buffer.append(lowerTerm != null ? ("*".equals(Term.toString(lowerTerm)) ? "\\*" : Term.toString(lowerTerm))  : "*");buffer.append(" TO ");buffer.append(upperTerm != null ? ("*".equals(Term.toString(upperTerm)) ? "\\*" : Term.toString(upperTerm)) : "*");buffer.append(includeUpper ? ']' : '}');return buffer.toString();}
public void reset() {count = 0;}
public int[] init() {return bytesStart = new int[ArrayUtil.oversize(initSize, Integer.BYTES)];}
public int codePointBefore(int index) {if (index < 1 || index > count) {throw indexAndLength(index);}return Character.codePointBefore(value, index);}
public String toString() {return "SkipWorkTree(" + treeIdx + ")";}
public GetLifecyclePoliciesResult getLifecyclePolicies(GetLifecyclePoliciesRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicies(request);}
public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) {super(delegate);maxMergeSizeBytes = (long) (maxMergeSizeMB * 1024 * 1024);maxCachedBytes = (long) (maxCachedMB * 1024 * 1024);}
public void visitContainedRecords(RecordVisitor rv) {visitIfPresent(_protectRecord, rv);visitIfPresent(_objectProtectRecord, rv);visitIfPresent(_scenarioProtectRecord, rv);visitIfPresent(_passwordRecord, rv);}
public RefSubRecord(int extBookIndex, int firstSheetIndex, int lastSheetIndex) {_extBookIndex = extBookIndex;_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;}
public long getEntryLength() {return current().getLength();}
public String toString() {return getClass().getSimpleName() + "(maxLevels:" + maxLevels + ",ctx:" + ctx + ")";}
public BooleanQueryBuilder(QueryBuilder factory) {this.factory = factory;}
public HSSFShape(EscherContainerRecord spContainer, ObjRecord objRecord) {this._escherContainer = spContainer;this._objRecord = objRecord;this._optRecord = spContainer.getChildById(EscherOptRecord.RECORD_ID);this.anchor = HSSFAnchor.createAnchorFromEscher(spContainer);}
public ListUpdatesResult listUpdates(ListUpdatesRequest request) {request = beforeClientExecution(request);return executeListUpdates(request);}
public IncreaseStreamRetentionPeriodResult increaseStreamRetentionPeriod(IncreaseStreamRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeIncreaseStreamRetentionPeriod(request);}
public void writeFloat(float value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeFloat(value);}
public Collection<Cell> getSubCells() {String[] hashes = GeohashUtils.getSubGeohashes(getGeohash());List<Cell> cells = new ArrayList<>(hashes.length);for (String hash : hashes) {cells.add(new GhCell(hash));}return cells;}
public StringBuilder insert(int offset, CharSequence s) {insert0(offset, s == null ? "null" : s.toString());return this;}
public static Collection<ParseTree> findAllTokenNodes(ParseTree t, int ttype) {return findAllNodes(t, ttype, true);}
public NameIdentifier(String name, boolean isQuoted) {_name = name;_isQuoted = isQuoted;}
public ObjectLoader open(DiffEntry.Side side, DiffEntry ent)throws IOException {switch (side) {case OLD:return oldSource.open(ent.oldPath, ent.oldId.toObjectId());case NEW:return newSource.open(ent.newPath, ent.newId.toObjectId());default:throw new IllegalArgumentException();}}
public DBClusterSnapshot createDBClusterSnapshot(CreateDBClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterSnapshot(request);}
public ExternalBookBlock(String url, String[] sheetNames) {_externalBookRecord = SupBookRecord.createExternalReferences(url, sheetNames);_crnBlocks = new CRNBlock[0];}
public static int compareWithCase(String a, String b) {for (int i = 0; i < a.length() && i < b.length(); i++) {int d = a.charAt(i) - b.charAt(i);if (d != 0)return d;}return a.length() - b.length();}
public RecallPoint [] getRecallPoints() {return recallPoints.toArray(new RecallPoint[0]);}
public RemoveFacePhotosRequest() {super("CloudPhoto", "2017-07-11", "RemoveFacePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public static IntsRef toUTF32(char[] s, int offset, int length, IntsRefBuilder scratch) {int charIdx = offset;int intIdx = 0;final int charLimit = offset + length;while(charIdx < charLimit) {scratch.grow(intIdx+1);final int utf32 = Character.codePointAt(s, charIdx, charLimit);scratch.setIntAt(intIdx, utf32);charIdx += Character.charCount(utf32);intIdx++;}scratch.setLength(intIdx);return scratch.get();}
public void skipBytes(long count) {pos -= count;}
public void addDataValidation(DVRecord dvRecord) {_validationList.add(dvRecord);_headerRec.setDVRecNo(_validationList.size());}
public void setDoubleValue(double value) {if (!(fieldsData instanceof Double)) {throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Double");}fieldsData = Double.valueOf(value);}
public DeleteRepoAuthorizationRequest() {super("cr", "2016-06-07", "DeleteRepoAuthorization", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]");setMethod(MethodType.DELETE);}
public final void writeObject(Object object) throws IOException {writeObject(object, false);}
public String toString() {byte[] raw = toByteArray();CanonicalTreeParser p = new CanonicalTreeParser();p.reset(raw);StringBuilder r = new StringBuilder();r.append("Tree={");if (!p.eof()) {r.append('\n');try {new ObjectChecker().checkTree(raw);} catch (CorruptObjectException error) {r.append("*** ERROR: ").append(error.getMessage()).append("\n");r.append('\n');}}while (!p.eof()) {final FileMode mode = p.getEntryFileMode();r.append(mode);r.append(' ');r.append(Constants.typeString(mode.getObjectType()));r.append(' ');r.append(p.getEntryObjectId().name());r.append(' ');r.append(p.getEntryPathString());r.append('\n');p.next();}r.append("}");return r.toString();}
public char getChar(int index) {return (char) getShort(index);}
public String toString() {return "I(ne)";}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[GUTS]\n");buffer.append("    .leftgutter     = ").append(Integer.toHexString(getLeftRowGutter())).append("\n");buffer.append("    .topgutter      = ").append(Integer.toHexString(getTopColGutter())).append("\n");buffer.append("    .rowlevelmax    = ").append(Integer.toHexString(getRowLevelMax())).append("\n");buffer.append("    .collevelmax    = ").append(Integer.toHexString(getColLevelMax())).append("\n");buffer.append("[/GUTS]\n");return buffer.toString();}
public ParseTree getChild(int i) {return null;}
public ListInvalidationsResult listInvalidations(ListInvalidationsRequest request) {request = beforeClientExecution(request);return executeListInvalidations(request);}
public TokenStream newSinkTokenStream() {return new SinkTokenStream(this.cloneAttributes(), cachedStates);}
public PrecedencePredicate(int precedence) {this.precedence = precedence;}
public ReadPresetResult readPreset(ReadPresetRequest request) {request = beforeClientExecution(request);return executeReadPreset(request);}
public File getIndexFile() throws NoWorkTreeException {if (isBare())throw new NoWorkTreeException();return indexFile;}
public ListApplicationsResult listApplications(ListApplicationsRequest request) {request = beforeClientExecution(request);return executeListApplications(request);}
public DataValidationConstraint createNumericConstraint(int validationType,int operatorType, String formula1, String formula2) {return DVConstraint.createNumericConstraint(validationType, operatorType, formula1, formula2);}
public int read(byte[] buffer) throws IOException {return read(buffer, 0, buffer.length);}
public String toFormulaString() {return _value ? "TRUE" : "FALSE";}
public void write(char[] chars, int offset, int count) {Arrays.checkOffsetAndCount(chars.length, offset, count);if (count == 0) {return;}buf.append(chars, offset, count);}
public void ReInit(CharStream stream) {token_source.ReInit(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public RevokeDBSecurityGroupIngressRequest(String dBSecurityGroupName) {setDBSecurityGroupName(dBSecurityGroupName);}
public InitiateDocumentVersionUploadResult initiateDocumentVersionUpload(InitiateDocumentVersionUploadRequest request) {request = beforeClientExecution(request);return executeInitiateDocumentVersionUpload(request);}
public MemAreaPtg(int subexLen) {field_1_reserved = 0;field_2_subex_len = subexLen;}
public FtrHeader() {associatedRange = new CellRangeAddress(0, 0, 0, 0);}
public IntBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.INT);byteBuffer.position(position * SizeOf.INT);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public String getRawAuthority() {return authority;}
public void write(byte[] b, int off, int len) throws IOException {if ((off < 0) || (off > b.length) || (len < 0) ||((off + len) > b.length) || ((off + len) < 0)) {throw new IndexOutOfBoundsException();} else if (len == 0) {return;}do {createBlockIfNeeded();int writeBytes = Math.min(buffer.remaining(), len);buffer.put(b, off, writeBytes);off += writeBytes;len -= writeBytes;} while (len > 0);}
public static void validateSimple(String s, String legal)throws URISyntaxException {for (int i = 0; i < s.length(); i++) {char ch = s.charAt(i);if (!((ch >= 'a' && ch <= 'z')|| (ch >= 'A' && ch <= 'Z')|| (ch >= '0' && ch <= '9')|| legal.indexOf(ch) > -1)) {throw new URISyntaxException(s, "Illegal character", i);}}}
public static String readUnicodeString(LittleEndianInput in) {int nChars = in.readUShort();byte flag = in.readByte();if ((flag & 0x01) == 0) {return readCompressedUnicode(in, nChars);}return readUnicodeLE(in, nChars);}
public DocValuesOrdinalsReader(String field) {this.field = field;}
public AdvertiseByoipCidrResult advertiseByoipCidr(AdvertiseByoipCidrRequest request) {request = beforeClientExecution(request);return executeAdvertiseByoipCidr(request);}
public DescribeAlarmsResult describeAlarms() {return describeAlarms(new DescribeAlarmsRequest());}
public DescribeCrossAccountAccessRoleResult describeCrossAccountAccessRole(DescribeCrossAccountAccessRoleRequest request) {request = beforeClientExecution(request);return executeDescribeCrossAccountAccessRole(request);}
public StringBuilder reverse() {reverse0();return this;}
public DescribeImagesResult describeImages(DescribeImagesRequest request) {request = beforeClientExecution(request);return executeDescribeImages(request);}
public CreateDhcpOptionsRequest(java.util.List<DhcpConfiguration> dhcpConfigurations) {setDhcpConfigurations(dhcpConfigurations);}
public StartChatContactResult startChatContact(StartChatContactRequest request) {request = beforeClientExecution(request);return executeStartChatContact(request);}
public GetCampaignsResult getCampaigns(GetCampaignsRequest request) {request = beforeClientExecution(request);return executeGetCampaigns(request);}
public GetAssessmentReportResult getAssessmentReport(GetAssessmentReportRequest request) {request = beforeClientExecution(request);return executeGetAssessmentReport(request);}
public void reportAmbiguity(Parser recognizer,DFA dfa,int startIndex,int stopIndex,boolean exact,BitSet ambigAlts,ATNConfigSet configs){if (exactOnly && !exact) {return;}String format = "reportAmbiguity d=%s: ambigAlts=%s, input='%s'";String decision = getDecisionDescription(recognizer, dfa);BitSet conflictingAlts = getConflictingAlts(ambigAlts, configs);String text = recognizer.getTokenStream().getText(Interval.of(startIndex, stopIndex));String message = String.format(format, decision, conflictingAlts, text);recognizer.notifyErrorListeners(message);}
public Object[] toArray() {synchronized (Hashtable.this) {return super.toArray();}}
public boolean contains(Object o) {if (o instanceof RevFlag)return (mask & ((RevFlag) o).mask) != 0;return false;}
public DisableAlarmActionsResult disableAlarmActions(DisableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeDisableAlarmActions(request);}
public RegisterDBProxyTargetsResult registerDBProxyTargets(RegisterDBProxyTargetsRequest request) {request = beforeClientExecution(request);return executeRegisterDBProxyTargets(request);}
public static void fill(byte[] array, int start, int end, byte value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public boolean containsColumn(int columnIndex) {return _firstCol <= columnIndex && columnIndex <= _lastCol;}
public Hashtable() {table = (HashtableEntry<K, V>[]) EMPTY_TABLE;threshold = -1; }
public final AttributeFactory getAttributeFactory() {return this.factory;}
public void onChange(boolean selfChange) {refreshData();}
public ListObjectAttributesResult listObjectAttributes(ListObjectAttributesRequest request) {request = beforeClientExecution(request);return executeListObjectAttributes(request);}
public GetDeploymentsResult getDeployments(GetDeploymentsRequest request) {request = beforeClientExecution(request);return executeGetDeployments(request);}
public ListWorkGroupsResult listWorkGroups(ListWorkGroupsRequest request) {request = beforeClientExecution(request);return executeListWorkGroups(request);}
public CreatePhotoStoreRequest() {super("CloudPhoto", "2017-07-11", "CreatePhotoStore", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public PutMethodResult putMethod(PutMethodRequest request) {request = beforeClientExecution(request);return executePutMethod(request);}
public DescribeServiceAccessPoliciesResult describeServiceAccessPolicies(DescribeServiceAccessPoliciesRequest request) {request = beforeClientExecution(request);return executeDescribeServiceAccessPolicies(request);}
public DescribeCacheParameterGroupsResult describeCacheParameterGroups() {return describeCacheParameterGroups(new DescribeCacheParameterGroupsRequest());}
public Float getAndIncrement(String key) {String key2 = key.trim().toLowerCase(locale);TSTNode node = getNode(key2);if (node == null) {return null;}Float aux = (Float) (node.data);if (aux == null) {aux = 1f;} else {aux = (float) (aux.intValue() + 1);}put(key2, aux);return aux;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[WINDOWPROTECT]\n");buffer.append("    .options = ").append(HexDump.shortToHex(_options)).append("\n");buffer.append("[/WINDOWPROTECT]\n");return buffer.toString();}
public RetrieveDomainAuthCodeResult retrieveDomainAuthCode(RetrieveDomainAuthCodeRequest request) {request = beforeClientExecution(request);return executeRetrieveDomainAuthCode(request);}
public GetRelationalDatabaseMetricDataResult getRelationalDatabaseMetricData(GetRelationalDatabaseMetricDataRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseMetricData(request);}
public Entry<K, V> pollFirstEntry() {Node<K, V> result = endpoint(true);if (result != null) {removeInternal(result);}return immutableCopy(result);}
public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {super(in);if (maxTokenPosition < 1) {throw new IllegalArgumentException("maxTokenPosition must be greater than zero");}this.maxTokenPosition = maxTokenPosition;this.consumeAllTokens = consumeAllTokens;}
public ViewFieldsRecord(RecordInputStream in) {_sxaxis = in.readShort();_cSub = in.readShort();_grbitSub = in.readShort();_cItm = in.readShort();int cchName = in.readUShort();if (cchName != STRING_NOT_PRESENT_LEN) {int flag = in.readByte();if ((flag & 0x01) != 0) {_name = in.readUnicodeLEString(cchName);} else {_name = in.readCompressedUnicode(cchName);}}}
public synchronized static DefaultProfile getProfile(String regionId, String accessKeyId, String secret) {Credential creden = new Credential(accessKeyId, secret);profile = new DefaultProfile(regionId, creden);return profile;}
public int indexOf(String string) {return indexOf(string, 0);}
public ListAppsResult listApps(ListAppsRequest request) {request = beforeClientExecution(request);return executeListApps(request);}
public ListAttachedIndicesResult listAttachedIndices(ListAttachedIndicesRequest request) {request = beforeClientExecution(request);return executeListAttachedIndices(request);}
public void addShape(HSSFShape shape) {shape.setPatriarch(this);_shapes.add(shape);}
public CreateNatGatewayResult createNatGateway(CreateNatGatewayRequest request) {request = beforeClientExecution(request);return executeCreateNatGateway(request);}
public GetApnsVoipChannelResult getApnsVoipChannel(GetApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeGetApnsVoipChannel(request);}
public ReplaceTransitGatewayRouteResult replaceTransitGatewayRoute(ReplaceTransitGatewayRouteRequest request) {request = beforeClientExecution(request);return executeReplaceTransitGatewayRoute(request);}
public long ramBytesUsed() {return super.ramBytesUsed()+ offsets.ramBytesUsed()+ lengths.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF+ values.bytes().length;}
public ParseTreePattern compile(String pattern, int patternRuleIndex) {List<? extends Token> tokenList = tokenize(pattern);ListTokenSource tokenSrc = new ListTokenSource(tokenList);CommonTokenStream tokens = new CommonTokenStream(tokenSrc);ParserInterpreter parserInterp = new ParserInterpreter(parser.getGrammarFileName(),parser.getVocabulary(),Arrays.asList(parser.getRuleNames()),parser.getATNWithBypassAlts(),tokens);ParseTree tree = null;try {parserInterp.setErrorHandler(new BailErrorStrategy());tree = parserInterp.parse(patternRuleIndex);}catch (ParseCancellationException e) {throw (RecognitionException)e.getCause();}catch (RecognitionException re) {throw re;}catch (Exception e) {throw new CannotInvokeStartRule(e);}if ( tokens.LA(1)!=Token.EOF ) {throw new StartRuleDoesNotConsumeFullPattern();}return new ParseTreePattern(this, pattern, patternRuleIndex, tree);}
public GetRelationalDatabaseLogEventsResult getRelationalDatabaseLogEvents(GetRelationalDatabaseLogEventsRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseLogEvents(request);}
public TokenStream create(TokenStream input) {return new BeiderMorseFilter(input, engine, languageSet);}
public FloatBuffer duplicate() {return copy(this, mark);}
public ClasspathResourceLoader(Class<?> clazz) {this(clazz, clazz.getClassLoader());}
public DescribeRouteTablesResult describeRouteTables(DescribeRouteTablesRequest request) {request = beforeClientExecution(request);return executeDescribeRouteTables(request);}
public void setRenameCallback(RenameCallback callback) {renameCallback = callback;}
public DimensionsRecord createDimensions() {DimensionsRecord result = new DimensionsRecord();result.setFirstRow(_firstrow);result.setLastRow(_lastrow);result.setFirstCol((short) _valuesAgg.getFirstCellNum());result.setLastCol((short) _valuesAgg.getLastCellNum());return result;}
public StopTransformJobResult stopTransformJob(StopTransformJobRequest request) {request = beforeClientExecution(request);return executeStopTransformJob(request);}
public final String toString() {return getClass().getName() + " [" +getStringValue() +"]";}
public QueryAuthenticationRequest() {super("LinkFace", "2018-07-20", "QueryAuthentication");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public PrintStream append(char c) {print(c);return this;}
public StartKeyPhrasesDetectionJobResult startKeyPhrasesDetectionJob(StartKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStartKeyPhrasesDetectionJob(request);}
public QueryPhraseMap searchPhrase( final List<TermInfo> phraseCandidate ){QueryPhraseMap currMap = this;for( TermInfo ti : phraseCandidate ){currMap = currMap.subMap.get( ti.getText() );if( currMap == null ) return null;}return currMap.isValidTermOrPhrase( phraseCandidate ) ? currMap : null;}
public void add(Term term) {if (term == null) {throw new IllegalArgumentException("Term must not be null");}this.terms.add(term);}
public ListEmailIdentitiesResult listEmailIdentities(ListEmailIdentitiesRequest request) {request = beforeClientExecution(request);return executeListEmailIdentities(request);}
public MutableFPNumber(BigInteger frac, int binaryExponent) {_significand = frac;_binaryExponent = binaryExponent;}
public CreateNetworkProfileResult createNetworkProfile(CreateNetworkProfileRequest request) {request = beforeClientExecution(request);return executeCreateNetworkProfile(request);}
public Transition removeTransition(int index) {return transitions.remove(index);}
public int doLogic() throws Exception {final PerfRunData runData = getRunData();IndexWriter w = runData.getIndexWriter();if (w == null) {throw new RuntimeException("please open the writer before invoking NearRealtimeReader");}if (runData.getIndexReader() != null) {throw new RuntimeException("please close the existing reader before invoking NearRealtimeReader");}long t = System.currentTimeMillis();DirectoryReader r = DirectoryReader.open(w);runData.setIndexReader(r);r.decRef();reopenCount = 0;while(!stopNow) {long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));if (waitForMsec > 0) {Thread.sleep(waitForMsec);}t = System.currentTimeMillis();final DirectoryReader newReader = DirectoryReader.openIfChanged(r);if (newReader != null) {final int delay = (int) (System.currentTimeMillis()-t);if (reopenTimes.length == reopenCount) {reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);}reopenTimes[reopenCount++] = delay;runData.setIndexReader(newReader);newReader.decRef();r = newReader;}}stopNow = false;return reopenCount;}
public PutAttributesResult putAttributes(PutAttributesRequest request) {request = beforeClientExecution(request);return executePutAttributes(request);}
public DeleteLocalGatewayRouteTableVpcAssociationResult deleteLocalGatewayRouteTableVpcAssociation(DeleteLocalGatewayRouteTableVpcAssociationRequest request) {request = beforeClientExecution(request);return executeDeleteLocalGatewayRouteTableVpcAssociation(request);}
public TreeFilter clone() {return this;}
public static TreeFilter create(TreeFilter[] list) {if (list.length == 2)return create(list[0], list[1]);if (list.length < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final TreeFilter[] subfilters = new TreeFilter[list.length];System.arraycopy(list, 0, subfilters, 0, list.length);return new List(subfilters);}
public void back(int delta) {while (--delta >= 0) {if (currentSubtree != null)nextSubtreePos--;ptr--;parseEntry(false);if (currentSubtree != null)ptr -= currentSubtree.getEntrySpan() - 1;}}
public Map<String, SubmoduleStatus> call() throws GitAPIException {checkCallable();try (SubmoduleWalk generator = SubmoduleWalk.forIndex(repo)) {if (!paths.isEmpty())generator.setFilter(PathFilterGroup.createFromStrings(paths));Map<String, SubmoduleStatus> statuses = new HashMap<>();while (generator.next()) {SubmoduleStatus status = getStatus(generator);statuses.put(status.getPath(), status);}return statuses;} catch (IOException | ConfigInvalidException e) {throw new JGitInternalException(e.getMessage(), e);}}
public synchronized int available() {return count - pos;}
public SmallStream(int type, byte[] data) {this.type = type;this.data = data;}
public String escapeExtensionField(String extfield) {return QueryParserBase.escape(extfield);}
public QueryScorer(Query query) {init(query, null, null, true);}
public int getHighIx() {return _highIx;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[VCENTER]\n");buffer.append("    .vcenter        = ").append(getVCenter()).append("\n");buffer.append("[/VCENTER]\n");return buffer.toString();}
public int size(){return _limit;}
public PredictCategoryRequest() {super("visionai-poc", "2020-04-08", "PredictCategory");setMethod(MethodType.POST);}
public DeleteLagResult deleteLag(DeleteLagRequest request) {request = beforeClientExecution(request);return executeDeleteLag(request);}
public boolean equals(Object other) {if (!(other instanceof LongBuffer)) {return false;}LongBuffer otherBuffer = (LongBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}
public void end() {state.end();}
public BooleanMatcher(boolean value, CmpOp operator) {super(operator);_value = boolToInt(value);}
public SheetVector(RefEval re) {_size = re.getNumberOfSheets();_re = re;}
public UpdateGameSessionResult updateGameSession(UpdateGameSessionRequest request) {request = beforeClientExecution(request);return executeUpdateGameSession(request);}
public String getName() {return String.format(Locale.ROOT, "Dirichlet(%f)", getMu());}
public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {assert offset + length <= originalLength;if (length == 0) {bytes.length = 0;return;}final int compressedLength = in.readVInt();final int paddedLength = compressedLength + 1;compressed = ArrayUtil.grow(compressed, paddedLength);in.readBytes(compressed, 0, compressedLength);compressed[compressedLength] = 0; final Inflater decompressor = new Inflater(true);try {decompressor.setInput(compressed, 0, paddedLength);bytes.offset = bytes.length = 0;bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);try {bytes.length = decompressor.inflate(bytes.bytes, bytes.length, originalLength);} catch (DataFormatException e) {throw new IOException(e);}if (!decompressor.finished()) {throw new CorruptIndexException("Invalid decoder state: needsInput=" + decompressor.needsInput()+ ", needsDict=" + decompressor.needsDictionary(), in);}} finally {decompressor.end();}if (bytes.length != originalLength) {throw new CorruptIndexException("Lengths mismatch: " + bytes.length + " != " + originalLength, in);}bytes.offset = offset;bytes.length = length;}
public Pair<String,String> splitExtensionField(String defaultField,String field) {int indexOf = field.indexOf(this.extensionFieldDelimiter);if (indexOf < 0)return new Pair<>(field, null);final String indexField = indexOf == 0 ? defaultField : field.substring(0,indexOf);final String extensionKey = field.substring(indexOf + 1);return new Pair<>(indexField, extensionKey);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[FRAME]\n");buffer.append("    .borderType           = ").append("0x").append(HexDump.toHex(  getBorderType ())).append(" (").append( getBorderType() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("    .options              = ").append("0x").append(HexDump.toHex(  getOptions ())).append(" (").append( getOptions() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("         .autoSize                 = ").append(isAutoSize()).append('\n');buffer.append("         .autoPosition             = ").append(isAutoPosition()).append('\n');buffer.append("[/FRAME]\n");return buffer.toString();}
public Cluster pauseCluster(PauseClusterRequest request) {request = beforeClientExecution(request);return executePauseCluster(request);}
public void setValue(String newValue) {value = newValue;}
public AllocateAddressResult allocateAddress(AllocateAddressRequest request) {request = beforeClientExecution(request);return executeAllocateAddress(request);}
public GetNetworkProfileResult getNetworkProfile(GetNetworkProfileRequest request) {request = beforeClientExecution(request);return executeGetNetworkProfile(request);}
public static void reThrow(Throwable th) throws IOException {if (th != null) {throw rethrowAlways(th);}}
public void removeCell(CellValueRecordInterface cvRec) {if (cvRec instanceof FormulaRecordAggregate) {((FormulaRecordAggregate)cvRec).notifyFormulaChanging();}_valuesAgg.removeCell(cvRec);}
public Snapshot createSnapshot(CreateSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateSnapshot(request);}
public Token get(int i) {if ( i < 0 || i >= tokens.size() ) {throw new IndexOutOfBoundsException("token index "+i+" out of range 0.."+(tokens.size()-1));}return tokens.get(i);}
public DescribeAlarmsResult describeAlarms(DescribeAlarmsRequest request) {request = beforeClientExecution(request);return executeDescribeAlarms(request);}
public static long[] grow(long[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Long.BYTES));} elsereturn array;}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );int remainingBytes = 8;LittleEndian.putInt( data, offset + 4, remainingBytes );LittleEndian.putInt( data, offset + 8, field_1_shapeId );LittleEndian.putInt( data, offset + 12, field_2_flags );listener.afterRecordSerialize( offset + getRecordSize(), getRecordId(), getRecordSize(), this );return 8 + 8;}
public LsRemoteCommand setTags(boolean tags) {this.tags = tags;return this;}
public ASCIIFoldingFilterFactory(Map<String,String> args) {super(args);preserveOriginal = getBoolean(args, PRESERVE_ORIGINAL, false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {return "input=" + input.get() + " output=" + output + " context=" + context + " boost=" + boost + " payload=" + payload;}
public ListNotesCommand setNotesRef(String notesRef) {checkCallable();this.notesRef = notesRef;return this;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXVD]\n");buffer.append("    .sxaxis    = ").append(HexDump.shortToHex(_sxaxis)).append('\n');buffer.append("    .cSub      = ").append(HexDump.shortToHex(_cSub)).append('\n');buffer.append("    .grbitSub  = ").append(HexDump.shortToHex(_grbitSub)).append('\n');buffer.append("    .cItm      = ").append(HexDump.shortToHex(_cItm)).append('\n');buffer.append("    .name      = ").append(_name).append('\n');buffer.append("[/SXVD]\n");return buffer.toString();}
public V get(Object o) {if(o == null)throw new NullPointerException();return null;}
public String toString() {final StringBuilder sb = new StringBuilder();sb.append("[NAMECMT]\n");sb.append("    .record type            = ").append(HexDump.shortToHex(field_1_record_type)).append("\n");sb.append("    .frt cell ref flag      = ").append(HexDump.byteToHex(field_2_frt_cell_ref_flag)).append("\n");sb.append("    .reserved               = ").append(field_3_reserved).append("\n");sb.append("    .name length            = ").append(field_6_name_text.length()).append("\n");sb.append("    .comment length         = ").append(field_7_comment_text.length()).append("\n");sb.append("    .name                   = ").append(field_6_name_text).append("\n");sb.append("    .comment                = ").append(field_7_comment_text).append("\n");sb.append("[/NAMECMT]\n");return sb.toString();}
public CodepointCountFilterFactory(Map<String, String> args) {super(args);min = requireInt(args, MIN_KEY);max = requireInt(args, MAX_KEY);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public Entry<K, V> ceilingEntry(K key) {return immutableCopy(findBounded(key, CEILING));}
public long setStartTimeMillis() {startTimeMillis = System.currentTimeMillis();return startTimeMillis;}
public ListProfilingGroupsResult listProfilingGroups(ListProfilingGroupsRequest request) {request = beforeClientExecution(request);return executeListProfilingGroups(request);}
public static PersonIdent parsePersonIdent(String in) {return parsePersonIdent(Constants.encode(in), 0);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_numerator);out.writeShort(field_2_denominator);}
public AddCommand setUpdate(boolean update) {this.update = update;return this;}
public static <T> T[] copyOf(T[] original, int newLength) {if (original == null) {throw new NullPointerException();}if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public void writeByte(int v) {writeContinueIfRequired(1);_ulrOutput.writeByte(v);}
public DeleteDBInstanceRequest(String dBInstanceIdentifier) {setDBInstanceIdentifier(dBInstanceIdentifier);}
public void reset() {previousValue = value = minValue;}
public void setLength(long sz) {setLength((int) sz);}
public static String revisionVersion(IndexCommit indexCommit, IndexCommit taxoCommit) {return Long.toString(indexCommit.getGeneration(), RADIX) + ":" + Long.toString(taxoCommit.getGeneration(), RADIX);}
public String pattern() {return needleString;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append( "[SST]\n" );buffer.append( "    .numstrings     = " ).append( Integer.toHexString( getNumStrings() ) ).append( "\n" );buffer.append( "    .uniquestrings  = " ).append( Integer.toHexString( getNumUniqueStrings() ) ).append( "\n" );for ( int k = 0; k < field_3_strings.size(); k++ ){UnicodeString s = field_3_strings.get( k );buffer.append("    .string_").append(k).append("      = ").append( s.getDebugInfo() ).append( "\n" );}buffer.append( "[/SST]\n" );return buffer.toString();}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChildren() == null || getChildren().size() == 0)return "";StringBuilder sb = new StringBuilder();String filler = "";for (Iterator<QueryNode> it = getChildren().iterator(); it.hasNext();) {sb.append(filler).append(it.next().toQueryString(escapeSyntaxParser));filler = " OR ";}if ((getParent() != null && getParent() instanceof GroupQueryNode)|| isRoot())return sb.toString();elsereturn "( " + sb.toString() + " )";}
public PushCommand setReceivePack(String receivePack) {checkCallable();this.receivePack = receivePack;return this;}
public DeleteImagePermissionsResult deleteImagePermissions(DeleteImagePermissionsRequest request) {request = beforeClientExecution(request);return executeDeleteImagePermissions(request);}
public static Ptg[] getTokens(Formula formula) {if (formula == null) {return null;}return formula.getTokens();}
public void skipToNextByte() {remainingBits = 0;}
public GetJourneyExecutionActivityMetricsResult getJourneyExecutionActivityMetrics(GetJourneyExecutionActivityMetricsRequest request) {request = beforeClientExecution(request);return executeGetJourneyExecutionActivityMetrics(request);}
public DeregisterContainerInstanceResult deregisterContainerInstance(DeregisterContainerInstanceRequest request) {request = beforeClientExecution(request);return executeDeregisterContainerInstance(request);}
public DeleteEntityRecognizerResult deleteEntityRecognizer(DeleteEntityRecognizerRequest request) {request = beforeClientExecution(request);return executeDeleteEntityRecognizer(request);}
public DescribeGameSessionsResult describeGameSessions(DescribeGameSessionsRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessions(request);}
public SegToken(char[] idArray, int start, int end, int wordType, int weight) {this.charArray = idArray;this.startOffset = start;this.endOffset = end;this.wordType = wordType;this.weight = weight;}
public int compareTo( TermInfo o ){return ( this.position - o.position );}
public TagMeetingResult tagMeeting(TagMeetingRequest request) {request = beforeClientExecution(request);return executeTagMeeting(request);}
public final Buffer limit(int newLimit) {limitImpl(newLimit);return this;}
public final DoubleValuesSource makeRecipDistanceValueSource(Shape queryShape) {Rectangle bbox = queryShape.getBoundingBox();double diagonalDist = ctx.getDistCalc().distance(ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());double distToEdge = diagonalDist * 0.5;float c = (float)distToEdge * 0.1f;DoubleValuesSource distance = makeDistanceValueSource(queryShape.getCenter(), 1.0);return new ReciprocalDoubleValuesSource(c, distance);}
public GetLoginProfileRequest(String userName) {setUserName(userName);}
public int serializeComplexPart( byte[] data, int pos ){return 0;}
public DBCellRecord(int rowOffset, short[] cellOffsets) {field_1_row_offset = rowOffset;field_2_cell_offsets = cellOffsets;}
public StoredField(String name, long value) {super(name, TYPE);fieldsData = value;}
public final Locale getLocale() {return locale;}
public SpanNotBuilder(SpanQueryBuilder factory) {this.factory = factory;}
public String toString() {return toString(0);}
public int compareTo(ExtRst o) {int result;result = reserved - o.reserved;if (result != 0) {return result;}result = formattingFontIndex - o.formattingFontIndex;if (result != 0) {return result;}result = formattingOptions - o.formattingOptions;if (result != 0) {return result;}result = numberOfRuns - o.numberOfRuns;if (result != 0) {return result;}result = phoneticText.compareTo(o.phoneticText);if (result != 0) {return result;}result = phRuns.length - o.phRuns.length;if (result != 0) {return result;}for(int i=0; i<phRuns.length; i++) {result = phRuns[i].phoneticTextFirstCharacterOffset - o.phRuns[i].phoneticTextFirstCharacterOffset;if (result != 0) {return result;}result = phRuns[i].realTextFirstCharacterOffset - o.phRuns[i].realTextFirstCharacterOffset;if (result != 0) {return result;}result = phRuns[i].realTextLength - o.phRuns[i].realTextLength;if (result != 0) {return result;}}result = Arrays.hashCode(extraData)-Arrays.hashCode(o.extraData);return result;}
public GetInstanceSnapshotsResult getInstanceSnapshots(GetInstanceSnapshotsRequest request) {request = beforeClientExecution(request);return executeGetInstanceSnapshots(request);}
public static long[] grow(long[] array) {return grow(array, 1 + array.length);}
public TranslateTextResult translateText(TranslateTextRequest request) {request = beforeClientExecution(request);return executeTranslateText(request);}
public DimensionsRecord(RecordInputStream in) {field_1_first_row = in.readInt();field_2_last_row  = in.readInt();field_3_first_col = in.readShort();field_4_last_col  = in.readShort();field_5_zero      = in.readShort();if (in.available() == 2) {logger.log(POILogger.INFO, "DimensionsRecord has extra 2 bytes.");in.readShort();}}
public int flags() {return flags;}
public Vector(int capacity, int capacityIncrement) {if (capacity < 0) {throw new IllegalArgumentException();}elementData = newElementArray(capacity);elementCount = 0;this.capacityIncrement = capacityIncrement;}
public DeleteLogGroupRequest(String logGroupName) {setLogGroupName(logGroupName);}
public RemoveManagedScalingPolicyResult removeManagedScalingPolicy(RemoveManagedScalingPolicyRequest request) {request = beforeClientExecution(request);return executeRemoveManagedScalingPolicy(request);}
public GetDataRetrievalPolicyResult getDataRetrievalPolicy(GetDataRetrievalPolicyRequest request) {request = beforeClientExecution(request);return executeGetDataRetrievalPolicy(request);}
public DescribeExportImageTasksResult describeExportImageTasks(DescribeExportImageTasksRequest request) {request = beforeClientExecution(request);return executeDescribeExportImageTasks(request);}
public DefaultICUTokenizerConfig(boolean cjkAsWords, boolean myanmarAsWords) {this.cjkAsWords = cjkAsWords;this.myanmarAsWords = myanmarAsWords;}
public DisableAvailabilityZonesForLoadBalancerResult disableAvailabilityZonesForLoadBalancer(DisableAvailabilityZonesForLoadBalancerRequest request) {request = beforeClientExecution(request);return executeDisableAvailabilityZonesForLoadBalancer(request);}
public synchronized void setIndexFieldName(String dimName, String indexFieldName) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.indexFieldName = indexFieldName;}
public BytesRef encode(char[] buffer, int offset, int length) {int payload = ArrayUtil.parseInt(buffer, offset, length);byte[] bytes = PayloadHelper.encodeInt(payload);BytesRef result = new BytesRef(bytes);return result;}
public HideObjRecord(RecordInputStream in) {field_1_hide_obj = in.readShort();}
public String toString() {if ( isEmpty() ) return "[]";StringBuilder buf = new StringBuilder();buf.append("[");for (int i=0; i<returnStates.length; i++) {if ( i>0 ) buf.append(", ");if ( returnStates[i]==EMPTY_RETURN_STATE ) {buf.append("$");continue;}buf.append(returnStates[i]);if ( parents[i]!=null ) {buf.append(' ');buf.append(parents[i].toString());}else {buf.append("null");}}buf.append("]");return buf.toString();}
public synchronized int getSecondaryProgress() {return mIndeterminate ? 0 : mSecondaryProgress;}
public DeleteContactMethodResult deleteContactMethod(DeleteContactMethodRequest request) {request = beforeClientExecution(request);return executeDeleteContactMethod(request);}
@Override public List<E> subList(int start, int end) {synchronized (mutex) {return new SynchronizedList<E>(list.subList(start, end), mutex);}}
@Override public boolean equals(Object object) {return m.equals(object);}
public static String getSchemePrefix(String spec) {int colon = spec.indexOf(':');if (colon < 1) {return null;}for (int i = 0; i < colon; i++) {char c = spec.charAt(i);if (!isValidSchemeChar(i, c)) {return null;}}return spec.substring(0, colon).toLowerCase(Locale.US);}
public ByteBuffer put(byte[] src, int srcOffset, int byteCount) {throw new ReadOnlyBufferException();}
public CreateServiceResult createService(CreateServiceRequest request) {request = beforeClientExecution(request);return executeCreateService(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(_numberOfRegions);for (int i = 0; i < _numberOfRegions; i++) {_regions[_startIndex + i].serialize(out);}}
public StringBuilder insert(int offset, char c) {insert0(offset, c);return this;}
public LabelSSTRecord(RecordInputStream in) {super(in);field_4_sst_index = in.readInt();}
public void setObjectId(AnyObjectId id) {if (objectId == null)objectId = id.copy();}
public int add(CFRecordsAggregate cfAggregate) {cfAggregate.getHeader().setID(_cfHeaders.size());_cfHeaders.add(cfAggregate);return _cfHeaders.size() - 1;}
public TermVectorsPostingsArray(int size) {super(size);freqs = new int[size];lastOffsets = new int[size];lastPositions = new int[size];}
public FieldsQuery(SrndQuery q, List<String> fieldNames, char fieldOp) {this.q = q;this.fieldNames = fieldNames;this.fieldOp = fieldOp;}
public TokenStream create(TokenStream in) {return new GreekLowerCaseFilter(in);}
public ECSMetadataServiceCredentialsFetcher() {this.connectionTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MILLISECONDS;}
public static Decoder getDecoder(Format format, int version, int bitsPerValue) {checkVersion(version);return BulkOperation.of(format, bitsPerValue);}
public synchronized void reset() {nameFinder.clearAdaptiveData();}
public String nextKeyString() {return new String(nextKey());}
public DescribeEventsResult describeEvents() {return describeEvents(new DescribeEventsRequest());}
public UpdateNodeResult updateNode(UpdateNodeRequest request) {request = beforeClientExecution(request);return executeUpdateNode(request);}
public GetJobOutputRequest(String vaultName, String jobId, String range) {setVaultName(vaultName);setJobId(jobId);setRange(range);}
public static String stripTags(String buf, int start) {if (start>0) {buf = buf.substring(start);}return buf.replaceAll("<[^>]*>", " ");}
public DescribeLaunchTemplatesResult describeLaunchTemplates(DescribeLaunchTemplatesRequest request) {request = beforeClientExecution(request);return executeDescribeLaunchTemplates(request);}
public SynonymFilterFactory(Map<String,String> args) {super(args);ignoreCase = getBoolean(args, "ignoreCase", false);synonyms = require(args, "synonyms");format = get(args, "format");expand = getBoolean(args, "expand", true);analyzerName = get(args, "analyzer");tokenizerFactory = get(args, "tokenizerFactory");if (analyzerName != null && tokenizerFactory != null) {throw new IllegalArgumentException("Analyzer and TokenizerFactory can't be specified both: " +analyzerName + " and " + tokenizerFactory);}if (tokenizerFactory != null) {tokArgs.put("luceneMatchVersion", getLuceneMatchVersion().toString());for (Iterator<String> itr = args.keySet().iterator(); itr.hasNext();) {String key = itr.next();tokArgs.put(key.replaceAll("^tokenizerFactory\\.",""), args.get(key));itr.remove();}}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void removePrintArea(int sheetIndex) {getWorkbook().removeBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);}
public ModifyTrafficMirrorFilterNetworkServicesResult modifyTrafficMirrorFilterNetworkServices(ModifyTrafficMirrorFilterNetworkServicesRequest request) {request = beforeClientExecution(request);return executeModifyTrafficMirrorFilterNetworkServices(request);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length == 2) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}return ErrorEval.VALUE_INVALID;}
public DeltaRecord(double maxChange) {field_1_max_change = maxChange;}
public UpdateDomainEntryResult updateDomainEntry(UpdateDomainEntryRequest request) {request = beforeClientExecution(request);return executeUpdateDomainEntry(request);}
public SegmentCommitInfo clone() {SegmentCommitInfo other = new SegmentCommitInfo(info, delCount, softDelCount, delGen, fieldInfosGen, docValuesGen);other.nextWriteDelGen = nextWriteDelGen;other.nextWriteFieldInfosGen = nextWriteFieldInfosGen;other.nextWriteDocValuesGen = nextWriteDocValuesGen;for (Entry<Integer,Set<String>> e : dvUpdatesFiles.entrySet()) {other.dvUpdatesFiles.put(e.getKey(), new HashSet<>(e.getValue()));}other.fieldInfosFiles.addAll(fieldInfosFiles);return other;}
public String putAttribute(String key, String value) {HashMap<String, String> newMap = new HashMap<>(attributes);String oldValue = newMap.put(key, value);attributes = Collections.unmodifiableMap(newMap);return oldValue;}
public void write(int oneChar) {buf.append((char) oneChar);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[WRITEPROTECT]\n");buffer.append("[/WRITEPROTECT]\n");return buffer.toString();}
public EvaluationSheet getSheet(int sheetIndex) {return new HSSFEvaluationSheet(_uBook.getSheetAt(sheetIndex));}
public void removeSlideCount() {remove1stProperty(PropertyIDMap.PID_SLIDECOUNT);}
public DescribeFlowDefinitionResult describeFlowDefinition(DescribeFlowDefinitionRequest request) {request = beforeClientExecution(request);return executeDescribeFlowDefinition(request);}
public void set(int index) {intSet.put(index);if (index > maxInt)maxInt = index;}
public boolean equals(Object other) {if (other == null) {return false;}if (other instanceof CharsRef) {return this.charsEquals((CharsRef) other);}return false;}
public StopFilterFactory(Map<String,String> args) {super(args);stopWordFiles = get(args, "words");format = get(args, "format", (null == stopWordFiles ? null : FORMAT_WORDSET));ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void addState(ATNState state) {if (state != null) {state.atn = this;state.stateNumber = states.size();}states.add(state);}
public String batchUrl() {return this.batchUrl;}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[33];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 33; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
@Override public Iterator<K> iterator() {return new KeyIterator();}
public DoubleList() {_array = new double[8];_count = 0;}
public AddNoteCommand setMessage(String message) {checkCallable();this.message = message;return this;}
public SerializationHandleMap() {this.size = 0;this.threshold = 21; int arraySize = (int) (((long) threshold * 10000) / LOAD_FACTOR);resizeArrays(arraySize);}
public PagedBytes(int blockBits) {assert blockBits > 0 && blockBits <= 31 : blockBits;this.blockSize = 1 << blockBits;this.blockBits = blockBits;blockMask = blockSize-1;upto = blockSize;bytesUsedPerBlock = RamUsageEstimator.alignObjectSize(blockSize + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER);numBlocks = 0;}
public IncreaseReplicationFactorResult increaseReplicationFactor(IncreaseReplicationFactorRequest request) {request = beforeClientExecution(request);return executeIncreaseReplicationFactor(request);}
public UpdateRuntimeConfigurationResult updateRuntimeConfiguration(UpdateRuntimeConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateRuntimeConfiguration(request);}
public char getChar(Map<String,String> args, String name, char defaultValue) {String s = args.remove(name);if (s == null) {return defaultValue;} else {if (s.length() != 1) {throw new IllegalArgumentException(name + " should be a char. \"" + s + "\" is invalid");} else {return s.charAt(0);}}}
public void notifyListeners(LexerNoViableAltException e) {String text = _input.getText(Interval.of(_tokenStartCharIndex, _input.index()));String msg = "token recognition error at: '"+ getErrorDisplay(text) + "'";ANTLRErrorListener listener = getErrorListenerDispatch();listener.syntaxError(this, null, _tokenStartLine, _tokenStartCharPositionInLine, msg, e);}
public void writeLong(long v) {writeContinueIfRequired(8);_ulrOutput.writeLong(v);}
public ChangeMessageVisibilityBatchRequest(String queueUrl, java.util.List<ChangeMessageVisibilityBatchRequestEntry> entries) {setQueueUrl(queueUrl);setEntries(entries);}
public GetExportJobResult getExportJob(GetExportJobRequest request) {request = beforeClientExecution(request);return executeGetExportJob(request);}
public AddRoleToDBInstanceResult addRoleToDBInstance(AddRoleToDBInstanceRequest request) {request = beforeClientExecution(request);return executeAddRoleToDBInstance(request);}
public DeregisterInstancesFromLoadBalancerResult deregisterInstancesFromLoadBalancer(DeregisterInstancesFromLoadBalancerRequest request) {request = beforeClientExecution(request);return executeDeregisterInstancesFromLoadBalancer(request);}
public synchronized StringBuffer insert(int index, char ch) {insert0(index, ch);return this;}
public DownloadDBLogFilePortionResult downloadDBLogFilePortion(DownloadDBLogFilePortionRequest request) {request = beforeClientExecution(request);return executeDownloadDBLogFilePortion(request);}
public GetStaticIpResult getStaticIp(GetStaticIpRequest request) {request = beforeClientExecution(request);return executeGetStaticIp(request);}
public CreateUsagePlanResult createUsagePlan(CreateUsagePlanRequest request) {request = beforeClientExecution(request);return executeCreateUsagePlan(request);}
public BlameResult call() throws GitAPIException {checkCallable();try (BlameGenerator gen = new BlameGenerator(repo, path)) {if (diffAlgorithm != null)gen.setDiffAlgorithm(diffAlgorithm);if (textComparator != null)gen.setTextComparator(textComparator);if (followFileRenames != null)gen.setFollowFileRenames(followFileRenames.booleanValue());if (reverseEndCommits != null)gen.reverse(startCommit, reverseEndCommits);else if (startCommit != null)gen.push(null, startCommit);else {gen.prepareHead();}return gen.computeBlameResult();} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}}
public SearchTransitGatewayMulticastGroupsResult searchTransitGatewayMulticastGroups(SearchTransitGatewayMulticastGroupsRequest request) {request = beforeClientExecution(request);return executeSearchTransitGatewayMulticastGroups(request);}
public LinearOffsetRange normaliseAndTranslate(int translationAmount) {if (_length > 0) {if(translationAmount == 0) {return this;}return new LinearOffsetRange(translationAmount + _offset, _length);}return new LinearOffsetRange(translationAmount + _offset + _length + 1, -_length);}
public boolean isInvoke(char c) {return invokeMap[characterCategoryMap[c]];}
public int getSize() {return size;}
public int read() throws IOException {if (buf == null) {throw new IOException();}if (pos < buf.length) {return (buf[pos++] & 0xFF);}return in.read();}
public int mark() {return 0;}
public SearchPhotosRequest() {super("CloudPhoto", "2017-07-11", "SearchPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public void copyFrom(TermState other) {assert other instanceof OrdTermState : "can not copy from " + other.getClass().getName();this.ord = ((OrdTermState) other).ord;}
public AnalyzeDocumentResult analyzeDocument(AnalyzeDocumentRequest request) {request = beforeClientExecution(request);return executeAnalyzeDocument(request);}
public int calcExtSSTRecordSize() {return ExtSSTRecord.getRecordSizeForStrings(field_3_strings.size());}
public static FormulaShifter createForSheetShift(int srcSheetIndex, int dstSheetIndex) {return new FormulaShifter(srcSheetIndex, dstSheetIndex);}
public void setRule(int idx, ConditionalFormattingRule cfRule){setRule(idx, (HSSFConditionalFormattingRule)cfRule);}
public SelectionRecord(RecordInputStream in) {field_1_pane            = in.readByte();field_2_row_active_cell = in.readUShort();field_3_col_active_cell = in.readShort();field_4_active_cell_ref_index = in.readShort();int field_5_num_refs    = in.readUShort();field_6_refs = new CellRangeAddress8Bit[field_5_num_refs];for (int i = 0; i < field_6_refs.length; i++) {field_6_refs[i] = new CellRangeAddress8Bit(in);}}
public void setNeedNewObjectIds(boolean b) {if (b)newObjectIds = new ObjectIdSubclassMap<>();elsenewObjectIds = null;}
public GetResolverRulePolicyResult getResolverRulePolicy(GetResolverRulePolicyRequest request) {request = beforeClientExecution(request);return executeGetResolverRulePolicy(request);}
public static DoubleBuffer wrap(double[] array) {return wrap(array, 0, array.length);}
public UnitsRecord clone() {return copy();}
public void readFully(byte[] buf, int off, int len) {try {checkEOF(_read(buf, off, len), len);} catch (IOException e) {throw new RuntimeException(e);}}
public DescribeInterconnectLoaResult describeInterconnectLoa(DescribeInterconnectLoaRequest request) {request = beforeClientExecution(request);return executeDescribeInterconnectLoa(request);}
public static ByteOrder nativeOrder() {return NATIVE_ORDER;}
public CalcModeRecord(RecordInputStream in) {field_1_calcmode = in.readShort();}
public void addParentId(AnyObjectId additionalParent) {if (parentIds.length == 0) {setParentId(additionalParent);} else {ObjectId[] newParents = new ObjectId[parentIds.length + 1];System.arraycopy(parentIds, 0, newParents, 0, parentIds.length);newParents[parentIds.length] = additionalParent.copy();parentIds = newParents;}}
public CreateAccessPointResult createAccessPoint(CreateAccessPointRequest request) {request = beforeClientExecution(request);return executeCreateAccessPoint(request);}
public DeleteLoadBalancerListenersResult deleteLoadBalancerListeners(DeleteLoadBalancerListenersRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancerListeners(request);}
public DescribeOrderableClusterOptionsResult describeOrderableClusterOptions() {return describeOrderableClusterOptions(new DescribeOrderableClusterOptionsRequest());}
public void setDerefTags(boolean deref) {derefTags = deref;}
public DeactivateMFADeviceRequest(String userName, String serialNumber) {setUserName(userName);setSerialNumber(serialNumber);}
public boolean markSupported() {synchronized (lock) {return in.markSupported();}}
public static void createNewFile(File f) throws IOException {if (!f.createNewFile())throw new IOException(MessageFormat.format(JGitText.get().createNewFileFailed, f));}
public String getFieldAsString() {if (this.field == null)return null;elsereturn this.field.toString();}
public void inform(ResourceLoader loader) throws IOException {String dicts[] = dictionaryFiles.split(",");InputStream affix = null;List<InputStream> dictionaries = new ArrayList<>();try {dictionaries = new ArrayList<>();for (String file : dicts) {dictionaries.add(loader.openResource(file));}affix = loader.openResource(affixFile);Path tempPath = Files.createTempDirectory(Dictionary.getDefaultTempDir(), "Hunspell");try (Directory tempDir = FSDirectory.open(tempPath)) {this.dictionary = new Dictionary(tempDir, "hunspell", affix, dictionaries, ignoreCase);} finally {IOUtils.rm(tempPath);}} catch (ParseException e) {throw new IOException("Unable to load hunspell data! [dictionary=" + dictionaries + ",affix=" + affixFile + "]", e);} finally {IOUtils.closeWhileHandlingException(affix);IOUtils.closeWhileHandlingException(dictionaries);}}
public DetectDocumentTextResult detectDocumentText(DetectDocumentTextRequest request) {request = beforeClientExecution(request);return executeDetectDocumentText(request);}
public DescribeCertificatesResult describeCertificates(DescribeCertificatesRequest request) {request = beforeClientExecution(request);return executeDescribeCertificates(request);}
public int getFormatCount() {return _formats.length;}
public GetOutcomesResult getOutcomes(GetOutcomesRequest request) {request = beforeClientExecution(request);return executeGetOutcomes(request);}
public Set<URIishField> getOptionalFields() {return Collections.emptySet();}
public BasicStats(String field, double boost) {this.field = field;this.boost = boost;}
public UpdateSecurityGroupRuleDescriptionsIngressResult updateSecurityGroupRuleDescriptionsIngress(UpdateSecurityGroupRuleDescriptionsIngressRequest request) {request = beforeClientExecution(request);return executeUpdateSecurityGroupRuleDescriptionsIngress(request);}
public long getOffset() {return position;}
public Collection<Ref> getAdvertisedRefs() {return Collections.unmodifiableCollection(advertisedRefs.values());}
public QueryParser(QueryParserTokenManager tm) {token_source = tm;token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public void setText(CharacterIterator newText) {start = newText.getBeginIndex();end = newText.getEndIndex();text = newText;current = start;}
public PutOutcomeResult putOutcome(PutOutcomeRequest request) {request = beforeClientExecution(request);return executePutOutcome(request);}
public UnescapedCharSequence(CharSequence text) {this.chars = new char[text.length()];this.wasEscaped = new boolean[text.length()];for (int i = 0; i < text.length(); i++) {this.chars[i] = text.charAt(i);this.wasEscaped[i] = false;}}
public DoubleBuffer put(double[] src, int srcOffset, int doubleCount) {byteBuffer.limit(limit * SizeOf.DOUBLE);byteBuffer.position(position * SizeOf.DOUBLE);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, doubleCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, doubleCount);}this.position += doubleCount;return this;}
public void remove() {throw new UnsupportedOperationException();}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CHARTTITLEFORMAT]\n");buffer.append("    .format_runs       = ").append(_formats.length).append("\n");for(int i=0; i<_formats.length; i++) {CTFormat ctf = _formats[i];buffer.append("       .char_offset= ").append(ctf.getOffset());buffer.append(",.fontidx= ").append(ctf.getFontIndex());buffer.append("\n");}buffer.append("[/CHARTTITLEFORMAT]\n");return buffer.toString();}
public StartDominantLanguageDetectionJobResult startDominantLanguageDetectionJob(StartDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeStartDominantLanguageDetectionJob(request);}
public static boolean hasNonConflictingAltSet(Collection<BitSet> altsets) {for (BitSet alts : altsets) {if ( alts.cardinality()==1 ) {return true;}}return false;}
public ByteBuffer putChar(int index, char value) {return putShort(index, (short) value);}
public DataValidationConstraint createTextLengthConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createNumericConstraint(ValidationType.TEXT_LENGTH, operatorType, formula1, formula2);}
public void writeShort(int v) {writeContinueIfRequired(2);_ulrOutput.writeShort(v);}
public final short getShort(int index) {checkIndex(index, SizeOf.SHORT);return Memory.peekShort(backingArray, offset + index, order);}
public static FuncPtg create(int functionIndex) {FunctionMetadata fm = FunctionMetadataRegistry.getFunctionByIndex(functionIndex);if(fm == null) {throw new RuntimeException("Invalid built-in function index (" + functionIndex + ")");}return new FuncPtg(functionIndex, fm);}
public String toString() {return "{"+ruleIndex+":"+predIndex+"}?";}
public ListDashboardsResult listDashboards(ListDashboardsRequest request) {request = beforeClientExecution(request);return executeListDashboards(request);}
public DeleteVoiceTemplateResult deleteVoiceTemplate(DeleteVoiceTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceTemplate(request);}
public void addListenerForAllRecords(HSSFListener lsnr) {short[] rectypes = RecordFactory.getAllKnownRecordSIDs();for (short rectype : rectypes) {addListener(lsnr, rectype);}}
public DescribeLocalGatewayRouteTablesResult describeLocalGatewayRouteTables(DescribeLocalGatewayRouteTablesRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayRouteTables(request);}
public EnableDomainAutoRenewResult enableDomainAutoRenew(EnableDomainAutoRenewRequest request) {request = beforeClientExecution(request);return executeEnableDomainAutoRenew(request);}
public String toString() {StringBuilder result = new StringBuilder();result.append(type.toString());result.append('<');result.append(name);result.append(':');if (fieldsData != null) {result.append(fieldsData);}result.append('>');return result.toString();}
public DescribeConversionTasksResult describeConversionTasks() {return describeConversionTasks(new DescribeConversionTasksRequest());}
public GetFieldLevelEncryptionProfileConfigResult getFieldLevelEncryptionProfileConfig(GetFieldLevelEncryptionProfileConfigRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionProfileConfig(request);}
public ListInstancesResult listInstances(ListInstancesRequest request) {request = beforeClientExecution(request);return executeListInstances(request);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 6) & 3;values[valuesOffset++] = (block >>> 4) & 3;values[valuesOffset++] = (block >>> 2) & 3;values[valuesOffset++] = block & 3;}}
public int read(byte[] dst, int pos, int cnt) throws IOException {try {int n = 0;while (n < cnt) {int r = inf.inflate(dst, pos + n, cnt - n);n += r;if (inf.finished())break;if (inf.needsInput()) {onObjectData(src, buf, p, bAvail);use(bAvail);p = fill(src, 1);inf.setInput(buf, p, bAvail);} else if (r == 0) {throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().unknownZlibError));}}actualSize += n;return 0 < n ? n : -1;} catch (DataFormatException dfe) {throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected, dfe.getMessage()));}}
public WorkflowExecutionCount countClosedWorkflowExecutions(CountClosedWorkflowExecutionsRequest request) {request = beforeClientExecution(request);return executeCountClosedWorkflowExecutions(request);}
public E remove() {return removeFirstImpl();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {final String number;if (numberVE instanceof RefEval) {RefEval re = (RefEval) numberVE;number = OperandResolver.coerceValueToString(re.getInnerValueEval(re.getFirstSheetIndex()));} else {number = OperandResolver.coerceValueToString(numberVE);}if (number.length() > 10) {return ErrorEval.NUM_ERROR;}String unsigned;boolean isPositive;if (number.length() < 10) {unsigned = number;isPositive = true;} else {unsigned = number.substring(1);isPositive = number.startsWith("0");}String value;try {if (isPositive) {int sum = getDecimalValue(unsigned);value = String.valueOf(sum);} else {String inverted = toggleBits(unsigned);int sum = getDecimalValue(inverted);sum++;value = "-" + sum;}} catch (NumberFormatException e) {return ErrorEval.NUM_ERROR;}return new NumberEval(Long.parseLong(value));}
public ObjectId getOldId() {return oldId;}
public FeatProtection(RecordInputStream in) {fSD = in.readInt();passwordVerifier = in.readInt();title = StringUtil.readUnicodeString(in);securityDescriptor = in.readRemainder();}
public UpdateContactAttributesResult updateContactAttributes(UpdateContactAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateContactAttributes(request);}
public DescribeClientVpnEndpointsResult describeClientVpnEndpoints(DescribeClientVpnEndpointsRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnEndpoints(request);}
public DescribeCacheSecurityGroupsResult describeCacheSecurityGroups(DescribeCacheSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheSecurityGroups(request);}
public boolean equals(Object object) {synchronized (Hashtable.this) {return super.equals(object);}}
public static List<TransportProtocol> getTransportProtocols() {int cnt = protocols.size();List<TransportProtocol> res = new ArrayList<>(cnt);for (WeakReference<TransportProtocol> ref : protocols) {TransportProtocol proto = ref.get();if (proto != null)res.add(proto);elseprotocols.remove(ref);}return Collections.unmodifiableList(res);}
public SrndTermQuery(String termText, boolean quoted) {super(quoted);this.termText = termText;}
public CreateEmailTemplateResult createEmailTemplate(CreateEmailTemplateRequest request) {request = beforeClientExecution(request);return executeCreateEmailTemplate(request);}
public ByteBuffer putChar(char value) {return putShort((short) value);}
public static String getLocalizedMessage(String key) {return getLocalizedMessage(key, Locale.getDefault());}
public Snapshot deleteSnapshot(DeleteSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteSnapshot(request);}
public ListMemberAccountsResult listMemberAccounts(ListMemberAccountsRequest request) {request = beforeClientExecution(request);return executeListMemberAccounts(request);}
public boolean shouldRefresh() {long now = System.currentTimeMillis();return now - lastFailedRefreshTime > refreshIntervalInMillSeconds;}
public void setRefLogMessage(String msg, boolean appendStatus) {if (msg == null && !appendStatus)disableRefLog();else if (msg == null && appendStatus) {refLogMessage = ""; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}}
public Status getStatus() {return myStatus;}
public GetDeploymentStrategyResult getDeploymentStrategy(GetDeploymentStrategyRequest request) {request = beforeClientExecution(request);return executeGetDeploymentStrategy(request);}
public DeleteEventResult deleteEvent(DeleteEventRequest request) {request = beforeClientExecution(request);return executeDeleteEvent(request);}
public ListQueryLoggingConfigsResult listQueryLoggingConfigs(ListQueryLoggingConfigsRequest request) {request = beforeClientExecution(request);return executeListQueryLoggingConfigs(request);}
public BatchGetDeploymentTargetsResult batchGetDeploymentTargets(BatchGetDeploymentTargetsRequest request) {request = beforeClientExecution(request);return executeBatchGetDeploymentTargets(request);}
public GetRulesResult getRules(GetRulesRequest request) {request = beforeClientExecution(request);return executeGetRules(request);}
public void setMessage(String newMessage) {message = newMessage;}
public String toString(String field) {return null;}
public ReplicationGroup completeMigration(CompleteMigrationRequest request) {request = beforeClientExecution(request);return executeCompleteMigration(request);}
public SupBookRecord(RecordInputStream in) {int recLen = in.remaining();field_1_number_of_sheets = in.readShort();if(recLen > SMALL_RECORD_SIZE) {_isAddInFunctions = false;field_2_encoded_url = in.readString();String[] sheetNames = new String[field_1_number_of_sheets];for (int i = 0; i < sheetNames.length; i++) {sheetNames[i] = in.readString();}field_3_sheet_names = sheetNames;return;}field_2_encoded_url = null;field_3_sheet_names = null;short nextShort = in.readShort();if(nextShort == TAG_INTERNAL_REFERENCES) {_isAddInFunctions = false;} else if(nextShort == TAG_ADD_IN_FUNCTIONS) {_isAddInFunctions = true;if(field_1_number_of_sheets != 1) {throw new RuntimeException("Expected 0x0001 for number of sheets field in 'Add-In Functions' but got ("+ field_1_number_of_sheets + ")");}} else {throw new RuntimeException("invalid EXTERNALBOOK code ("+ Integer.toHexString(nextShort) + ")");}}
public GetEmailTemplateResult getEmailTemplate(GetEmailTemplateRequest request) {request = beforeClientExecution(request);return executeGetEmailTemplate(request);}
public void setByte(int index, int value) {switch (index >> 2) {case 0:w1 = set(w1, index & 3, value);break;case 1:w2 = set(w2, index & 3, value);break;case 2:w3 = set(w3, index & 3, value);break;case 3:w4 = set(w4, index & 3, value);break;case 4:w5 = set(w5, index & 3, value);break;default:throw new ArrayIndexOutOfBoundsException(index);}}
public LongBuffer put(int index, long c) {throw new ReadOnlyBufferException();}
public SumTotalTermFreqValueSource(String indexedField) {this.indexedField = indexedField;}
public NavigableSet<E> tailSet(E start, boolean startInclusive) {Comparator<? super E> c = backingMap.comparator();if (c == null) {((Comparable<E>) start).compareTo(start);} else {c.compare(start, start);}return new TreeSet<E>(backingMap.tailMap(start, startInclusive));}
public ReadJobResult readJob(ReadJobRequest request) {request = beforeClientExecution(request);return executeReadJob(request);}
public GetSignalingChannelEndpointResult getSignalingChannelEndpoint(GetSignalingChannelEndpointRequest request) {request = beforeClientExecution(request);return executeGetSignalingChannelEndpoint(request);}
public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);out = state.directory.createOutput(indexFileName, state.context);boolean success = false;try {fieldInfos = state.fieldInfos;this.policy = policy;CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);success = true;} finally {if (!success) {IOUtils.closeWhileHandlingException(out);}}}
@Override public boolean add(E object) {Object[] a = array;int s = size;if (s == a.length) {Object[] newArray = new Object[s +(s < (MIN_CAPACITY_INCREMENT / 2) ?MIN_CAPACITY_INCREMENT : s >> 1)];System.arraycopy(a, 0, newArray, 0, s);array = a = newArray;}a[s] = object;size = s + 1;modCount++;return true;}
public Set<Integer> toSet() {Set<Integer> s = new HashSet<Integer>();for (Interval I : intervals) {int a = I.a;int b = I.b;for (int v=a; v<=b; v++) {s.add(v);}}return s;}
public final void writeBoolean(boolean val) throws IOException {write(val ? 1 : 0);}
public void serialize(LittleEndianOutput out) {throw new RecordFormatException( "Sorry, you can't serialize MulRK in this release");}
public T get(int index) {if (index < 0 || size <= index)throw new IndexOutOfBoundsException(String.valueOf(index));return directory[toDirectoryIndex(index)][toBlockIndex(index)];}
public DeleteSnapshotCopyGrantResult deleteSnapshotCopyGrant(DeleteSnapshotCopyGrantRequest request) {request = beforeClientExecution(request);return executeDeleteSnapshotCopyGrant(request);}
public void resetFontStyle(){setFontStyle(false,false);}
public static int getEncodedSize(int numberOfRanges) {return 2 + CellRangeAddress.getEncodedSize(numberOfRanges);}
public ListJobsRequest(String vaultName) {setVaultName(vaultName);}
public DeletePlacementGroupRequest(String groupName) {setGroupName(groupName);}
public void fill() {lazyInit();final int blockSize = 1000;while (true) {int fetched = fetch(blockSize);if (fetched < blockSize) {return;}}}
public DescribeGlobalClustersResult describeGlobalClusters(DescribeGlobalClustersRequest request) {request = beforeClientExecution(request);return executeDescribeGlobalClusters(request);}
public PutVoiceConnectorTerminationResult putVoiceConnectorTermination(PutVoiceConnectorTerminationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorTermination(request);}
public static int strcmp(char[] a, int startA, char[] b, int startB) {for (; a[startA] == b[startB]; startA++, startB++) {if (a[startA] == 0) {return 0;}}return a[startA] - b[startB];}
public StartSentimentDetectionJobResult startSentimentDetectionJob(StartSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeStartSentimentDetectionJob(request);}
public HSSFCell createCell(int column){return this.createCell(column,CellType.BLANK);}
public RecalcIdRecord(RecordInputStream in) {in.readUShort(); _reserved0 = in.readUShort();_engineId = in.readInt();}
public static int getEncodedSizeWithoutArrayData(Ptg[] ptgs) {int result = 0;for (Ptg ptg : ptgs) {if (ptg instanceof ArrayPtg) {result += ArrayPtg.PLAIN_TOKEN_SIZE;} else {result += ptg.getSize();}}return result;}
public static double ceiling(double n, double s) {if (n>0 && s<0) {return Double.NaN;} else {return (n == 0 || s == 0) ? 0 : Math.ceil(n/s) * s;}}
public ListResolverRulesResult listResolverRules(ListResolverRulesRequest request) {request = beforeClientExecution(request);return executeListResolverRules(request);}
public ListBusinessReportSchedulesResult listBusinessReportSchedules(ListBusinessReportSchedulesRequest request) {request = beforeClientExecution(request);return executeListBusinessReportSchedules(request);}
public EscherDgRecord createDgRecord() {EscherDgRecord dg = new EscherDgRecord();dg.setRecordId( EscherDgRecord.RECORD_ID );short dgId = findNewDrawingGroupId();dg.setOptions( (short) ( dgId << 4 ) );dg.setNumShapes( 0 );dg.setLastMSOSPID( -1 );drawingGroups.add(dg);dgg.addCluster( dgId, 0 );dgg.setDrawingsSaved( dgg.getDrawingsSaved() + 1 );return dg;}
public Transport open(URIish uri)throws NotSupportedException, TransportException {throw new NotSupportedException(JGitText.get().transportNeedsRepository);}
public int compare(Ref o1, Ref o2) {return compareTo(o1, o2);}
public OrdRange(int start, int end) {this.start = start;this.end = end;}
public boolean add(E object) {return backingMap.put(object, this) == null;}
public void write(String s) {reserve(s.length());s.getChars(0,s.length(),buf, len);len +=s.length();}
public long skip(long cnt) throws IOException {try {beginRead();return super.skip(cnt);} catch (InterruptedIOException e) {throw readTimedOut(e);} finally {endRead();}}
public StepDetail(StepConfig stepConfig, StepExecutionStatusDetail executionStatusDetail) {setStepConfig(stepConfig);setExecutionStatusDetail(executionStatusDetail);}
final public Token getToken(int index) {Token t = token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.getNextToken();}return t;}
public Object[] toArray() {synchronized (mutex) {return delegate().toArray();}}
public DBParameterGroup createDBParameterGroup(CreateDBParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBParameterGroup(request);}
public StringBuilder append(boolean b) {append0(b ? "true" : "false");return this;}
public void execute(Lexer lexer, CharStream input, int startIndex) {boolean requiresSeek = false;int stopIndex = input.index();try {for (LexerAction lexerAction : lexerActions) {if (lexerAction instanceof LexerIndexedCustomAction) {int offset = ((LexerIndexedCustomAction)lexerAction).getOffset();input.seek(startIndex + offset);lexerAction = ((LexerIndexedCustomAction)lexerAction).getAction();requiresSeek = (startIndex + offset) != stopIndex;}else if (lexerAction.isPositionDependent()) {input.seek(stopIndex);requiresSeek = false;}lexerAction.execute(lexer);}}finally {if (requiresSeek) {input.seek(stopIndex);}}}
public ListMailboxPermissionsResult listMailboxPermissions(ListMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executeListMailboxPermissions(request);}
public ConditionalFormattingTable(RecordStream rs) {while (rs.peekNextRecord() instanceof CFHeaderBase) {_cfHeaders.add(CFRecordsAggregate.createCFAggregate(rs));}}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}
public Map<String, Ref> getTags() {try {return getRefDatabase().getRefs(Constants.R_TAGS);} catch (IOException e) {throw new UncheckedIOException(e);}}
public ComposedQuery(List<SrndQuery> qs, boolean operatorInfix, String opName) {recompose(qs);this.operatorInfix = operatorInfix;this.opName = opName;}
public TestRoleResult testRole(TestRoleRequest request) {request = beforeClientExecution(request);return executeTestRole(request);}
public String toString() {final StringBuilder r = new StringBuilder();r.append("(");for (int i = 0; i < subfilters.length; i++) {if (i > 0)r.append(" AND ");r.append(subfilters[i].toString());}r.append(")");return r.toString();}
public ModifyVpcAttributeResult modifyVpcAttribute(ModifyVpcAttributeRequest request) {request = beforeClientExecution(request);return executeModifyVpcAttribute(request);}
public void seekExact(long ord) throws IOException {throw new UnsupportedOperationException();}
public ArabicNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean equals(Object obj) {if (!(obj instanceof BookSheetKey)) {return false;}BookSheetKey other = (BookSheetKey) obj;return _bookIndex == other._bookIndex && _sheetIndex == other._sheetIndex;}
public TermQuery(Term t, TermStates states) {assert states != null;term = Objects.requireNonNull(t);perReaderTermState = Objects.requireNonNull(states);}
public GetClusterCredentialsResult getClusterCredentials(GetClusterCredentialsRequest request) {request = beforeClientExecution(request);return executeGetClusterCredentials(request);}
public boolean equals(Object other) {return (getClass() == other.getClass()) && this.equalsSameType(other);}
public Item clone() {return new Item(parent, child);}
public UpdateClusterResult updateCluster(UpdateClusterRequest request) {request = beforeClientExecution(request);return executeUpdateCluster(request);}
public E get(int index) {synchronized (mutex) {return delegate().get(index);}}
public LogCommand setMaxCount(int maxCount) {checkCallable();this.maxCount = maxCount;return this;}
public GetInsightRuleReportResult getInsightRuleReport(GetInsightRuleReportRequest request) {request = beforeClientExecution(request);return executeGetInsightRuleReport(request);}
public CommonToken(Token oldToken) {type = oldToken.getType();line = oldToken.getLine();index = oldToken.getTokenIndex();charPositionInLine = oldToken.getCharPositionInLine();channel = oldToken.getChannel();start = oldToken.getStartIndex();stop = oldToken.getStopIndex();if (oldToken instanceof CommonToken) {text = ((CommonToken)oldToken).text;source = ((CommonToken)oldToken).source;}else {text = oldToken.getText();source = new Pair<TokenSource, CharStream>(oldToken.getTokenSource(), oldToken.getInputStream());}}
public ListSolutionsResult listSolutions(ListSolutionsRequest request) {request = beforeClientExecution(request);return executeListSolutions(request);}
public boolean hasPrevious() {return index > from;}
public final void end() {if (finalState != null) {restoreState(finalState);}}
public DoubleBuffer put(int index, double c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public ThreeWayMerger newMerger(Repository db) {return new ResolveMerger(db, false);}
public static long pop_union(long[] arr1, long[] arr2, int wordOffset, int numWords) {long popCount = 0;for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {popCount += Long.bitCount(arr1[i] | arr2[i]);}return popCount;}
public LongBuffer put(long c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public ConstValueSource(float constant) {this.constant = constant;this.dv = constant;}
public boolean matches(char c) {return punctCharacters.indexOf(c) != -1;}
public FlushInfo(int numDocs, long estimatedSegmentSize) {this.numDocs = numDocs;this.estimatedSegmentSize = estimatedSegmentSize;}
public void print(char[] chars) {print(new String(chars, 0, chars.length));}
public E element() {return getFirstImpl();}
public ListNodegroupsResult listNodegroups(ListNodegroupsRequest request) {request = beforeClientExecution(request);return executeListNodegroups(request);}
public PutSkillAuthorizationResult putSkillAuthorization(PutSkillAuthorizationRequest request) {request = beforeClientExecution(request);return executePutSkillAuthorization(request);}
public DescribeSourceRegionsResult describeSourceRegions(DescribeSourceRegionsRequest request) {request = beforeClientExecution(request);return executeDescribeSourceRegions(request);}
public SplitShardResult splitShard(SplitShardRequest request) {request = beforeClientExecution(request);return executeSplitShard(request);}
public CreateTableRequest(String tableName, java.util.List<KeySchemaElement> keySchema) {setTableName(tableName);setKeySchema(keySchema);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_id);out.writeByte(field_4_text.length());if (is16bit) {out.writeByte(0x01);StringUtil.putUnicodeLE(field_4_text, out);} else {out.writeByte(0x00);StringUtil.putCompressedUnicode(field_4_text, out);}}
public UpdateVoiceTemplateResult updateVoiceTemplate(UpdateVoiceTemplateRequest request) {request = beforeClientExecution(request);return executeUpdateVoiceTemplate(request);}
public BookBoolRecord(RecordInputStream in) {field_1_save_link_values = in.readShort();}
public final Buffer flip() {limit = position;position = 0;mark = UNSET_MARK;return this;}
public IntBuffer get(int[] dst, int dstOffset, int intCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, intCount);if (intCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + intCount; ++i) {dst[i] = get();}return this;}
public GroupingSearch setGroupDocsOffset(int groupDocsOffset) {this.groupDocsOffset = groupDocsOffset;return this;}
public Builder() {this(16, 16);}
public String getCommandName() {return command;}
public int getFirstInternalSheetIndexForExtIndex(int extRefIndex) {if (extRefIndex >= _externSheetRecord.getNumOfRefs() || extRefIndex < 0) {return -1;}return _externSheetRecord.getFirstSheetIndexFromRefIndex(extRefIndex);}
public boolean isExpired() {return this.expiredDate == null || this.expiredDate.after(new Date());}
public ListPolicyAttachmentsResult listPolicyAttachments(ListPolicyAttachmentsRequest request) {request = beforeClientExecution(request);return executeListPolicyAttachments(request);}
public double readDouble() {return Double.longBitsToDouble(readLong());}
public UpdateLoginProfileRequest(String userName) {setUserName(userName);}
public String getResultPath() {return resultPath;}
public DescribeInstanceAttributeRequest(String instanceId, InstanceAttributeName attribute) {setInstanceId(instanceId);setAttribute(attribute.toString());}
public int previousIndex() {return index - 1;}
public static RevFilter create(RevFilter[] list) {if (list.length == 2)return create(list[0], list[1]);if (list.length < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.length];System.arraycopy(list, 0, subfilters, 0, list.length);return new List(subfilters);}
public void reset() {seek(0);}
public ListResourceRecordSetsRequest(String hostedZoneId) {setHostedZoneId(hostedZoneId);}
public EventBasedExcelExtractor(POIFSFileSystem fs) {this(fs.getRoot());super.setFilesystem(fs);}
public ListClustersResult listClusters() {return listClusters(new ListClustersRequest());}
public CreateAddressResult createAddress(CreateAddressRequest request) {request = beforeClientExecution(request);return executeCreateAddress(request);}
public ListFacePhotosRequest() {super("CloudPhoto", "2017-07-11", "ListFacePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String toPrivateASCIIString() {return format(true, true);}
public BatchGetNamedQueryResult batchGetNamedQuery(BatchGetNamedQueryRequest request) {request = beforeClientExecution(request);return executeBatchGetNamedQuery(request);}
public CreateProfilingGroupResult createProfilingGroup(CreateProfilingGroupRequest request) {request = beforeClientExecution(request);return executeCreateProfilingGroup(request);}
@Override public String toString() {return Arrays.toString(elements);}
public String toString() {String padd = getPadding();StringBuilder sb = new StringBuilder(padd);if (disableCounting) {sb.append('-');}sb.append(getName());if (getRunInBackground()) {sb.append(" &");int x = getBackgroundDeltaPriority();if (x != 0) {sb.append(x);}}return sb.toString();}
public Counter bytesUsed() {return bytesUsed;}
public ListStreamingDistributionsResult listStreamingDistributions(ListStreamingDistributionsRequest request) {request = beforeClientExecution(request);return executeListStreamingDistributions(request);}
public final void writeInt(int val) throws IOException {Memory.pokeInt(scratch, 0, val, ByteOrder.BIG_ENDIAN);write(scratch, 0, SizeOf.INT);}
public static ExpandedDouble fromRawBitsAndExponent(long rawBits, int exp) {return new ExpandedDouble(getFrac(rawBits), exp);}
public boolean offerFirst(E e) {return addFirstImpl(e);}
public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,SegmentWriteState state, PostingsWriterBase postingsWriter)throws IOException {final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);this.termsIndexWriter = termsIndexWriter;maxDoc = state.segmentInfo.maxDoc();out = state.directory.createOutput(termsFileName, state.context);boolean success = false;try {fieldInfos = state.fieldInfos;CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);currentField = null;this.postingsWriter = postingsWriter;postingsWriter.init(out, state); success = true;} finally {if (!success) {IOUtils.closeWhileHandlingException(out);}}}
public InstanceGroupModifyConfig(String instanceGroupId, Integer instanceCount) {setInstanceGroupId(instanceGroupId);setInstanceCount(instanceCount);}
public void collect(int doc) {totalHits++;}
public void writeByte(int v) {try {out.write(v);} catch (IOException e) {throw new RuntimeException(e);}}
public int serializeComplexPart(byte[] data, int pos) {System.arraycopy(complexData, 0, data, pos, complexData.length);return complexData.length;}
public String toString() {return "<notokenfound/>";}
public DecisionInfo(int decision) {this.decision = decision;}
public CFRuleRecord(RecordInputStream in) {setConditionType(in.readByte());setComparisonOperation(in.readByte());int field_3_formula1_len = in.readUShort();int field_4_formula2_len = in.readUShort();readFormatOptions(in);setFormula1(Formula.read(field_3_formula1_len, in));setFormula2(Formula.read(field_4_formula2_len, in));}
public GroupMarkerSubRecord() {reserved = EMPTY_BYTE_ARRAY;}
public SegToken filter(SegToken token) {switch (token.wordType) {case WordType.FULLWIDTH_NUMBER:case WordType.FULLWIDTH_STRING: for (int i = 0; i < token.charArray.length; i++) {if (token.charArray[i] >= 0xFF10)token.charArray[i] -= 0xFEE0;if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) token.charArray[i] += 0x0020;}break;case WordType.STRING:for (int i = 0; i < token.charArray.length; i++) {if (token.charArray[i] >= 0x0041 && token.charArray[i] <= 0x005A) token.charArray[i] += 0x0020;}break;case WordType.DELIMITER: token.charArray = Utility.COMMON_DELIMITER;break;default:break;}return token;}
public BarRecord(RecordInputStream in) {field_1_barSpace      = in.readShort();field_2_categorySpace = in.readShort();field_3_formatFlags   = in.readShort();}
public final boolean tryIncRef() {int count;while ((count = refCount.get()) > 0) {if (refCount.compareAndSet(count, count+1)) {return true;}}return false;}
public GetStackPolicyResult getStackPolicy(GetStackPolicyRequest request) {request = beforeClientExecution(request);return executeGetStackPolicy(request);}
public void removeKeywords() {remove1stProperty(PropertyIDMap.PID_KEYWORDS);}
public boolean follows(TextFragment fragment){return textStartPos == fragment.textEndPos;}
public DescribeHyperParameterTuningJobResult describeHyperParameterTuningJob(DescribeHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeDescribeHyperParameterTuningJob(request);}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChildren() == null || getChildren().size() == 0)return "";StringBuilder sb = new StringBuilder();String filler = "";for (QueryNode child : getChildren()) {sb.append(filler).append(child.toQueryString(escapeSyntaxParser));filler = " AND ";}if ((getParent() != null && getParent() instanceof GroupQueryNode)|| isRoot())return sb.toString();elsereturn "( " + sb.toString() + " )";}
public String toString() {return "State [entries=" + entries + ", hosts=" + hosts + "]";}
public DataFormatRecord(RecordInputStream in) {field_1_pointNumber = in.readShort();field_2_seriesIndex = in.readShort();field_3_seriesNumber = in.readShort();field_4_formatFlags = in.readShort();}
public ModifyVpcEndpointServiceConfigurationResult modifyVpcEndpointServiceConfiguration(ModifyVpcEndpointServiceConfigurationRequest request) {request = beforeClientExecution(request);return executeModifyVpcEndpointServiceConfiguration(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(_encodedTokenLen);out.write(_byteEncoding);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {AreaEval aeRange;try {aeRange = convertRangeArg(arg0);} catch (EvaluationException e) {return e.getErrorEval();}return eval(srcRowIndex, srcColumnIndex, arg1, aeRange, aeRange);}
public RecognizeLabelRequest() {super("visionai-poc", "2020-04-08", "RecognizeLabel");setMethod(MethodType.POST);}
public ListStackSetsResult listStackSets(ListStackSetsRequest request) {request = beforeClientExecution(request);return executeListStackSets(request);}
public ModifyNetworkInterfaceAttributeResult modifyNetworkInterfaceAttribute(ModifyNetworkInterfaceAttributeRequest request) {request = beforeClientExecution(request);return executeModifyNetworkInterfaceAttribute(request);}
public static RevFilter create(RevFilter a) {return new NotRevFilter(a);}
public String toString() {String up = parent!=null ? parent.toString() : "";if ( up.length()==0 ) {if ( returnState == EMPTY_RETURN_STATE ) {return "$";}return String.valueOf(returnState);}return String.valueOf(returnState)+" "+up;}
public ToParentBlockJoinQuery(Query childQuery, BitSetProducer parentsFilter, ScoreMode scoreMode) {super();this.childQuery = childQuery;this.parentsFilter = parentsFilter;this.scoreMode = scoreMode;}
public int previousIndex() {int previous = iterator.previousIndex();if (previous >= start) {return previous - start;}return -1;}
public String getSourcePath(int idx) {return sourcePaths[idx];}
public DoubleBuffer slice() {return new ReadWriteDoubleArrayBuffer(remaining(), backingArray, offset + position);}
public DescribeEvaluationsResult describeEvaluations(DescribeEvaluationsRequest request) {request = beforeClientExecution(request);return executeDescribeEvaluations(request);}
public int getBigBlockSize() {return bigBlockSize;}
public static ValueVector createRowVector(TwoDEval tableArray, int relativeRowIndex) {return new RowVector(tableArray, relativeRowIndex);}
public void setDbcell(int cell, int value){field_5_dbcells.set(cell, value);}
public int compareTo(MutableValue other) {Class<? extends MutableValue> c1 = this.getClass();Class<? extends MutableValue> c2 = other.getClass();if (c1 != c2) {int c = c1.hashCode() - c2.hashCode();if (c == 0) {c = c1.getCanonicalName().compareTo(c2.getCanonicalName());}return c;}return compareSameType(other);}
public StartSpeechSynthesisTaskResult startSpeechSynthesisTask(StartSpeechSynthesisTaskRequest request) {request = beforeClientExecution(request);return executeStartSpeechSynthesisTask(request);}
public void removeParseListeners() {_parseListeners = null;}
public ListIdentityPoolsResult listIdentityPools(ListIdentityPoolsRequest request) {request = beforeClientExecution(request);return executeListIdentityPools(request);}
public String toString(){return text + '(' + startOffset + ',' + endOffset + ',' + position + ')';}
public void setWrapIfNotCachingTokenFilter(boolean wrap) {this.wrapToCaching = wrap;}
public void onChange(boolean selfChange) {mCursor.requery();}
public DeleteRuleResult deleteRule(DeleteRuleRequest request) {request = beforeClientExecution(request);return executeDeleteRule(request);}
public void serialize(LittleEndianOutput out) {out.writeByte(getAddMenuCount());out.writeByte(getDelMenuCount());}
public String getPattern() {return pattern;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( "[BottomMargin]\n" );buffer.append( "    .margin               = " ).append( " (" ).append( getMargin() ).append( " )\n" );buffer.append( "[/BottomMargin]\n" );return buffer.toString();}
public final void getText(CharTermAttribute t) {t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);}
public LinkedList() {voidLink = new Link<E>(null, null, null);voidLink.previous = voidLink;voidLink.next = voidLink;}
public SnapshotCopyGrant createSnapshotCopyGrant(CreateSnapshotCopyGrantRequest request) {request = beforeClientExecution(request);return executeCreateSnapshotCopyGrant(request);}
public static int getSingleViableAlt(Collection<BitSet> altsets) {BitSet viableAlts = new BitSet();for (BitSet alts : altsets) {int minAlt = alts.nextSetBit(0);viableAlts.set(minAlt);if ( viableAlts.cardinality()>1 ) { return ATN.INVALID_ALT_NUMBER;}}return viableAlts.nextSetBit(0);}
public Builder() {this.similarity = new BM25Similarity();}
public List<Ref> getRevertedRefs() {return revertedRefs;}
public DetachPolicyResult detachPolicy(DetachPolicyRequest request) {request = beforeClientExecution(request);return executeDetachPolicy(request);}
public final void writeUTF(String str) throws IOException {write(ModifiedUtf8.encode(str));}
public DeleteBusinessReportScheduleResult deleteBusinessReportSchedule(DeleteBusinessReportScheduleRequest request) {request = beforeClientExecution(request);return executeDeleteBusinessReportSchedule(request);}
public JapanesePartOfSpeechStopFilterFactory(Map<String,String> args) {super(args);stopTagFiles = get(args, "tags");if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SetVaultNotificationsResult setVaultNotifications(SetVaultNotificationsRequest request) {request = beforeClientExecution(request);return executeSetVaultNotifications(request);}
public void writeBytes(byte[] b, int offset, int length) {assert pos + length <= limit;System.arraycopy(b, offset, bytes, pos, length);pos += length;}
public UpdateLedgerResult updateLedger(UpdateLedgerRequest request) {request = beforeClientExecution(request);return executeUpdateLedger(request);}
public BatchDetectDominantLanguageResult batchDetectDominantLanguage(BatchDetectDominantLanguageRequest request) {request = beforeClientExecution(request);return executeBatchDetectDominantLanguage(request);}
public void pollForUpdates() {assert isMainThread();doUpdates();}
public int getAltNumber() { return ATN.INVALID_ALT_NUMBER; }
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [");sb.append("]");return sb.toString();}
public int getTimeout() {return timeout;}
public boolean canReuse(IndexInput in) {return in == inStart;}
public DescribeMetricFiltersRequest(String logGroupName) {setLogGroupName(logGroupName);}
public final void write(char[] b) {write(b,0,b.length);}
public void trimToSize() {if (count < value.length) {char[] newValue = new char[count];System.arraycopy(value, 0, newValue, 0, count);value = newValue;shared = false;}}
public ListTransformJobsResult listTransformJobs(ListTransformJobsRequest request) {request = beforeClientExecution(request);return executeListTransformJobs(request);}
public EvaluationName getName(NamePtg namePtg) {int ix = namePtg.getIndex();return new Name(_iBook.getNameRecord(ix), ix);}
public StashCreateCommand setIndexMessage(String message) {indexMessage = message;return this;}
public HSSFPalette getCustomPalette(){return new HSSFPalette(workbook.getCustomPalette());}
public DeregisterTaskDefinitionResult deregisterTaskDefinition(DeregisterTaskDefinitionRequest request) {request = beforeClientExecution(request);return executeDeregisterTaskDefinition(request);}
public String pattern() {return pattern;}
public void setThreads(int threads) {this.threads = threads;}
public void execute(ReceivePack rp) {try {String expTarget = getOldSymref();boolean detach = getNewSymref() != null|| (type == Type.DELETE && expTarget != null);RefUpdate ru = rp.getRepository().updateRef(getRefName(), detach);if (expTarget != null) {if (!ru.getRef().isSymbolic() || !ru.getRef().getTarget().getName().equals(expTarget)) {setResult(Result.LOCK_FAILURE);return;}}ru.setRefLogIdent(rp.getRefLogIdent());ru.setRefLogMessage(refLogMessage, refLogIncludeResult);switch (getType()) {case DELETE:if (!ObjectId.zeroId().equals(getOldId())) {ru.setExpectedOldObjectId(getOldId());}ru.setForceUpdate(true);setResult(ru.delete(rp.getRevWalk()));break;case CREATE:case UPDATE:case UPDATE_NONFASTFORWARD:ru.setForceUpdate(rp.isAllowNonFastForwards());ru.setExpectedOldObjectId(getOldId());ru.setRefLogMessage("push", true); if (getNewSymref() != null) {setResult(ru.link(getNewSymref()));} else {ru.setNewObjectId(getNewId());setResult(ru.update(rp.getRevWalk()));}break;}} catch (IOException err) {reject(err);}}
public GetEbsDefaultKmsKeyIdResult getEbsDefaultKmsKeyId(GetEbsDefaultKmsKeyIdRequest request) {request = beforeClientExecution(request);return executeGetEbsDefaultKmsKeyId(request);}
public String toString() {return "MultiDocsAndPositionsEnum(" + Arrays.toString(getSubs()) + ")";}
public DeleteCacheParameterGroupRequest(String cacheParameterGroupName) {setCacheParameterGroupName(cacheParameterGroupName);}
public NavigableMap<K, V> headMap(K to, boolean inclusive) {Bound toBound = inclusive ? INCLUSIVE : EXCLUSIVE;return subMap(null, NO_BOUND, to, toBound);}
public OutputStream getOutputStream() {return rawOut;}
public Boolean booleanValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Boolean.valueOf(responseMap.get(key));}
public ATN getATNWithBypassAlts() {String serializedAtn = getSerializedATN();if (serializedAtn == null) {throw new UnsupportedOperationException("The current parser does not support an ATN with bypass alternatives.");}synchronized (bypassAltsAtnCache) {ATN result = bypassAltsAtnCache.get(serializedAtn);if (result == null) {ATNDeserializationOptions deserializationOptions = new ATNDeserializationOptions();deserializationOptions.setGenerateRuleBypassTransitions(true);result = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn.toCharArray());bypassAltsAtnCache.put(serializedAtn, result);}return result;}}
public GetDownloadUrlRequest() {super("CloudPhoto", "2017-07-11", "GetDownloadUrl", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public int getCRC() {return crc;}
public boolean addEscherRecord(EscherRecord element){return escherRecords.add( element );}
public CharBuffer put(String src, int start, int end) {throw new ReadOnlyBufferException();}
public ModifyWorkspaceStateResult modifyWorkspaceState(ModifyWorkspaceStateRequest request) {request = beforeClientExecution(request);return executeModifyWorkspaceState(request);}
public ICUTransformFilter(TokenStream input, Transliterator transform) {super(input);this.transform = transform;if (transform.getFilter() == null && transform instanceof com.ibm.icu.text.RuleBasedTransliterator) {final UnicodeSet sourceSet = transform.getSourceSet();if (sourceSet != null && !sourceSet.isEmpty())transform.setFilter(sourceSet);}}
public StopGameSessionPlacementResult stopGameSessionPlacement(StopGameSessionPlacementRequest request) {request = beforeClientExecution(request);return executeStopGameSessionPlacement(request);}
public ObjectId getDeltaBase() {return null;}
public RefModeRecord clone() {return copy();}
public boolean addURI(URIish toAdd) {if (uris.contains(toAdd))return false;return uris.add(toAdd);}
public FileMode getOldMode() {return getOldMode(0);}
public Collection<RemoteRefUpdate> getRemoteUpdates() {return Collections.unmodifiableCollection(remoteUpdates.values());}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");String ws = String.valueOf(_wholePart);sb.append(ws.charAt(0));sb.append('.');sb.append(ws.substring(1));sb.append(' ');sb.append(getFractionalDigits());sb.append("E");sb.append(getDecimalExponent());sb.append("]");return sb.toString();}
public CreateCollectionResult createCollection(CreateCollectionRequest request) {request = beforeClientExecution(request);return executeCreateCollection(request);}
public ChangeMessageVisibilityBatchResult changeMessageVisibilityBatch(ChangeMessageVisibilityBatchRequest request) {request = beforeClientExecution(request);return executeChangeMessageVisibilityBatch(request);}
public static int[] copyOfRange(int[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);int[] result = new int[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public static void setInstance(SshSessionFactory newFactory) {if (newFactory != null) {INSTANCE = newFactory;} else {INSTANCE = loadSshSessionFactory();}}
public GetRepoSyncTaskListRequest() {super("cr", "2016-06-07", "GetRepoSyncTaskList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/syncTasks");setMethod(MethodType.GET);}
public RunInstancesRequest(String imageId, Integer minCount, Integer maxCount) {setImageId(imageId);setMinCount(minCount);setMaxCount(maxCount);}
public DeleteCodeRepositoryResult deleteCodeRepository(DeleteCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeDeleteCodeRepository(request);}
public void fill(int fromIndex, int toIndex, long val) {assert fromIndex >= 0;assert fromIndex <= toIndex;assert PackedInts.unsignedBitsRequired(val) <= bitsPerValue;final int valuesPerBlock = 64 / bitsPerValue;if (toIndex - fromIndex <= valuesPerBlock << 1) {super.fill(fromIndex, toIndex, val);return;}int fromOffsetInBlock = fromIndex % valuesPerBlock;if (fromOffsetInBlock != 0) {for (int i = fromOffsetInBlock; i < valuesPerBlock; ++i) {set(fromIndex++, val);}assert fromIndex % valuesPerBlock == 0;}final int fromBlock = fromIndex / valuesPerBlock;final int toBlock = toIndex / valuesPerBlock;assert fromBlock * valuesPerBlock == fromIndex;long blockValue = 0L;for (int i = 0; i < valuesPerBlock; ++i) {blockValue = blockValue | (val << (i * bitsPerValue));}Arrays.fill(blocks, fromBlock, toBlock, blockValue);for (int i = valuesPerBlock * toBlock; i < toIndex; ++i) {set(i, val);}}
public void close() {str = null;}
public ListDomainNamesResult listDomainNames() {return listDomainNames(new ListDomainNamesRequest());}
public AbortMultipartUploadRequest(String accountId, String vaultName, String uploadId) {setAccountId(accountId);setVaultName(vaultName);setUploadId(uploadId);}
public RevCommit getNewHead() {return newHead;}
public long get(int index) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;return (blocks[o] >>> shift) & 3L;}
public UpdateContainerInstancesStateResult updateContainerInstancesState(UpdateContainerInstancesStateRequest request) {request = beforeClientExecution(request);return executeUpdateContainerInstancesState(request);}
public GetExternalModelsResult getExternalModels(GetExternalModelsRequest request) {request = beforeClientExecution(request);return executeGetExternalModels(request);}
public GetFaceDetectionResult getFaceDetection(GetFaceDetectionRequest request) {request = beforeClientExecution(request);return executeGetFaceDetection(request);}
public void delete() {synchronized (SnapshotDeletionPolicy.this) {if (!refCounts.containsKey(cp.getGeneration())) {cp.delete();}}}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 56; shift >= 0; shift -= 8) {values[valuesOffset++] = (int) ((block >>> shift) & 255);}}}
public Iterator<E> descendingIterator() {return new ReverseLinkIterator<E>(this);}
public CredentialsBackupCompatibilityAdaptor(AlibabaCloudCredentialsProvider provider) {this.provider = provider;}
public DescribeDBClusterSnapshotsResult describeDBClusterSnapshots(DescribeDBClusterSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterSnapshots(request);}
public FontRecord getFontRecordAt(int idx) {int index = idx;if (index > 4) {index -= 1;   }if (index > (numfonts - 1)) {throw new ArrayIndexOutOfBoundsException("There are only " + numfonts + " font records, but you asked for index " + idx);}return ( FontRecord ) records.get((records.getFontpos() - (numfonts - 1)) + index);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 2) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1]);}
public DescribeCustomerGatewaysResult describeCustomerGateways() {return describeCustomerGateways(new DescribeCustomerGatewaysRequest());}
public CreateSubnetRequest(String vpcId, String cidrBlock) {setVpcId(vpcId);setCidrBlock(cidrBlock);}
public StempelStemmer(Trie stemmer) {this.stemmer = stemmer;}
public NLPNERTaggerOp(TokenNameFinderModel model) {this.nameFinder = new NameFinderME(model);}
public TreeFilter clone() {return new FollowFilter(path.clone(), cfg);}
public QueryAddUserInfoRequest() {super("LinkFace", "2018-07-20", "QueryAddUserInfo");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public boolean include(TreeWalk walker) {DirCacheIterator i = walker.getTree(treeIdx, DirCacheIterator.class);if (i == null)return true;DirCacheEntry e = i.getDirCacheEntry();return e == null || !e.isSkipWorkTree();}
public final CompareResult compareTo(ValueEval other) {if (other == null) {throw new RuntimeException("compare to value cannot be null");}if (_targetClass != other.getClass()) {return CompareResult.TYPE_MISMATCH;}return compareSameType(other);}
public SegmentReadState(SegmentReadState other,String newSegmentSuffix) {this.directory = other.directory;this.segmentInfo = other.segmentInfo;this.fieldInfos = other.fieldInfos;this.context = other.context;this.segmentSuffix = newSegmentSuffix;}
public void println(Object obj) {println(String.valueOf(obj));}
public DeleteModelResult deleteModel(DeleteModelRequest request) {request = beforeClientExecution(request);return executeDeleteModel(request);}
public void setFiles(Collection<String> files) {setFiles = new HashSet<>();addFiles(files);}
public void release() {lItr.release();}
public FloatBuffer asReadOnlyBuffer() {return duplicate();}
public int get(int key, int valueIfKeyNotFound) {int i = binarySearch(mKeys, 0, mSize, key);if (i < 0) {return valueIfKeyNotFound;} else {return mValues[i];}}
public CharBuffer get(char[] dst) {return get(dst, 0, dst.length);}
public static String toHex(String value) {return (value == null || value.length() == 0)? "[]": toHex(value.getBytes(LocaleUtil.CHARSET_1252));}
public String resolveNameXText(NameXPtg n) {return _iBook.resolveNameXText(n.getSheetRefIndex(), n.getNameIndex());}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName());sb.append(" [").append(_representation).append("]");return sb.toString();}
public PutEmailIdentityMailFromAttributesResult putEmailIdentityMailFromAttributes(PutEmailIdentityMailFromAttributesRequest request) {request = beforeClientExecution(request);return executePutEmailIdentityMailFromAttributes(request);}
public RemoveAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "RemoveAlbumPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DeleteAttributesResult deleteAttributes(DeleteAttributesRequest request) {request = beforeClientExecution(request);return executeDeleteAttributes(request);}
public void disableRefLog() {destination.setRefLogMessage("", false); }
public TokenStream create(TokenStream input) {return new GermanLightStemFilter(input);}
public E removeLast() {return removeLastImpl();}
public UpdateDomainMetadataResult updateDomainMetadata(UpdateDomainMetadataRequest request) {request = beforeClientExecution(request);return executeUpdateDomainMetadata(request);}
public short findNewDrawingGroupId() {return dgg.findNewDrawingGroupId();}
public String toString() {return "FacetEntry{" +"value=" + value.utf8ToString() +", count=" + count +'}';}
public SharedFormulaRecord linkSharedFormulaRecord(CellReference firstCell, FormulaRecordAggregate agg) {SharedFormulaGroup result = findFormulaGroupForCell(firstCell);if(null == result) {throw new RuntimeException("Failed to find a matching shared formula record");}result.add(agg);return result.getSFR();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_label_index);out.writeShort(field_2_zero);}
public Appendable append(char c) {write(c);return this;}
public static BigInteger factorial(int n) {if (n == 0 || n < 0) {return BigInteger.ONE;}if (cache.containsKey(n))  {return cache.get(n);}BigInteger result = BigInteger.valueOf(n).multiply(factorial(n - 2));cache.put(n, result);return result;}
public DelimitedPayloadTokenFilter create(TokenStream input) {return new DelimitedPayloadTokenFilter(input, delimiter, encoder);}
public String toString() {return "NONE"; }
public GetAlarmsResult getAlarms(GetAlarmsRequest request) {request = beforeClientExecution(request);return executeGetAlarms(request);}
public DeleteDetectorVersionResult deleteDetectorVersion(DeleteDetectorVersionRequest request) {request = beforeClientExecution(request);return executeDeleteDetectorVersion(request);}
public ExpandedDouble createExpandedDouble() {return new ExpandedDouble(_significand, _binaryExponent);}
public CharBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());CharToByteBufferAdapter buf = new CharToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public int size() {return Hashtable.this.size();}
public ResetInstanceAttributeRequest(String instanceId, InstanceAttributeName attribute) {setInstanceId(instanceId);setAttribute(attribute.toString());}
public final List<FooterLine> getFooterLines() {final byte[] raw = buffer;int ptr = raw.length - 1;while (raw[ptr] == '\n') ptr--;final int msgB = RawParseUtils.commitMessage(raw, 0);final ArrayList<FooterLine> r = new ArrayList<>(4);final Charset enc = guessEncoding();for (;;) {ptr = RawParseUtils.prevLF(raw, ptr);if (ptr <= msgB)break; final int keyStart = ptr + 2;if (raw[keyStart] == '\n')break; final int keyEnd = RawParseUtils.endOfFooterLineKey(raw, keyStart);if (keyEnd < 0)continue; int valStart = keyEnd + 1;while (valStart < raw.length && raw[valStart] == ' ')valStart++;int valEnd = RawParseUtils.nextLF(raw, valStart);if (raw[valEnd - 1] == '\n')valEnd--;r.add(new FooterLine(raw, enc, keyStart, keyEnd, valStart, valEnd));}Collections.reverse(r);return r;}
public SupBookRecord getExternalBookRecord() {return _externalBookRecord;}
public Builder() {this(false);}
public ApplySecurityGroupsToLoadBalancerResult applySecurityGroupsToLoadBalancer(ApplySecurityGroupsToLoadBalancerRequest request) {request = beforeClientExecution(request);return executeApplySecurityGroupsToLoadBalancer(request);}
public DeleteDedicatedIpPoolResult deleteDedicatedIpPool(DeleteDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeDeleteDedicatedIpPool(request);}
public DescribeStackInstanceResult describeStackInstance(DescribeStackInstanceRequest request) {request = beforeClientExecution(request);return executeDescribeStackInstance(request);}
public HSSFChildAnchor(EscherChildAnchorRecord escherChildAnchorRecord) {this._escherChildAnchor = escherChildAnchorRecord;}
public SynonymQuery build() {Collections.sort(terms, Comparator.comparing(a -> a.term));return new SynonymQuery(terms.toArray(new TermAndBoost[0]), field);}
public void addCell(int rowIndex, int columnIndex) {if (rowIndex > _lastDefinedRow) return;if (_currentRowIndex == -1) {_currentRowIndex = rowIndex;_firstColumnIndex = columnIndex;_lastColumnIndex = columnIndex;} else {if (_currentRowIndex == rowIndex && _lastColumnIndex+1 == columnIndex) {_lastColumnIndex = columnIndex;} else {if (_currentRectangleGroup == null) {_currentRectangleGroup = new BlankCellRectangleGroup(_currentRowIndex, _firstColumnIndex, _lastColumnIndex);} else {if (!_currentRectangleGroup.acceptRow(_currentRowIndex, _firstColumnIndex, _lastColumnIndex)) {_rectangleGroups.add(_currentRectangleGroup);_currentRectangleGroup = new BlankCellRectangleGroup(_currentRowIndex, _firstColumnIndex, _lastColumnIndex);}}_currentRowIndex = rowIndex;_firstColumnIndex = columnIndex;_lastColumnIndex = columnIndex;}}}
public String toString() {return "BLOCK: prefix=" + brToString(prefix);}
public void set(int index, long value) {final int o = index / 21;final int b = index % 21;final int shift = b * 3;blocks[o] = (blocks[o] & ~(7L << shift)) | (value << shift);}
@Override public boolean contains(Object o) {if (!(o instanceof Entry)) {return false;}Entry<?, ?> e = (Entry<?, ?>) o;Object key = e.getKey();if (key == null) {return false;}V v = Impl.this.get(key);return v != null && strategy.equalValues(v, e.getValue());}
public void clear() {if (value != null) {Arrays.fill(value, (char) 0);value = null;}}
public DescribeDirectConnectGatewayAssociationsResult describeDirectConnectGatewayAssociations(DescribeDirectConnectGatewayAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeDirectConnectGatewayAssociations(request);}
public GetRestApiResult getRestApi(GetRestApiRequest request) {request = beforeClientExecution(request);return executeGetRestApi(request);}
public CreateLaunchTemplateVersionResult createLaunchTemplateVersion(CreateLaunchTemplateVersionRequest request) {request = beforeClientExecution(request);return executeCreateLaunchTemplateVersion(request);}
public SetLoadBalancerPoliciesOfListenerResult setLoadBalancerPoliciesOfListener(SetLoadBalancerPoliciesOfListenerRequest request) {request = beforeClientExecution(request);return executeSetLoadBalancerPoliciesOfListener(request);}
public SoraniNormalizationFilter(TokenStream input) {super(input);}
public UpdateTerminationProtectionResult updateTerminationProtection(UpdateTerminationProtectionRequest request) {request = beforeClientExecution(request);return executeUpdateTerminationProtection(request);}
public void addChildRecord(EscherRecord record) {_childRecords.add(record);}
public SetIdentityMailFromDomainResult setIdentityMailFromDomain(SetIdentityMailFromDomainRequest request) {request = beforeClientExecution(request);return executeSetIdentityMailFromDomain(request);}
public E remove(int location) {if (location >= 0 && location < size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> next = link.next;previous.next = next;next.previous = previous;size--;modCount++;return link.data;}throw new IndexOutOfBoundsException();}
public UpdateJobResult updateJob(UpdateJobRequest request) {request = beforeClientExecution(request);return executeUpdateJob(request);}
public AddNoteCommand setNotesRef(String notesRef) {checkCallable();this.notesRef = notesRef;return this;}
public ListInvitationsResult listInvitations(ListInvitationsRequest request) {request = beforeClientExecution(request);return executeListInvitations(request);}
public boolean equals(Object obj) {if(! (obj instanceof ExtRst)) {return false;}ExtRst other = (ExtRst)obj;return (compareTo(other) == 0);}
public synchronized void close() throws IOException {buffer = null;isClosed = true;notifyAll();}
public ListTrialsResult listTrials(ListTrialsRequest request) {request = beforeClientExecution(request);return executeListTrials(request);}
public CreateDocumentClassifierResult createDocumentClassifier(CreateDocumentClassifierRequest request) {request = beforeClientExecution(request);return executeCreateDocumentClassifier(request);}
public GetPasswordDataResult getPasswordData(GetPasswordDataRequest request) {request = beforeClientExecution(request);return executeGetPasswordData(request);}
public final String text() {return toString(bytes);}
public HSSFPicture( HSSFShape parent, HSSFAnchor anchor ){super( parent, anchor );super.setShapeType(OBJECT_TYPE_PICTURE);CommonObjectDataSubRecord cod = (CommonObjectDataSubRecord) getObjRecord().getSubRecords().get(0);cod.setObjectType(CommonObjectDataSubRecord.OBJECT_TYPE_PICTURE);}
public CharSequence subSequence(int start, int end) {return new RawCharSequence(buffer, startPtr + start, startPtr + end);}
public DeleteAccessPointResult deleteAccessPoint(DeleteAccessPointRequest request) {request = beforeClientExecution(request);return executeDeleteAccessPoint(request);}
public DescribeSubnetsResult describeSubnets() {return describeSubnets(new DescribeSubnetsRequest());}
public AddTagsToOnPremisesInstancesResult addTagsToOnPremisesInstances(AddTagsToOnPremisesInstancesRequest request) {request = beforeClientExecution(request);return executeAddTagsToOnPremisesInstances(request);}
public static String coerceValueToString(ValueEval ve) {if (ve instanceof StringValueEval) {StringValueEval sve = (StringValueEval) ve;return sve.getStringValue();}if (ve == BlankEval.instance) {return "";}
public CreateVpcLinkResult createVpcLink(CreateVpcLinkRequest request) {request = beforeClientExecution(request);return executeCreateVpcLink(request);}
public DescribeTrafficMirrorTargetsResult describeTrafficMirrorTargets(DescribeTrafficMirrorTargetsRequest request) {request = beforeClientExecution(request);return executeDescribeTrafficMirrorTargets(request);}
public SetRepositoryPolicyResult setRepositoryPolicy(SetRepositoryPolicyRequest request) {request = beforeClientExecution(request);return executeSetRepositoryPolicy(request);}
public String toFormulaString() {return "UNKNOWN";}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);return new NumberEval(evaluate(d0, d1, false));} catch (EvaluationException e) {return e.getErrorEval();}}
public void set(int index, long value) {final int o = index / 5;final int b = index % 5;final int shift = b * 12;blocks[o] = (blocks[o] & ~(4095L << shift)) | (value << shift);}
public ProtectionRev4Record(boolean protect) {this(0);setProtect(protect);}
public UpdateAuditStreamConfigurationResult updateAuditStreamConfiguration(UpdateAuditStreamConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateAuditStreamConfiguration(request);}
public Sheet build() {Sheet sheet = (sheetName == null) ? workbook.createSheet() : workbook.createSheet(sheetName);Row currentRow;Cell currentCell;for (int rowIndex = 0; rowIndex < cells.length; ++rowIndex) {Object[] rowArray = cells[rowIndex];currentRow = sheet.createRow(rowIndex);for (int cellIndex = 0; cellIndex < rowArray.length; ++cellIndex) {Object cellValue = rowArray[cellIndex];if (cellValue != null || shouldCreateEmptyCells) {currentCell = currentRow.createCell(cellIndex);setCellValue(currentCell, cellValue);}}}return sheet;}
public CharArrayWriter(int initialSize) {if (initialSize < 0) {throw new IllegalArgumentException("size < 0");}buf = new char[initialSize];lock = buf;}
public AtomicReference(V initialValue) {value = initialValue;}
public static ISignatureComposer getComposer() {if (null == composer) {composer = new RpcSignatureComposer();}return composer;}
public ListHITsForQualificationTypeResult listHITsForQualificationType(ListHITsForQualificationTypeRequest request) {request = beforeClientExecution(request);return executeListHITsForQualificationType(request);}
public AddTagsToStreamResult addTagsToStream(AddTagsToStreamRequest request) {request = beforeClientExecution(request);return executeAddTagsToStream(request);}
public String toString(){StringBuilder buffer = new StringBuilder();final String nl = System.getProperty("line.separator");buffer.append('[' + getRecordName() + ']' + nl);if (escherRecords.size() == 0)buffer.append("No Escher Records Decoded" + nl);for (EscherRecord r : escherRecords) {buffer.append(r);}buffer.append("[/" + getRecordName() + ']' + nl);return buffer.toString();}
public WSBoolRecord(RecordInputStream in) {byte[] data = in.readRemainder();field_1_wsbool =data[ 1 ];   field_2_wsbool =data[ 0 ];   }
public BrazilianStemFilter create(TokenStream in) {return new BrazilianStemFilter(in);}
public ResetCommand setRef(String ref) {this.ref = ref;return this;}
public EnableOrganizationAdminAccountResult enableOrganizationAdminAccount(EnableOrganizationAdminAccountRequest request) {request = beforeClientExecution(request);return executeEnableOrganizationAdminAccount(request);}
public ValueEval getInnerValueEval(int sheetIndex) {return _evaluator.getEvalForCell(sheetIndex, getRow(), getColumn());}
public DeleteRecommenderConfigurationResult deleteRecommenderConfiguration(DeleteRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteRecommenderConfiguration(request);}
public UpdateIntegrationResponseResult updateIntegrationResponse(UpdateIntegrationResponseRequest request) {request = beforeClientExecution(request);return executeUpdateIntegrationResponse(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[INTERFACEHDR]\n");buffer.append("    .codepage = ").append(HexDump.shortToHex(_codepage)).append("\n");buffer.append("[/INTERFACEHDR]\n");return buffer.toString();}
public String outputToString(BytesRef output) {return output.toString();}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("dim=");sb.append(dim);sb.append(" path=");sb.append(Arrays.toString(path));sb.append(" value=");sb.append(value);sb.append(" childCount=");sb.append(childCount);sb.append('\n');for(LabelAndValue labelValue : labelValues) {sb.append("  ").append(labelValue).append("\n");}return sb.toString();}
public AcceptVpcEndpointConnectionsResult acceptVpcEndpointConnections(AcceptVpcEndpointConnectionsRequest request) {request = beforeClientExecution(request);return executeAcceptVpcEndpointConnections(request);}
public DescribeIdentityProviderConfigurationResult describeIdentityProviderConfiguration(DescribeIdentityProviderConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeIdentityProviderConfiguration(request);}
public void clear() {head = null;free.clear();}
public String toString() {return getClass().getSimpleName() + "[" + getFile().getPath() + "]";}
public GetRelationalDatabaseBlueprintsResult getRelationalDatabaseBlueprints(GetRelationalDatabaseBlueprintsRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseBlueprints(request);}
public void concatenate(byte[] array) {if (array == null) {throw new IllegalArgumentException("array cannot be null");}arrays.add(array);}
public final ByteBuffer get(byte[] dst, int dstOffset, int byteCount) {checkGetBounds(1, dst.length, dstOffset, byteCount);System.arraycopy(backingArray, offset + position, dst, dstOffset, byteCount);position += byteCount;return this;}
public DescribeAutoScalingNotificationTypesResult describeAutoScalingNotificationTypes() {return describeAutoScalingNotificationTypes(new DescribeAutoScalingNotificationTypesRequest());}
public int compareTo(LookupResult o) {return CHARSEQUENCE_COMPARATOR.compare(key, o.key);}
public UpdateVariableResult updateVariable(UpdateVariableRequest request) {request = beforeClientExecution(request);return executeUpdateVariable(request);}
public TranslateTextRequest() {super("hiknoengine", "2019-06-25", "TranslateText", "hiknoengine");setMethod(MethodType.POST);}
public E set(int location, E object) {E result = a[location];a[location] = object;return result;}
public static Document loadXML(Reader is) {DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();DocumentBuilder db = null;try {db = dbf.newDocumentBuilder();}catch (Exception se) {throw new RuntimeException("Parser configuration error", se);}org.w3c.dom.Document doc = null;try {doc = db.parse(new InputSource(is));}catch (Exception se) {throw new RuntimeException("Error parsing file:" + se, se);}return doc;}
public void setTokenStream(TokenStream tokenStream) {if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {throw new IllegalArgumentException("TokenStream fields must be indexed and tokenized");}this.tokenStream = tokenStream;}
public ValueEval getArea3DEval(Area3DPtg aptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(aptg.getExternSheetIndex());return new LazyAreaEval(aptg.getFirstRow(), aptg.getFirstColumn(),aptg.getLastRow(), aptg.getLastColumn(), sre);}
public MulBlankRecord(int row, int firstCol, short[] xfs) {_row = row;_firstCol = firstCol;_xfs = xfs;_lastCol = firstCol + xfs.length - 1;}
public EngineDefaults describeEngineDefaultParameters(DescribeEngineDefaultParametersRequest request) {request = beforeClientExecution(request);return executeDescribeEngineDefaultParameters(request);}
public AttachVolumeResult attachVolume(AttachVolumeRequest request) {request = beforeClientExecution(request);return executeAttachVolume(request);}
public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}
public DeleteWorkerBlockResult deleteWorkerBlock(DeleteWorkerBlockRequest request) {request = beforeClientExecution(request);return executeDeleteWorkerBlock(request);}
public static void unregister(TransportProtocol proto) {for (WeakReference<TransportProtocol> ref : protocols) {TransportProtocol refProto = ref.get();if (refProto == null || refProto == proto)protocols.remove(ref);}}
public CreateNetworkInterfacePermissionResult createNetworkInterfacePermission(CreateNetworkInterfacePermissionRequest request) {request = beforeClientExecution(request);return executeCreateNetworkInterfacePermission(request);}
public void parseLine(DocData docData, String line) {String[] parts = line.split("\\t", 7);docData.setID(Integer.parseInt(parts[0]));docData.setName(parts[1]);String latitude = parts[4];String longitude = parts[5];docData.setBody("POINT("+longitude+" "+latitude+")");}
public DeleteArchiveRequest(String accountId, String vaultName, String archiveId) {setAccountId(accountId);setVaultName(vaultName);setArchiveId(archiveId);}
public static void close(@NonNull Repository db) {if (db.getDirectory() != null) {FileKey key = FileKey.exact(db.getDirectory(), db.getFS());cache.unregisterAndCloseRepository(key);}}
public OrQueryNode(List<QueryNode> clauses) {super(clauses);if ((clauses == null) || (clauses.size() == 0)) {throw new IllegalArgumentException("OR query must have at least one clause");}}
public ReplicationGroup createReplicationGroup(CreateReplicationGroupRequest request) {request = beforeClientExecution(request);return executeCreateReplicationGroup(request);}
public ListCollectionsResult listCollections(ListCollectionsRequest request) {request = beforeClientExecution(request);return executeListCollections(request);}
public void setParentIds(AnyObjectId parent1, AnyObjectId parent2) {parentIds = new ObjectId[] { parent1.copy(), parent2.copy() };}
public TokenOffsetPayloadTokenFilter create(TokenStream input) {return new TokenOffsetPayloadTokenFilter(input);}
public CreateDataSourceResult createDataSource(CreateDataSourceRequest request) {request = beforeClientExecution(request);return executeCreateDataSource(request);}
public DeleteBranchCommand setBranchNames(String... branchnames) {checkCallable();this.branchNames.clear();this.branchNames.addAll(Arrays.asList(branchnames));return this;}
public void setCoordinates(int x1, int y1, int x2, int y2) {_spgrRecord.setRectX1(x1);_spgrRecord.setRectX2(x2);_spgrRecord.setRectY1(y1);_spgrRecord.setRectY2(y2);}
public DescribeNotificationConfigurationsResult describeNotificationConfigurations() {return describeNotificationConfigurations(new DescribeNotificationConfigurationsRequest());}
public GetStatusResult getStatus(GetStatusRequest request) {request = beforeClientExecution(request);return executeGetStatus(request);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 1:return evaluate(srcRowIndex, srcColumnIndex, args[0]);case 2:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1]);}return ErrorEval.VALUE_INVALID;}
public ExternalSheet getExternalSheet(int externSheetIndex) {String[] extNames = linkTable.getExternalBookAndSheetName(externSheetIndex);if (extNames == null) {return null;}if (extNames.length == 2) {return new ExternalSheet(extNames[0], extNames[1]);} else {return new ExternalSheetRange(extNames[0], extNames[1], extNames[2]);}}
public static int delete(char s[], int pos, int len) {assert pos < len;if (pos < len - 1) { System.arraycopy(s, pos + 1, s, pos, len - pos - 1);}return len - 1;}
public HSSFConditionalFormatting getConditionalFormattingAt(int index) {CFRecordsAggregate cf = _conditionalFormattingTable.get(index);if (cf == null) {return null;}return new HSSFConditionalFormatting(_sheet, cf);}
public static Cell createCell(Row row, int column, String value, CellStyle style) {Cell cell = getCell(row, column);cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(value));if (style != null) {cell.setCellStyle(style);}return cell;}
public void setFillColor(int red, int green, int blue) {int fillColor = ((blue) << 16) | ((green) << 8) | red;setPropertyValue(new EscherRGBProperty(EscherPropertyTypes.FILL__FILLCOLOR, fillColor));}
public ErrorResponseBody error() {return this.error;}
public void write(int b) throws IOException {try {beginWrite();dst.write(b);} catch (InterruptedIOException e) {throw writeTimedOut(e);} finally {endWrite();}}
public void add(String key, ParserExtension extension) {this.extensions.put(key, extension);}
public SignOutUserResult signOutUser(SignOutUserRequest request) {request = beforeClientExecution(request);return executeSignOutUser(request);}
public PutImageTagMutabilityResult putImageTagMutability(PutImageTagMutabilityRequest request) {request = beforeClientExecution(request);return executePutImageTagMutability(request);}
public CreateIAMPolicyAssignmentResult createIAMPolicyAssignment(CreateIAMPolicyAssignmentRequest request) {request = beforeClientExecution(request);return executeCreateIAMPolicyAssignment(request);}
public GetRoomResult getRoom(GetRoomRequest request) {request = beforeClientExecution(request);return executeGetRoom(request);}
public DescribeLaunchConfigurationsResult describeLaunchConfigurations() {return describeLaunchConfigurations(new DescribeLaunchConfigurationsRequest());}
public UpdateTaskSetResult updateTaskSet(UpdateTaskSetRequest request) {request = beforeClientExecution(request);return executeUpdateTaskSet(request);}
public boolean equals(Object other_) {if (other_ == this) {return true;} else if (!(other_ instanceof FSTTermOutputs.TermData)) {return false;}TermData other = (TermData) other_;return statsEqual(this, other) &&bytesEqual(this, other);}
public int getSequenceIndex() {return sequenceIndex;}
public DeleteAutoScalingGroupResult deleteAutoScalingGroup(DeleteAutoScalingGroupRequest request) {request = beforeClientExecution(request);return executeDeleteAutoScalingGroup(request);}
public int nextDoc() {while (true) {if (queue.size() == 0) {doc = NO_MORE_DOCS;break;}int newDoc = queue.top().docID();if (newDoc != doc) {assert newDoc > doc: "doc=" + doc + " newDoc=" + newDoc;doc = newDoc;break;}if (queue.top().nextDoc() == NO_MORE_DOCS) {queue.pop();} else {queue.updateTop();}}return doc;}
public Collection<ChildScorable> getChildren() {return Collections.singleton(new ChildScorable(parentScorer, "BLOCK_JOIN"));}
public void endTask() {if (!isMainThread())throw new IllegalStateException();pm.endTask();}
public UpdateConfigurationSetEventDestinationResult updateConfigurationSetEventDestination(UpdateConfigurationSetEventDestinationRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetEventDestination(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(getBackup());}
public DescribeBundleTasksResult describeBundleTasks(DescribeBundleTasksRequest request) {request = beforeClientExecution(request);return executeDescribeBundleTasks(request);}
public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats) {final long df = termStats.docFreq();final long docCount = collectionStats.docCount();final float idf = idf(df, docCount);return Explanation.match(idf, "idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:",Explanation.match(df, "n, number of documents containing term"),Explanation.match(docCount, "N, total number of documents with field"));}
public DescribeFleetEventsResult describeFleetEvents(DescribeFleetEventsRequest request) {request = beforeClientExecution(request);return executeDescribeFleetEvents(request);}
public BasicCredentials(String accessKeyId, String accessKeySecret) {if (accessKeyId == null) {throw new IllegalArgumentException("Access key ID cannot be null.");}if (accessKeySecret == null) {throw new IllegalArgumentException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;}
public String getOldPath() {return oldPath;}
public int nextIndex() {return iterator.nextIndex() - start;}
public Snapshot deleteClusterSnapshot(DeleteClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSnapshot(request);}
public String getColsNamesForValsByRound() {if (colForValByRound.size() == 0) {return "";}StringBuilder sb = new StringBuilder();for (final String colName : colForValByRound.values()) {sb.append(' ').append(colName);}return sb.toString();}
public void deprecateActivityType(DeprecateActivityTypeRequest request) {request = beforeClientExecution(request);executeDeprecateActivityType(request);}
public PartETag(int partNumber, String eTag) {this.partNumber = partNumber;this.eTag = eTag;}
@Override public boolean remove(Object object) {if (object instanceof Multiset.Entry) {Multiset.Entry<?> entry = (Multiset.Entry<?>) object;Object element = entry.getElement();int entryCount = entry.getCount();return countMap.remove(element, entryCount);}return false;}
public ListAccessControlRulesResult listAccessControlRules(ListAccessControlRulesRequest request) {request = beforeClientExecution(request);return executeListAccessControlRules(request);}
public final CharBuffer get(char[] dst, int srcOffset, int charCount) {if (charCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, srcOffset, charCount);position += charCount;return this;}
public DescribeDBClusterBacktracksResult describeDBClusterBacktracks(DescribeDBClusterBacktracksRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterBacktracks(request);}
public boolean equals(ATNConfig other) {if (this == other) {return true;}else if (other == null) {return false;}return this.state.stateNumber==other.state.stateNumber&& this.alt==other.alt&& (this.context==other.context || (this.context != null && this.context.equals(other.context)))&& this.semanticContext.equals(other.semanticContext)&& this.isPrecedenceFilterSuppressed() == other.isPrecedenceFilterSuppressed();}
public AbbreviatedObjectId getId(Side side) {return side == Side.OLD ? getOldId() : getNewId();}
public CatLabRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();wOffset = in.readShort();at = in.readShort();grbit = in.readShort();if(in.available() == 0) {unused = null;} else {unused = in.readShort();}}
public String substring(int start, int end) {if (start >= 0 && start <= end && end <= count) {if (start == end) {return "";}return new String(value, start, end - start);}throw startEndAndLength(start, end);}
public int remove(final int index){if (index >= _limit){throw new IndexOutOfBoundsException();}int rval = _array[ index ];System.arraycopy(_array, index + 1, _array, index, _limit - index);_limit--;return rval;}
public K getKey() {return super.get();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeInt(unused1);out.writeInt(unused2);}
public void setDeltaCacheLimit(int size) {deltaCacheLimit = size;}
public String toString() {return "L";}
public Map<String, String> read(String response, String endpoint) {return read(new StringCharacterIterator(response), endpoint, FIRST_POSITION);}
public DeleteMessageResult deleteMessage(DeleteMessageRequest request) {request = beforeClientExecution(request);return executeDeleteMessage(request);}
public SearchFind(boolean isCaseSensitive) {_isCaseSensitive = isCaseSensitive;}
public void setRoleName(String roleName) {if (null == roleName) {throw new NullPointerException("You must specifiy a valid role name.");}this.roleName = roleName;setCredentialUrl();}
public AllocatePublicVirtualInterfaceResult allocatePublicVirtualInterface(AllocatePublicVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAllocatePublicVirtualInterface(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | (byte2 >>> 4);final long byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);final long byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}
public DeleteLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}
public PutDeliverabilityDashboardOptionResult putDeliverabilityDashboardOption(PutDeliverabilityDashboardOptionRequest request) {request = beforeClientExecution(request);return executePutDeliverabilityDashboardOption(request);}
public XPathRuleElement(String ruleName, int ruleIndex) {super(ruleName);this.ruleIndex = ruleIndex;}
public PullCommand setProgressMonitor(ProgressMonitor monitor) {if (monitor == null) {monitor = NullProgressMonitor.INSTANCE;}this.monitor = monitor;return this;}
public static final RevFilter after(long ts) {return new After(ts);}
public final String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [len=");sb.append(field_2_subex_len);sb.append("]");return sb.toString();}
public DeleteRoomResult deleteRoom(DeleteRoomRequest request) {request = beforeClientExecution(request);return executeDeleteRoom(request);}
public ScandinavianNormalizationFilter create(TokenStream input) {return new ScandinavianNormalizationFilter(input);}
public ValidateTemplateResult validateTemplate(ValidateTemplateRequest request) {request = beforeClientExecution(request);return executeValidateTemplate(request);}
public ListBranchCommand branchList() {return new ListBranchCommand(repo);}
public String toString() {return getClass().getSimpleName() + "[" + getEntryPathString() + "]"; }
public final Edit before(Edit cut) {return new Edit(beginA, cut.beginA, beginB, cut.beginB);}
public String toString() {if ( symbol.getType() == Token.EOF ) return "<EOF>";return symbol.getText();}
public DeleteDeploymentStrategyResult deleteDeploymentStrategy(DeleteDeploymentStrategyRequest request) {request = beforeClientExecution(request);return executeDeleteDeploymentStrategy(request);}
public GetModelResult getModel(GetModelRequest request) {request = beforeClientExecution(request);return executeGetModel(request);}
public DescribeUserResult describeUser(DescribeUserRequest request) {request = beforeClientExecution(request);return executeDescribeUser(request);}
public ListSnapshotBlocksResult listSnapshotBlocks(ListSnapshotBlocksRequest request) {request = beforeClientExecution(request);return executeListSnapshotBlocks(request);}
public ByteBuffer putShort(int index, short value) {checkIndex(index, SizeOf.SHORT);Memory.pokeShort(backingArray, offset + index, value, order);return this;}
public ResetCommand reset() {return new ResetCommand(repo);}
public Snapshot createClusterSnapshot(CreateClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateClusterSnapshot(request);}
public void setCachedResultTypeEmptyString() {specialCachedValue = FormulaSpecialCachedValue.createCachedEmptyValue();}
public DeleteIdentityPolicyResult deleteIdentityPolicy(DeleteIdentityPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteIdentityPolicy(request);}
public int IncRef() {if (!initDone) {initDone = true;} else {assert count > 0: Thread.currentThread().getName() + ": RefCount is 0 pre-increment for file \"" + fileName + "\"";}return ++count;}
public void fromRaw(byte[] bs) {fromRaw(bs, 0);}
public LeftMarginRecord clone() {return copy();}
public FailedPredicateException(Parser recognizer,String predicate,String message){super(formatMessage(predicate, message), recognizer, recognizer.getInputStream(), recognizer._ctx);ATNState s = recognizer.getInterpreter().atn.states.get(recognizer.getState());AbstractPredicateTransition trans = (AbstractPredicateTransition)s.transition(0);if (trans instanceof PredicateTransition) {this.ruleIndex = ((PredicateTransition)trans).ruleIndex;this.predicateIndex = ((PredicateTransition)trans).predIndex;}else {this.ruleIndex = 0;this.predicateIndex = 0;}this.predicate = predicate;this.setOffendingToken(recognizer.getCurrentToken());}
public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case ALEF_MADDA:case ALEF_HAMZA_ABOVE:case ALEF_HAMZA_BELOW:s[i] = ALEF;break;case DOTLESS_YEH:s[i] = YEH;break;case TEH_MARBUTA:s[i] = HEH;break;case TATWEEL:case KASRATAN:case DAMMATAN:case FATHATAN:case FATHA:case DAMMA:case KASRA:case SHADDA:case SUKUN:len = delete(s, i, len);i--;break;default:break;}}return len;}
public static int idealCharArraySize(int need) {return idealByteArraySize(need * 2) / 2;}
public void setObjectId(AnyObjectId obj, int objType) {object = obj.copy();type = objType;}
public ValueEval getItem(int index) {if (index != 0) {throw new RuntimeException("Invalid index ("+ index + ") only zero is allowed");}return _value;}
public AND(SemanticContext a, SemanticContext b) {Set<SemanticContext> operands = new HashSet<SemanticContext>();if ( a instanceof AND ) operands.addAll(Arrays.asList(((AND)a).opnds));else operands.add(a);if ( b instanceof AND ) operands.addAll(Arrays.asList(((AND)b).opnds));else operands.add(b);List<PrecedencePredicate> precedencePredicates = filterPrecedencePredicates(operands);if (!precedencePredicates.isEmpty()) {PrecedencePredicate reduced = Collections.min(precedencePredicates);operands.add(reduced);}opnds = operands.toArray(new SemanticContext[operands.size()]);}
public GetCampaignVersionResult getCampaignVersion(GetCampaignVersionRequest request) {request = beforeClientExecution(request);return executeGetCampaignVersion(request);}
public SeriesTextRecord(RecordInputStream in) {field_1_id = in.readUShort();int field_2_textLength = in.readUByte();is16bit = (in.readUByte() & 0x01) != 0;if (is16bit) {field_4_text = in.readUnicodeLEString(field_2_textLength);} else {field_4_text = in.readCompressedUnicode(field_2_textLength);}}
public void writeUTF(String value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeUTF(value);}
public DeleteCacheSubnetGroupResult deleteCacheSubnetGroup(DeleteCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteCacheSubnetGroup(request);}
public Tab getItem(int position) {return mTabs.get(position);}
public int createFormat(String formatString) {maxformatid = maxformatid >= 0xa4 ? maxformatid + 1 : 0xa4; FormatRecord rec = new FormatRecord(maxformatid, formatString);int pos = 0;while ( pos < records.size() && records.get( pos ).getSid() != FormatRecord.sid ) {pos++;}pos += formats.size();formats.add( rec );records.add( pos, rec );return maxformatid;}
public ListDeploymentStrategiesResult listDeploymentStrategies(ListDeploymentStrategiesRequest request) {request = beforeClientExecution(request);return executeListDeploymentStrategies(request);}
public CreateLoginProfileRequest(String userName, String password) {setUserName(userName);setPassword(password);}
public String getMetadata() throws ClientException {HttpRequest request = new HttpRequest(credentialUrl.toString());request.setSysMethod(MethodType.GET);request.setSysConnectTimeout(connectionTimeoutInMilliseconds);request.setSysReadTimeout(connectionTimeoutInMilliseconds);HttpResponse response;try {response = CompatibleUrlConnClient.compatibleGetResponse(request);} catch (Exception e) {throw new ClientException("Failed to connect ECS Metadata Service: " + e.toString());}if (response.getStatus() != HttpURLConnection.HTTP_OK) {throw new ClientException(ECS_METADAT_FETCH_ERROR_MSG + " HttpCode=" + response.getStatus());}return new String(response.getHttpContent());}
public void setAbbreviationLength(int count) {if (count < 0)throw new IllegalArgumentException(JGitText.get().abbreviationLengthMustBeNonNegative);abbreviationLength = count;}
public SearchFacesByImageResult searchFacesByImage(SearchFacesByImageRequest request) {request = beforeClientExecution(request);return executeSearchFacesByImage(request);}
public ListMonitoringSchedulesResult listMonitoringSchedules(ListMonitoringSchedulesRequest request) {request = beforeClientExecution(request);return executeListMonitoringSchedules(request);}
public static double[] grow(double[] array) {return grow(array, 1 + array.length);}
public E next() {if (index < to) {return (E) snapshot[index++];} else {throw new NoSuchElementException();}}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = Imaginary.COMPLEX_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();String real = "";if (result) {String realGroup = m.group(2);boolean hasRealPart = realGroup.length() != 0;if (realGroup.length() == 0) {return new StringEval(String.valueOf(0));}if (hasRealPart) {String sign = "";String realSign = m.group(Imaginary.GROUP1_REAL_SIGN);if (realSign.length() != 0 && !(realSign.equals("+"))) {sign = realSign;}String groupRealNumber = m.group(Imaginary.GROUP2_IMAGINARY_INTEGER_OR_DOUBLE);if (groupRealNumber.length() != 0) {real = sign + groupRealNumber;} else {real = sign + "1";}}} else {return ErrorEval.NUM_ERROR;}return new StringEval(real);}
public PlacementType(String availabilityZone) {setAvailabilityZone(availabilityZone);}
public UpdateDomainResult updateDomain(UpdateDomainRequest request) {request = beforeClientExecution(request);return executeUpdateDomain(request);}
public byte[] serialize(){byte[] retval = new byte[getRecordSize()];serialize( 0, retval );return retval;}
public GetLoadBalancerResult getLoadBalancer(GetLoadBalancerRequest request) {request = beforeClientExecution(request);return executeGetLoadBalancer(request);}
public ModifyTrafficMirrorFilterRuleResult modifyTrafficMirrorFilterRule(ModifyTrafficMirrorFilterRuleRequest request) {request = beforeClientExecution(request);return executeModifyTrafficMirrorFilterRule(request);}
public void resize(double scaleX, double scaleY) {HSSFClientAnchor anchor = getClientAnchor();anchor.setAnchorType(AnchorType.MOVE_DONT_RESIZE);HSSFClientAnchor pref = getPreferredSize(scaleX,scaleY);int row2 = anchor.getRow1() + (pref.getRow2() - pref.getRow1());int col2 = anchor.getCol1() + (pref.getCol2() - pref.getCol1());anchor.setCol2((short)col2);anchor.setDx2(pref.getDx2());anchor.setRow2(row2);anchor.setDy2(pref.getDy2());}
public void reset() throws IOException {throw new IOException("mark/reset not supported");}
public Body(Content text) {setText(text);}
public StaticCredentialsProvider(IClientProfile clientProfile) {IClientProfile clientProfile1 = clientProfile;Credential legacyCredential = clientProfile1.getCredential();if (null != legacyCredential.getSecurityToken()) {this.credentials = new BasicSessionCredentials(legacyCredential.getAccessKeyId(), legacyCredential.getAccessSecret(), legacyCredential.getSecurityToken());} else {this.credentials = new LegacyCredentials(legacyCredential);}}
public synchronized V get(Object key) {int hash = key.hashCode();hash ^= (hash >>> 20) ^ (hash >>> 12);hash ^= (hash >>> 7) ^ (hash >>> 4);HashtableEntry<K, V>[] tab = table;for (HashtableEntry<K, V> e = tab[hash & (tab.length - 1)];e != null; e = e.next) {K eKey = e.key;if (eKey == key || (e.hash == hash && key.equals(eKey))) {return e.value;}}return null;}
public void keep(int pos, int cnt) {beforeAdd(cache.getEntry(pos));fastKeep(pos, cnt);}
public TableStylesRecord(RecordInputStream in) {rt = in.readUShort();grbitFrt = in.readUShort();in.readFully(unused);cts = in.readInt();int cchDefListStyle = in.readUShort();int cchDefPivotStyle = in.readUShort();rgchDefListStyle = in.readUnicodeLEString(cchDefListStyle);rgchDefPivotStyle = in.readUnicodeLEString(cchDefPivotStyle);}
public AddAttributesToFindingsResult addAttributesToFindings(AddAttributesToFindingsRequest request) {request = beforeClientExecution(request);return executeAddAttributesToFindings(request);}
public CellElapsedFormatter(String pattern) {super(pattern);specs = new ArrayList<>();StringBuffer desc = CellFormatPart.parseFormat(pattern,CellFormatType.ELAPSED, new ElapsedPartHandler());ListIterator<TimeSpec> it = specs.listIterator(specs.size());while (it.hasPrevious()) {TimeSpec spec = it.previous();desc.replace(spec.pos, spec.pos + spec.len, "%0" + spec.len + "d");if (spec.type != topmost.type) {spec.modBy = modFor(spec.type, spec.len);}}printfFmt = desc.toString();}
public final int capacity() {return capacity;}
public final boolean matches(char c) {return Character.isWhitespace(c);}
public BytesRef get(int bytesID, BytesRef ref) {assert bytesStart != null : "bytesStart is null - not initialized";assert bytesID < bytesStart.length: "bytesID exceeds byteStart len: " + bytesStart.length;pool.setBytesRef(ref, bytesStart[bytesID]);return ref;}
public void run() {display = true;}
public UpdateMatchmakingConfigurationResult updateMatchmakingConfiguration(UpdateMatchmakingConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateMatchmakingConfiguration(request);}
public boolean isGroup(char c) {return groupMap[characterCategoryMap[c]];}
public void setTraverseEmptyCells(boolean traverseEmptyCells) {this.traverseEmptyCells = traverseEmptyCells;}
public ListPresetsResult listPresets(ListPresetsRequest request) {request = beforeClientExecution(request);return executeListPresets(request);}
@Override public Set<K> keySet() {Set<K> ks = keySet;return (ks != null) ? ks : (keySet = new KeySet());}
public void include(Ref r) {include(r.getName(), r.getObjectId());if (r.getPeeledObjectId() != null)tagTargets.add(r.getPeeledObjectId());else if (r.getObjectId() != null&& r.getName().startsWith(Constants.R_HEADS))tagTargets.add(r.getObjectId());}
public CharBuffer get(char[] dst, int dstOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, charCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, charCount);}this.position += charCount;return this;}
public BytesRef subtract(BytesRef output, BytesRef inc) {assert output != null;assert inc != null;if (inc == NO_OUTPUT) {return output;} else {assert StringHelper.startsWith(output, inc);if (inc.length == output.length) {return NO_OUTPUT;} else {assert inc.length < output.length: "inc.length=" + inc.length + " vs output.length=" + output.length;assert inc.length > 0;return new BytesRef(output.bytes, output.offset + inc.length, output.length-inc.length);}}}
public boolean isKanji(char c) {final byte characterClass = characterCategoryMap[c];return characterClass == KANJI || characterClass == KANJINUMERIC;}
public int getType() {return type;}
public ValueEval getItem(int index) {if(index > _size) {throw new ArrayIndexOutOfBoundsException("Specified index (" + index+ ") is outside the allowed range (0.." + (_size-1) + ")");}return _tableArray.getValue(index, _columnIndex);}
public void writeDouble(double v) {writeContinueIfRequired(8);_ulrOutput.writeDouble(v);}
final public QueryNode ConjQuery(CharSequence field) throws ParseException {QueryNode first, c;Vector<QueryNode> clauses = null;first = ModClause(field);label_3:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case AND:;break;default:jj_la1[4] = jj_gen;break label_3;}jj_consume_token(AND);c = ModClause(field);if (clauses == null) {clauses = new Vector<QueryNode>();clauses.addElement(first);}clauses.addElement(c);}if (clauses != null) {{if (true) return new AndQueryNode(clauses);}} else {{if (true) return first;}}throw new Error("Missing return statement in function");}
public void setRevFilter(RevFilter newFilter) {assertNotStarted();filter = newFilter != null ? newFilter : RevFilter.ALL;}
public void setText(final char array[], int start, int length) {this.array = array;this.start = start;this.index = start;this.length = length;this.limit = start + length;}
public GetVoiceChannelResult getVoiceChannel(GetVoiceChannelRequest request) {request = beforeClientExecution(request);return executeGetVoiceChannel(request);}
public RevokeSecurityGroupIngressResult revokeSecurityGroupIngress(RevokeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeRevokeSecurityGroupIngress(request);}
public DoubleBuffer slice() {byteBuffer.limit(limit * SizeOf.DOUBLE);byteBuffer.position(position * SizeOf.DOUBLE);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());DoubleBuffer result = new DoubleToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public DoubleValuesSource makeDistanceValueSource(Point queryPoint, double multiplier) {return new DistanceValueSource(this, queryPoint, multiplier);}
public String toString() {final StringBuilder r = new StringBuilder();final SimpleDateFormat dtfmt;dtfmt = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy Z", Locale.US);dtfmt.setTimeZone(getTimeZone());r.append("PersonIdent[");r.append(getName());r.append(", ");r.append(getEmailAddress());r.append(", ");r.append(dtfmt.format(Long.valueOf(when)));r.append("]");return r.toString();}
public ArabicStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int getIndex() {return offset;}
public ListVoiceConnectorsResult listVoiceConnectors(ListVoiceConnectorsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectors(request);}
public GetOperationResult getOperation(GetOperationRequest request) {request = beforeClientExecution(request);return executeGetOperation(request);}
public Item(String name, java.util.List<Attribute> attributes) {setName(name);setAttributes(attributes);}
public SetIdentityHeadersInNotificationsEnabledResult setIdentityHeadersInNotificationsEnabled(SetIdentityHeadersInNotificationsEnabledRequest request) {request = beforeClientExecution(request);return executeSetIdentityHeadersInNotificationsEnabled(request);}
public void setSensitiveInputCells(CellCacheEntry[] sensitiveInputCells) {if (sensitiveInputCells == null) {_sensitiveInputCells = null;changeConsumingCells(CellCacheEntry.EMPTY_ARRAY);} else {_sensitiveInputCells = sensitiveInputCells.clone();changeConsumingCells(_sensitiveInputCells);}}
public synchronized boolean add(E e) {Object[] newElements = new Object[elements.length + 1];System.arraycopy(elements, 0, newElements, 0, elements.length);newElements[elements.length] = e;elements = newElements;return true;}
public StringBuilder append(long l) {IntegralToString.appendLong(this, l);return this;}
public DeleteHsmClientCertificateResult deleteHsmClientCertificate(DeleteHsmClientCertificateRequest request) {request = beforeClientExecution(request);return executeDeleteHsmClientCertificate(request);}
public CreateAssessmentTargetResult createAssessmentTarget(CreateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeCreateAssessmentTarget(request);}
public DescribeGlobalReplicationGroupsResult describeGlobalReplicationGroups(DescribeGlobalReplicationGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeGlobalReplicationGroups(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(_sheetRefIndex);out.writeShort(_nameNumber);out.writeShort(_reserved);}
public static String parseSegmentName(String filename) {int idx = indexOfSegmentName(filename);if (idx != -1) {filename = filename.substring(0, idx);}return filename;}
public String getRefLogMessage() {return refLogMessage;}
public ObjectId getObjectId() {return missing;}
public void setPackedGitLimit(long newLimit) {packedGitLimit = newLimit;}
public String toString() {return "";}
public void clear() {if (size > 0) {size = 0;voidLink.next = voidLink;voidLink.previous = voidLink;modCount++;}}
public List<Note> call() throws GitAPIException {checkCallable();List<Note> notes = new ArrayList<>();NoteMap map = NoteMap.newEmptyMap();try (RevWalk walk = new RevWalk(repo)) {Ref ref = repo.findRef(notesRef);if (ref != null) {RevCommit notesCommit = walk.parseCommit(ref.getObjectId());map = NoteMap.read(walk.getObjectReader(), notesCommit);}Iterator<Note> i = map.iterator();while (i.hasNext())notes.add(i.next());} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}return notes;}
public ListOrganizationsResult listOrganizations(ListOrganizationsRequest request) {request = beforeClientExecution(request);return executeListOrganizations(request);}
public ParseTreeMatch match(ParseTree tree, String pattern, int patternRuleIndex) {ParseTreePattern p = compile(pattern, patternRuleIndex);return match(tree, p);}
public GridsetRecord(RecordInputStream in) {field_1_gridset_flag = in.readShort();}
public PagedBytesDataInput clone() {PagedBytesDataInput clone = getDataInput();clone.setPosition(getPosition());return clone;}
public MissingObjectException(AbbreviatedObjectId id, int type) {super(MessageFormat.format(JGitText.get().missingObject, Constants.typeString(type), id.name()));missing = null;}
public void getName(byte[] buffer, int offset) {System.arraycopy(path, pathOffset, buffer, offset, pathLen - pathOffset);}
public List<? extends CombinedHunkHeader> getHunks() {return (List<CombinedHunkHeader>) super.getHunks();}
public long getPointer() {if (currentBlock == null) {return 0;} else {return (numBlocks * ((long) blockSize)) + upto;}}
public PendingTaskCount countPendingDecisionTasks(CountPendingDecisionTasksRequest request) {request = beforeClientExecution(request);return executeCountPendingDecisionTasks(request);}
public ListStackResourcesResult listStackResources(ListStackResourcesRequest request) {request = beforeClientExecution(request);return executeListStackResources(request);}
public Credential(String keyId, String secret, String securityToken, int expiredHours) {this.accessKeyId = keyId;this.accessSecret = secret;this.securityToken = securityToken;this.refreshDate = new Date();setExpiredDate(expiredHours);}
public void writeFields() throws IOException {if (currentPutField == null) {throw new NotActiveException();}writeFieldValues(currentPutField);}
public Result getResult() {return status;}
public AssignIpv6AddressesResult assignIpv6Addresses(AssignIpv6AddressesRequest request) {request = beforeClientExecution(request);return executeAssignIpv6Addresses(request);}
public DBInstance modifyDBInstance(ModifyDBInstanceRequest request) {request = beforeClientExecution(request);return executeModifyDBInstance(request);}
public RemoveAttributesFromFindingsResult removeAttributesFromFindings(RemoveAttributesFromFindingsRequest request) {request = beforeClientExecution(request);return executeRemoveAttributesFromFindings(request);}
public JoinDocFreqValueSource(String field, String qfield) {super(field);this.qfield = qfield;}
public double readDouble() {return Double.longBitsToDouble(readLong());}
public DescribeDirectoryConfigsResult describeDirectoryConfigs(DescribeDirectoryConfigsRequest request) {request = beforeClientExecution(request);return executeDescribeDirectoryConfigs(request);}
public GetAccountResult getAccount(GetAccountRequest request) {request = beforeClientExecution(request);return executeGetAccount(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[BOUNDSHEET]\n");buffer.append("    .bof        = ").append(HexDump.intToHex(getPositionOfBof())).append("\n");buffer.append("    .visibility = ").append(HexDump.shortToHex(field_2_visibility)).append("\n");buffer.append("    .type       = ").append(HexDump.byteToHex(field_3_type)).append("\n");buffer.append("    .sheetname  = ").append(getSheetname()).append("\n");buffer.append("[/BOUNDSHEET]\n");return buffer.toString();}
public short getShortRawValue(final short holder){return ( short ) getRawValue(holder);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double d2 = NumericFunction.singleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);result = evaluate(getYear(d0), (int) (d1 - 1), (int) d2);NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public GetPublicKeyConfigResult getPublicKeyConfig(GetPublicKeyConfigRequest request) {request = beforeClientExecution(request);return executeGetPublicKeyConfig(request);}
public URIish setUser(String n) {final URIish r = new URIish(this);r.user = n;return r;}
public EscherArrayProperty(short id, int complexSize) {super(id, complexSize);emptyComplexPart = (complexSize == 0);}
public String toASCIIString() {return format(false, true);}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 56; shift >= 0; shift -= 8) {values[valuesOffset++] = (block >>> shift) & 255;}}}
public GetContactResult getContact(GetContactRequest request) {request = beforeClientExecution(request);return executeGetContact(request);}
public void removeHiddenCount() {remove1stProperty(PropertyIDMap.PID_HIDDENCOUNT);}
public GetRestApisResult getRestApis(GetRestApisRequest request) {request = beforeClientExecution(request);return executeGetRestApis(request);}
public ArrayPredictionContext(PredictionContext[] parents, int[] returnStates) {super(calculateHashCode(parents, returnStates));assert parents!=null && parents.length>0;assert returnStates!=null && returnStates.length>0;this.parents = parents;this.returnStates = returnStates;}
public CharBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public DeleteStageResult deleteStage(DeleteStageRequest request) {request = beforeClientExecution(request);return executeDeleteStage(request);}
public Object[] toArray() {return elements.clone();}
public synchronized void mark(int ignoredReadlimit) {_marked_offset = _current_offset;_marked_offset_count = Math.max(0, _current_block_count - 1);}
public String toString() {return "NOT " + a.toString(); }
public void setExpectDataAfterPackFooter(boolean e) {expectDataAfterPackFooter = e;}
public Request<DeletePublicAccessBlockRequest> marshall(DeletePublicAccessBlockRequest deletePublicAccessBlockRequest) {if (deletePublicAccessBlockRequest == null) {throw new SdkClientException("Invalid argument passed to marshall(...)");}Request<DeletePublicAccessBlockRequest> request = new DefaultRequest<DeletePublicAccessBlockRequest>(deletePublicAccessBlockRequest, "AWSS3Control");request.setHttpMethod(HttpMethodName.DELETE);if (deletePublicAccessBlockRequest.getAccountId() != null) {request.addHeader("x-amz-account-id", StringUtils.fromString(deletePublicAccessBlockRequest.getAccountId()));}String uriResourcePath = "/v20180820/configuration/publicAccessBlock";request.setResourcePath(uriResourcePath);return request;}
public FetchResult getFetchResult() {return this.fetchResult;}
public GetJourneyExecutionMetricsResult getJourneyExecutionMetrics(GetJourneyExecutionMetricsRequest request) {request = beforeClientExecution(request);return executeGetJourneyExecutionMetrics(request);}
public static long[] grow(long[] array) {return grow(array, 1 + array.length);}
@Override public String toString() {StringBuilder buf = new StringBuilder();buf.append(getClass().getName());buf.append(", status: capacity=");buf.append(capacity);buf.append(" position=");buf.append(position);buf.append(" limit=");buf.append(limit);return buf.toString();}
public UpdateStreamingDistributionResult updateStreamingDistribution(UpdateStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeUpdateStreamingDistribution(request);}
public DeleteVaultNotificationsRequest(String vaultName) {setVaultName(vaultName);}
public AttachNetworkInterfaceResult attachNetworkInterface(AttachNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeAttachNetworkInterface(request);}
public boolean equals( Object o ) {return o instanceof HungarianStemmer;}
public DescribeDatasetResult describeDataset(DescribeDatasetRequest request) {request = beforeClientExecution(request);return executeDescribeDataset(request);}
public UpdateShardCountResult updateShardCount(UpdateShardCountRequest request) {request = beforeClientExecution(request);return executeUpdateShardCount(request);}
public String getText() {return getText(Interval.of(0,size()-1));}
public BoundSheetRecord[] getBoundSheetRecords() {return boundSheetRecords.toArray(new BoundSheetRecord[0]);}
public boolean matches(FooterKey key) {final byte[] kRaw = key.raw;final int len = kRaw.length;int bPtr = keyStart;if (keyEnd - bPtr != len)return false;for (int kPtr = 0; kPtr < len;) {byte b = buffer[bPtr++];if ('A' <= b && b <= 'Z')b += (byte) ('a' - 'A');if (b != kRaw[kPtr++])return false;}return true;}
public CreateUserResult createUser(CreateUserRequest request) {request = beforeClientExecution(request);return executeCreateUser(request);}
public S3Origin(String domainName, String originAccessIdentity) {setDomainName(domainName);setOriginAccessIdentity(originAccessIdentity);}
public StartTopicsDetectionJobResult startTopicsDetectionJob(StartTopicsDetectionJobRequest request) {request = beforeClientExecution(request);return executeStartTopicsDetectionJob(request);}
public ClusterSecurityGroup revokeClusterSecurityGroupIngress(RevokeClusterSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeRevokeClusterSecurityGroupIngress(request);}
public void enterRule(ParserRuleContext localctx, int state, int ruleIndex) {setState(state);_ctx = localctx;_ctx.start = _input.LT(1);if (_buildParseTrees) addContextToParseTree();if ( _parseListeners != null) triggerEnterRuleEvent();}
public ObjectReader newReader() {return new WindowCursor(db);}
@Override public int size() {return backingMap.size();}
public static String pathToString(String[] path, int length) {if (length == 0) {return "";}StringBuilder sb = new StringBuilder();for(int i=0;i<length;i++) {String s = path[i];if (s.length() == 0) {throw new IllegalArgumentException("each path component must have length > 0 (got: \"\")");}int numChars = s.length();for(int j=0;j<numChars;j++) {char ch = s.charAt(j);if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {sb.append(ESCAPE_CHAR);}sb.append(ch);}sb.append(DELIM_CHAR);}sb.setLength(sb.length()-1);return sb.toString();}
public CancelSpotInstanceRequestsRequest(java.util.List<String> spotInstanceRequestIds) {setSpotInstanceRequestIds(spotInstanceRequestIds);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append('[');for (byte[] b : table) {if (b == null)continue;if (sb.length() > 1)sb.append(" , "); sb.append('"');sb.append(RawParseUtils.decode(b));sb.append('"');sb.append('(');sb.append(chainlength(b));sb.append(')');}sb.append(']');return sb.toString();}
public GetConnectionResult getConnection(GetConnectionRequest request) {request = beforeClientExecution(request);return executeGetConnection(request);}
public String toString() {return a+".."+b;}
public AddNoteCommand notesAdd() {return new AddNoteCommand(repo);}
public static void fill(short[] array, int start, int end, short value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerIndexedCustomAction)) {return false;}LexerIndexedCustomAction other = (LexerIndexedCustomAction)obj;return offset == other.offset&& action.equals(other.action);}
public DeleteNamespaceAuthorizationRequest() {super("cr", "2016-06-07", "DeleteNamespaceAuthorization", "cr");setUriPattern("/namespace/[Namespace]/authorizations/[AuthorizeId]");setMethod(MethodType.DELETE);}
public static final int author(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; return match(b, ptr, author);}
public DescribeHostsResult describeHosts(DescribeHostsRequest request) {request = beforeClientExecution(request);return executeDescribeHosts(request);}
public void reset(byte[] bytes) {reset(bytes, 0, bytes.length);}
public OpenNLPChunkerFilterFactory(Map<String,String> args) {super(args);chunkerModelFile = get(args, CHUNKER_MODEL);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {StringBuilder r = new StringBuilder();r.append("Ref["); r.append(getName());r.append('=');r.append(ObjectId.toString(getObjectId()));r.append('(');r.append(updateIndex); r.append(")]"); return r.toString();}
public StartStreamEncryptionResult startStreamEncryption(StartStreamEncryptionRequest request) {request = beforeClientExecution(request);return executeStartStreamEncryption(request);}
public DeleteCloudFrontOriginAccessIdentityRequest(String id, String ifMatch) {setId(id);setIfMatch(ifMatch);}
public int getWidth() {return mImage.getWidth();}
public List<String> getUntrackedFolders() {LinkedList<String> ret = new LinkedList<>(untrackedFolders);if (!untrackedParentFolders.isEmpty()) {String toBeAdded = untrackedParentFolders.getLast();while (!ret.isEmpty() && ret.getLast().startsWith(toBeAdded))ret.removeLast();ret.addLast(toBeAdded);}return ret;}
public CredentialsProviderUserInfo(Session session,CredentialsProvider credentialsProvider) {this.uri = createURI(session);this.provider = credentialsProvider;}
public String toString() {return "[SELECTION]\n" +"    .pane            = " + HexDump.byteToHex(getPane()) + "\n" +"    .activecellrow   = " + HexDump.shortToHex(getActiveCellRow()) + "\n" +"    .activecellcol   = " + HexDump.shortToHex(getActiveCellCol()) + "\n" +"    .activecellref   = " + HexDump.shortToHex(getActiveCellRef()) + "\n" +"    .numrefs         = " + HexDump.shortToHex(field_6_refs.length) + "\n" +"[/SELECTION]\n";}
public static boolean isCellInternalDateFormatted(Cell cell) {if (cell == null) {return false;}boolean bDate = false;double d = cell.getNumericCellValue();if ( DateUtil.isValidExcelDate(d) ) {CellStyle style = cell.getCellStyle();int i = style.getDataFormat();bDate = isInternalDateFormat(i);}return bDate;}
public static String getSegmentsFile(List<String> files, boolean allowEmpty) {if (files.isEmpty()) {if (allowEmpty) {return null;} else {throw new IllegalStateException("empty list of files not allowed");}}String segmentsFile = files.remove(files.size() - 1);if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS)) {throw new IllegalStateException("last file to copy+sync must be segments_N but got " + segmentsFile+ "; check your Revision implementation!");}return segmentsFile;}
public static boolean hasMultibyte(String value) {if (value == null) {return false;}for (char c : value.toCharArray()) {if (c > 0xFF) {return true;}}return false;}
public static ObjectId fromString(String str) {if (str.length() != Constants.OBJECT_ID_STRING_LENGTH) {throw new InvalidObjectIdException(str);}return fromHexString(Constants.encodeASCII(str), 0);}
public void reset() throws IOException {throw new IOException();}
public GetReservedInstancesExchangeQuoteResult getReservedInstancesExchangeQuote(GetReservedInstancesExchangeQuoteRequest request) {request = beforeClientExecution(request);return executeGetReservedInstancesExchangeQuote(request);}
public IntBuffer put(int c) {throw new ReadOnlyBufferException();}
public GetFolderPathResult getFolderPath(GetFolderPathRequest request) {request = beforeClientExecution(request);return executeGetFolderPath(request);}
public DeleteDirectConnectGatewayAssociationResult deleteDirectConnectGatewayAssociation(DeleteDirectConnectGatewayAssociationRequest request) {request = beforeClientExecution(request);return executeDeleteDirectConnectGatewayAssociation(request);}
public ByteBuffer putDouble(double value) {return putLong(Double.doubleToRawLongBits(value));}
public SearchContactsResult searchContacts(SearchContactsRequest request) {request = beforeClientExecution(request);return executeSearchContacts(request);}
@Override public boolean isEmpty() {return size == 0;}
public CreatePartnerEventSourceResult createPartnerEventSource(CreatePartnerEventSourceRequest request) {request = beforeClientExecution(request);return executeCreatePartnerEventSource(request);}
public CreateNamespaceAuthorizationRequest() {super("cr", "2016-06-07", "CreateNamespaceAuthorization", "cr");setUriPattern("/namespace/[Namespace]/authorizations");setMethod(MethodType.PUT);}
public URIish setPass(String n) {final URIish r = new URIish(this);r.pass = n;return r;}
public void execute(Lexer lexer) {lexer.pushMode(mode);}
public CreateModelVersionResult createModelVersion(CreateModelVersionRequest request) {request = beforeClientExecution(request);return executeCreateModelVersion(request);}
public UpdateServicePrimaryTaskSetResult updateServicePrimaryTaskSet(UpdateServicePrimaryTaskSetRequest request) {request = beforeClientExecution(request);return executeUpdateServicePrimaryTaskSet(request);}
public LinearRegressionFunction(FUNCTION function) {this.function = function;}
public ATNConfig(ATNConfig old) { this.state = old.state;this.alt = old.alt;this.context = old.context;this.semanticContext = old.semanticContext;this.reachesIntoOuterContext = old.reachesIntoOuterContext;}
public DescribeEntitiesDetectionJobResult describeEntitiesDetectionJob(DescribeEntitiesDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeEntitiesDetectionJob(request);}
public AssociateDhcpOptionsRequest(String vpcId) {setVpcId(vpcId);}
public ListChangedBlocksResult listChangedBlocks(ListChangedBlocksRequest request) {request = beforeClientExecution(request);return executeListChangedBlocks(request);}
public boolean removeFirstOccurrence(Object o) {return removeFirstOccurrenceImpl(o);}
public ArrayList<PerfTask> extractTasks() {ArrayList<PerfTask> res = new ArrayList<>();extractTasks(res, sequence);return res;}
public FacetsCollector(boolean keepScores) {this.keepScores = keepScores;}
public UpdateNodegroupVersionResult updateNodegroupVersion(UpdateNodegroupVersionRequest request) {request = beforeClientExecution(request);return executeUpdateNodegroupVersion(request);}
public DeleteAttributesRequest(String domainName, String itemName) {setDomainName(domainName);setItemName(itemName);}
public void clearDFA() {throw new UnsupportedOperationException("This ATN simulator does not support clearing the DFA.");}
public Field[] createIndexableFields(Shape shape) {if (shape instanceof Point)return createIndexableFields((Point) shape);throw new UnsupportedOperationException("Can only index Point, not " + shape);}
public void untagResource(UntagResourceRequest request) {request = beforeClientExecution(request);executeUntagResource(request);}
public DBSecurityGroup createDBSecurityGroup(CreateDBSecurityGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBSecurityGroup(request);}
public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}ExpressionValueSource other = (ExpressionValueSource) obj;if (expression == null) {if (other.expression != null) {return false;}} else if (!expression.sourceText.equals(other.expression.sourceText)) {return false;}if (needsScores != other.needsScores) {return false;}if (!Arrays.equals(variables, other.variables)) {return false;}return true;}
public static String getPreferredEncoding() {return ISO_8859_1.name();}
public synchronized IndexSearcher getIndexSearcher() {if (indexReader != null) {indexReader.incRef();}return indexSearcher;}
public boolean equals( Object o ) {return o instanceof German2Stemmer;}
public FacetLabel(final String... components) {this.components = components;length = components.length;checkComponents();}
public void visitContainedRecords(RecordVisitor rv) {if (_recs.isEmpty()) {return;}rv.visitRecord(_begin);for (int i = 0; i < _recs.size(); i++) {RecordBase rb = _recs.get(i);if (rb instanceof RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(_end);}
public void setDirCache(DirCache dc) {this.dircache = dc;implicitDirCache = false;}
public long seek(BytesRef target) {long lo = 0;          long hi = fieldIndex.numIndexTerms - 1;while (hi >= lo) {long mid = (lo + hi) >>> 1;final long offset = fieldIndex.termOffsets.get(mid);final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);int delta = target.compareTo(term);if (delta < 0) {hi = mid - 1;} else if (delta > 0) {lo = mid + 1;} else {assert mid >= 0;ord = mid*indexInterval;return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);}}if (hi < 0) {assert hi == -1;hi = 0;}final long offset = fieldIndex.termOffsets.get(hi);final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);ord = hi*indexInterval;return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);}
public void write(byte[] b, int offset, int len) {int i=0;while(true) {int nWritableChars = Math.min(len - i, _ulrOutput.getAvailableSpace() / 1);for ( ; nWritableChars > 0; nWritableChars--) {_ulrOutput.writeByte(b[offset + i++]);}if (i >= len) {break;}writeContinue();}}
public FormatFlagsConversionMismatchException(String f, char c) {if (f == null) {throw new NullPointerException();}this.f = f;this.c = c;}
public List<Head> getNextHeads(char c) {return FileNameMatcher.EMPTY_HEAD_LIST;}
public void addQueryBuilder(String nodeName, QueryBuilder builder) {queryFactory.addBuilder(nodeName, builder);}
public int defineDecisionState(DecisionState s) {decisionToState.add(s);s.decision = decisionToState.size()-1;return s.decision;}
public void afterRefresh(boolean didRefresh) {refreshDone();}
public static final int prevLF(byte[] b, int ptr, char chrA) {if (ptr == b.length)--ptr;while (ptr >= 0) {final byte c = b[ptr--];if (c == chrA || c == '\n')return ptr;}return ptr;}
public ConsumeContentSourceTask(PerfRunData runData) {super(runData);source = runData.getContentSource();}
public DescribeInstanceTypeOfferingsResult describeInstanceTypeOfferings(DescribeInstanceTypeOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceTypeOfferings(request);}
public void clearDrawingGroups() {drawingGroups.clear();}
public String formatDate(PersonIdent ident) {switch (format) {case RAW:int offset = ident.getTimeZoneOffset();String sign = offset < 0 ? "-" : "+"; int offset2;if (offset < 0)offset2 = -offset;elseoffset2 = offset;int hours = offset2 / 60;int minutes = offset2 % 60;return String.format("%d %s%02d%02d", ident.getWhen().getTime() / 1000, sign, hours, minutes);case RELATIVE:return RelativeDateFormatter.format(ident.getWhen());case LOCALELOCAL:case LOCAL:dateTimeInstance.setTimeZone(SystemReader.getInstance().getTimeZone());return dateTimeInstance.format(ident.getWhen());case LOCALE:TimeZone tz = ident.getTimeZone();if (tz == null)tz = SystemReader.getInstance().getTimeZone();dateTimeInstance.setTimeZone(tz);dateTimeInstance2.setTimeZone(tz);return dateTimeInstance.format(ident.getWhen()) + " " + dateTimeInstance2.format(ident.getWhen());default:tz = ident.getTimeZone();if (tz == null)tz = SystemReader.getInstance().getTimeZone();dateTimeInstance.setTimeZone(ident.getTimeZone());return dateTimeInstance.format(ident.getWhen());}}
public DeregisterStreamConsumerResult deregisterStreamConsumer(DeregisterStreamConsumerRequest request) {request = beforeClientExecution(request);return executeDeregisterStreamConsumer(request);}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;return true;}
public ByteBuffer asReadOnlyBuffer() {return ReadOnlyHeapByteBuffer.copy(this, mark);}
public long ramBytesUsed() {long sizeInBytes = 0;for(FieldIndexData entry : fields.values()) {sizeInBytes += entry.ramBytesUsed();}return sizeInBytes;}
public CreateTransitGatewayRouteTableResult createTransitGatewayRouteTable(CreateTransitGatewayRouteTableRequest request) {request = beforeClientExecution(request);return executeCreateTransitGatewayRouteTable(request);}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_color1 =  LittleEndian.getInt( data, pos + size );size+=4;field_2_color2 =  LittleEndian.getInt( data, pos + size );size+=4;field_3_color3 =  LittleEndian.getInt( data, pos + size );size+=4;field_4_color4 =  LittleEndian.getInt( data, pos + size );size+=4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException("Expecting no remaining data but got " + bytesRemaining + " byte(s).");}return 8 + size + bytesRemaining;}
public CharSequence[] getMultiFields() {return getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);}
public boolean hasNext() {return returnedNumber < getObjectCount();}
public String toString() {return SpatialArgsParser.writeSpatialArgs(this);}
public static RowRecord createRow(int rowNumber) {return new RowRecord(rowNumber);}
public void serialize(LittleEndianOutput out) {out.writeByte(field_1_last_column_index);out.writeByte(field_2_first_column_index);out.writeShort(field_3_row_index);ConstantValueParser.encode(out, field_4_constant_values);}
public DescribeHostReservationOfferingsResult describeHostReservationOfferings(DescribeHostReservationOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeHostReservationOfferings(request);}
public void setEmpty() {field_2_first_col = 0;field_3_last_col = 0;}
public CancelBundleTaskResult cancelBundleTask(CancelBundleTaskRequest request) {request = beforeClientExecution(request);return executeCancelBundleTask(request);}
public ShingleFilter(TokenStream input, String tokenType) {this(input, DEFAULT_MIN_SHINGLE_SIZE, DEFAULT_MAX_SHINGLE_SIZE);setTokenType(tokenType);}
public MergeException(String message, Directory dir) {super(message);this.dir = dir;}
public TestDNSAnswerResult testDNSAnswer(TestDNSAnswerRequest request) {request = beforeClientExecution(request);return executeTestDNSAnswer(request);}
public String getFieldAsString() {return field.toString();}
public GetMasterAccountResult getMasterAccount(GetMasterAccountRequest request) {request = beforeClientExecution(request);return executeGetMasterAccount(request);}
public int getIndexVersion() {return indexVersion;}
public GetAdmChannelResult getAdmChannel(GetAdmChannelRequest request) {request = beforeClientExecution(request);return executeGetAdmChannel(request);}
public boolean equals(Object obj) {if (! (obj instanceof BasicQueryFactory))return false;BasicQueryFactory other = (BasicQueryFactory) obj;return atMax() == other.atMax();}
public byte readByte() {return (byte)readUByte();}
public DeletePolicyResult deletePolicy(DeletePolicyRequest request) {request = beforeClientExecution(request);return executeDeletePolicy(request);}
public String get(Object key) {return idMap.get(key);}
public void setNonLocalizedMessage(Message message) {this.message = message;}
public DescribeClusterVersionsResult describeClusterVersions() {return describeClusterVersions(new DescribeClusterVersionsRequest());}
public void onPostReceive(ReceivePack rp,Collection<ReceiveCommand> commands) {for (int i = 0; i < count; i++)hooks[i].onPostReceive(rp, commands);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("^");buffer.append(operands[ 1 ]);return buffer.toString();}
public int stem(char s[], int len) {if (len < 6)return len;if (s[len-1] == 'x') {if (s[len-3] == 'a' && s[len-2] == 'u')s[len-2] = 'l';return len - 1;}if (s[len-1] == 's') len--;if (s[len-1] == 'r') len--;if (s[len-1] == 'e') len--;if (s[len-1] == 'é') len--;if (s[len-1] == s[len-2] && Character.isLetter(s[len-1])) len--;return len;}
public static RkRec[] parseRKs(RecordInputStream in) {int nItems = (in.remaining()-2) / ENCODED_SIZE;RkRec[] retval = new RkRec[nItems];for (int i=0; i<nItems; i++) {retval[i] = new RkRec(in);}return retval;}
public boolean deliverSelfNotifications() {return true;}
public CreateWorkteamResult createWorkteam(CreateWorkteamRequest request) {request = beforeClientExecution(request);return executeCreateWorkteam(request);}
public ProfilingATNSimulator(Parser parser) {super(parser,parser.getInterpreter().atn,parser.getInterpreter().decisionToDFA,parser.getInterpreter().sharedContextCache);numDecisions = atn.decisionToState.size();decisions = new DecisionInfo[numDecisions];for (int i=0; i<numDecisions; i++) {decisions[i] = new DecisionInfo(i);}}
public DescribeDeliveryStreamResult describeDeliveryStream(DescribeDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeDescribeDeliveryStream(request);}
public boolean hasNext() {return link.next != list.voidLink;}
public static double product(double[] values) {double product = 0;if (values!=null && values.length > 0) {product = 1;for (double value : values) {product *= value;}}return product;}
public RebaseCommand setUpstream(String upstream)throws RefNotFoundException {try {ObjectId upstreamId = repo.resolve(upstream);if (upstreamId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, upstream));upstreamCommit = walk.parseCommit(repo.resolve(upstream));upstreamCommitName = upstream;return this;} catch (IOException ioe) {throw new JGitInternalException(ioe.getMessage(), ioe);}}
public ATN(ATNType grammarType, int maxTokenType) {this.grammarType = grammarType;this.maxTokenType = maxTokenType;}
public HyphenatedWordsFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetBlueprintsResult getBlueprints(GetBlueprintsRequest request) {request = beforeClientExecution(request);return executeGetBlueprints(request);}
public synchronized StringBuffer append(StringBuffer sb) {if (sb == null) {appendNull();} else {synchronized (sb) {append0(sb.getValue(), 0, sb.length());}}return this;}
public EngineDefaults describeEngineDefaultClusterParameters(DescribeEngineDefaultClusterParametersRequest request) {request = beforeClientExecution(request);return executeDescribeEngineDefaultClusterParameters(request);}
public DeleteLaunchTemplateResult deleteLaunchTemplate(DeleteLaunchTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteLaunchTemplate(request);}
public Object toObject() {assert exists || (false == value);return exists ? value : null;}
public ObjectReader newObjectReader() {return getObjectDatabase().newReader();}
public String toString() {String nl = System.getProperty("line.separtor");StringBuilder result = new StringBuilder();result.append('[').append(getRecordName()).append(']').append(nl);for (EscherRecord escherRecord : getEscherRecords()) {result.append(escherRecord);}result.append("[/").append(getRecordName()).append(']').append(nl);return result.toString();}
public GetSnapshotBlockResult getSnapshotBlock(GetSnapshotBlockRequest request) {request = beforeClientExecution(request);return executeGetSnapshotBlock(request);}
public HSSFComment createComment(HSSFAnchor anchor) {HSSFComment shape = new HSSFComment(null, anchor);addShape(shape);onCreate(shape);return shape;}
public CopySnapshotResult copySnapshot(CopySnapshotRequest request) {request = beforeClientExecution(request);return executeCopySnapshot(request);}
public String toString() {return "<quotedfield start='" + this.begin + "' end='" + this.end+ "' field='" + this.field + "' term='" + this.text + "'/>";}
public void write(int b) throws IOException {throw new IllegalStateException(JGitText.get().writingNotPermitted);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {String needle = TextFunction.evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);return eval(haystack, needle, 0);} catch (EvaluationException e) {return e.getErrorEval();}}
public NumberMatcher(double value, CmpOp operator) {super(operator);_value = value;}
public GroupingSearch setCachingInMB(double maxCacheRAMMB, boolean cacheScores) {this.maxCacheRAMMB = maxCacheRAMMB;this.maxDocsToCache = null;this.cacheScores = cacheScores;return this;}
public DescribeRegionsResult describeRegions(DescribeRegionsRequest request) {request = beforeClientExecution(request);return executeDescribeRegions(request);}
public ListApplicationRevisionsResult listApplicationRevisions(ListApplicationRevisionsRequest request) {request = beforeClientExecution(request);return executeListApplicationRevisions(request);}
public int set(int index, long[] arr, int off, int len) {long max = 0;for (int i = off, end = off + len; i < end; ++i) {max |= arr[i];}ensureCapacity(max);return current.set(index, arr, off, len);}
public MutableValue duplicate() {MutableValueDate v = new MutableValueDate();v.value = this.value;v.exists = this.exists;return v;}
public DeleteUserResult deleteUser(DeleteUserRequest request) {request = beforeClientExecution(request);return executeDeleteUser(request);}
public String getPath() {return path;}
public ListVerifiedEmailAddressesResult listVerifiedEmailAddresses() {return listVerifiedEmailAddresses(new ListVerifiedEmailAddressesRequest());}
public DescribeStackResourceResult describeStackResource(DescribeStackResourceRequest request) {request = beforeClientExecution(request);return executeDescribeStackResource(request);}
public MetricsTagPredicate(Tag tag) {this.tag = tag;}
public void remove() {if (last == null) {throw new IllegalStateException();}removeInternal(last);expectedModCount = modCount;last = null;}
public void setExecutor(Executor executor) {this.executor = executor;}
public boolean hasDirectoryEntry() {EmbeddedObjectRefSubRecord subRecord = findObjectRecord();Integer streamId = subRecord.getStreamId();return streamId != null && streamId.intValue() != 0;}
public K higherKey(K key) {Entry<K, V> entry = findBounded(key, HIGHER);return entry != null ? entry.getKey() : null;}
public void exitRule() {if ( matchedEOF ) {_ctx.stop = _input.LT(1); }else {_ctx.stop = _input.LT(-1); }if ( _parseListeners != null) triggerExitRuleEvent();setState(_ctx.invokingState);_ctx = (ParserRuleContext)_ctx.parent;}
public DeleteTrafficPolicyInstanceResult deleteTrafficPolicyInstance(DeleteTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficPolicyInstance(request);}
public boolean check(final int level) {int currentLevel;try {currentLevel = Integer.parseInt(System.getProperty("poi.log.level", WARN + ""));} catch (SecurityException e) {currentLevel = POILogger.DEBUG;}return level >= currentLevel;}
public ShortBuffer put(short c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public DeletePublicKeyResult deletePublicKey(DeletePublicKeyRequest request) {request = beforeClientExecution(request);return executeDeletePublicKey(request);}
public ObjectId idFor(int type, byte[] data) {return delegate().idFor(type, data);}
public DeleteDBProxyResult deleteDBProxy(DeleteDBProxyRequest request) {request = beforeClientExecution(request);return executeDeleteDBProxy(request);}
public void add(int n) {if (count == entries.length)grow();entries[count++] = n;}
public PortugueseStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DisconnectParticipantResult disconnectParticipant(DisconnectParticipantRequest request) {request = beforeClientExecution(request);return executeDisconnectParticipant(request);}
public ObjectId getPeeledObjectId() {return null;}
public DeleteParameterGroupResult deleteParameterGroup(DeleteParameterGroupRequest request) {request = beforeClientExecution(request);return executeDeleteParameterGroup(request);}
public TextRecord(RecordInputStream in) {field_1_horizontalAlignment = in.readByte();field_2_verticalAlignment   = in.readByte();field_3_displayMode         = in.readShort();field_4_rgbColor            = in.readInt();field_5_x                   = in.readInt();field_6_y                   = in.readInt();field_7_width               = in.readInt();field_8_height              = in.readInt();field_9_options1            = in.readShort();field_10_indexOfColorValue  = in.readShort();field_11_options2           = in.readShort();field_12_textRotation       = in.readShort();}
public ReflogCommand setRef(String ref) {checkCallable();this.ref = ref;return this;}
@Override public boolean contains(Object object) {Object[] a = array;int s = size;if (object != null) {for (int i = 0; i < s; i++) {if (object.equals(a[i])) {return true;}}} else {for (int i = 0; i < s; i++) {if (a[i] == null) {return true;}}}return false;}
public CreateFpgaImageResult createFpgaImage(CreateFpgaImageRequest request) {request = beforeClientExecution(request);return executeCreateFpgaImage(request);}
public DescribeAggregateIdFormatResult describeAggregateIdFormat(DescribeAggregateIdFormatRequest request) {request = beforeClientExecution(request);return executeDescribeAggregateIdFormat(request);}
public ListMultipartUploadsRequest(String vaultName) {setVaultName(vaultName);}
public DeleteRepoRequest() {super("cr", "2016-06-07", "DeleteRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]");setMethod(MethodType.DELETE);}
public static BOFRecord createSheetBOF() {return new BOFRecord(TYPE_WORKSHEET);}
public FloatBuffer put(float[] src, int srcOffset, int floatCount) {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, floatCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, floatCount);}this.position += floatCount;return this;}
public void execute(Lexer lexer) {lexer.popMode();}
public DeleteImageRequest() {super("cr", "2016-06-07", "DeleteImage", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags/[Tag]");setMethod(MethodType.DELETE);}
public CreateImageBuilderResult createImageBuilder(CreateImageBuilderRequest request) {request = beforeClientExecution(request);return executeCreateImageBuilder(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(getRow());out.writeShort(getColumn());out.writeShort(getXFIndex());}
public UpdateSegmentResult updateSegment(UpdateSegmentRequest request) {request = beforeClientExecution(request);return executeUpdateSegment(request);}
public DescribeSnapshotsResult describeSnapshots() {return describeSnapshots(new DescribeSnapshotsRequest());}
public AddNoteCommand setObjectId(RevObject id) {checkCallable();this.id = id;return this;}
public String toString() {return path;}
public GetMetricStatisticsResult getMetricStatistics(GetMetricStatisticsRequest request) {request = beforeClientExecution(request);return executeGetMetricStatistics(request);}
public DescribeAutoScalingInstancesResult describeAutoScalingInstances(DescribeAutoScalingInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeAutoScalingInstances(request);}
public TokenFilter create(TokenStream input) {return new KStemFilter(input);}
public CreateEnvironmentRequest(String applicationName, String environmentName) {setApplicationName(applicationName);setEnvironmentName(environmentName);}
public static LongBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteLongArrayBuffer(capacity);}
public GetIdentityMailFromDomainAttributesResult getIdentityMailFromDomainAttributes(GetIdentityMailFromDomainAttributesRequest request) {request = beforeClientExecution(request);return executeGetIdentityMailFromDomainAttributes(request);}
public boolean isForce() {return force;}
public DescribeImageScanFindingsResult describeImageScanFindings(DescribeImageScanFindingsRequest request) {request = beforeClientExecution(request);return executeDescribeImageScanFindings(request);}
public SendContactMethodVerificationResult sendContactMethodVerification(SendContactMethodVerificationRequest request) {request = beforeClientExecution(request);return executeSendContactMethodVerification(request);}
public DeleteReceiptFilterResult deleteReceiptFilter(DeleteReceiptFilterRequest request) {request = beforeClientExecution(request);return executeDeleteReceiptFilter(request);}
public void updateFormulaResult(ValueEval result, CellCacheEntry[] sensitiveInputCells, FormulaUsedBlankCellSet usedBlankAreas) {updateValue(result);setSensitiveInputCells(sensitiveInputCells);_usedBlankCellGroup = usedBlankAreas;}
public String toString() {final StringBuilder r = new StringBuilder();r.append("("); for (int i = 0; i < subfilters.length; i++) {if (i > 0)r.append(" OR "); r.append(subfilters[i].toString());}r.append(")"); return r.toString();}
public boolean equals( Object o ) {return o instanceof FrenchStemmer;}
public MergedCellsTable() {_mergedRegions = new ArrayList<>();}
public PrecedencePredicateTransition(ATNState target, int precedence) {super(target);this.precedence = precedence;}
public String toFormulaString() {throw new RuntimeException("Coding Error: Expected ExpPtg to be converted from Shared to Non-Shared Formula by ValueRecordsAggregate, but it wasn't");}
public ParseTree getChild(int i) {return children!=null && i>=0 && i<children.size() ? children.get(i) : null;}
public ListIterator<E> listIterator(int index) {return delegate().listIterator(index); }
public StringBuffer getBuffer() {return buf;}
public BytesRefHash(ByteBlockPool pool, int capacity, BytesStartArray bytesStartArray) {hashSize = capacity;hashHalfSize = hashSize >> 1;hashMask = hashSize - 1;this.pool = pool;ids = new int[hashSize];Arrays.fill(ids, -1);this.bytesStartArray = bytesStartArray;bytesStart = bytesStartArray.init();bytesUsed = bytesStartArray.bytesUsed() == null? Counter.newCounter() : bytesStartArray.bytesUsed();bytesUsed.addAndGet(hashSize * Integer.BYTES);}
public GetIdentityDkimAttributesResult getIdentityDkimAttributes(GetIdentityDkimAttributesRequest request) {request = beforeClientExecution(request);return executeGetIdentityDkimAttributes(request);}
public DescribeSubnetsResult describeSubnets(DescribeSubnetsRequest request) {request = beforeClientExecution(request);return executeDescribeSubnets(request);}
public final void serialize(LittleEndianOutput out) {if (getTextLength() > 0) {out.writeShort(getTextLength());out.writeByte(field_2_hasMultibyte ? 0x01 : 0x00);if (field_2_hasMultibyte) {StringUtil.putUnicodeLE(field_3_text, out);} else {StringUtil.putCompressedUnicode(field_3_text, out);}}}
public DeleteMessageRequest(String queueUrl, String receiptHandle) {setQueueUrl(queueUrl);setReceiptHandle(receiptHandle);}
public int find(char[] key, int start) {int d;char p = root;int i = start;char c;while (p != 0) {if (sc[p] == 0xFFFF) {if (strcmp(key, i, kv.getArray(), lo[p]) == 0) {return eq[p];} else {return -1;}}c = key[i];d = c - sc[p];if (d == 0) {if (c == 0) {return eq[p];}i++;p = eq[p];} else if (d < 0) {p = lo[p];} else {p = hi[p];}}return -1;}
public DescribeIdFormatResult describeIdFormat(DescribeIdFormatRequest request) {request = beforeClientExecution(request);return executeDescribeIdFormat(request);}
public void setCharAt(int index, char ch) {if (index < 0 || index >= count) {throw indexAndLength(index);}if (shared) {value = value.clone();shared = false;}value[index] = ch;}
public FieldFragList createFieldFragList(FieldPhraseList fieldPhraseList,int fragCharSize) {FieldFragList ffl = new SimpleFieldFragList( fragCharSize );List<WeightedPhraseInfo> wpil = new ArrayList<>();Iterator<WeightedPhraseInfo> ite = fieldPhraseList.phraseList.iterator();WeightedPhraseInfo phraseInfo = null;while( true ){if( !ite.hasNext() ) break;phraseInfo = ite.next();if( phraseInfo == null ) break;wpil.add( phraseInfo );}if( wpil.size() > 0 )ffl.add( 0, Integer.MAX_VALUE, wpil );return ffl;}
public List<String> getModifiedList() {return modifiedList;}
public synchronized int capacity() {return elementData.length;}
public GermanLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void setAnchor(short col1, int row1, int x1, int y1, short col2, int row2, int x2, int y2) {checkRange(getDx1(), 0, 1023, "dx1");checkRange(getDx2(), 0, 1023, "dx2");checkRange(getDy1(), 0, 255, "dy1");checkRange(getDy2(), 0, 255, "dy2");checkRange(getCol1(), 0, MAX_COL, "col1");checkRange(getCol2(), 0, MAX_COL, "col2");checkRange(getRow1(), 0, MAX_ROW, "row1");checkRange(getRow2(), 0, MAX_ROW, "row2");setCol1(col1);setRow1(row1);setDx1(x1);setDy1(y1);setCol2(col2);setRow2(row2);setDx2(x2);setDy2(y2);}
public static ErrorEval valueOf(int errorCode) {FormulaError error = FormulaError.forInt(errorCode);ErrorEval eval = evals.get(error);if (eval != null) {return eval;} else {throw new RuntimeException("Unhandled error type for code " + errorCode);}}
public static long calculateChecksum(byte[] data) {Checksum sum = new CRC32();sum.update(data, 0, data.length);return sum.getValue();}
public RevCommit lookupCommit(AnyObjectId id) {RevCommit c = (RevCommit) objects.get(id);if (c == null) {c = createCommit(id);objects.add(c);}return c;}
public String toString() {QueryText text = this.values.get(0);return "<path start='" + text.begin + "' end='" + text.end + "' path='"+ getPathString() + "'/>";}
public TokenStream create(TokenStream input) {StopFilter stopFilter = new StopFilter(input,stopWords);return stopFilter;}
public DeleteStreamProcessorResult deleteStreamProcessor(DeleteStreamProcessorRequest request) {request = beforeClientExecution(request);return executeDeleteStreamProcessor(request);}
public RuleWithSetExceptions(String suffix, int min, String replacement,String[] exceptions) {super(suffix, min, replacement);for (int i = 0; i < exceptions.length; i++) {if (!exceptions[i].endsWith(suffix))throw new RuntimeException("useless exception '" + exceptions[i] + "' does not end with '" + suffix + "'");}this.exceptions = new CharArraySet(Arrays.asList(exceptions), false);}
public CreateClientVpnRouteResult createClientVpnRoute(CreateClientVpnRouteRequest request) {request = beforeClientExecution(request);return executeCreateClientVpnRoute(request);}
public RangeTransition(ATNState target, int from, int to) {super(target);this.from = from;this.to = to;}
public TypeAsPayloadTokenFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void fromRaw(int[] ints, int p) {w1 = ints[p];w2 = ints[p + 1];w3 = ints[p + 2];w4 = ints[p + 3];w5 = ints[p + 4];}
public ICUNormalizer2Filter(TokenStream input, Normalizer2 normalizer) {super(input);this.normalizer = normalizer;}
public static TreeFilter create(TreeFilter a) {return new NotTreeFilter(a);}
public boolean isMalformed() {return this.type == TYPE_MALFORMED_INPUT;}
public void enterRecursionRule(ParserRuleContext localctx, int state, int ruleIndex, int precedence) {Pair<ParserRuleContext, Integer> pair = new Pair<ParserRuleContext, Integer>(_ctx, localctx.invokingState);_parentContextStack.push(pair);super.enterRecursionRule(localctx, state, ruleIndex, precedence);}
public DescribeAddressesResult describeAddresses(DescribeAddressesRequest request) {request = beforeClientExecution(request);return executeDescribeAddresses(request);}
public int getEstimatedUniqueValues(){return getEstimatedNumberUniqueValuesAllowingForCollisions(bloomSize, filter.cardinality());}
public DescribeTransformJobResult describeTransformJob(DescribeTransformJobRequest request) {request = beforeClientExecution(request);return executeDescribeTransformJob(request);}
public HeaderFooterRecord clone() {return copy();}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block0 = blocks[blocksOffset++];values[valuesOffset++] = block0 >>> 40;values[valuesOffset++] = (block0 >>> 16) & 16777215L;final long block1 = blocks[blocksOffset++];values[valuesOffset++] = ((block0 & 65535L) << 8) | (block1 >>> 56);values[valuesOffset++] = (block1 >>> 32) & 16777215L;values[valuesOffset++] = (block1 >>> 8) & 16777215L;final long block2 = blocks[blocksOffset++];values[valuesOffset++] = ((block1 & 255L) << 16) | (block2 >>> 48);values[valuesOffset++] = (block2 >>> 24) & 16777215L;values[valuesOffset++] = block2 & 16777215L;}}
public FieldInfo fieldInfo(int fieldNumber) {if (fieldNumber < 0) {throw new IllegalArgumentException("Illegal field number: " + fieldNumber);}if (fieldNumber >= byNumber.length) {return null;}return byNumber[fieldNumber];}
public DescribeIdentityPoolResult describeIdentityPool(DescribeIdentityPoolRequest request) {request = beforeClientExecution(request);return executeDescribeIdentityPool(request);}
public static String getText(Node e) {StringBuilder sb = new StringBuilder();getTextBuffer(e, sb);return sb.toString();}
public void delete(int key) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {removeAt(i);}}
public GetCurrentMetricDataResult getCurrentMetricData(GetCurrentMetricDataRequest request) {request = beforeClientExecution(request);return executeGetCurrentMetricData(request);}
public void append(String name, FileMode mode, AnyObjectId id) {append(encode(name), mode, id);}
public final String replacement() {return replacementChars;}
public WindowProtectRecord(boolean protect) {this(0);setProtect(protect);}
public static boolean equals(long[] array1, long[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public PredictionContext getParent(int index) {assert index == 0;return parent;}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {return "*:*";}
public SeekStatus seekCeil(BytesRef term) throws IOException {throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");}
public BindInstance2VpcRequest() {super("Ots", "2016-06-20", "BindInstance2Vpc", "ots");setMethod(MethodType.POST);}
public UpdateTableResult updateTable(String tableName, ProvisionedThroughput provisionedThroughput) {return updateTable(new UpdateTableRequest().withTableName(tableName).withProvisionedThroughput(provisionedThroughput));}
public boolean get(int index) {return in.get(docMap.newToOld(index));}
public GetQueueAttributesResult getQueueAttributes(GetQueueAttributesRequest request) {request = beforeClientExecution(request);return executeGetQueueAttributes(request);}
public UpdateUserRoutingProfileResult updateUserRoutingProfile(UpdateUserRoutingProfileRequest request) {request = beforeClientExecution(request);return executeUpdateUserRoutingProfile(request);}
public int getMidIx() {int ixDiff = _highIx - _lowIx;if(ixDiff < 2) {return -1;}return _lowIx + (ixDiff / 2);}
public MergeResult getMergeResult() {return this.mergeResult;}
public void setAsActiveCell(){int row=_record.getRow();short col=_record.getColumn();_sheet.getSheet().setActiveCellRow(row);_sheet.getSheet().setActiveCellCol(col);}
public InviteMembersResult inviteMembers(InviteMembersRequest request) {request = beforeClientExecution(request);return executeInviteMembers(request);}
public FormatTrackingHSSFListener(HSSFListener childListener) {this(childListener, LocaleUtil.getUserLocale());}
public UpdateDistributionRequest(DistributionConfig distributionConfig, String id, String ifMatch) {setDistributionConfig(distributionConfig);setId(id);setIfMatch(ifMatch);}
public GetLogEventsRequest(String logGroupName, String logStreamName) {setLogGroupName(logGroupName);setLogStreamName(logStreamName);}
public String toString() {return "FlushInfo [numDocs=" + numDocs + ", estimatedSegmentSize="+ estimatedSegmentSize + "]";}
public GrowableWriter resize(int newSize) {GrowableWriter next = new GrowableWriter(getBitsPerValue(), newSize, acceptableOverheadRatio);final int limit = Math.min(size(), newSize);PackedInts.copy(current, 0, next, 0, limit, PackedInts.DEFAULT_BUFFER_SIZE);return next;}
public Analyzer(ReuseStrategy reuseStrategy) {this.reuseStrategy = reuseStrategy;}
public void reset() {prevAccept.reset();startIndex = -1;line = 1;charPositionInLine = 0;mode = Lexer.DEFAULT_MODE;}
public EmbeddedObjectRefSubRecord() {field_2_unknownFormulaData = new byte[] { 0x02, 0x6C, 0x6A, 0x16, 0x01, }; field_6_unknown = EMPTY_BYTE_ARRAY;field_4_ole_classname = null;}
public String toString() {return "doc=" + doc + " score=" + score + " shardIndex=" + shardIndex;}
public static double kthLargest(double[] v, int k) {double r = Double.NaN;int index = k-1; if (v!=null && v.length > index && index >= 0) {Arrays.sort(v);r = v[v.length-index-1];}return r;}
public int get(int forwardId, int backwardId) {int offset = (backwardId * forwardSize + forwardId) * 2;return buffer.getShort(offset);}
public void sort() {Arrays.sort(entries, 0, count);}
public BM25FQuery build() {int size = fieldAndWeights.size() * termsSet.size();if (size > IndexSearcher.getMaxClauseCount()) {throw new IndexSearcher.TooManyClauses();}BytesRef[] terms = termsSet.toArray(new BytesRef[0]);return new BM25FQuery(similarity, new TreeMap<>(fieldAndWeights), terms);}
public LexerCustomAction(int ruleIndex, int actionIndex) {this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;}
public DescribeDevicePolicyConfigurationResult describeDevicePolicyConfiguration(DescribeDevicePolicyConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeDevicePolicyConfiguration(request);}
public CreateLBCookieStickinessPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}
public static short[] grow(short[] array) {return grow(array, 1 + array.length);}
public static AttrPtg createSpace(int type, int count) {int data = type & 0x00FF | (count << 8) & 0x00FFFF;return new AttrPtg(space.set(0), data, null, -1);}
public boolean equals(Object o) {return (o instanceof FontRecord) && sameProperties((FontRecord) o);}
public void setDSTSavings(int milliseconds) {if (milliseconds > 0) {dstSavings = milliseconds;} else {throw new IllegalArgumentException();}}
public DescribeAccountResult describeAccount(DescribeAccountRequest request) {request = beforeClientExecution(request);return executeDescribeAccount(request);}
public int getCellsVal() {int size = 0;for (Row row : rows)size += row.getCellsVal();return size;}
public boolean equalsSameType(Object other) {assert exists || (false == value);MutableValueBool b = (MutableValueBool)other;return value == b.value && exists == b.exists;}
public K next() {Node<K,V> n = next;advance();return n.key;}
public DBCluster createDBCluster(CreateDBClusterRequest request) {request = beforeClientExecution(request);return executeCreateDBCluster(request);}
public boolean equals(Object o) {if (!(o instanceof FormatRun)) {return false;}FormatRun other = (FormatRun) o;return _character == other._character && _fontIndex == other._fontIndex;}
public static ValueEval getSingleValue(ValueEval arg, int srcCellRow, int srcCellCol)throws EvaluationException {final ValueEval result;if (arg instanceof RefEval) {result = chooseSingleElementFromRef((RefEval) arg);} else if (arg instanceof AreaEval) {result = chooseSingleElementFromArea((AreaEval) arg, srcCellRow, srcCellCol);} else {result = arg;}if (result instanceof ErrorEval) {throw new EvaluationException((ErrorEval) result);}return result;}
public GermanStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ClusterSubnetGroup modifyClusterSubnetGroup(ModifyClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyClusterSubnetGroup(request);}
public FacetLabel subpath(final int length) {if (length >= this.length || length < 0) {return this;} else {return new FacetLabel(this, length);}}
public DataValidationConstraint createDecimalConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createNumericConstraint(ValidationType.DECIMAL, operatorType, formula1, formula2);}
public ByteBuffer put(byte b) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = b;return this;}
public DescribeUserProfileResult describeUserProfile(DescribeUserProfileRequest request) {request = beforeClientExecution(request);return executeDescribeUserProfile(request);}
public K firstKey() {Entry<K, V> entry = endpoint(true);if (entry == null) {throw new NoSuchElementException();}return entry.getKey();}
public DescribeAutoScalingGroupsResult describeAutoScalingGroups(DescribeAutoScalingGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeAutoScalingGroups(request);}
public Class<RefsChangedListener> getListenerType() {return RefsChangedListener.class;}
public int getWordCost(int wordId) {return WORD_COST;}
public void serialize(LittleEndianOutput out) {out.writeByte(field_1_horizontalAlignment);out.writeByte(field_2_verticalAlignment);out.writeShort(field_3_displayMode);out.writeInt(field_4_rgbColor);out.writeInt(field_5_x);out.writeInt(field_6_y);out.writeInt(field_7_width);out.writeInt(field_8_height);out.writeShort(field_9_options1);out.writeShort(field_10_indexOfColorValue);out.writeShort(field_11_options2);out.writeShort(field_12_textRotation);}
public LinkedDataRecord getDataCategoryLabels(){return dataCategoryLabels;}
public void setStringValue(String value) {collator.getRawCollationKey(value, key);bytes.bytes = key.bytes;bytes.offset = 0;bytes.length = key.size;}
public String toString() {return "FacetField(dim=" + dim + " path=" + Arrays.toString(path) + ")";}
public static long gcd(long a, long b) {a = Math.abs(a);b = Math.abs(b);if (a == 0) {return b;} else if (b == 0) {return a;}final int commonTrailingZeros = Long.numberOfTrailingZeros(a | b);a >>>= Long.numberOfTrailingZeros(a);while (true) {b >>>= Long.numberOfTrailingZeros(b);if (a == b) {break;} else if (a > b || a == Long.MIN_VALUE) { final long tmp = a;a = b;b = tmp;}if (a == 1) {break;}b -= a;}return a << commonTrailingZeros;}
public BatchRefUpdate disableRefLog() {refLogMessage = null;refLogIncludeResult = false;return this;}
public static int compareTo(Ref o1, String o2) {return o1.getName().compareTo(o2);}
public CreateLoadBalancerTlsCertificateResult createLoadBalancerTlsCertificate(CreateLoadBalancerTlsCertificateRequest request) {request = beforeClientExecution(request);return executeCreateLoadBalancerTlsCertificate(request);}
public GetDocumentationPartsResult getDocumentationParts(GetDocumentationPartsRequest request) {request = beforeClientExecution(request);return executeGetDocumentationParts(request);}
public Iterator<RevFlag> iterator() {final Iterator<RevFlag> i = active.iterator();return new Iterator<RevFlag>() {private RevFlag current;@Override
public boolean equals(Object o) {if (this == o) return true;if (!(o instanceof Sort)) return false;final Sort other = (Sort)o;return Arrays.equals(this.fields, other.fields);}
public boolean equals(final Object o){boolean rval = false;if ((o != null) && (o.getClass() == this.getClass())){if (this == o){rval = true;}else{POIFSDocumentPath path = ( POIFSDocumentPath ) o;if (path.components.length == this.components.length){rval = true;for (int j = 0; j < this.components.length; j++){if (!path.components[ j ].equals(this.components[ j ])){rval = false;break;}}}}}return rval;}
public SearchImageRequest() {super("ImageSearch", "2019-03-25", "SearchImage", "imagesearch");setUriPattern("/v2/image/search");setMethod(MethodType.POST);}
public RevFlagSet() {active = new ArrayList<>();}
public BatchDisassociateUserStackResult batchDisassociateUserStack(BatchDisassociateUserStackRequest request) {request = beforeClientExecution(request);return executeBatchDisassociateUserStack(request);}
public FloatBuffer get(float[] dst) {return get(dst, 0, dst.length);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[ftEnd]\n");buffer.append("[/ftEnd]\n");return buffer.toString();}
public InputStreamDataInput(InputStream is) {this.is = is;}
public static char[] grow(char[] array) {return grow(array, 1 + array.length);}
public void showMessage(String msg) {provider.get(uri, new CredentialItem.InformationalMessage(msg));}
public DeregisterTypeResult deregisterType(DeregisterTypeRequest request) {request = beforeClientExecution(request);return executeDeregisterType(request);}
public final void add(RevFlagSet set) {flags |= set.mask;}
public IntList(final IntList list){this(list._array.length);System.arraycopy(list._array, 0, _array, 0, _array.length);_limit = list._limit;}
public int convertFromExternSheetIndex(int externSheetIndex) {return _iBook.getFirstSheetIndexFromExternSheetIndex(externSheetIndex);}
public ExternalSheet getExternalSheet(String firstSheetName, String lastSheetName, int externalWorkbookNumber) {throw new IllegalStateException("XSSF-style external references are not supported for HSSF");}
public CellRangeAddress8Bit copy() {return new CellRangeAddress8Bit(getFirstRow(), getLastRow(), getFirstColumn(), getLastColumn());}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (obj instanceof Document == false)return false;Document other = (Document) obj;if (other.getBytes() == null ^ this.getBytes() == null)return false;if (other.getBytes() != null && other.getBytes().equals(this.getBytes()) == false)return false;if (other.getS3Object() == null ^ this.getS3Object() == null)return false;if (other.getS3Object() != null && other.getS3Object().equals(this.getS3Object()) == false)return false;return true;}
public ListMembersResult listMembers(ListMembersRequest request) {request = beforeClientExecution(request);return executeListMembers(request);}
public String toString() {final StringBuilder s = new StringBuilder();for (Block q = head; q != null; q = q.next) {for (int i = q.headIndex; i < q.tailIndex; i++)describe(s, q.commits[i]);}return s.toString();}
public void delete() {if (!deleted) {deleted = true;commitsToDelete.add(this);}}
public final boolean isWritten() {return 1 < getOffset(); }
public static Cell translateUnicodeValues(Cell cell) {String s = cell.getRichStringCellValue().getString();boolean foundUnicode = false;String lowerCaseStr = s.toLowerCase(Locale.ROOT);for (UnicodeMapping entry : unicodeMappings) {String key = entry.entityName;if (lowerCaseStr.contains(key)) {s = s.replaceAll(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode) {cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(s));}return cell;}
public DeleteCampaignResult deleteCampaign(DeleteCampaignRequest request) {request = beforeClientExecution(request);return executeDeleteCampaign(request);}
public String toFormulaString() {return formatReferenceAsString();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {TwoDEval reference = convertFirstArg(arg0);try {int columnIx = resolveIndexArg(arg2, srcRowIndex, srcColumnIndex);int rowIx = resolveIndexArg(arg1, srcRowIndex, srcColumnIndex);return getValueFromArea(reference, rowIx, columnIx);} catch (EvaluationException e) {return e.getErrorEval();}}
public URISyntaxException(String input, String reason) {super(reason);if (input == null || reason == null) {throw new NullPointerException();}this.input = input;index = -1;}
public int append(BytesRef bytes) {if (lastElement >= offsets.length) {int oldLen = offsets.length;offsets = ArrayUtil.grow(offsets, offsets.length + 1);bytesUsed.addAndGet((offsets.length - oldLen) * Integer.BYTES);}pool.append(bytes);offsets[lastElement++] = currentOffset;currentOffset += bytes.length;return lastElement-1;}
public EscherAggregate(boolean createDefaultTree) {if (createDefaultTree){buildBaseTree();}}
public NumericDocValuesField(String name, Long value) {super(name, TYPE);fieldsData = value;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_index);}
public AssociateDeviceWithNetworkProfileResult associateDeviceWithNetworkProfile(AssociateDeviceWithNetworkProfileRequest request) {request = beforeClientExecution(request);return executeAssociateDeviceWithNetworkProfile(request);}
public void add(DirCacheEntry newEntry) {if (newEntry.getRawMode() == 0)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().fileModeNotSetForPath,newEntry.getPathString()));beforeAdd(newEntry);fastAdd(newEntry);}
public ValueEval getEvalForCell(int rowIndex, int columnIndex) {return _bookEvaluator.evaluateReference(getSheet(), _sheetIndex, rowIndex, columnIndex, _tracker);}
public static RevFilter create(String pattern) {if (pattern.length() == 0)throw new IllegalArgumentException(JGitText.get().cannotMatchOnEmptyString);if (SubStringRevFilter.safe(pattern))return new SubStringSearch(pattern);return new PatternSearch(pattern);}
public ObjectId getResultTreeId() {return sourceTrees[treeIndex];}
public MoPenQueryCanvasRequest() {super("MoPen", "2018-02-11", "MoPenQueryCanvas", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public DescribeTrialResult describeTrial(DescribeTrialRequest request) {request = beforeClientExecution(request);return executeDescribeTrial(request);}
public DeleteCommentResult deleteComment(DeleteCommentRequest request) {request = beforeClientExecution(request);return executeDeleteComment(request);}
public DeleteCacheSecurityGroupRequest(String cacheSecurityGroupName) {setCacheSecurityGroupName(cacheSecurityGroupName);}
public ParseTreePattern(ParseTreePatternMatcher matcher,String pattern, int patternRuleIndex, ParseTree patternTree){this.matcher = matcher;this.patternRuleIndex = patternRuleIndex;this.pattern = pattern;this.patternTree = patternTree;}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(PERCENT);return buffer.toString();}
public GetVaultLockResult getVaultLock(GetVaultLockRequest request) {request = beforeClientExecution(request);return executeGetVaultLock(request);}
public DecreaseStreamRetentionPeriodResult decreaseStreamRetentionPeriod(DecreaseStreamRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeDecreaseStreamRetentionPeriod(request);}
public void append(String name, RevTree tree) {append(name, TREE, tree);}
public String getSessionToken() {return sessionToken;}
public ListIterator<E> listIterator(int index) {Object[] snapshot = elements;if (index < 0 || index > snapshot.length) {throw new IndexOutOfBoundsException("index=" + index + ", length=" + snapshot.length);}CowIterator<E> result = new CowIterator<E>(snapshot, 0, snapshot.length);result.index = index;return result;}
public synchronized Span[] getTerms(String sentence) {if (tokenizer == null) {Span[] span1 = new Span[1];span1[0] = new Span(0, sentence.length());return span1;}return tokenizer.tokenizePos(sentence);}
public DeleteRelationalDatabaseSnapshotResult deleteRelationalDatabaseSnapshot(DeleteRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteRelationalDatabaseSnapshot(request);}
public CheckDomainAvailabilityResult checkDomainAvailability(CheckDomainAvailabilityRequest request) {request = beforeClientExecution(request);return executeCheckDomainAvailability(request);}
public DeleteVaultRequest(String vaultName) {setVaultName(vaultName);}
public InputStream getInputStream() {return rawIn;}
public final byte[] getBytes(int sizeLimit) throws LargeObjectException,MissingObjectException, IOException {byte[] cached = getCachedBytes(sizeLimit);try {return cloneArray(cached);} catch (OutOfMemoryError tooBig) {throw new LargeObjectException.OutOfMemory(tooBig);}}
public HSSFSimpleShape createSimpleShape(HSSFClientAnchor anchor) {HSSFSimpleShape shape = new HSSFSimpleShape(null, anchor);addShape(shape);onCreate(shape);return shape;}
public synchronized V remove(Object key) {int hash = secondaryHash(key.hashCode());HashtableEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);for (HashtableEntry<K, V> e = tab[index], prev = null;e != null; prev = e, e = e.next) {if (e.hash == hash && key.equals(e.key)) {if (prev == null) {tab[index] = e.next;} else {prev.next = e.next;}modCount++;size--;return e.value;}}return null;}
public final ValueEval getValue(int sheetIndex, int row, int col) {return getRelativeValue(sheetIndex, row, col);}
public SetIdentityNotificationTopicResult setIdentityNotificationTopic(SetIdentityNotificationTopicRequest request) {request = beforeClientExecution(request);return executeSetIdentityNotificationTopic(request);}
public void serialize(LittleEndianOutput out) {out.write(_rawData);}
public BlockJoinWeight(Query joinQuery, Weight childWeight, BitSetProducer parentsFilter, ScoreMode scoreMode) {super(joinQuery, childWeight);this.parentsFilter = parentsFilter;this.scoreMode = scoreMode;}
public Builder() {this.field = null;this.termArrays = new ArrayList<>();this.positions = new ArrayList<>();this.slop = 0;}
public CreateGameSessionQueueResult createGameSessionQueue(CreateGameSessionQueueRequest request) {request = beforeClientExecution(request);return executeCreateGameSessionQueue(request);}
public DescribeMetricCollectionTypesResult describeMetricCollectionTypes() {return describeMetricCollectionTypes(new DescribeMetricCollectionTypesRequest());}
@Override public boolean contains(Object o) {if (o instanceof Entry) {Entry<?> entry = (Entry<?>) o;int count = count(entry.getElement());return (count == entry.getCount()) && (count > 0);}return false;}
public synchronized int get(FacetLabel categoryPath) {Integer res = cache.get(categoryPath);if (res == null) {return -1;}return res.intValue();}
@Override public boolean containsKey(Object key) {if (key == null) {return entryForNullKey != null;}int hash = key.hashCode();hash ^= (hash >>> 20) ^ (hash >>> 12);hash ^= (hash >>> 7) ^ (hash >>> 4);HashMapEntry<K, V>[] tab = table;for (HashMapEntry<K, V> e = tab[hash & (tab.length - 1)];e != null; e = e.next) {K eKey = e.key;if (eKey == key || (e.hash == hash && key.equals(eKey))) {return true;}}return false;}
public boolean equals(Object obj) {if (obj instanceof Point) {Point that = (Point) obj;return this.x == that.x && this.y == that.y;}return false;}
public void message(String component, String message) {assert false: "message() should not be called when isEnabled returns false";}
public ListWorkerBlocksResult listWorkerBlocks(ListWorkerBlocksRequest request) {request = beforeClientExecution(request);return executeListWorkerBlocks(request);}
public ListProvisionedCapacityResult listProvisionedCapacity(ListProvisionedCapacityRequest request) {request = beforeClientExecution(request);return executeListProvisionedCapacity(request);}
@Override public boolean contains(Object value) {return containsValue(value);}
public void exitEveryRule(ParserRuleContext ctx) {if (ctx.children instanceof ArrayList) {((ArrayList<?>)ctx.children).trimToSize();}}
public int lookup(char[] text, int offset, int len) {if(!characterDefinition.isGroup(text[offset])) {return 1;}byte characterIdOfFirstCharacter = characterDefinition.getCharacterClass(text[offset]);int length = 1;for (int i = 1; i < len; i++) {if (characterIdOfFirstCharacter == characterDefinition.getCharacterClass(text[offset+i])){length++;} else {break;}}return length;}
public GetJobOutputResult getJobOutput(GetJobOutputRequest request) {request = beforeClientExecution(request);return executeGetJobOutput(request);}
public void write(char b[], int off, int len) {reserve(len);unsafeWrite(b, off, len);}
public String toString() {return "weight(" + TermQuery.this + ")";}
public int[] grow() {ParallelPostingsArray postingsArray = perField.postingsArray;final int oldSize = perField.postingsArray.size;postingsArray = perField.postingsArray = postingsArray.grow();perField.newPostingsArray();bytesUsed.addAndGet((postingsArray.bytesPerPosting() * (postingsArray.size - oldSize)));return postingsArray.textStarts;}
public String toString() {return "'"+text+"'";}
public boolean isMatch() {if (heads.isEmpty())return false;final ListIterator<Head> headIterator = heads.listIterator(heads.size());while (headIterator.hasPrevious()) {final Head head = headIterator.previous();if (head == LastHead.INSTANCE) {return true;}}return false;}
public CRNRecord[] getCrns() {return _crns.clone();}
public String toString() {return "slot:" + slot + " " + super.toString();}
public int apply(char s[], int len) {if (len < min)return len;if (suffixes != null) {boolean found = false;for (int i = 0; i < suffixes.length; i++)if (endsWith(s, len, suffixes[i])) {found = true;break;}if (!found) return len;}for (int i = 0; i < rules.length; i++) {if (rules[i].matches(s, len))return rules[i].replace(s, len);}return len;}
public ModifyInstanceAttributeRequest(String instanceId, InstanceAttributeName attribute) {setInstanceId(instanceId);setAttribute(attribute.toString());}
public ListEventTrackersResult listEventTrackers(ListEventTrackersRequest request) {request = beforeClientExecution(request);return executeListEventTrackers(request);}
public boolean isNewFragment() {boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags);if (isNewFrag) {currentNumFrags++;}return isNewFrag;}
public BatchGetQueryExecutionResult batchGetQueryExecution(BatchGetQueryExecutionRequest request) {request = beforeClientExecution(request);return executeBatchGetQueryExecution(request);}
public static double cos(double a) {if (a < 0.0) {a = -a;}if (a > SIN_COS_MAX_VALUE_FOR_INT_MODULO) {return Math.cos(a);}int index = (int)(a * SIN_COS_INDEXER + 0.5);double delta = (a - index * SIN_COS_DELTA_HI) - index * SIN_COS_DELTA_LO;index &= (SIN_COS_TABS_SIZE-2); double indexCos = cosTab[index];double indexSin = sinTab[index];return indexCos + delta * (-indexSin + delta * (-indexCos * ONE_DIV_F2 + delta * (indexSin * ONE_DIV_F3 + delta * indexCos * ONE_DIV_F4)));}
public ByteBuffer putLong(long value) {throw new ReadOnlyBufferException();}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");sb.append("sheetIx=").append(getExternSheetIndex());sb.append(" ! ");sb.append(formatReferenceAsString());sb.append("]");return sb.toString();}
public STSAssumeRoleSessionCredentialsProvider(AlibabaCloudCredentials longLivedCredentials,String roleArn, IClientProfile clientProfile) {this(new StaticCredentialsProvider(longLivedCredentials), roleArn, clientProfile);}
public SessionToken(String id, Revision revision) {this.id = id;this.version = revision.getVersion();this.sourceFiles = revision.getSourceFiles();}
public Collection<String> call() throws GitAPIException {checkCallable();try (SubmoduleWalk generator = SubmoduleWalk.forIndex(repo)) {if (!paths.isEmpty())generator.setFilter(PathFilterGroup.createFromStrings(paths));StoredConfig config = repo.getConfig();List<String> initialized = new ArrayList<>();while (generator.next()) {if (generator.getConfigUrl() != null)continue;String path = generator.getPath();String name = generator.getModuleName();String url = generator.getRemoteUrl();String update = generator.getModulesUpdate();if (url != null)config.setString(ConfigConstants.CONFIG_SUBMODULE_SECTION,name, ConfigConstants.CONFIG_KEY_URL, url);if (update != null)config.setString(ConfigConstants.CONFIG_SUBMODULE_SECTION,name, ConfigConstants.CONFIG_KEY_UPDATE, update);if (url != null || update != null)initialized.add(path);}if (!initialized.isEmpty())config.save();return initialized;} catch (IOException | ConfigInvalidException e) {throw new JGitInternalException(e.getMessage(), e);}}
public CreateVaultRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public BooleanQueryNode(List<QueryNode> clauses) {setLeaf(false);allocate();set(clauses);}
public DVALRecord() {field_cbo_id = 0xFFFFFFFF;field_5_dv_no = 0x00000000;}
public ListConfigurationsResult listConfigurations(ListConfigurationsRequest request) {request = beforeClientExecution(request);return executeListConfigurations(request);}
public String toFormulaString() {throw new RuntimeException("3D references need a workbook to determine formula text");}
public int LA(int i) { return LT(i).getType(); }
public void setCellValue(boolean value) {int row=_record.getRow();short col=_record.getColumn();short styleIndex=_record.getXFIndex();switch (_cellType) {default:setCellType(CellType.BOOLEAN, false, row, col, styleIndex);case BOOLEAN:(( BoolErrRecord ) _record).setValue(value);break;case FORMULA:((FormulaRecordAggregate)_record).setCachedBooleanResult(value);break;}}
public UntagDeliveryStreamResult untagDeliveryStream(UntagDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeUntagDeliveryStream(request);}
public CJKBigramFilterFactory(Map<String,String> args) {super(args);int flags = 0;if (getBoolean(args, "han", true)) {flags |= CJKBigramFilter.HAN;}if (getBoolean(args, "hiragana", true)) {flags |= CJKBigramFilter.HIRAGANA;}if (getBoolean(args, "katakana", true)) {flags |= CJKBigramFilter.KATAKANA;}if (getBoolean(args, "hangul", true)) {flags |= CJKBigramFilter.HANGUL;}this.flags = flags;this.outputUnigrams = getBoolean(args, "outputUnigrams", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static int toChars(int[] src, int srcOff, int srcLen, char[] dest, int destOff) {if (srcLen < 0) {throw new IllegalArgumentException("srcLen must be >= 0");}int written = 0;for (int i = 0; i < srcLen; ++i) {written += Character.toChars(src[srcOff + i], dest, destOff + written);}return written;}
public StoredField(String name, long value) {super(name, TYPE);fieldsData = value;}
public static CFRuleRecord create(HSSFSheet sheet, byte comparisonOperation,String formulaText1, String formulaText2) {Ptg[] formula1 = parseFormula(formulaText1, sheet);Ptg[] formula2 = parseFormula(formulaText2, sheet);return new CFRuleRecord(CONDITION_TYPE_CELL_VALUE_IS, comparisonOperation, formula1, formula2);}
public int newSlice(final int size) {if (byteUpto > BYTE_BLOCK_SIZE-size)nextBuffer();final int upto = byteUpto;byteUpto += size;buffer[byteUpto-1] = 16;return upto;}
public DescribeWorkspaceDirectoriesResult describeWorkspaceDirectories() {return describeWorkspaceDirectories(new DescribeWorkspaceDirectoriesRequest());}
public String toString() {return getClass().getName() + " [" +_functionName +"]";}
public void writeBytes(int stream, byte[] b, int offset, int len) {final int end = offset + len;for(int i=offset;i<end;i++)writeByte(stream, b[i]);}
public GetExportSnapshotRecordsResult getExportSnapshotRecords(GetExportSnapshotRecordsRequest request) {request = beforeClientExecution(request);return executeGetExportSnapshotRecords(request);}
public DeleteMessageResult deleteMessage(String queueUrl, String receiptHandle) {return deleteMessage(new DeleteMessageRequest().withQueueUrl(queueUrl).withReceiptHandle(receiptHandle));}
public ModifyInstanceAttributeResult modifyInstanceAttribute(ModifyInstanceAttributeRequest request) {request = beforeClientExecution(request);return executeModifyInstanceAttribute(request);}
public static float[] copyOfRange(float[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);float[] result = new float[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public TokenFilter create(TokenStream input) {SnowballStemmer program;try {program = stemClass.getConstructor().newInstance();} catch (Exception e) {
public GetPhotosByMd5sRequest() {super("CloudPhoto", "2017-07-11", "GetPhotosByMd5s", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public StartOutboundVoiceContactResult startOutboundVoiceContact(StartOutboundVoiceContactRequest request) {request = beforeClientExecution(request);return executeStartOutboundVoiceContact(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_x);out.writeInt(field_2_y);out.writeInt(field_3_width);out.writeInt(field_4_height);}
public String getEmailAddress() {return emailAddress;}
public ValueEval getRelativeValue(int sheetIndex, int relativeRowIndex, int relativeColumnIndex) {int rowIx = (relativeRowIndex + getFirstRow() ) ;int colIx = (relativeColumnIndex + getFirstColumn() ) ;return _evaluator.getEvalForCell(sheetIndex, rowIx, colIx);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append('[');for (byte[] b : table) {if (b == null)continue;if (sb.length() > 1)sb.append(" , "); sb.append('"');sb.append(RawParseUtils.decode(b));sb.append('"');sb.append('(');sb.append(chainlength(b));sb.append(')');}sb.append(']');return sb.toString();}
public void stopNow() {super.stopNow();if (runningParallelTasks != null) {for(ParallelTask t : runningParallelTasks) {if (t != null) {t.task.stopNow();}}}}
public UpdateLogPatternResult updateLogPattern(UpdateLogPatternRequest request) {request = beforeClientExecution(request);return executeUpdateLogPattern(request);}
public FileMode getMode() {return mode;}
public ValueEval getEvalForCell(int sheetIndex, int rowIndex, int columnIndex) {return getSheetEvaluator(sheetIndex).getEvalForCell(rowIndex, columnIndex);}
public String toString() {final StringBuilder buffer = new StringBuilder();for (Class<?> clazz = getClass(); clazz != null; clazz = clazz.getSuperclass()) {if (!clazz.isAnonymousClass()) {buffer.append(clazz.getSimpleName());break;}}buffer.append('(');final List<? extends IndexReader> subReaders = getSequentialSubReaders();assert subReaders != null;if (!subReaders.isEmpty()) {buffer.append(subReaders.get(0));for (int i = 1, c = subReaders.size(); i < c; ++i) {buffer.append(" ").append(subReaders.get(i));}}buffer.append(')');return buffer.toString();}
public CreateTypedLinkFacetResult createTypedLinkFacet(CreateTypedLinkFacetRequest request) {request = beforeClientExecution(request);return executeCreateTypedLinkFacet(request);}
public PutResolverRulePolicyResult putResolverRulePolicy(PutResolverRulePolicyRequest request) {request = beforeClientExecution(request);return executePutResolverRulePolicy(request);}
public ConfirmPublicVirtualInterfaceResult confirmPublicVirtualInterface(ConfirmPublicVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeConfirmPublicVirtualInterface(request);}
public FieldInfo add(FieldInfo fi) {return add(fi, -1);}
public AssociateFleetResult associateFleet(AssociateFleetRequest request) {request = beforeClientExecution(request);return executeAssociateFleet(request);}
public void close() {ctx.close();}
public InclusiveRange(long start, long end) {assert end >= start;this.start = start;this.end = end;}
public UpdateProfilingGroupResult updateProfilingGroup(UpdateProfilingGroupRequest request) {request = beforeClientExecution(request);return executeUpdateProfilingGroup(request);}
public void seekExact(long ord) throws IOException {throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");}
public DetectStackSetDriftResult detectStackSetDrift(DetectStackSetDriftRequest request) {request = beforeClientExecution(request);return executeDetectStackSetDrift(request);}
public ListConfigurationProfilesResult listConfigurationProfiles(ListConfigurationProfilesRequest request) {request = beforeClientExecution(request);return executeListConfigurationProfiles(request);}
public int getFormat() {return FORMAT_OTHER;}
public K lastKey() {Entry<K, V> entry = endpoint(false);if (entry == null) {throw new NoSuchElementException();}return entry.getKey();}
public final void writeChars(String str) throws IOException {write(str.getBytes("UTF-16BE"));}
public UpdateFleetPortSettingsResult updateFleetPortSettings(UpdateFleetPortSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateFleetPortSettings(request);}
public RuleTransition(RuleStartState ruleStart,int ruleIndex,int precedence,ATNState followState){super(ruleStart);this.ruleIndex = ruleIndex;this.precedence = precedence;this.followState = followState;}
public GetConferenceProviderResult getConferenceProvider(GetConferenceProviderRequest request) {request = beforeClientExecution(request);return executeGetConferenceProvider(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values,int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}
public void serialize(LittleEndianOutput out) {out.write(_data);}
public void upgrade() throws IOException {if (!DirectoryReader.indexExists(dir)) {throw new IndexNotFoundException(dir.toString());}if (!deletePriorCommits) {final Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);if (commits.size() > 1) {throw new IllegalArgumentException("This tool was invoked to not delete prior commit points, but the following commits were found: " + commits);}}iwc.setMergePolicy(new UpgradeIndexMergePolicy(iwc.getMergePolicy()));iwc.setIndexDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());try (final IndexWriter w = new IndexWriter(dir, iwc)) {InfoStream infoStream = iwc.getInfoStream();if (infoStream.isEnabled(LOG_PREFIX)) {infoStream.message(LOG_PREFIX, "Upgrading all pre-" + Version.LATEST + " segments of index directory '" + dir + "' to version " + Version.LATEST + "...");}w.forceMerge(1);if (infoStream.isEnabled(LOG_PREFIX)) {infoStream.message(LOG_PREFIX, "All segments upgraded to version " + Version.LATEST);infoStream.message(LOG_PREFIX, "Enforcing commit to rewrite all index metadata...");}w.setLiveCommitData(w.getLiveCommitData()); assert w.hasUncommittedChanges();w.commit();if (infoStream.isEnabled(LOG_PREFIX)) {infoStream.message(LOG_PREFIX, "Committed upgraded metadata to index.");}}}
public byte[] getThumbnailAsWMF() throws HPSFException{if (!(getClipboardFormatTag() == CFTAG_WINDOWS))throw new HPSFException("Clipboard Format Tag of Thumbnail must " +"be CFTAG_WINDOWS.");if (!(getClipboardFormat() == CF_METAFILEPICT)) {throw new HPSFException("Clipboard Format of Thumbnail must " +"be CF_METAFILEPICT.");}byte[] thumbnail = getThumbnail();int wmfImageLength = thumbnail.length - OFFSET_WMFDATA;byte[] wmfImage = new byte[wmfImageLength];System.arraycopy(thumbnail,OFFSET_WMFDATA,wmfImage,0,wmfImageLength);return wmfImage;}
public DescribeKeyPhrasesDetectionJobResult describeKeyPhrasesDetectionJob(DescribeKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeKeyPhrasesDetectionJob(request);}
public LabelAndValue(String label, Number value) {this.label = label;this.value = value;}
public RebaseCommand setUpstreamName(String upstreamName) {if (upstreamCommit == null) {throw new IllegalStateException("setUpstreamName must be called after setUpstream."); }this.upstreamCommitName = upstreamName;return this;}
public SearchDashboardsResult searchDashboards(SearchDashboardsRequest request) {request = beforeClientExecution(request);return executeSearchDashboards(request);}
public ClusterSubnetGroup createClusterSubnetGroup(CreateClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateClusterSubnetGroup(request);}
public static int endOfFooterLineKey(byte[] raw, int ptr) {try {for (;;) {final byte c = raw[ptr];if (footerLineKeyChars[c] == 0) {if (c == ':')return ptr;return -1;}ptr++;}} catch (ArrayIndexOutOfBoundsException e) {return -1;}}
public final char[] GetSuffix(int len) {char[] value = new char[len];System.arraycopy(buffer, bufferPosition - len, value, 0, len);return value;}
public boolean containsValue(Object value) {if(value instanceof CustomProperty) {return props.containsValue(value);}for(CustomProperty cp : props.values()) {if(cp.getValue() == value) {return true;}}return false;}
public RecordInputStream createDecryptingStream(InputStream original) {String userPassword = Biff8EncryptionKey.getCurrentUserPassword();if (userPassword == null) {userPassword = Decryptor.DEFAULT_PASSWORD;}EncryptionInfo info = _filePassRec.getEncryptionInfo();try {if (!info.getDecryptor().verifyPassword(userPassword)) {throw new EncryptedDocumentException((Decryptor.DEFAULT_PASSWORD.equals(userPassword) ? "Default" : "Supplied")+ " password is invalid for salt/verifier/verifierHash");}} catch (GeneralSecurityException e) {throw new EncryptedDocumentException(e);}return new RecordInputStream(original, info, _initialRecordsSize);}
public UpdateComponentConfigurationResult updateComponentConfiguration(UpdateComponentConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateComponentConfiguration(request);}
public String toString() {CellReference crA = new CellReference(getFirstRow(), getFirstColumn());CellReference crB = new CellReference(getLastRow(), getLastColumn());return getClass().getName() + "[" +_evaluator.getSheetNameRange() +'!' +crA.formatAsString() +':' +crB.formatAsString() +"]";}
public SetDesiredCapacityResult setDesiredCapacity(SetDesiredCapacityRequest request) {request = beforeClientExecution(request);return executeSetDesiredCapacity(request);}
public long getTotalLLATNLookaheadOps() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long k = 0;for (int i = 0; i < decisions.length; i++) {k += decisions[i].LL_ATNTransitions;}return k;}
public ListQueuesResult listQueues(ListQueuesRequest request) {request = beforeClientExecution(request);return executeListQueues(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | (byte2 >>> 4);final long byte3 = blocks[blocksOffset++] & 0xFF;final long byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;}}
public EnableVolumeIOResult enableVolumeIO(EnableVolumeIORequest request) {request = beforeClientExecution(request);return executeEnableVolumeIO(request);}
public long seek(BytesRef target) throws IOException {current = fstEnum.seekFloor(target);return current.output;}
public GetStreamingDistributionConfigRequest(String id) {setId(id);}
public WordnetSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {super(dedup, analyzer);this.expand = expand;}
public DescribeProblemResult describeProblem(DescribeProblemRequest request) {request = beforeClientExecution(request);return executeDescribeProblem(request);}
public E floor(E e) {return backingMap.floorKey(e);}
public IrishLowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public EnableAvailabilityZonesForLoadBalancerRequest(String loadBalancerName, java.util.List<String> availabilityZones) {setLoadBalancerName(loadBalancerName);setAvailabilityZones(availabilityZones);}
public DescribeLoadBalancerTargetGroupsResult describeLoadBalancerTargetGroups(DescribeLoadBalancerTargetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeLoadBalancerTargetGroups(request);}
public Snapshot copySnapshot(CopySnapshotRequest request) {request = beforeClientExecution(request);return executeCopySnapshot(request);}
public Map<String, String> readForHideArrayItem(String response, String endpoint) {return readForHideItem(new StringCharacterIterator(response), endpoint, FIRST_POSITION);}
public LbsDropData(LittleEndianInput in) {_wStyle = in.readUShort();_cLine = in.readUShort();_dxMin = in.readUShort();_str = StringUtil.readUnicodeString(in);if(StringUtil.getEncodedSize(_str) % 2 != 0){_unused = in.readByte();}}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 60; shift >= 0; shift -= 4) {values[valuesOffset++] = (block >>> shift) & 15;}}}
public int doLogic() throws Exception {final String docID = doc.get(DocMaker.ID_FIELD);if (docID == null) {throw new IllegalStateException("document must define the docid field");}final IndexWriter iw = getRunData().getIndexWriter();iw.updateDocument(new Term(DocMaker.ID_FIELD, docID), doc);return 1;}
public ListInstanceFleetsResult listInstanceFleets(ListInstanceFleetsRequest request) {request = beforeClientExecution(request);return executeListInstanceFleets(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex,ValueEval arg0, ValueEval arg1) {return func.evaluate(srcRowIndex, srcColumnIndex, arg0, arg1);}
public DescribeDBParametersResult describeDBParameters(DescribeDBParametersRequest request) {request = beforeClientExecution(request);return executeDescribeDBParameters(request);}
public CreateFargateProfileResult createFargateProfile(CreateFargateProfileRequest request) {request = beforeClientExecution(request);return executeCreateFargateProfile(request);}
public char previous() {if (offset == start) {return DONE;}return string.charAt(--offset);}
public List<String> call() throws GitAPIException {checkCallable();List<String> result = new ArrayList<>();if (tags.isEmpty())return result;try {setCallable(false);for (String tagName : tags) {if (tagName == null)continue;Ref currentRef = repo.findRef(tagName);if (currentRef == null)continue;String fullName = currentRef.getName();RefUpdate update = repo.updateRef(fullName);update.setForceUpdate(true);Result deleteResult = update.delete();boolean ok = true;switch (deleteResult) {case IO_FAILURE:case LOCK_FAILURE:case REJECTED:ok = false;break;default:break;}if (ok) {result.add(fullName);} elsethrow new JGitInternalException(MessageFormat.format(JGitText.get().deleteTagUnexpectedResult,deleteResult.name()));}return result;} catch (IOException ioe) {throw new JGitInternalException(ioe.getMessage(), ioe);}}
public static void fill(byte[] array, byte value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public CreateSampleFindingsResult createSampleFindings(CreateSampleFindingsRequest request) {request = beforeClientExecution(request);return executeCreateSampleFindings(request);}
public Builder() {slop = 0;terms = new ArrayList<>();positions = new ArrayList<>();}
public boolean run(char[] s, int offset, int length) {int p = 0;int l = offset + length;for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {p = step(p, cp = Character.codePointAt(s, i, l));if (p == -1) return false;}return accept.get(p);}
public String toFormulaString() {return "ERR#";}
public void close() {synchronized (lock) {if (out != null) {try {out.close();} catch (IOException e) {setError();}out = null;}}}
public int fillFields( byte[] data, int offset,EscherRecordFactory recordFactory ){int bytesRemaining = readHeader( data, offset );short propertiesCount = readInstance( data, offset );int pos = offset + 8;EscherPropertyFactory f = new EscherPropertyFactory();properties.clear();properties.addAll( f.createProperties( data, pos, propertiesCount ) );return bytesRemaining + 8;}
public EveryNOrDocFreqTermSelector(int docFreqThresh, int interval) {this.interval = interval;this.docFreqThresh = docFreqThresh;count = interval;}
public UpdateAvailabilityOptionsResult updateAvailabilityOptions(UpdateAvailabilityOptionsRequest request) {request = beforeClientExecution(request);return executeUpdateAvailabilityOptions(request);}
public AddInstanceFleetResult addInstanceFleet(AddInstanceFleetRequest request) {request = beforeClientExecution(request);return executeAddInstanceFleet(request);}
public synchronized void setMax(int max) {super.setMax(max);if ((mKeyProgressIncrement == 0) || (getMax() / mKeyProgressIncrement > 20)) {setKeyProgressIncrement(Math.max(1, Math.round((float) getMax() / 20)));}}
public LazyAreaEval getRow(int rowIndex) {if (rowIndex >= getHeight()) {throw new IllegalArgumentException("Invalid rowIndex " + rowIndex+ ".  Allowable range is (0.." + getHeight() + ").");}int absRowIx = getFirstRow() + rowIndex;return new LazyAreaEval(absRowIx, getFirstColumn(), absRowIx, getLastColumn(), _evaluator);}
public IntervalSet getExpectedTokens(int stateNumber, RuleContext context) {if (stateNumber < 0 || stateNumber >= states.size()) {throw new IllegalArgumentException("Invalid state number.");}RuleContext ctx = context;ATNState s = states.get(stateNumber);IntervalSet following = nextTokens(s);if (!following.contains(Token.EPSILON)) {return following;}IntervalSet expected = new IntervalSet();expected.addAll(following);expected.remove(Token.EPSILON);while (ctx != null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {ATNState invokingState = states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = nextTokens(rt.followState);expected.addAll(following);expected.remove(Token.EPSILON);ctx = ctx.parent;}if (following.contains(Token.EPSILON)) {expected.add(Token.EOF);}return expected;}
public UntagResourceResult untagResource(UntagResourceRequest request) {request = beforeClientExecution(request);return executeUntagResource(request);}
public String getInflectionForm(int wordId) {return null;}
public Ref3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, CellReference c) {super(c);this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.getSheetIdentifier().getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();} else {this.lastSheetName = null;}}
public ModifyJumpserverPasswordRequest() {super("HPC", "2016-06-03", "ModifyJumpserverPassword", "hpc");setMethod(MethodType.POST);}
public SearchLocalGatewayRoutesResult searchLocalGatewayRoutes(SearchLocalGatewayRoutesRequest request) {request = beforeClientExecution(request);return executeSearchLocalGatewayRoutes(request);}
public void write(byte[] buffer) throws IOException {write(buffer, 0, buffer.length);}
public ExtendedPivotTableViewFieldsRecord(RecordInputStream in) {_grbit1 = in.readInt();_grbit2 = in.readUByte();_citmShow = in.readUByte();_isxdiSort = in.readUShort();_isxdiShow = in.readUShort();switch (in.remaining()) {case 0:_reserved1 = 0;_reserved2 = 0;_subtotalName = null;return;case 10:break;default:throw new RecordFormatException("Unexpected remaining size (" + in.remaining() + ")");}int cchSubName = in.readUShort();_reserved1 = in.readInt();_reserved2 = in.readInt();if (cchSubName != STRING_NOT_PRESENT_LEN) {_subtotalName = in.readUnicodeLEString(cchSubName);}}
public static double cosh(double d) {double ePowX = Math.pow(Math.E, d);double ePowNegX = Math.pow(Math.E, -d);return (ePowX + ePowNegX) / 2;}
public List<String> getDFAStrings() {synchronized (_interp.decisionToDFA) {List<String> s = new ArrayList<String>();for (int d = 0; d < _interp.decisionToDFA.length; d++) {DFA dfa = _interp.decisionToDFA[d];s.add( dfa.toString(getVocabulary()) );}return s;}}
public LexerChannelAction(int channel) {this.channel = channel;}
public MappingCharFilter(NormalizeCharMap normMap, Reader in) {super(in);buffer.reset(in);map = normMap.map;cachedRootArcs = normMap.cachedRootArcs;if (map != null) {fstReader = map.getBytesReader();} else {fstReader = null;}}
public String toString() {String newline = System.getProperty("line.separator");StringBuilder sb = new StringBuilder();sb.append(sequence.toString());sb.append(newline);return sb.toString();}
public void visitContainedRecords(RecordVisitor rv) {for (CFRecordsAggregate subAgg : _cfHeaders) {subAgg.visitContainedRecords(rv);}}
public static boolean equals(short[] array1, short[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public String getString(){return getString(field_2_bytes, codepage);}
public SimpleDate(Calendar cal) {year = cal.get(Calendar.YEAR);month = cal.get(Calendar.MONTH) + 1;day = cal.get(Calendar.DAY_OF_MONTH);tsMilliseconds = cal.getTimeInMillis();}
public TreeFilter clone() {throw new IllegalStateException("Do not clone this kind of filter: " + getClass().getName());}
public String getText(Interval interval) {int start = interval.a;int stop = interval.b;if ( start<0 || stop<0 ) return "";fill();if ( stop>=tokens.size() ) stop = tokens.size()-1;StringBuilder buf = new StringBuilder();for (int i = start; i <= stop; i++) {Token t = tokens.get(i);if ( t.getType()==Token.EOF ) break;buf.append(t.getText());}return buf.toString();}
public CancelStepsResult cancelSteps(CancelStepsRequest request) {request = beforeClientExecution(request);return executeCancelSteps(request);}
public long ramBytesUsed() {return 0;}
public boolean contains(Object o) {return containsValue(o);}
public synchronized int codePointBefore(int index) {return super.codePointBefore(index);}
public DeleteApplicationRequest(String applicationName) {setApplicationName(applicationName);}
public LazyDocument(IndexReader reader, int docID) {this.reader = reader;this.docID = docID;}
public static int trimLeadingWhitespace(byte[] raw, int start, int end) {while (start < end && isWhitespace(raw[start]))start++;return start;}
public int[] getMap() {return map;}
public void set(E object) {iterator.set(object);}
public ModifyCurrentDBClusterCapacityResult modifyCurrentDBClusterCapacity(ModifyCurrentDBClusterCapacityRequest request) {request = beforeClientExecution(request);return executeModifyCurrentDBClusterCapacity(request);}
public CancelRepoBuildRequest() {super("cr", "2016-06-07", "CancelRepoBuild", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/cancel");setMethod(MethodType.POST);}
public LongBuffer get(long[] dst, int dstOffset, int longCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, longCount);if (longCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + longCount; ++i) {dst[i] = get();}return this;}
public SpreadsheetVersion getSpreadsheetVersion(){return SpreadsheetVersion.EXCEL97;}
public boolean equals(Object obj) {if (obj instanceof Point) {Point rhs = (Point) obj;return this.x == rhs.x && this.y == rhs.y;}return false;}
public int numNodes() {return numNodes(rootNode);}
public String toString() {return super.toString() + flags;}
public EnglishPossessiveFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static double atanh(double d) {return Math.log((1 + d)/(1 - d)) / 2;}
public WindowsIndexInput clone() {WindowsIndexInput clone = (WindowsIndexInput)super.clone();clone.isClone = true;return clone;}
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal,String[] tokenImageVal){super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));currentToken = currentTokenVal;expectedTokenSequences = expectedTokenSequencesVal;tokenImage = tokenImageVal;}
public long getTotalATNLookaheadOps() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long k = 0;for (int i = 0; i < decisions.length; i++) {k += decisions[i].SLL_ATNTransitions;k += decisions[i].LL_ATNTransitions;}return k;}
public synchronized StringBuffer reverse() {reverse0();return this;}
public DescribeLoadBalancersRequest(java.util.List<String> loadBalancerNames) {setLoadBalancerNames(loadBalancerNames);}
public String toString() {return '~'+super.toString();}
public static ISignatureComposer getComposer() {if (null == composer) {composer = new RoaSignatureComposer();}return composer;}
public boolean ready() throws IOException {synchronized (lock) {if (buf == null) {throw new IOException("Reader is closed");}return (buf.length - pos > 0 || in.ready());}}
public GetClientCertificatesResult getClientCertificates(GetClientCertificatesRequest request) {request = beforeClientExecution(request);return executeGetClientCertificates(request);}
public static final int tagger(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 48; while (ptr < sz) {if (b[ptr] == '\n')return -1;final int m = match(b, ptr, tagger);if (m >= 0)return m;ptr = nextLF(b, ptr);}return -1;}
public GetInstanceStateResult getInstanceState(GetInstanceStateRequest request) {request = beforeClientExecution(request);return executeGetInstanceState(request);}
public boolean isEmpty() {synchronized (mutex) {return delegate().isEmpty();}}
public long getCount() {return cnt;}
public DeleteConfigurationSetEventDestinationResult deleteConfigurationSetEventDestination(DeleteConfigurationSetEventDestinationRequest request) {request = beforeClientExecution(request);return executeDeleteConfigurationSetEventDestination(request);}
public DeleteNetworkInterfacePermissionResult deleteNetworkInterfacePermission(DeleteNetworkInterfacePermissionRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkInterfacePermission(request);}
public Tag(String key, String value) {this.key = key;this.value = value;}
public CreateTrafficMirrorTargetResult createTrafficMirrorTarget(CreateTrafficMirrorTargetRequest request) {request = beforeClientExecution(request);return executeCreateTrafficMirrorTarget(request);}
public GetGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}
public DeleteVoiceChannelResult deleteVoiceChannel(DeleteVoiceChannelRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceChannel(request);}
public DBClusterSnapshotAttributesResult modifyDBClusterSnapshotAttribute(ModifyDBClusterSnapshotAttributeRequest request) {request = beforeClientExecution(request);return executeModifyDBClusterSnapshotAttribute(request);}
public RegisterAVSDeviceResult registerAVSDevice(RegisterAVSDeviceRequest request) {request = beforeClientExecution(request);return executeRegisterAVSDevice(request);}
public void setValue(char[] newValue) {clear();if (newValue != null) {value = new char[newValue.length];System.arraycopy(newValue, 0, value, 0, newValue.length);}}
public int compareSameType(Object other) {assert exists || 0.0D == value;MutableValueDouble b = (MutableValueDouble)other;int c = Double.compare(value, b.value);if (c != 0) return c;if (exists == b.exists) return 0;return exists ? 1 : -1;}
public UpdateCodeRepositoryResult updateCodeRepository(UpdateCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeUpdateCodeRepository(request);}
public static FormulaError forString(String code) throws IllegalArgumentException {FormulaError err = smap.get(code);if(err == null) throw new IllegalArgumentException("Unknown error code: " + code);return err;}
public UnmonitorInstancesResult unmonitorInstances(UnmonitorInstancesRequest request) {request = beforeClientExecution(request);return executeUnmonitorInstances(request);}
public boolean isInteractive() {return false;}
public void setColor(short byteIndex, byte red, byte green, byte blue){int i = byteIndex - FIRST_COLOR_INDEX;if (i < 0 || i >= STANDARD_PALETTE_SIZE){return;}while (_colors.size() <= i) {_colors.add(new PColor(0, 0, 0));}PColor custColor = new PColor(red, green, blue);_colors.set(i, custColor);}
public boolean isUser() {return type == Type.USER;}
public DeleteMeetingResult deleteMeeting(DeleteMeetingRequest request) {request = beforeClientExecution(request);return executeDeleteMeeting(request);}
public void serializeTokens(LittleEndianOutput out) {out.write(_byteEncoding, 0, _encodedTokenLen);}
final public QueryNode Query(CharSequence field) throws ParseException {Vector<QueryNode> clauses = null;QueryNode c, first=null;first = DisjQuery(field);label_1:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case NOT:case PLUS:case MINUS:case LPAREN:case QUOTED:case TERM:case REGEXPTERM:case RANGEIN_START:case RANGEEX_START:case NUMBER:;break;default:jj_la1[2] = jj_gen;break label_1;}c = DisjQuery(field);if (clauses == null) {clauses = new Vector<QueryNode>();clauses.addElement(first);}clauses.addElement(c);}if (clauses != null) {{if (true) return new BooleanQueryNode(clauses);}} else {if (first instanceof ModifierQueryNode) {ModifierQueryNode m = (ModifierQueryNode) first;if (m.getModifier() == ModifierQueryNode.Modifier.MOD_NOT) {{if (true) return new BooleanQueryNode(Arrays.<QueryNode> asList(m));}}}{if (true) return first;}}throw new Error("Missing return statement in function");}
public DBInstance rebootDBInstance(RebootDBInstanceRequest request) {request = beforeClientExecution(request);return executeRebootDBInstance(request);}
public SortedSet<E> tailSet(E start) {return tailSet(start, true);}
public static boolean equals(byte[] array1, byte[] array2, int length) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length < length || array2.length < length) {return false;}for (int i = 0; i < length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public boolean contains(Object o) {synchronized (mutex) {return delegate().contains(o);}}
public RestoreDomainAccessResult restoreDomainAccess(RestoreDomainAccessRequest request) {request = beforeClientExecution(request);return executeRestoreDomainAccess(request);}
static final public boolean wasEscaped(CharSequence text, int index) {if (text instanceof UnescapedCharSequence)return ((UnescapedCharSequence)text).wasEscaped[index];else return false;}
public void setCmd(Character way, int cmd) {Cell c = at(way);if (c == null) {c = new Cell();c.cmd = cmd;cells.put(way, c);} else {c.cmd = cmd;}c.cnt = (cmd >= 0) ? 1 : 0;}
public ValueRangeRecord(RecordInputStream in) {field_1_minimumAxisValue  = in.readDouble();field_2_maximumAxisValue  = in.readDouble();field_3_majorIncrement    = in.readDouble();field_4_minorIncrement    = in.readDouble();field_5_categoryAxisCross = in.readDouble();field_6_options           = in.readShort();}
public void addFiles(Collection<String> files) {checkFileNames(files);for (String f : files) {setFiles.add(namedForThisSegment(f));}}
public CreateClientVpnEndpointResult createClientVpnEndpoint(CreateClientVpnEndpointRequest request) {request = beforeClientExecution(request);return executeCreateClientVpnEndpoint(request);}
public static IntBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteIntArrayBuffer(capacity);}
public File getFile() {return attributes.getFile();}
public static CFRecordsAggregate createCFAggregate(RecordStream rs) {Record rec = rs.getNext();if (rec.getSid() != CFHeaderRecord.sid &&rec.getSid() != CFHeader12Record.sid) {throw new IllegalStateException("next record sid was " + rec.getSid()+ " instead of " + CFHeaderRecord.sid + " or " +CFHeader12Record.sid + " as expected");}CFHeaderBase header = (CFHeaderBase)rec;int nRules = header.getNumberOfConditionalFormats();CFRuleBase[] rules = new CFRuleBase[nRules];for (int i = 0; i < rules.length; i++) {rules[i] = (CFRuleBase) rs.getNext();}return new CFRecordsAggregate(header, rules);}
public void save() throws IOException {final byte[] out;final String text = toText();if (utf8Bom) {final ByteArrayOutputStream bos = new ByteArrayOutputStream();bos.write(0xEF);bos.write(0xBB);bos.write(0xBF);bos.write(text.getBytes(UTF_8));out = bos.toByteArray();} else {out = Constants.encode(text);}final LockFile lf = new LockFile(getFile());if (!lf.lock())throw new LockFailedException(getFile());try {lf.setNeedSnapshot(true);lf.write(out);if (!lf.commit())throw new IOException(MessageFormat.format(JGitText.get().cannotCommitWriteTo, getFile()));} finally {lf.unlock();}snapshot = lf.getCommitSnapshot();hash = hash(out);fireConfigChangedEvent();}
public DeleteTopicRequest(String topicArn) {setTopicArn(topicArn);}
public static boolean contains(CellRangeAddress crA, CellRangeAddress crB){return le(crA.getFirstRow(), crB.getFirstRow()) &&ge(crA.getLastRow(), crB.getLastRow()) &&le(crA.getFirstColumn(), crB.getFirstColumn()) &&ge(crA.getLastColumn(), crB.getLastColumn());}
@Override public void clear() {if (size != 0) {Arrays.fill(array, 0, size, null);size = 0;modCount++;}}
public String toString(){return this.getClass().toString();}
public CherryPickCommand include(Ref commit) {checkCallable();commits.add(commit);return this;}
public String toString() {return "NO_MERGES"; }
public FileMode getOldMode(int nthParent) {return oldModes[nthParent];}
public void reset(Reader reader) {this.reader = reader;nextPos = 0;nextWrite = 0;count = 0;end = false;}
public void serialize(LittleEndianOutput out) {String formatString = getFormatString();out.writeShort(getIndexCode());out.writeShort(formatString.length());out.writeByte(field_3_hasMultibyte ? 0x01 : 0x00);if ( field_3_hasMultibyte ) {StringUtil.putUnicodeLE( formatString, out);}  else {StringUtil.putCompressedUnicode( formatString, out);}}
public DescribePendingMaintenanceActionsResult describePendingMaintenanceActions(DescribePendingMaintenanceActionsRequest request) {request = beforeClientExecution(request);return executeDescribePendingMaintenanceActions(request);}
public DescribeServicesResult describeServices(DescribeServicesRequest request) {request = beforeClientExecution(request);return executeDescribeServices(request);}
public int getCachedResultType() {if (specialCachedValue == null) {return CellType.NUMERIC.getCode();}return specialCachedValue.getValueType();}
public boolean stem() {int v_1 = cursor;r_mark_regions();cursor = v_1;limit_backward = cursor;cursor = limit;int v_2 = limit - cursor;r_main_suffix();cursor = limit - v_2;int v_3 = limit - cursor;r_consonant_pair();cursor = limit - v_3;int v_4 = limit - cursor;r_other_suffix();cursor = limit - v_4;int v_5 = limit - cursor;r_undouble();cursor = limit - v_5;cursor = limit_backward;return true;}
public void setCachedResultErrorCode(int errorCode) {specialCachedValue = FormulaSpecialCachedValue.createCachedErrorCode(errorCode);}
public void setMinShingleSize(int minShingleSize) {if (minShingleSize < 2) {throw new IllegalArgumentException("Min shingle size must be >= 2");}if (minShingleSize > maxShingleSize) {throw new IllegalArgumentException("Min shingle size must be <= max shingle size");}this.minShingleSize = minShingleSize;gramSize = new CircularSequence();}
public void write(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.write(value);}
public int serializeSimplePart(byte[] data, int pos) {LittleEndian.putShort(data, pos, getId());LittleEndian.putInt(data, pos + 2, complexData.length);return 6;}
public InputMismatchException(Parser recognizer) {super(recognizer, recognizer.getInputStream(), recognizer._ctx);this.setOffendingToken(recognizer.getCurrentToken());}
public long ramBytesUsed() {long mem = RamUsageEstimator.shallowSizeOf(this) + RamUsageEstimator.sizeOf(offsets);if (offsets != ordinals) {mem += RamUsageEstimator.sizeOf(ordinals);}return mem;}
public Trec1MQReader(String name) {super();this.name = name;}
public String toString() {return "MergeInfo [totalMaxDoc=" + totalMaxDoc+ ", estimatedMergeBytes=" + estimatedMergeBytes + ", isExternal="+ isExternal + ", mergeMaxNumSegments=" + mergeMaxNumSegments + "]";}
public GetVaultNotificationsRequest(String vaultName) {setVaultName(vaultName);}
public DisassociatePhoneNumbersFromVoiceConnectorGroupResult disassociatePhoneNumbersFromVoiceConnectorGroup(DisassociatePhoneNumbersFromVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeDisassociatePhoneNumbersFromVoiceConnectorGroup(request);}
public int size() {return ConcurrentHashMap.this.size();}
public void addPattern(String pattern, String ivalue) {int k = ivalues.find(ivalue);if (k <= 0) {k = packValues(ivalue);ivalues.insert(ivalue, (char) k);}insert(pattern, (char) k);}
public boolean isSheetHidden(int sheetnum) {return getBoundSheetRec(sheetnum).isHidden();}
public AddUserToGroupRequest(String groupName, String userName) {setGroupName(groupName);setUserName(userName);}
public static double sumsq(double[] values) {double sumsq = 0;for (double value : values) {sumsq += value * value;}return sumsq;}
public DeleteHostedZoneRequest(String id) {setId(id);}
public UserSViewEnd(RecordInputStream in) {_rawData = in.readRemainder();}
public BatchPutScheduledUpdateGroupActionResult batchPutScheduledUpdateGroupAction(BatchPutScheduledUpdateGroupActionRequest request) {request = beforeClientExecution(request);return executeBatchPutScheduledUpdateGroupAction(request);}
public static EvaluationException numberError() {return new EvaluationException(ErrorEval.NUM_ERROR);}
public String displayName() {return this.displayName;}
public final boolean equals(Object o) {if (o instanceof AnyObjectId) {return equals((AnyObjectId) o);}return false;}
public DescribeSpotFleetRequestHistoryResult describeSpotFleetRequestHistory(DescribeSpotFleetRequestHistoryRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetRequestHistory(request);}
public InventoryPrefixPredicate(String prefix) {this.prefix = prefix;}
public static synchronized MergeStrategy[] get() {final MergeStrategy[] r = new MergeStrategy[STRATEGIES.size()];STRATEGIES.values().toArray(r);return r;}
public DeleteVoiceConnectorTerminationCredentialsResult deleteVoiceConnectorTerminationCredentials(DeleteVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorTerminationCredentials(request);}
public int mark() {if (numMarkers == 0) {lastCharBufferStart = lastChar;}int mark = -numMarkers - 1;numMarkers++;return mark;}
public ScoreCachingWrappingScorer(Scorable scorer) {this.in = scorer;}
public void skip(long count) throws IOException {assert count >= 0;if (ord + count > valueCount || ord + count < 0) {throw new EOFException();}final int skipBuffer = (int) Math.min(count, blockSize - off);off += skipBuffer;ord += skipBuffer;count -= skipBuffer;if (count == 0L) {return;}assert off == blockSize;while (count >= blockSize) {final int token = in.readByte() & 0xFF;final int bitsPerValue = token >>> BPV_SHIFT;if (bitsPerValue > 64) {throw new IOException("Corrupted");}if ((token & MIN_VALUE_EQUALS_0) == 0) {readVLong(in);}final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);skipBytes(blockBytes);ord += blockSize;count -= blockSize;}if (count == 0L) {return;}assert count < blockSize;refill();ord += count;off += count;}
public GetDownloadUrlsRequest() {super("CloudPhoto", "2017-07-11", "GetDownloadUrls", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public ListSecurityProfilesResult listSecurityProfiles(ListSecurityProfilesRequest request) {request = beforeClientExecution(request);return executeListSecurityProfiles(request);}
@Override public boolean contains(Object o) {return containsKey(o);}
public TerminalNode getToken(int ttype, int i) {if ( children==null || i < 0 || i >= children.size() ) {return null;}int j = -1; for (ParseTree o : children) {if ( o instanceof TerminalNode ) {TerminalNode tnode = (TerminalNode)o;Token symbol = tnode.getSymbol();if ( symbol.getType()==ttype ) {j++;if ( j == i ) {return tnode;}}}}return null;}
public void serialize(LittleEndianOutput out) {out.writeShort(_offset);out.writeShort(_fontIndex);}
public void incrementOpen() {useCnt.incrementAndGet();}
public OneMerge(List<SegmentCommitInfo> segments) {if (0 == segments.size()) {throw new RuntimeException("segments must include at least one segment");}this.segments = new ArrayList<>(segments);int count = 0;for(SegmentCommitInfo info : segments) {count += info.info.maxDoc();}totalMaxDoc = count;mergeProgress = new OneMergeProgress();}
public final byte get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName());sb.append(" [");if (_isQuoted) {sb.append("'").append(_name).append("'");} else {sb.append(_name);}sb.append("]");return sb.toString();}
public AssociateWebsiteCertificateAuthorityResult associateWebsiteCertificateAuthority(AssociateWebsiteCertificateAuthorityRequest request) {request = beforeClientExecution(request);return executeAssociateWebsiteCertificateAuthority(request);}
public RevFilter clone() {return new PatternSearch(pattern());}
public PredictionContext getParent(int index) {return null;}
public AttachVpnGatewayRequest(String vpnGatewayId, String vpcId) {setVpnGatewayId(vpnGatewayId);setVpcId(vpcId);}
public void onUpdate(DocumentsWriterFlushControl control, ThreadState state) {onInsert(control, state);onDelete(control, state);}
public UpdateComponentResult updateComponent(UpdateComponentRequest request) {request = beforeClientExecution(request);return executeUpdateComponent(request);}
public DeleteDashboardResult deleteDashboard(DeleteDashboardRequest request) {request = beforeClientExecution(request);return executeDeleteDashboard(request);}
public byte[] getByteBlock() {if (freeBlocks == 0) {bytesUsed.addAndGet(blockSize);return new byte[blockSize];}final byte[] b = freeByteBlocks[--freeBlocks];freeByteBlocks[freeBlocks] = null;return b;}
public DisableLoggingResult disableLogging(DisableLoggingRequest request) {request = beforeClientExecution(request);return executeDisableLogging(request);}
public TokenStream create(TokenStream input) {return new CJKWidthFilter(input);}
public void reset(int startOffset, int endOffset) {bufferUpto = startOffset / INT_BLOCK_SIZE;bufferOffset = bufferUpto * INT_BLOCK_SIZE;this.end = endOffset;upto = startOffset;level = 1;buffer = pool.buffers[bufferUpto];upto = startOffset & INT_BLOCK_MASK;final int firstSize = IntBlockPool.LEVEL_SIZE_ARRAY[0];if (startOffset+firstSize >= endOffset) {limit = endOffset & INT_BLOCK_MASK;} else {limit = upto+firstSize-1;}}
public long ramBytesUsed() {return values.ramBytesUsed()+ super.ramBytesUsed()+ Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}
public PutItemOutcome putItem(Item item) {return putItemDelegate.putItem(item);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[DELTA]\n");buffer.append("    .maxchange = ").append(getMaxChange()).append("\n");buffer.append("[/DELTA]\n");return buffer.toString();}
public StartFaceDetectionResult startFaceDetection(StartFaceDetectionRequest request) {request = beforeClientExecution(request);return executeStartFaceDetection(request);}
public DataValidation createValidation(DataValidationConstraint constraint, CellRangeAddressList cellRangeAddressList) {return new HSSFDataValidation(cellRangeAddressList, constraint);}
public DocumentStoredFieldVisitor(Set<String> fieldsToAdd) {this.fieldsToAdd = fieldsToAdd;}
public TokenStream create(TokenStream tokenStream) {return new HunspellStemFilter(tokenStream, dictionary, true, longestOnly);}
public Repository getRepository() {return repository;}
public DeleteMLModelResult deleteMLModel(DeleteMLModelRequest request) {request = beforeClientExecution(request);return executeDeleteMLModel(request);}
public GetAccountLimitResult getAccountLimit(GetAccountLimitRequest request) {request = beforeClientExecution(request);return executeGetAccountLimit(request);}
public final char[] GetSuffix(int len) {char[] value = new char[len];System.arraycopy(buffer, bufferPosition - len, value, 0, len);return value;}
public ModifyClientVpnEndpointResult modifyClientVpnEndpoint(ModifyClientVpnEndpointRequest request) {request = beforeClientExecution(request);return executeModifyClientVpnEndpoint(request);}
public final boolean containsRow(int row) {return _firstRow <= row && _lastRow >= row;}
public int available() {return remainingBytes();}
public RequestEnvironmentInfoRequest(EnvironmentInfoType infoType) {setInfoType(infoType.toString());}
public void write(byte[] buf) throws IOException {write(buf, 0, buf.length);}
public ResetDBClusterParameterGroupResult resetDBClusterParameterGroup(ResetDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeResetDBClusterParameterGroup(request);}
public void unwriteProtectWorkbook() {this.workbook.unwriteProtectWorkbook();}
public ANTLRInputStream(String input) {this.data = input.toCharArray();this.n = input.length();}
public ByteBuffer putShort(short value) {throw new ReadOnlyBufferException();}
public ReplaceIamInstanceProfileAssociationResult replaceIamInstanceProfileAssociation(ReplaceIamInstanceProfileAssociationRequest request) {request = beforeClientExecution(request);return executeReplaceIamInstanceProfileAssociation(request);}
public void add(String name, Expression expression) {map.put(name, expression);}
public Ref3DPtg(CellReference c, int externIdx) {super(c);setExternSheetIndex(externIdx);}
public int readUShort() {byte[] buf = new byte[LittleEndianConsts.SHORT_SIZE];try {checkEOF(read(buf), LittleEndianConsts.SHORT_SIZE);} catch (IOException e) {throw new RuntimeException(e);}return LittleEndian.getUShort(buf);}
public int stem(char s[], int len) {len = removeCase(s, len);len = removePossessives(s, len);if (len > 0) {len = normalize(s, len);}return len;}
public static int getNearestSetSize(int maxNumberOfBits){int result=usableBitSetSizes[0];for (int i = 0; i < usableBitSetSizes.length; i++) {if(usableBitSetSizes[i]<=maxNumberOfBits){result=usableBitSetSizes[i];}}return result;}
public String toString() {return "AbbreviatedObjectId[" + name() + "]"; }
public ListFacesRequest() {super("CloudPhoto", "2017-07-11", "ListFaces", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public BytesRef(int capacity) {this.bytes = new byte[capacity];}
public DescribeFargateProfileResult describeFargateProfile(DescribeFargateProfileRequest request) {request = beforeClientExecution(request);return executeDescribeFargateProfile(request);}
public GetOpenIdTokenForDeveloperIdentityResult getOpenIdTokenForDeveloperIdentity(GetOpenIdTokenForDeveloperIdentityRequest request) {request = beforeClientExecution(request);return executeGetOpenIdTokenForDeveloperIdentity(request);}
public int countBytesWritten() {return _countBytesWritten;}
public boolean containsAll(final IntList c){boolean rval = true;if (this != c){for (int j = 0; rval && (j < c._limit); j++){if (!contains(c._array[ j ])){rval = false;}}}return rval;}
public void setTreeFilter(TreeFilter newFilter) {assertNotStarted();treeFilter = newFilter != null ? newFilter : TreeFilter.ALL;}
public DBInstance promoteReadReplica(PromoteReadReplicaRequest request) {request = beforeClientExecution(request);return executePromoteReadReplica(request);}
public final short getShort() {int newPosition = position + SizeOf.SHORT;if (newPosition > limit) {throw new BufferUnderflowException();}short result = Memory.peekShort(backingArray, offset + position, order);position = newPosition;return result;}
public AttachClassicLinkVpcResult attachClassicLinkVpc(AttachClassicLinkVpcRequest request) {request = beforeClientExecution(request);return executeAttachClassicLinkVpc(request);}
public static <T> T[] grow(T[] array, int minSize) {assert minSize >= 0 : "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {final int newLength = oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);return growExact(array, newLength);} elsereturn array;}
public ByteArrayDataOutput() {reset(BytesRef.EMPTY_BYTES);}
public void balance() {int i = 0, n = length;String[] k = new String[n];char[] v = new char[n];Iterator iter = new Iterator();while (iter.hasMoreElements()) {v[i] = iter.getValue();k[i++] = iter.nextElement();}init();insertBalanced(k, v, 0, n);}
public MultiPhraseQueryNode() {setLeaf(false);allocate();}
public PublishRequest(String topicArn, String message, String subject) {setTopicArn(topicArn);setMessage(message);setSubject(subject);}
public SendCommandResult sendCommand(SendCommandRequest request) {request = beforeClientExecution(request);return executeSendCommand(request);}
public ListDeploymentInstancesResult listDeploymentInstances(ListDeploymentInstancesRequest request) {request = beforeClientExecution(request);return executeListDeploymentInstances(request);}
public Iterator<E> iterator() {return delegate().iterator(); }
public ProvisionedThroughput(Long readCapacityUnits, Long writeCapacityUnits) {setReadCapacityUnits(readCapacityUnits);setWriteCapacityUnits(writeCapacityUnits);}
public DescribeTagsResult describeTags() {return describeTags(new DescribeTagsRequest());}
public DeprovisionByoipCidrResult deprovisionByoipCidr(DeprovisionByoipCidrRequest request) {request = beforeClientExecution(request);return executeDeprovisionByoipCidr(request);}
public boolean isDone(TreeWalk walker) {return pathRaw.length == walker.getPathLength();}
public String buildExtensionField(String extensionKey, String field) {StringBuilder builder = new StringBuilder(field);builder.append(this.extensionFieldDelimiter);builder.append(extensionKey);return escapeExtensionField(builder.toString());}
public void reset(byte[] bytes, int offset, int len) {this.bytes = bytes;pos = offset;limit = offset + len;}
public boolean equals(Object obj) {if (!(obj instanceof Loc)) {return false;}Loc other = (Loc) obj;return _bookSheetColumn == other._bookSheetColumn && _rowIndex == other._rowIndex;}
public DeleteDeploymentConfigResult deleteDeploymentConfig(DeleteDeploymentConfigRequest request) {request = beforeClientExecution(request);return executeDeleteDeploymentConfig(request);}
public StartQueryExecutionResult startQueryExecution(StartQueryExecutionRequest request) {request = beforeClientExecution(request);return executeStartQueryExecution(request);}
public GetRepoListRequest() {super("cr", "2016-06-07", "GetRepoList", "cr");setUriPattern("/repos");setMethod(MethodType.GET);}
public CreateDistributionResult createDistribution(CreateDistributionRequest request) {request = beforeClientExecution(request);return executeCreateDistribution(request);}
public LongField(final int offset)throws ArrayIndexOutOfBoundsException{if (offset < 0){throw new ArrayIndexOutOfBoundsException("Illegal offset: "+ offset);}_offset = offset;}
public String toString() {StringBuilder b = new StringBuilder();b.append(" target=").append(target());b.append(" label=0x").append(Integer.toHexString(label()));if (flag(BIT_FINAL_ARC)) {b.append(" final");}if (flag(BIT_LAST_ARC)) {b.append(" last");}if (flag(BIT_TARGET_NEXT)) {b.append(" targetNext");}if (flag(BIT_STOP_NODE)) {b.append(" stop");}if (flag(BIT_ARC_HAS_OUTPUT)) {b.append(" output=").append(output());}if (flag(BIT_ARC_HAS_FINAL_OUTPUT)) {b.append(" nextFinalOutput=").append(nextFinalOutput());}if (bytesPerArc() != 0) {b.append(" arcArray(idx=").append(arcIdx()).append(" of ").append(numArcs()).append(")");}return b.toString();}
public final int getRefCount() {return refCount.get();}
public int readInt() {byte[] buf = new byte[LittleEndianConsts.INT_SIZE];try {checkEOF(read(buf), buf.length);} catch (IOException e) {throw new RuntimeException(e);}return LittleEndian.getInt(buf);}
public BatchCreateAttendeeResult batchCreateAttendee(BatchCreateAttendeeRequest request) {request = beforeClientExecution(request);return executeBatchCreateAttendee(request);}
public DetachInstancesFromLoadBalancerResult detachInstancesFromLoadBalancer(DetachInstancesFromLoadBalancerRequest request) {request = beforeClientExecution(request);return executeDetachInstancesFromLoadBalancer(request);}
public int getSourceStart() {return outRegion.sourceStart;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FORMAT]\n");buffer.append("    .indexcode       = ").append(HexDump.shortToHex(getIndexCode())).append("\n");buffer.append("    .isUnicode       = ").append(field_3_hasMultibyte ).append("\n");buffer.append("    .formatstring    = ").append(getFormatString()).append("\n");buffer.append("[/FORMAT]\n");return buffer.toString();}
public void remove() {if (lastReturned == null) {throw new IllegalStateException();}Impl.this.remove(lastReturned.getKey());lastReturned = null;}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<boolean operation='or'/>";StringBuilder sb = new StringBuilder();sb.append("<boolean operation='or'>");for (QueryNode child : getChildren()) {sb.append("\n");sb.append(child.toString());}sb.append("\n</boolean>");return sb.toString();}
public String getPartOfSpeech(int wordId) {return getFeature(wordId, 1);}
public BatchWriteResult batchWrite(BatchWriteRequest request) {request = beforeClientExecution(request);return executeBatchWrite(request);}
public ObjectId idFor(int type, byte[] data) {return delegate().idFor(type, data);}
public ConfirmTransitVirtualInterfaceResult confirmTransitVirtualInterface(ConfirmTransitVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeConfirmTransitVirtualInterface(request);}
public GetFileUploadURLResult getFileUploadURL(GetFileUploadURLRequest request) {request = beforeClientExecution(request);return executeGetFileUploadURL(request);}
public TokenStream create(TokenStream input) {return new KeywordRepeatFilter(input);}
public StartWorkspacesResult startWorkspaces(StartWorkspacesRequest request) {request = beforeClientExecution(request);return executeStartWorkspaces(request);}
public int getDeltaCacheLimit() {return deltaCacheLimit;}
public RebootJumpserverRequest() {super("HPC", "2016-06-03", "RebootJumpserver", "hpc");setMethod(MethodType.POST);}
public int getResultEnd() {Region r = outRegion;return r.resultStart + r.length;}
public CreateLagResult createLag(CreateLagRequest request) {request = beforeClientExecution(request);return executeCreateLag(request);}
public ConflictState getConflictState() {return conflictState;}
public final void writeByte(int val) throws IOException {write(val & 0xFF);}
public UpdateRelationalDatabaseResult updateRelationalDatabase(UpdateRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeUpdateRelationalDatabase(request);}
public Entry<K, V> lowerEntry(K key) {return immutableCopy(findBounded(key, LOWER));}
public ExternalNameRecord() {field_2_ixals = 0;}
public int stem(char s[], int len) {len = stemPrefix(s, len);len = stemSuffix(s, len);return len;}
public final void remove(RevFlagSet set) {flags &= ~set.mask;}
public IllegalFormatFlagsException(String flags) {if (flags == null) {throw new NullPointerException();}this.flags = flags;}
public boolean shouldBeRecursive() {return false;}
public CapitalizationFilter create(TokenStream input) {return new CapitalizationFilter(input, onlyFirstWord, keep,forceFirstLetter, okPrefix, minWordLength, maxWordCount, maxTokenLength);}
public GetAppliedSchemaVersionResult getAppliedSchemaVersion(GetAppliedSchemaVersionRequest request) {request = beforeClientExecution(request);return executeGetAppliedSchemaVersion(request);}
public DescribeLabelingJobResult describeLabelingJob(DescribeLabelingJobRequest request) {request = beforeClientExecution(request);return executeDescribeLabelingJob(request);}
public DeleteAttendeeResult deleteAttendee(DeleteAttendeeRequest request) {request = beforeClientExecution(request);return executeDeleteAttendee(request);}
public final String toString(List<String> ruleNames) {return toString(ruleNames, null);}
public RejectAssignmentResult rejectAssignment(RejectAssignmentRequest request) {request = beforeClientExecution(request);return executeRejectAssignment(request);}
public CharVector(char[] a, int capacity) {if (capacity > 0) {blockSize = capacity;} else {blockSize = DEFAULT_BLOCK_SIZE;}array = a;n = a.length;}
public UnsubscribeFromEventResult unsubscribeFromEvent(UnsubscribeFromEventRequest request) {request = beforeClientExecution(request);return executeUnsubscribeFromEvent(request);}
public String getNextToken() {if( pos >= format.length() ) {return null;}int subStart = pos;final char curChar = format.charAt(pos);++pos;if( curChar == '\'' ) {while( ( pos < format.length() ) && ( format.charAt(pos) != '\'' ) ) {++pos;}if( pos < format.length() ) {++pos;}} else {while( ( pos < format.length() ) && ( format.charAt(pos) == curChar ) ) {++pos;}}return format.substring(subStart,pos);}
public Policy withId(String id) {setId(id);return this;}
public void setStringValue(String value) {if (!(fieldsData instanceof String)) {throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to String");}if (value == null) {throw new IllegalArgumentException("value must not be null");}fieldsData = value;}
public Area3DPtg(String arearef, int externIdx) {super(new AreaReference(arearef, SpreadsheetVersion.EXCEL97));setExternSheetIndex(externIdx);}
public boolean empty() {return isEmpty();}
public DeleteMemberResult deleteMember(DeleteMemberRequest request) {request = beforeClientExecution(request);return executeDeleteMember(request);}
public DeleteRepositoryResult deleteRepository(DeleteRepositoryRequest request) {request = beforeClientExecution(request);return executeDeleteRepository(request);}
public GetChangeResult getChange(GetChangeRequest request) {request = beforeClientExecution(request);return executeGetChange(request);}
public PrefixCodedTerms finish() {return new PrefixCodedTerms(output.toBufferList(), size);}
@Override public synchronized void clear() {elements = EmptyArray.OBJECT;}
public LongBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());LongToByteBufferAdapter buf = new LongToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public StyleRecord() {field_1_xf_index = isBuiltinFlag.set(0);}
public boolean equals(Object o) {if (o instanceof AbbreviatedObjectId) {final AbbreviatedObjectId b = (AbbreviatedObjectId) o;return nibbles == b.nibbles && w1 == b.w1 && w2 == b.w2&& w3 == b.w3 && w4 == b.w4 && w5 == b.w5;}return false;}
public void ReInit(QueryParserTokenManager tm) {token_source = tm;token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public ExtendedFormatRecord getExFormatAt(int index) {int xfptr = records.getXfpos() - (numxfs - 1);xfptr += index;return ( ExtendedFormatRecord ) records.get(xfptr);}
public Resource(String resource) {this.resource = resource;}
public NorwegianLightStemFilterFactory(Map<String,String> args) {super(args);String variant = get(args, "variant");if (variant == null || "nb".equals(variant)) {flags = BOKMAAL;} else if ("nn".equals(variant)) {flags = NYNORSK;} else if ("no".equals(variant)) {flags = BOKMAAL | NYNORSK;} else {throw new IllegalArgumentException("invalid variant: " + variant);}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public UpdateTypedLinkFacetResult updateTypedLinkFacet(UpdateTypedLinkFacetRequest request) {request = beforeClientExecution(request);return executeUpdateTypedLinkFacet(request);}
public E higher(E e) {return backingMap.higherKey(e);}
public ListReceiptFiltersResult listReceiptFilters(ListReceiptFiltersRequest request) {request = beforeClientExecution(request);return executeListReceiptFilters(request);}
public int size() {synchronized (lock) {return count;}}
public CreateVaultRequest(String vaultName) {setVaultName(vaultName);}
public PendingOutputs() {outputs = new CharsRefBuilder[1];endOffsets = new int[1];posLengths = new int[1];}
public static double getExcelDate(Date date, boolean use1904windowing) {Calendar calStart = LocaleUtil.getLocaleCalendar();calStart.setTime(date);int year = calStart.get(Calendar.YEAR);int dayOfYear = calStart.get(Calendar.DAY_OF_YEAR);int hour = calStart.get(Calendar.HOUR_OF_DAY);int minute = calStart.get(Calendar.MINUTE);int second = calStart.get(Calendar.SECOND);int milliSecond = calStart.get(Calendar.MILLISECOND);return internalGetExcelDate(year, dayOfYear, hour, minute, second, milliSecond, use1904windowing);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {int nIncomingArgs = args.length;if(nIncomingArgs < 1) {throw new RuntimeException("function name argument missing");}ValueEval nameArg = args[0];String functionName;if (nameArg instanceof FunctionNameEval) {functionName = ((FunctionNameEval) nameArg).getFunctionName();} else {throw new RuntimeException("First argument should be a NameEval, but got ("+ nameArg.getClass().getName() + ")");}FreeRefFunction targetFunc = ec.findUserDefinedFunction(functionName);if (targetFunc == null) {throw new NotImplementedFunctionException(functionName);}int nOutGoingArgs = nIncomingArgs -1;ValueEval[] outGoingArgs = new ValueEval[nOutGoingArgs];System.arraycopy(args, 1, outGoingArgs, 0, nOutGoingArgs);return targetFunc.evaluate(outGoingArgs, ec);}
public int indexOf(Object object) {int pos = 0;Link<E> link = voidLink.next;if (object != null) {while (link != voidLink) {if (object.equals(link.data)) {return pos;}link = link.next;pos++;}} else {while (link != voidLink) {if (link.data == null) {return pos;}link = link.next;pos++;}}return -1;}
public DescribeVpcClassicLinkResult describeVpcClassicLink(DescribeVpcClassicLinkRequest request) {request = beforeClientExecution(request);return executeDescribeVpcClassicLink(request);}
public void sort(RevSort s, boolean use) {if (s == RevSort.TOPO && !use)throw new IllegalArgumentException(JGitText.get().topologicalSortRequired);super.sort(s, use);}
public synchronized StringBuffer delete(int start, int end) {delete0(start, end);return this;}
public void write(int b) throws IOException {throw new UnsupportedOperationException();}
public boolean isModeDifferent(int rawMode) {int modeDiff = getEntryRawMode() ^ rawMode;if (modeDiff == 0)return false;if (getOptions().getSymLinks() == SymLinks.FALSE)if (FileMode.SYMLINK.equals(rawMode))return false;if (!state.options.isFileMode())modeDiff &= ~FileMode.EXECUTABLE_FILE.getBits();return modeDiff != 0;}
public DescribeReservedInstancesModificationsResult describeReservedInstancesModifications(DescribeReservedInstancesModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstancesModifications(request);}
public EventSubscription addSourceIdentifierToSubscription(AddSourceIdentifierToSubscriptionRequest request) {request = beforeClientExecution(request);return executeAddSourceIdentifierToSubscription(request);}
@Override public boolean equals(Object o) {if (o == this) {return true;}synchronized (mutex) {return delegate().equals(o);}}
public PagedBytesDataOutput getDataOutput() {if (frozen) {throw new IllegalStateException("cannot get DataOutput after freeze()");}return new PagedBytesDataOutput();}
public static short[] copyOfRange(short[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);short[] result = new short[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public boolean removeURI(URIish toRemove) {return uris.remove(toRemove);}
public DescribeGameServerResult describeGameServer(DescribeGameServerRequest request) {request = beforeClientExecution(request);return executeDescribeGameServer(request);}
public boolean hasNext() {return pos < keys.length;}
public IntervalSet subtract(IntSet a) {if (a == null || a.isNil()) {return new IntervalSet(this);}if (a instanceof IntervalSet) {return subtract(this, (IntervalSet)a);}IntervalSet other = new IntervalSet();other.addAll(a);return subtract(this, other);}
public String displayName() {return this.canonicalName;}
public final ValueEval getValue(int row, int col) {return getRelativeValue(row, col);}
public AttrPtg(LittleEndianInput in) {_options = in.readByte();_data    = in.readShort();if (isOptimizedChoose()) {int[] jumpTable = new int[(int) _data];for (int i = 0; i < jumpTable.length; i++) {jumpTable[i] = in.readUShort();}_jumpTable = jumpTable;_chooseFuncOffset = in.readUShort();} else {_jumpTable = null;_chooseFuncOffset = -1;}}
public DescribeTrafficMirrorFiltersResult describeTrafficMirrorFilters(DescribeTrafficMirrorFiltersRequest request) {request = beforeClientExecution(request);return executeDescribeTrafficMirrorFilters(request);}
public final ShortBuffer put(short[] src) {return put(src, 0, src.length);}
public DescribeReservedNodeOfferingsResult describeReservedNodeOfferings() {return describeReservedNodeOfferings(new DescribeReservedNodeOfferingsRequest());}
public CreateLogStreamRequest(String logGroupName, String logStreamName) {setLogGroupName(logGroupName);setLogStreamName(logStreamName);}
public DetachStaticIpResult detachStaticIp(DetachStaticIpRequest request) {request = beforeClientExecution(request);return executeDetachStaticIp(request);}
public static CharArraySet unmodifiableSet(CharArraySet set) {if (set == null)throw new NullPointerException("Given set is null");if (set == EMPTY_SET)return EMPTY_SET;if (set.map instanceof CharArrayMap.UnmodifiableCharArrayMap)return set;return new CharArraySet(CharArrayMap.unmodifiableMap(set.map));}
public BatchDetectKeyPhrasesResult batchDetectKeyPhrases(BatchDetectKeyPhrasesRequest request) {request = beforeClientExecution(request);return executeBatchDetectKeyPhrases(request);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 1) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0]);}
public void removeWordCount() {remove1stProperty(PropertyIDMap.PID_WORDCOUNT);}
public boolean equals(Object o) {if (this == o) {return true;}else if ( !(o instanceof SingletonPredictionContext) ) {return false;}if ( this.hashCode() != o.hashCode() ) {return false; }SingletonPredictionContext s = (SingletonPredictionContext)o;return returnState == s.returnState &&(parent!=null && parent.equals(s.parent));}
public ResourceBundle resourceBundle() {return resourceBundle;}
public TokenStream create(TokenStream stream) {if (stopTags != null) {final TokenStream filter = new JapanesePartOfSpeechStopFilter(stream, stopTags);return filter;} else {return stream;}}
public final int[] getBreaks() {int count = getNumBreaks();if (count < 1) {return EMPTY_INT_ARRAY;}int[] result = new int[count];for (int i=0; i<count; i++) {Break breakItem = _breaks.get(i);result[i] = breakItem.main;}return result;}
public EventSubscription createEventSubscription(CreateEventSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateEventSubscription(request);}
@Override public V get(Object key) {return isInBounds(key) ? TreeMap.this.get(key) : null;}
public void setAnchor(int dx1, int dy1, int dx2, int dy2) {setDx1(Math.min(dx1, dx2));setDy1(Math.min(dy1, dy2));setDx2(Math.max(dx1, dx2));setDy2(Math.max(dy1, dy2));}
public int next() {if (current == end) {return DONE;} else {return last();}}
public UpdateGcmChannelResult updateGcmChannel(UpdateGcmChannelRequest request) {request = beforeClientExecution(request);return executeUpdateGcmChannel(request);}
public void write(LittleEndianOutput out) {throw new IllegalStateException("XSSF-only Ptg, should not be serialised");}
public PlacementGroup(String groupName) {setGroupName(groupName);}
public SendCustomVerificationEmailResult sendCustomVerificationEmail(SendCustomVerificationEmailRequest request) {request = beforeClientExecution(request);return executeSendCustomVerificationEmail(request);}
public CreateCollectionRequest() {super("cr", "2016-06-07", "CreateCollection", "cr");setUriPattern("/collections");setMethod(MethodType.PUT);}
public synchronized boolean remove(Object o) {int index = indexOf(o);if (index == -1) {return false;}remove(index);return true;}
public final boolean matches(char c) {return Character.isDigit(c);}
public void serialize(LittleEndianOutput out) {out.writeByte(getWSBool2());out.writeByte(getWSBool1());}
public SubmitGenerateTaskRequest() {super("lubancloud", "2018-05-09", "SubmitGenerateTask", "luban");setMethod(MethodType.POST);}
public E ceiling(E e) {return backingMap.ceilingKey(e);}
public BatchApplyUpdateActionResult batchApplyUpdateAction(BatchApplyUpdateActionRequest request) {request = beforeClientExecution(request);return executeBatchApplyUpdateAction(request);}
public Break(RecordInputStream in) {main = in.readUShort() - 1;subFrom = in.readUShort();subTo = in.readUShort();}
public FileNameMatcher createMatcherForSuffix() {final List<Head> copyOfHeads = new ArrayList<>(heads.size());copyOfHeads.addAll(heads);return new FileNameMatcher(copyOfHeads);}
public static boolean isEmptyOrNull(String stringValue) {return stringValue == null || stringValue.length() == 0;}
public static char[] grow(char[] array) {return grow(array, 1 + array.length);}
public ModifySubnetAttributeResult modifySubnetAttribute(ModifySubnetAttributeRequest request) {request = beforeClientExecution(request);return executeModifySubnetAttribute(request);}
public GetProxySessionResult getProxySession(GetProxySessionRequest request) {request = beforeClientExecution(request);return executeGetProxySession(request);}
public String toString() {return "TermStats{" +"decodedTermText='" + decodedTermText + '\'' +", field='" + field + '\'' +", docFreq=" + docFreq +'}';}
public String getSignificantDecimalDigitsLastDigitRounded() {long wp = _wholePart + 5; StringBuilder sb = new StringBuilder(24);sb.append(wp);sb.setCharAt(sb.length()-1, '0');return sb.toString();}
public boolean canReuse(IndexInput docIn, FieldInfo fieldInfo) {return docIn == startDocIn &&indexHasFreq == (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0) &&indexHasPos == (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) &&indexHasPayloads == fieldInfo.hasPayloads();}
public Sort(SortField field) {setSort(field);}
public static byte[] encodeASCII(String s) {final byte[] r = new byte[s.length()];for (int k = r.length - 1; k >= 0; k--) {final char c = s.charAt(k);if (c > 127)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().notASCIIString, s));r[k] = (byte) c;}return r;}
public PurgeQueueResult purgeQueue(PurgeQueueRequest request) {request = beforeClientExecution(request);return executePurgeQueue(request);}
public boolean sempred(RuleContext _localctx, int ruleIndex, int actionIndex) {return true;}
public ListStreamsResult listStreams() {return listStreams(new ListStreamsRequest());}
public String getSurfaceFormString() {return new String(surfaceForm, offset, length);}
public GetVaultNotificationsResult getVaultNotifications(GetVaultNotificationsRequest request) {request = beforeClientExecution(request);return executeGetVaultNotifications(request);}
public DeleteTypedLinkFacetResult deleteTypedLinkFacet(DeleteTypedLinkFacetRequest request) {request = beforeClientExecution(request);return executeDeleteTypedLinkFacet(request);}
public int previousIndex() {return pos;}
public long ramBytesUsed() {return super.ramBytesUsed()+ offsets.ramBytesUsed()+ lengths.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF+ values.bytes().length;}
public PushCommand push() {return new PushCommand(repo);}
public SelectResult select(SelectRequest request) {request = beforeClientExecution(request);return executeSelect(request);}
public ByteArrayDataOutput(byte[] bytes) {reset(bytes);}
public boolean renameTo(String newName) {return directory.renameTo(newName);}
public boolean canReuse(IndexInput docIn, FieldInfo fieldInfo) {return docIn == startDocIn &&indexHasOffsets == (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) &&indexHasPayloads == fieldInfo.hasPayloads();}
public boolean equals( Object o ) {return o instanceof DanishStemmer;}
public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {BooleanQueryNode booleanNode = (BooleanQueryNode) queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = booleanNode.getChildren();if (children != null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null) {Query query = (Query) obj;try {bQuery.add(query, getModifierValue(child));} catch (TooManyClauses ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.TOO_MANY_BOOLEAN_CLAUSES, IndexSearcher.getMaxClauseCount(), queryNode.toQueryString(new EscapeQuerySyntaxImpl())), ex);}}}}return bQuery.build();}
public String getName() {return name;}
public List<TerminalNode> getTokens(int ttype) {if ( children==null ) {return Collections.emptyList();}List<TerminalNode> tokens = null;for (ParseTree o : children) {if ( o instanceof TerminalNode ) {TerminalNode tnode = (TerminalNode)o;Token symbol = tnode.getSymbol();if ( symbol.getType()==ttype ) {if ( tokens==null ) {tokens = new ArrayList<TerminalNode>();}tokens.add(tnode);}}}if ( tokens==null ) {return Collections.emptyList();}return tokens;}
public UpdateApnsChannelResult updateApnsChannel(UpdateApnsChannelRequest request) {request = beforeClientExecution(request);return executeUpdateApnsChannel(request);}
public String getInput() {return input;}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ) {listener.beforeRecordSerialize(offset, getRecordId(), this);LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, getRecordSize() - HEADER_SIZE );int pos = offset + HEADER_SIZE;System.arraycopy( field_1_UID, 0, data, pos, 16 );data[pos + 16] = field_2_marker;byte[] pd = getPicturedata();System.arraycopy( pd, 0, data, pos + 17, pd.length );listener.afterRecordSerialize(offset + getRecordSize(), getRecordId(), getRecordSize(), this);return HEADER_SIZE + 16 + 1 + pd.length;}
public DescribeFolderContentsResult describeFolderContents(DescribeFolderContentsRequest request) {request = beforeClientExecution(request);return executeDescribeFolderContents(request);}
public CreateDBInstanceReadReplicaRequest(String dBInstanceIdentifier, String sourceDBInstanceIdentifier) {setDBInstanceIdentifier(dBInstanceIdentifier);setSourceDBInstanceIdentifier(sourceDBInstanceIdentifier);}
public DVRecord clone() {return copy();}
public CreateDefaultSubnetResult createDefaultSubnet(CreateDefaultSubnetRequest request) {request = beforeClientExecution(request);return executeCreateDefaultSubnet(request);}
public AbbreviatedObjectId getNewId() {return newId;}
public final V setValue(V value) {V oldValue = this.value;this.value = value;return oldValue;}
public int get(String name, int dflt) {int vals[] = (int[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Integer.parseInt(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToIntArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("extBook=").append(_extBookIndex);buffer.append(" firstSheet=").append(_firstSheetIndex);buffer.append(" lastSheet=").append(_lastSheetIndex);return buffer.toString();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeInt(field_1_reserved);out.writeShort(field_2_subex_len);}
public final Buffer rewind() {position = 0;mark = UNSET_MARK;return this;}
public short getHideObj(){return field_1_hide_obj;}
public PrintGridlinesRecord(RecordInputStream in) {field_1_print_gridlines = in.readShort();}
public CreateEventTrackerResult createEventTracker(CreateEventTrackerRequest request) {request = beforeClientExecution(request);return executeCreateEventTracker(request);}
public boolean hasNext() {return index < to;}
public void removeExFormatRecord(ExtendedFormatRecord rec) {records.remove(rec); numxfs--;}
public synchronized void publish(Revision revision) throws IOException {ensureOpen();if (currentRevision != null) {int compare = revision.compareTo(currentRevision.revision);if (compare == 0) {revision.release();return;}if (compare < 0) {revision.release();throw new IllegalArgumentException("Cannot publish an older revision: rev=" + revision + " current="+ currentRevision);}}final RefCountedRevision oldRevision = currentRevision;currentRevision = new RefCountedRevision(revision);if (oldRevision != null) {oldRevision.decRef();}checkExpiredSessions();}
public final boolean equals(AnyObjectId other) {return other != null ? isEqual(this, other) : false;}
public DeleteBGPPeerResult deleteBGPPeer(DeleteBGPPeerRequest request) {request = beforeClientExecution(request);return executeDeleteBGPPeer(request);}
public String toString() {return "I(n)";}
public DeleteVpcPeeringConnectionResult deleteVpcPeeringConnection(DeleteVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeDeleteVpcPeeringConnection(request);}
public UpdateIdentityPoolResult updateIdentityPool(UpdateIdentityPoolRequest request) {request = beforeClientExecution(request);return executeUpdateIdentityPool(request);}
public String signString(String stringToSign, AlibabaCloudCredentials credentials) {return signString(stringToSign, credentials.getAccessKeySecret());}
public GetDeviceResult getDevice(GetDeviceRequest request) {request = beforeClientExecution(request);return executeGetDevice(request);}
public void writeInt(int v) {writeContinueIfRequired(4);_ulrOutput.writeInt(v);}
public boolean isSuccess() {return 200 <= this.status && this.status < 300;}
public static CredentialsProvider getDefault() {return defaultProvider;}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerPushModeAction)) {return false;}return mode == ((LexerPushModeAction)obj).mode;}
public void dumpDFA() {synchronized (_interp.decisionToDFA) {boolean seenOne = false;for (int d = 0; d < _interp.decisionToDFA.length; d++) {DFA dfa = _interp.decisionToDFA[d];if ( !dfa.states.isEmpty() ) {if ( seenOne ) System.out.println();System.out.println("Decision " + dfa.decision + ":");System.out.print(dfa.toString(getVocabulary()));seenOne = true;}}}}
public FloatBuffer put(int index, float c) {throw new ReadOnlyBufferException();}
public CancelClusterResult cancelCluster(CancelClusterRequest request) {request = beforeClientExecution(request);return executeCancelCluster(request);}
public DeleteSnapshotResult deleteSnapshot(DeleteSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteSnapshot(request);}
public DeletePhoneNumberResult deletePhoneNumber(DeletePhoneNumberRequest request) {request = beforeClientExecution(request);return executeDeletePhoneNumber(request);}
public boolean addPushURI(URIish toAdd) {if (pushURIs.contains(toAdd))return false;return pushURIs.add(toAdd);}
public BytesRef next() throws IOException {boolean success = false;try {scratch = reader.next();if (scratch == null) {reader.close();}success = true;return scratch;} finally {if (!success) {IOUtils.closeWhileHandlingException(reader);}}}
public void removeCreateDateTime() {remove1stProperty(PropertyIDMap.PID_CREATE_DTM);}
public CreateHealthCheckResult createHealthCheck(CreateHealthCheckRequest request) {request = beforeClientExecution(request);return executeCreateHealthCheck(request);}
public EnableVgwRoutePropagationResult enableVgwRoutePropagation(EnableVgwRoutePropagationRequest request) {request = beforeClientExecution(request);return executeEnableVgwRoutePropagation(request);}
public void removeByteCount() {remove1stProperty(PropertyIDMap.PID_BYTECOUNT);}
public UpdateAutoScalingGroupResult updateAutoScalingGroup(UpdateAutoScalingGroupRequest request) {request = beforeClientExecution(request);return executeUpdateAutoScalingGroup(request);}
public CreateNotebookInstanceResult createNotebookInstance(CreateNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeCreateNotebookInstance(request);}
public AllocateAddressResult allocateAddress() {return allocateAddress(new AllocateAddressRequest());}
public CreateMLModelResult createMLModel(CreateMLModelRequest request) {request = beforeClientExecution(request);return executeCreateMLModel(request);}
public ContinueRecord(byte[] data) {_data = data.clone();}
public Parser getParser() {return parser;}
public DeleteSolutionResult deleteSolution(DeleteSolutionRequest request) {request = beforeClientExecution(request);return executeDeleteSolution(request);}
public boolean isDelete() {return ObjectId.zeroId().equals(newObjectId);}
public int getNextPos() {return nextPos;}
public DescribeSpotFleetInstancesResult describeSpotFleetInstances(DescribeSpotFleetInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetInstances(request);}
public ResetPasswordResult resetPassword(ResetPasswordRequest request) {request = beforeClientExecution(request);return executeResetPassword(request);}
public String toString() {return "DrawingRecord["+recordData.length+"]";}
public Status call() throws GitAPIException, NoWorkTreeException {if (workingTreeIt == null)workingTreeIt = new FileTreeIterator(repo);try {IndexDiff diff = new IndexDiff(repo, Constants.HEAD, workingTreeIt);if (ignoreSubmoduleMode != null)diff.setIgnoreSubmoduleMode(ignoreSubmoduleMode);if (paths != null)diff.setFilter(PathFilterGroup.createFromStrings(paths));if (progressMonitor == null)diff.diff();elsediff.diff(progressMonitor, ProgressMonitor.UNKNOWN,ProgressMonitor.UNKNOWN, ""); return new Status(diff);} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}}
public PathHierarchyTokenizerFactory(Map<String,String> args) {super(args);delimiter = getChar(args, "delimiter", PathHierarchyTokenizer.DEFAULT_DELIMITER);replacement = getChar(args, "replace", delimiter);reverse = getBoolean(args, "reverse", false);skip = getInt(args, "skip", PathHierarchyTokenizer.DEFAULT_SKIP);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {return super.toString() + ": " + lockName;}
public CreateFieldLevelEncryptionConfigResult createFieldLevelEncryptionConfig(CreateFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeCreateFieldLevelEncryptionConfig(request);}
public Reader reader() {return reader;}
public DeleteHealthCheckResult deleteHealthCheck(DeleteHealthCheckRequest request) {request = beforeClientExecution(request);return executeDeleteHealthCheck(request);}
public long get() {return count;}
public int setArrayData(byte[] data, int offset) {if (emptyComplexPart) {resizeComplexData(0);} else {short numElements = LittleEndian.getShort(data, offset);short sizeOfElements = LittleEndian.getShort(data, offset + 4);int cdLen = getComplexData().length;int arraySize = getActualSizeOfElements(sizeOfElements) * numElements;if (arraySize == cdLen) {resizeComplexData(arraySize + 6, 0);sizeIncludesHeaderSize = false;}setComplexData(data, offset);}return getComplexData().length;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {TwoDEval reference = convertFirstArg(arg0);int columnIx = 0;try {int rowIx = resolveIndexArg(arg1, srcRowIndex, srcColumnIndex);if (!reference.isColumn()) {if (!reference.isRow()) {return ErrorEval.REF_INVALID;}columnIx = rowIx;rowIx = 0;}return getValueFromArea(reference, rowIx, columnIx);} catch (EvaluationException e) {return e.getErrorEval();}}
public boolean seekExact(BytesRef term) throws IOException {throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");}
public GetSmsTemplateResult getSmsTemplate(GetSmsTemplateRequest request) {request = beforeClientExecution(request);return executeGetSmsTemplate(request);}
public String getFieldAsString() {if (this.field == null)return null;elsereturn this.field.toString();}
@Override public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {return IoBridge.read(fd, buffer, byteOffset, byteCount);}
public HSSFHyperlink createHyperlink(HyperlinkType type) {return new HSSFHyperlink(type);}
public UpdateGlobalSettingsResult updateGlobalSettings(UpdateGlobalSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateGlobalSettings(request);}
public static String segmentFileName(String segmentName, String segmentSuffix, String ext) {if (ext.length() > 0 || segmentSuffix.length() > 0) {assert !ext.startsWith(".");StringBuilder sb = new StringBuilder(segmentName.length() + 2 + segmentSuffix.length() + ext.length());sb.append(segmentName);if (segmentSuffix.length() > 0) {sb.append('_').append(segmentSuffix);}if (ext.length() > 0) {sb.append('.').append(ext);}return sb.toString();} else {return segmentName;}}
public static JGitText get() {return NLS.getBundleFor(JGitText.class);}
public void insert(String key, char val) {int len = key.length() + 1; if (freenode + len > eq.length) {redimNodeArrays(eq.length + BLOCK_SIZE);}char strkey[] = new char[len--];key.getChars(0, len, strkey, 0);strkey[len] = 0;root = insert(root, strkey, 0, val);}
public NameRecord createBuiltInName(byte builtInName, int sheetNumber) {if (sheetNumber < 0 || sheetNumber+1 > Short.MAX_VALUE) {throw new IllegalArgumentException("Sheet number ["+sheetNumber+"]is not valid ");}NameRecord name = new NameRecord(builtInName, sheetNumber);if(linkTable.nameAlreadyExists(name)) {throw new RuntimeException("Builtin (" + builtInName+ ") already exists for sheet (" + sheetNumber + ")");}addName(name);return name;}
public static int compareArray(char[] larray, int lstartIndex, char[] rarray,int rstartIndex) {if (larray == null) {if (rarray == null || rstartIndex >= rarray.length)return 0;elsereturn -1;} else {if (rarray == null) {if (lstartIndex >= larray.length)return 0;elsereturn 1;}}int li = lstartIndex, ri = rstartIndex;while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {li++;ri++;}if (li == larray.length) {if (ri == rarray.length) {return 0;} else {return -1;}} else {if (ri == rarray.length) {return 1;} else {if (larray[li] > rarray[ri])return 1;elsereturn -1;}}}
public GetVoiceConnectorResult getVoiceConnector(GetVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnector(request);}
public void setValueAt(int relativeOffset, int value) {int oldValue = _values[relativeOffset];_values[relativeOffset] = value;if(value == POIFSConstants.UNUSED_BLOCK) {_has_free_sectors = true;return;}if(oldValue == POIFSConstants.UNUSED_BLOCK) {recomputeFree();}}
public static boolean isBinary(byte[] raw) {return isBinary(raw, raw.length);}
public void build(InputIterator iterator) throws IOException {if (iterator.hasPayloads()) {throw new IllegalArgumentException("this suggester doesn't support payloads");}if (iterator.hasContexts()) {throw new IllegalArgumentException("this suggester doesn't support contexts");}count = 0;trie = new JaspellTernarySearchTrie();trie.setMatchAlmostDiff(editDistance);BytesRef spare;final CharsRefBuilder charsSpare = new CharsRefBuilder();while ((spare = iterator.next()) != null) {final long weight = iterator.weight();if (spare.length == 0) {continue;}charsSpare.copyUTF8Bytes(spare);trie.put(charsSpare.toString(), Long.valueOf(weight));count++;}}
public boolean isVerticalBorder(){return verticalBorder.isSet(field_1_options);}
public CreateDBInstanceRequest(String dBInstanceIdentifier, Integer allocatedStorage, String dBInstanceClass, String engine, String masterUsername,String masterUserPassword) {setDBInstanceIdentifier(dBInstanceIdentifier);setAllocatedStorage(allocatedStorage);setDBInstanceClass(dBInstanceClass);setEngine(engine);setMasterUsername(masterUsername);setMasterUserPassword(masterUserPassword);}
public DescribeCapacityProvidersResult describeCapacityProviders(DescribeCapacityProvidersRequest request) {request = beforeClientExecution(request);return executeDescribeCapacityProviders(request);}
public CreateQualificationTypeResult createQualificationType(CreateQualificationTypeRequest request) {request = beforeClientExecution(request);return executeCreateQualificationType(request);}
public void addLast(E object) {addLastImpl(object);}
public Patch() {files = new ArrayList<>();errors = new ArrayList<>(0);}
public GetSdkTypesResult getSdkTypes(GetSdkTypesRequest request) {request = beforeClientExecution(request);return executeGetSdkTypes(request);}
public String toFormulaString() {throw new RuntimeException("3D references need a workbook to determine formula text");}
public ListPhotoFacesRequest() {super("CloudPhoto", "2017-07-11", "ListPhotoFaces", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean isBatchMode() {return batchMode != null && batchMode.booleanValue();}
@Override public boolean isEmpty() {return endpoint(true) == null;}
@Override public Set<Entry<K, V>> entrySet() {BoundedEntrySet result = entrySet;return result != null ? result : (entrySet = new BoundedEntrySet());}
public static CFRuleRecord create(HSSFSheet sheet, String formulaText) {Ptg[] formula1 = parseFormula(formulaText, sheet);return new CFRuleRecord(CONDITION_TYPE_FORMULA, ComparisonOperator.NO_COMPARISON,formula1, null);}
public DeleteAlbumsRequest() {super("CloudPhoto", "2017-07-11", "DeleteAlbums", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public MissingFormatArgumentException(String s) {if (s == null) {throw new NullPointerException();}this.s = s;}
public DeleteApplicationOutputResult deleteApplicationOutput(DeleteApplicationOutputRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationOutput(request);}
public PredictionContextCache getSharedContextCache() {return sharedContextCache;}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [");sb.append(getText());sb.append("]");return sb.toString();}
public DecisionState getDecisionState(int decision) {if ( !decisionToState.isEmpty() ) {return decisionToState.get(decision);}return null;}
public void removeSheet(int sheetIdx) {_externSheetRecord.removeSheet(sheetIdx);}
public HSSFRequest() {_records = new HashMap<>(50); }
final public QueryNode TopLevelQuery(CharSequence field) throws ParseException {QueryNode q;q = Query(field);jj_consume_token(0);{if (true) return q;}throw new Error("Missing return statement in function");}
public DescribeUpdateResult describeUpdate(DescribeUpdateRequest request) {request = beforeClientExecution(request);return executeDescribeUpdate(request);}
public boolean getValue() {return value;}
public final int getType() {return (flags >> TYPE_SHIFT) & 0x7;}
public DoubleBuffer put(double c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putDouble(position++ * SizeOf.DOUBLE, c);return this;}
public void endEvaluate(CellCacheEntry cce) {int nFrames = _evaluationFrames.size();if (nFrames < 1) {throw new IllegalStateException("Call to endEvaluate without matching call to startEvaluate");}nFrames--;CellEvaluationFrame frame = _evaluationFrames.get(nFrames);if (cce != frame.getCCE()) {throw new IllegalStateException("Wrong cell specified. ");}_evaluationFrames.remove(nFrames);_currentlyEvaluatingCells.remove(cce);}
public NumberPtg(double value) {field_1_value = value;}
public GroupingSearch setGroupSort(Sort groupSort) {this.groupSort = groupSort;return this;}
public HSSFBorderFormatting createBorderFormatting() {return getBorderFormatting(true);}
public HSSFSimpleShape createShape(HSSFChildAnchor anchor) {HSSFSimpleShape shape = new HSSFSimpleShape(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);EscherSpRecord sp = shape.getEscherContainer().getChildById(EscherSpRecord.RECORD_ID);if (shape.getAnchor().isHorizontallyFlipped()){sp.setFlags(sp.getFlags() | EscherSpRecord.FLAG_FLIPHORIZ);}if (shape.getAnchor().isVerticallyFlipped()){sp.setFlags(sp.getFlags() | EscherSpRecord.FLAG_FLIPVERT);}return shape;}
public GetLifecyclePolicyResult getLifecyclePolicy(GetLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicy(request);}
public Integer integerValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Integer.valueOf(value);}
public int size() {return backingMap.size();}
public Map.Entry<K, V> next() {if (!valueIterator.hasNext()) {findValueIteratorAndKey();}return Maps.immutableEntry(key, valueIterator.next());}
public boolean shouldBeRecursive() {return a.shouldBeRecursive();}
public GetRepoAuthorizationListRequest() {super("cr", "2016-06-07", "GetRepoAuthorizationList", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/authorizations");setMethod(MethodType.GET);}
public int checkExternSheet(int sheetIndex) {return checkExternSheet(sheetIndex, sheetIndex);}
public LexerATNConfig(LexerATNConfig c, ATNState state) {super(c, state, c.context, c.semanticContext);this.lexerActionExecutor = c.lexerActionExecutor;this.passedThroughNonGreedyDecision = checkNonGreedyDecision(c, state);}
public QueryNodeProcessor set(int index, QueryNodeProcessor processor) {QueryNodeProcessor oldProcessor = this.processors.set(index, processor);if (oldProcessor != processor) {processor.setQueryConfigHandler(this.queryConfig);}return oldProcessor;}
public String getRuleName(int index) {if ( parser!=null && index>=0 ) return parser.getRuleNames()[index];return "<rule "+index+">";}
public ByteBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public DirCache call() throws GitAPIException,NoFilepatternException {if (filepatterns.isEmpty())throw new NoFilepatternException(JGitText.get().atLeastOnePatternIsRequired);checkCallable();DirCache dc = null;List<String> actuallyDeletedFiles = new ArrayList<>();try (TreeWalk tw = new TreeWalk(repo)) {dc = repo.lockDirCache();DirCacheBuilder builder = dc.builder();tw.reset(); tw.setRecursive(true);tw.setFilter(PathFilterGroup.createFromStrings(filepatterns));tw.addTree(new DirCacheBuildIterator(builder));while (tw.next()) {if (!cached) {final FileMode mode = tw.getFileMode(0);if (mode.getObjectType() == Constants.OBJ_BLOB) {String relativePath = tw.getPathString();final File path = new File(repo.getWorkTree(),relativePath);if (delete(path)) {actuallyDeletedFiles.add(relativePath);}}}}builder.commit();setCallable(false);} catch (IOException e) {throw new JGitInternalException(JGitText.get().exceptionCaughtDuringExecutionOfRmCommand, e);} finally {try {if (dc != null) {dc.unlock();}} finally {if (!actuallyDeletedFiles.isEmpty()) {repo.fireEvent(new WorkingTreeModifiedEvent(null,actuallyDeletedFiles));}}}return dc;}
public DeleteGatewayResponseResult deleteGatewayResponse(DeleteGatewayResponseRequest request) {request = beforeClientExecution(request);return executeDeleteGatewayResponse(request);}
public TokenStream create(TokenStream input) {return new NorwegianLightStemFilter(input, flags);}
public GetUserSourceRepoListRequest() {super("cr", "2016-06-07", "GetUserSourceRepoList", "cr");setUriPattern("/users/sourceAccount/[SourceAccountId]/repos");setMethod(MethodType.GET);}
public DescribeEventBusResult describeEventBus(DescribeEventBusRequest request) {request = beforeClientExecution(request);return executeDescribeEventBus(request);}
public DefaultAcsClient(IClientProfile profile, AlibabaCloudCredentialsProvider credentialsProvider) {this.clientProfile = profile;this.credentialsProvider = credentialsProvider;this.clientProfile.setCredentialsProvider(this.credentialsProvider);this.httpClient = HttpClientFactory.buildClient(this.clientProfile);this.endpointResolver = new DefaultEndpointResolver(this, profile);this.appendUserAgent("HTTPClient", this.httpClient.getClass().getSimpleName());}
public String toString() {StringBuilder result = new StringBuilder(limit - position);for (int i = position; i < limit; i++) {result.append(get(i));}return result.toString();}
public final byte[] replacement() {return replacementBytes;}
public SeriesToChartGroupRecord clone() {return copy();}
public AttributeValue(java.util.List<String> sS) {setSS(sS);}
public HSSFComment(EscherContainerRecord spContainer, ObjRecord objRecord, TextObjectRecord textObjectRecord, NoteRecord note) {super(spContainer, objRecord, textObjectRecord);_note = note;}
public FilteredDocIdSetIterator(DocIdSetIterator innerIter) {if (innerIter == null) {throw new IllegalArgumentException("null iterator");}_innerIter = innerIter;doc = -1;}
public DeleteDBClusterParameterGroupResult deleteDBClusterParameterGroup(DeleteDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDBClusterParameterGroup(request);}
public LongsRef next(int count) throws IOException {assert nextValues.length >= 0;assert count > 0;assert nextValues.offset + nextValues.length <= nextValues.longs.length;nextValues.offset += nextValues.length;final int remaining = valueCount - position - 1;if (remaining <= 0) {throw new EOFException();}count = Math.min(remaining, count);if (nextValues.offset == nextValues.longs.length) {final long remainingBlocks = format.byteCount(packedIntsVersion, remaining, bitsPerValue);final int blocksToRead = (int) Math.min(remainingBlocks, nextBlocks.length);in.readBytes(nextBlocks, 0, blocksToRead);if (blocksToRead < nextBlocks.length) {Arrays.fill(nextBlocks, blocksToRead, nextBlocks.length, (byte) 0);}bulkOperation.decode(nextBlocks, 0, nextValues.longs, 0, iterations);nextValues.offset = 0;}nextValues.length = Math.min(nextValues.longs.length - nextValues.offset, count);position += nextValues.length;return nextValues;}
public UpdateServiceAccessPoliciesResult updateServiceAccessPolicies(UpdateServiceAccessPoliciesRequest request) {request = beforeClientExecution(request);return executeUpdateServiceAccessPolicies(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(sid);out.writeShort(ENCODED_SIZE);}
public GetApplicationSettingsResult getApplicationSettings(GetApplicationSettingsRequest request) {request = beforeClientExecution(request);return executeGetApplicationSettings(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(getCodepage());}
public SharedFormulaRecord(RecordInputStream in) {super(in);field_5_reserved        = in.readShort();int field_6_expression_len = in.readShort();int nAvailableBytes = in.available();field_7_parsed_expr = Formula.read(field_6_expression_len, in, nAvailableBytes);}
public void remove() {if (this.lastPosition == -1) {throw new IllegalStateException();}if (expectedModCount != modCount) {throw new ConcurrentModificationException();}try {AbstractList.this.remove(lastPosition);} catch (IndexOutOfBoundsException e) {throw new ConcurrentModificationException();}expectedModCount = modCount;if (pos == lastPosition) {pos--;}lastPosition = -1;}
public int getRef(Character way) {Cell c = at(way);return (c == null) ? -1 : c.ref;}
public K ceilingKey(K key) {Entry<K, V> entry = findBounded(key, CEILING);return entry != null ? entry.getKey() : null;}
public CreateApplicationRequest(String applicationName) {setApplicationName(applicationName);}
public int pathCompare(byte[] buf, int pos, int end, int pathMode) {return pathCompare(buf, pos, end, pathMode, 0);}
public DescribeContainerInstancesResult describeContainerInstances(DescribeContainerInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeContainerInstances(request);}
public void serialize(LittleEndianOutput out) {for (short tabid : _tabids) {out.writeShort(tabid);}}
public ListIAMPolicyAssignmentsForUserResult listIAMPolicyAssignmentsForUser(ListIAMPolicyAssignmentsForUserRequest request) {request = beforeClientExecution(request);return executeListIAMPolicyAssignmentsForUser(request);}
public boolean equals(Object obj) {if (obj instanceof Map.Entry) {final Object key = ((Map.Entry) obj).getKey();final Object val = ((Map.Entry) obj).getValue();if (key instanceof String && val instanceof Ref) {final Ref r = (Ref) val;if (r.getName().equals(ref.getName())) {final ObjectId a = r.getObjectId();final ObjectId b = ref.getObjectId();if (a != null && b != null&& AnyObjectId.isEqual(a, b)) {return true;}}}}return false;}
public RemoveFacetFromObjectResult removeFacetFromObject(RemoveFacetFromObjectRequest request) {request = beforeClientExecution(request);return executeRemoveFacetFromObject(request);}
public static boolean equals(char[] array1, char[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public AssociateRouteTableResult associateRouteTable(AssociateRouteTableRequest request) {request = beforeClientExecution(request);return executeAssociateRouteTable(request);}
public void createInformationProperties() {if (!initialized) {readProperties();}if (sInf == null) {sInf = PropertySetFactory.newSummaryInformation();}if (dsInf == null) {dsInf = newDocumentSummaryInformation();}}
public DescribeCommentsResult describeComments(DescribeCommentsRequest request) {request = beforeClientExecution(request);return executeDescribeComments(request);}
public MoPenCreateDeviceRequest() {super("MoPen", "2018-02-11", "MoPenCreateDevice", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ApplySchemaResult applySchema(ApplySchemaRequest request) {request = beforeClientExecution(request);return executeApplySchema(request);}
public MMSRecord(RecordInputStream in) {if (in.remaining()==0) {return;}field_1_addMenuCount = in.readByte();field_2_delMenuCount = in.readByte();}
public UserInputQueryBuilder(QueryParser parser) {this.unSafeParser = parser;}
public Object get(CharSequence key) {TSTNode node = getNode(key);if (node == null) {return null;}return node.data;}
public MergedGroup(T groupValue) {this.groupValue = groupValue;}
public StoredField(String name, int value) {super(name, TYPE);fieldsData = value;}
public RebaseCommand setProgressMonitor(ProgressMonitor monitor) {if (monitor == null) {monitor = NullProgressMonitor.INSTANCE;}this.monitor = monitor;return this;}
public UnknownSubRecord clone() {return copy();}
public Query getQuery(Element e) throws ParserException {String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");String text = DOMUtils.getNonBlankTextOrFail(e);BooleanQuery.Builder bq = new BooleanQuery.Builder();bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, "minimumNumberShouldMatch", 0));try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);Term term = null;ts.reset();while (ts.incrementToken()) {term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));}ts.end();}catch (IOException ioe) {throw new RuntimeException("Error constructing terms from index:" + ioe);}Query q = bq.build();float boost = DOMUtils.getAttribute(e, "boost", 1.0f);return new BoostQuery(q, boost);}
public UpdateMailboxQuotaResult updateMailboxQuota(UpdateMailboxQuotaRequest request) {request = beforeClientExecution(request);return executeUpdateMailboxQuota(request);}
public String toString(){StringBuilder buffer = new StringBuilder(40 * (path.length() + 1));for (int j = 0; j < path.length(); j++){buffer.append(path.getComponent(j)).append("/");}buffer.append(name);return buffer.toString();}
public void removeApplicationName() {remove1stProperty(PropertyIDMap.PID_APPNAME);}
public String toString(){StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");if (externalWorkbookNumber >= 0) {sb.append(" [");sb.append("workbook=").append(getExternalWorkbookNumber());sb.append("] ");}sb.append("sheet=").append(getSheetName());sb.append(" ! ");sb.append("name=");sb.append(nameName);sb.append("]");return sb.toString();}
public GetRecommenderConfigurationResult getRecommenderConfiguration(GetRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeGetRecommenderConfiguration(request);}
public int previous() {if (text.getIndex() == text.getBeginIndex()) {return DONE;} else {if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());return DONE;}if (text.getIndex() == text.getEndIndex()) {text.setIndex(sentenceStarts[currentSentence]);} else {text.setIndex(sentenceStarts[--currentSentence]);}return current();}}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[STARTOBJECT]\n");buffer.append("    .rt              =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt        =").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .iObjectKind     =").append(HexDump.shortToHex(iObjectKind)).append('\n');buffer.append("    .iObjectContext  =").append(HexDump.shortToHex(iObjectContext)).append('\n');buffer.append("    .iObjectInstance1=").append(HexDump.shortToHex(iObjectInstance1)).append('\n');buffer.append("    .iObjectInstance2=").append(HexDump.shortToHex(iObjectInstance2)).append('\n');buffer.append("[/STARTOBJECT]\n");return buffer.toString();}
public static double average(double[] values) {double ave = 0;double sum = 0;for (double value : values) {sum += value;}ave = sum / values.length;return ave;}
public GetCheckerIpRangesResult getCheckerIpRanges(GetCheckerIpRangesRequest request) {request = beforeClientExecution(request);return executeGetCheckerIpRanges(request);}
public int getRegionLength() {return outRegion.length;}
@Override public Iterator<Multiset.Entry<E>> iterator() {final Iterator<Map.Entry<E, Integer>> backingIterator= countMap.entrySet().iterator();return new Iterator<Multiset.Entry<E>>() {
public WeightedSpanTerm(float weight, String term, boolean positionSensitive) {super(weight, term);this.positionSensitive = positionSensitive;}
public synchronized StringBuffer append(char[] chars) {append0(chars);return this;}
public UploadServerCertificateRequest(String serverCertificateName, String certificateBody, String privateKey) {setServerCertificateName(serverCertificateName);setCertificateBody(certificateBody);setPrivateKey(privateKey);}
public List<String> getRuleInvocationStack(RuleContext p) {String[] ruleNames = getRuleNames();List<String> stack = new ArrayList<String>();while ( p!=null ) {int ruleIndex = p.getRuleIndex();if ( ruleIndex<0 ) stack.add("n/a");else stack.add(ruleNames[ruleIndex]);p = p.parent;}return stack;}
static public double ipmt(double r, int per, int nper, double pv, double fv) {return ipmt(r, per, nper, pv, fv, 0);}
public int countRanges() {return _list.size();}
public int compareTo(FormatRun r) {if (_character == r._character && _fontIndex == r._fontIndex) {return 0;}if (_character == r._character) {return _fontIndex - r._fontIndex;}return _character - r._character;}
public final void readFully(byte[] dst) throws IOException {readFully(dst, 0, dst.length);}
public synchronized int size() {return size;}
public String group() {return group(0);}
public int getExternalSheetIndex(String workbookName, String firstSheetName, String lastSheetName) {return getOrCreateLinkTable().getExternalSheetIndex(workbookName, firstSheetName, lastSheetName);}
public GetDeliverabilityTestReportResult getDeliverabilityTestReport(GetDeliverabilityTestReportRequest request) {request = beforeClientExecution(request);return executeGetDeliverabilityTestReport(request);}
public boolean isPeeled() {return getLeaf().isPeeled();}
public RenameCallback getRenameCallback() {return renameCallback;}
public String toString() {return "EditList" + super.toString(); }
public PutVoiceConnectorTerminationCredentialsResult putVoiceConnectorTerminationCredentials(PutVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorTerminationCredentials(request);}
public CreateGroupResult createGroup(CreateGroupRequest request) {request = beforeClientExecution(request);return executeCreateGroup(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_units);}
public ObjectLoader open(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {final ObjectLoader ldr = db.openObject(this, objectId);if (ldr == null) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}if (typeHint != OBJ_ANY && ldr.getType() != typeHint)throw new IncorrectObjectTypeException(objectId.copy(), typeHint);return ldr;}
public ParameterNameValue(String parameterName, String parameterValue) {setParameterName(parameterName);setParameterValue(parameterValue);}
public AssociateIamInstanceProfileResult associateIamInstanceProfile(AssociateIamInstanceProfileRequest request) {request = beforeClientExecution(request);return executeAssociateIamInstanceProfile(request);}
public CreateHostedZoneRequest(String name, String callerReference) {setName(name);setCallerReference(callerReference);}
public String getPronunciation() {return dictionary.getPronunciation(wordId, surfaceForm, offset, length);}
public boolean knows(String key) {return (find(key) >= 0);}
public ServerException(String errorCode, String errorMessage) {super(errorCode, errorMessage);this.setErrorType(ErrorType.Server);}
public String toString() {return "3(" + mu + ")";}
public CreateDiskResult createDisk(CreateDiskRequest request) {request = beforeClientExecution(request);return executeCreateDisk(request);}
public boolean add(char[] text) {return map.put(text, PLACEHOLDER) == null;}
public QueryLicensesRequest() {super("LinkFace", "2018-07-20", "QueryLicenses");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ExpectedAttributeValue(AttributeValue value) {setValue(value);}
public long getSize() {return getCachedBytes().length;}
public DescribeImageAttributeRequest(String imageId, ImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.toString());}
public HSSFAnchor() {createEscherAnchor();}
public V setValue(V object) {V result = value;value = object;return result;}
public void readFully(byte[] buffer, int off, int len) {checkPosition(len);read(buffer, off, len);}
public CancelDomainTransferToAnotherAwsAccountResult cancelDomainTransferToAnotherAwsAccount(CancelDomainTransferToAnotherAwsAccountRequest request) {request = beforeClientExecution(request);return executeCancelDomainTransferToAnotherAwsAccount(request);}
public RecognizeCelebritiesResult recognizeCelebrities(RecognizeCelebritiesRequest request) {request = beforeClientExecution(request);return executeRecognizeCelebrities(request);}
public SideBandOutputStream(int chan, int sz, OutputStream os) {if (chan <= 0 || chan > 255)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().channelMustBeInRange1_255,Integer.valueOf(chan)));if (sz <= HDR_SIZE)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().packetSizeMustBeAtLeast,Integer.valueOf(sz), Integer.valueOf(HDR_SIZE)));else if (MAX_BUF < sz)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().packetSizeMustBeAtMost, Integer.valueOf(sz),Integer.valueOf(MAX_BUF)));out = os;buffer = new byte[sz];buffer[4] = (byte) chan;cnt = HDR_SIZE;}
public LexerATNConfig(ATNState state,int alt,PredictionContext context,LexerActionExecutor lexerActionExecutor){super(state, alt, context, SemanticContext.NONE);this.lexerActionExecutor = lexerActionExecutor;this.passedThroughNonGreedyDecision = false;}
public String format(List<RevCommit> squashedCommits, Ref target) {StringBuilder sb = new StringBuilder();sb.append("Squashed commit of the following:\n"); for (RevCommit c : squashedCommits) {sb.append("\ncommit "); sb.append(c.getName());sb.append("\n"); sb.append(toString(c.getAuthorIdent()));sb.append("\n\t"); sb.append(c.getShortMessage());sb.append("\n"); }return sb.toString();}
public int stem(char s[], int len) {if (len < 3 || s[len-1] != 's')return len;switch(s[len-2]) {case 'u':case 's': return len;case 'e':if (len > 3 && s[len-3] == 'i' && s[len-4] != 'a' && s[len-4] != 'e') {s[len - 3] = 'y';return len - 2;}if (s[len-3] == 'i' || s[len-3] == 'a' || s[len-3] == 'o' || s[len-3] == 'e')return len; default: return len - 1;}}
public TermsQueryBuilder(Analyzer analyzer) {this.analyzer = analyzer;}
public CreateDomainRequest(String domainName) {setDomainName(domainName);}
public Trie optimize(Trie orig) {List<CharSequence> cmds = orig.cmds;List<Row> rows = new ArrayList<>();List<Row> orows = orig.rows;int remap[] = new int[orows.size()];for (int j = orows.size() - 1; j >= 0; j--) {Row now = new Remap(orows.get(j), remap);boolean merged = false;for (int i = 0; i < rows.size(); i++) {Row q = merge(now, rows.get(i));if (q != null) {rows.set(i, q);merged = true;remap[j] = i;break;}}if (merged == false) {remap[j] = rows.size();rows.add(now);}}int root = remap[orig.root];Arrays.fill(remap, -1);rows = removeGaps(root, rows, new ArrayList<Row>(), remap);return new Trie(orig.forward, remap[root], cmds, rows);}
public final boolean isFirstCell(int rowIx, int colIx) {CellRangeAddress8Bit r = getRange();return r.getFirstRow() == rowIx && r.getFirstColumn() == colIx;}
public CompleteLayerUploadResult completeLayerUpload(CompleteLayerUploadRequest request) {request = beforeClientExecution(request);return executeCompleteLayerUpload(request);}
public StopHumanLoopResult stopHumanLoop(StopHumanLoopRequest request) {request = beforeClientExecution(request);return executeStopHumanLoop(request);}
public RevCommit getSourceCommit() {return outCandidate.sourceCommit;}
public synchronized Object getPerfObject(String key) {return perfObjects.get(key);}
public TokenStream create(TokenStream input) {return new HindiStemFilter(input);}
public static BreakIterator getWordInstance() {return getWordInstance(Locale.getDefault());}
public UpdatePublicKeyResult updatePublicKey(UpdatePublicKeyRequest request) {request = beforeClientExecution(request);return executeUpdatePublicKey(request);}
public boolean include(RevWalk walker, RevCommit c) {return c.getParentCount() < 2;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[COUNTRY]\n");buffer.append("    .defaultcountry  = ").append(Integer.toHexString(getDefaultCountry())).append("\n");buffer.append("    .currentcountry  = ").append(Integer.toHexString(getCurrentCountry())).append("\n");buffer.append("[/COUNTRY]\n");return buffer.toString();}
public DefaultColWidthRecord clone() {return copy();}
public Matcher useAnchoringBounds(boolean value) {anchoringBounds = value;useAnchoringBoundsImpl(address, value);return this;}
public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;return this;}
public void SwitchTo(int lexState){if (lexState >= 2 || lexState < 0)throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);elsecurLexState = lexState;}
public boolean add(final int value){if (_limit == _array.length){growArray(_limit * 2);}_array[ _limit++ ] = value;return true;}
public final int computeIterations(int valueCount, int ramBudget) {final int iterations = ramBudget / (byteBlockCount() + 8 * byteValueCount());if (iterations == 0) {return 1;} else if ((iterations - 1) * byteValueCount() >= valueCount) {return (int) Math.ceil((double) valueCount / byteValueCount());} else {return iterations;}}
public NameRecord getNameRecord(int nameIndex) {return getWorkbook().getNameRecord(nameIndex);}
public DescribeJobResult describeJob(DescribeJobRequest request) {request = beforeClientExecution(request);return executeDescribeJob(request);}
public EscherPropertyMetaData( String description, byte type ){this.description = description;this.type = type;}
public HSSFColor findSimilarColor(int red, int green, int blue) {HSSFColor result = null;int minColorDistance = Integer.MAX_VALUE;byte[] b = _palette.getColor(PaletteRecord.FIRST_COLOR_INDEX);for (short i = PaletteRecord.FIRST_COLOR_INDEX; b != null;b = _palette.getColor(++i)){int colorDistance = Math.abs(red - unsignedInt(b[0])) +Math.abs(green - unsignedInt(b[1])) +Math.abs(blue - unsignedInt(b[2]));if (colorDistance < minColorDistance){minColorDistance = colorDistance;result = getColor(i);}}return result;}
public synchronized StringBuffer deleteCharAt(int location) {deleteCharAt0(location);return this;}
public PathFilter clone() {return this;}
public String toString() {if (isEmpty()) {return "[]";}StringBuilder buffer = new StringBuilder(size() * 16);buffer.append('[');Iterator<?> it = iterator();while (it.hasNext()) {Object next = it.next();if (next != this) {buffer.append(next);} else {buffer.append("(this Collection)");}if (it.hasNext()) {buffer.append(", ");}}buffer.append(']');return buffer.toString();}
public synchronized void close() throws IOException {buffer = null;notifyAll();}
public String toString() {return "ShardIter(shard=" + shardIndex + ")";}
public JobParameters(String format, String type, String archiveId, String description) {setFormat(format);setType(type);setArchiveId(archiveId);setDescription(description);}
public IntBuffer get(int[] dst) {return get(dst, 0, dst.length);}
public SupBookRecord(String url, String[] sheetNames) {field_1_number_of_sheets = (short) sheetNames.length;field_2_encoded_url = url;field_3_sheet_names = sheetNames;_isAddInFunctions = false;}
public SeriesLabelsRecord(RecordInputStream in) {field_1_formatFlags = in.readShort();}
public DescribeAssessmentRunsResult describeAssessmentRuns(DescribeAssessmentRunsRequest request) {request = beforeClientExecution(request);return executeDescribeAssessmentRuns(request);}
public DescribeClassicLinkInstancesResult describeClassicLinkInstances(DescribeClassicLinkInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeClassicLinkInstances(request);}
public byte[] getByteBlock() {return new byte[blockSize];}
public SeriesIndexRecord clone() {return copy();}
public RegisterToWorkMailResult registerToWorkMail(RegisterToWorkMailRequest request) {request = beforeClientExecution(request);return executeRegisterToWorkMail(request);}
public DeleteCollectionRequest() {super("cr", "2016-06-07", "DeleteCollection", "cr");setUriPattern("/collections/[CollectionId]");setMethod(MethodType.DELETE);}
public Cluster deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}
public static double tanh(double d) {double ePowX = Math.pow(Math.E, d);double ePowNegX = Math.pow(Math.E, -d);return (ePowX - ePowNegX) / (ePowX + ePowNegX);}
public CharsRef common(CharsRef output1, CharsRef output2) {assert output1 != null;assert output2 != null;int pos1 = output1.offset;int pos2 = output2.offset;int stopAt1 = pos1 + Math.min(output1.length, output2.length);while(pos1 < stopAt1) {if (output1.chars[pos1] != output2.chars[pos2]) {break;}pos1++;pos2++;}if (pos1 == output1.offset) {return NO_OUTPUT;} else if (pos1 == output1.offset + output1.length) {return output1;} else if (pos2 == output2.offset + output2.length) {return output2;} else {return new CharsRef(output1.chars, output1.offset, pos1-output1.offset);}}
public GetExclusionsPreviewResult getExclusionsPreview(GetExclusionsPreviewRequest request) {request = beforeClientExecution(request);return executeGetExclusionsPreview(request);}
public KeepWordFilterFactory(Map<String,String> args) {super(args);wordFiles = get(args, "words");ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int uniformCmd(boolean eqSkip) {Iterator<Cell> i = cells.values().iterator();int ret = -1;uniformCnt = 1;uniformSkip = 0;for (; i.hasNext();) {Cell c = i.next();if (c.ref >= 0) {return -1;}if (c.cmd >= 0) {if (ret < 0) {ret = c.cmd;uniformSkip = c.skip;} else if (ret == c.cmd) {if (eqSkip) {if (uniformSkip == c.skip) {uniformCnt++;} else {return -1;}} else {uniformCnt++;}} else {return -1;}}}return ret;}
public ListTypedLinkFacetNamesResult listTypedLinkFacetNames(ListTypedLinkFacetNamesRequest request) {request = beforeClientExecution(request);return executeListTypedLinkFacetNames(request);}
public T remove(int index) {if (index == size - 1) {T[] blockRef = directory[toDirectoryIndex(index)];int blockIdx = toBlockIndex(index);T old = blockRef[blockIdx];blockRef[blockIdx] = null;size--;if (0 < tailBlkIdx)tailBlkIdx--;elseresetTailBlock();return old;} else if (index < 0 || size <= index) {throw new IndexOutOfBoundsException(String.valueOf(index));} else {T old = get(index);for (; index < size - 1; index++)set(index, get(index + 1));set(size - 1, null);size--;resetTailBlock();return old;}}
public boolean willSoonExpire() {long now = System.currentTimeMillis();return this.roleSessionDurationSeconds * (1 - expireFact) > (expiration - now) / 1000;}
public GroupingSearch setSortWithinGroup(Sort sortWithinGroup) {this.sortWithinGroup = sortWithinGroup;return this;}
public long ramBytesUsed() {return BASE_RAM_BYTES_USED +((postings!=null) ? RamUsageEstimator.sizeOf(postings) : 0) +((payloads!=null) ? RamUsageEstimator.sizeOf(payloads) : 0);}
public void seek(long pos) throws IOException {final long curFP = getFilePointer();final long skip = pos - curFP;if (skip < 0) {throw new IllegalStateException(getClass() + " cannot seek backwards (pos=" + pos + " getFilePointer()=" + curFP + ")");}skipBytes(skip);}
public ExternalName getExternalName(int externSheetIndex, int externNameIndex) {return _iBook.getExternalName(externSheetIndex, externNameIndex);}
public StrDocValues(ValueSource vs) {this.vs = vs;}
public int getFunctionIndex(String name) {return name.hashCode();}
public int hash2(char c) {int hash = 5381;hash = ((hash << 5) + hash) + c & 0x00FF;hash = ((hash << 5) + hash) + c >> 8;return hash;}
public void create(String id, String title, String time, String body) throws IOException {Path d = directory(count++, null);Files.createDirectories(d);Path f = d.resolve(id + ".txt");StringBuilder contents = new StringBuilder();contents.append(time);contents.append("\n\n");contents.append(title);contents.append("\n\n");contents.append(body);contents.append("\n");try (Writer writer = Files.newBufferedWriter(f, StandardCharsets.UTF_8)) {writer.write(contents.toString());}}
public CharArrayWriter append(CharSequence csq) {if (csq == null) {csq = "null";}append(csq, 0, csq.length());return this;}
public PutAccountDedicatedIpWarmupAttributesResult putAccountDedicatedIpWarmupAttributes(PutAccountDedicatedIpWarmupAttributesRequest request) {request = beforeClientExecution(request);return executePutAccountDedicatedIpWarmupAttributes(request);}
public static boolean equal(Object a, Object b) {return a == b || (a != null && a.equals(b));}
public RevFlag getUnshallowFlag() {return UNSHALLOW;}
public DescribeSolutionVersionResult describeSolutionVersion(DescribeSolutionVersionRequest request) {request = beforeClientExecution(request);return executeDescribeSolutionVersion(request);}
public byte[] getBuffer() {return file.buf;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[WRITEACCESS]\n");buffer.append("    .name = ").append(field_1_username).append("\n");buffer.append("[/WRITEACCESS]\n");return buffer.toString();}
public ModifyFpgaImageAttributeResult modifyFpgaImageAttribute(ModifyFpgaImageAttributeRequest request) {request = beforeClientExecution(request);return executeModifyFpgaImageAttribute(request);}
public SubmoduleUpdateCommand(Repository repo) {super(repo);paths = new ArrayList<>();}
public boolean isKnown() {return type == Type.KNOWN;}
public long get(int index) {final int o = index / 10;final int b = index % 10;final int shift = b * 6;return (blocks[o] >>> shift) & 63L;}
public void setValue(byte value) {setValue(FormulaError.forInt(value));}
public int getCodePoint() {return c;}
public GetDocumentationVersionsResult getDocumentationVersions(GetDocumentationVersionsRequest request) {request = beforeClientExecution(request);return executeGetDocumentationVersions(request);}
public int indexOfKey(int key) {if (mGarbage) {gc();}return binarySearch(mKeys, 0, mSize, key);}
public void reportError(Parser recognizer,RecognitionException e){if (inErrorRecoveryMode(recognizer)) {return; }beginErrorCondition(recognizer);if ( e instanceof NoViableAltException ) {reportNoViableAlternative(recognizer, (NoViableAltException) e);}else if ( e instanceof InputMismatchException ) {reportInputMismatch(recognizer, (InputMismatchException)e);}else if ( e instanceof FailedPredicateException ) {reportFailedPredicate(recognizer, (FailedPredicateException)e);}else {System.err.println("unknown recognition error type: "+e.getClass().getName());recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);}}
public ConstantStringFormat(String s) {str = s;}
public DoubleBuffer asReadOnlyBuffer() {return ReadOnlyDoubleArrayBuffer.copy(this, mark);}
public CacheCluster deleteCacheCluster(DeleteCacheClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCacheCluster(request);}
public ModifyClusterSnapshotScheduleResult modifyClusterSnapshotSchedule(ModifyClusterSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeModifyClusterSnapshotSchedule(request);}
public InitCommand setBare(boolean bare) {validateDirs(directory, gitDir, bare);this.bare = bare;return this;}
public TermsEnumWithSlice(int index, ReaderSlice subSlice) {this.subSlice = subSlice;this.index = index;assert subSlice.length >= 0: "length=" + subSlice.length;}
public UserSViewEnd(byte[] data) {_rawData = data;}
public SetIdentityPoolRolesResult setIdentityPoolRoles(SetIdentityPoolRolesRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolRoles(request);}
public Vector( short type ) {this._type = type;}
public GetEndpointResult getEndpoint(GetEndpointRequest request) {request = beforeClientExecution(request);return executeGetEndpoint(request);}
public Builder add(int docId) {if (docId <= lastDocId) {throw new IllegalArgumentException("Doc ids must be added in-order, got " + docId + " which is <= lastDocID=" + lastDocId);}final int block = docId >>> 16;if (block != currentBlock) {flush();currentBlock = block;}if (currentBlockCardinality < MAX_ARRAY_LENGTH) {buffer[currentBlockCardinality] = (short) docId;} else {if (denseBuffer == null) {final int numBits = Math.min(1 << 16, maxDoc - (block << 16));denseBuffer = new FixedBitSet(numBits);for (short doc : buffer) {denseBuffer.set(doc & 0xFFFF);}}denseBuffer.set(docId & 0xFFFF);}lastDocId = docId;currentBlockCardinality += 1;return this;}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return false;}
public DescribeClustersResult describeClusters(DescribeClustersRequest request) {request = beforeClientExecution(request);return executeDescribeClusters(request);}
public Trie reduce(Reduce by) {List<Trie> h = new ArrayList<>();for (Trie trie : tries)h.add(trie.reduce(by));MultiTrie2 m = new MultiTrie2(forward);m.tries = h;return m;}
public CellRangeAddressBase getCategoryLabelsCellRange() {return getCellRange(dataCategoryLabels);}
public String getPass() {return pass;}
public synchronized Set<Entry<K, V>> entrySet() {Set<Entry<K, V>> es = entrySet;return (es != null) ? es : (entrySet = new EntrySet());}
public static String toFormulaString(HSSFWorkbook book, Ptg[] ptgs) {return FormulaRenderer.toFormulaString(HSSFEvaluationWorkbook.create(book), ptgs);}
public CharBuffer slice() {return new CharSequenceAdapter(sequence.subSequence(position, limit));}
public UpdateBusinessReportScheduleResult updateBusinessReportSchedule(UpdateBusinessReportScheduleRequest request) {request = beforeClientExecution(request);return executeUpdateBusinessReportSchedule(request);}
public void append(byte[] nameBuf, int namePos, int nameLen, FileMode mode,byte[] idBuf, int idPos) {if (fmtBuf(nameBuf, namePos, nameLen, mode)) {System.arraycopy(idBuf, idPos, buf, ptr, OBJECT_ID_LENGTH);ptr += OBJECT_ID_LENGTH;} else {try {fmtOverflowBuffer(nameBuf, namePos, nameLen, mode);overflowBuffer.write(idBuf, idPos, OBJECT_ID_LENGTH);} catch (IOException badBuffer) {throw new RuntimeException(badBuffer);}}}
public CreateSpotDatafeedSubscriptionResult createSpotDatafeedSubscription(CreateSpotDatafeedSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateSpotDatafeedSubscription(request);}
public final long length() {return count;}
public CreateSkillGroupResult createSkillGroup(CreateSkillGroupRequest request) {request = beforeClientExecution(request);return executeCreateSkillGroup(request);}
public int getRightId(int wordId) {return RIGHT_ID;}
public void setRetainBody(boolean retain) {retainBody = retain;}
public final void reset() {len =0;}
public StringBuilder insert(int offset, boolean b) {insert0(offset, b ? "true" : "false");return this;}
public static boolean isWhitespace(byte c) {return WHITESPACE[c & 0xff];}
public DescribeSessionsResult describeSessions(DescribeSessionsRequest request) {request = beforeClientExecution(request);return executeDescribeSessions(request);}
public DescribeLocalGatewayVirtualInterfaceGroupsResult describeLocalGatewayVirtualInterfaceGroups(DescribeLocalGatewayVirtualInterfaceGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayVirtualInterfaceGroups(request);}
public static String pathToString(String dim, String[] path) {String[] fullPath = new String[1+path.length];fullPath[0] = dim;System.arraycopy(path, 0, fullPath, 1, path.length);return pathToString(fullPath, fullPath.length);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 6) & 3;values[valuesOffset++] = (block >>> 4) & 3;values[valuesOffset++] = (block >>> 2) & 3;values[valuesOffset++] = block & 3;}}
public SignalResourceResult signalResource(SignalResourceRequest request) {request = beforeClientExecution(request);return executeSignalResource(request);}
public int getPasswordVerifier() {return passwordVerifier;}
public void copy(MutableValue source) {MutableValueDouble s = (MutableValueDouble) source;value = s.value;exists = s.exists;}
public int read(byte[] buffer, int offset, int length) throws IOException {Arrays.checkOffsetAndCount(buffer.length, offset, length);for (int i = 0; i < length; i++) {int c;try {if ((c = read()) == -1) {return i == 0 ? -1 : i;}} catch (IOException e) {if (i != 0) {return i;}throw e;}buffer[offset + i] = (byte) c;}return length;}
public TreeFilter getPathFilter() {return pathFilter;}
public CalcCountRecord(RecordInputStream in) {field_1_iterations = in.readShort();}
public DescribeVaultRequest(String vaultName) {setVaultName(vaultName);}
public final double get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public final void write(char[] b) {write(b,0,b.length);}
public DeleteTagsForDomainResult deleteTagsForDomain(DeleteTagsForDomainRequest request) {request = beforeClientExecution(request);return executeDeleteTagsForDomain(request);}
public SetMeRequest() {super("CloudPhoto", "2017-07-11", "SetMe", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public LongBuffer put(long c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putLong(position++ * SizeOf.LONG, c);return this;}
public DisassociateFleetResult disassociateFleet(DisassociateFleetRequest request) {request = beforeClientExecution(request);return executeDisassociateFleet(request);}
public String toString() {return getClass().getSimpleName() + "(" + in.toString() + ")";}
public static String fromLong(Long value) {return Long.toString(value);}
public BytesRefArray(Counter bytesUsed) {this.pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));pool.nextBuffer();bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_ARRAY_HEADER * Integer.BYTES);this.bytesUsed = bytesUsed;}
public FloatBuffer put(float[] src, int srcOffset, int floatCount) {if (floatCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, floatCount);position += floatCount;return this;}
public void skipBytes(final long numBytes) throws IOException {if (numBytes < 0) {throw new IllegalArgumentException("numBytes must be >= 0, got " + numBytes);}if (skipBuffer == null) {skipBuffer = new byte[SKIP_BUFFER_SIZE];}assert skipBuffer.length == SKIP_BUFFER_SIZE;for (long skipped = 0; skipped < numBytes; ) {final int step = (int) Math.min(SKIP_BUFFER_SIZE, numBytes - skipped);readBytes(skipBuffer, 0, step, false);skipped += step;}}
public final char get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public String quote(String in) {if (in.matches("^~[A-Za-z0-9_-]+$")) { return in + "/"; }.*$")) { final int i = in.indexOf('/') + 1;if (i == in.length())return in;return in.substring(0, i) + super.quote(in.substring(i));}return super.quote(in);}
@Override public E remove(int location) {synchronized (mutex) {return list.remove(location);}}
public ExpPtg(LittleEndianInput in) {field_1_first_row = in.readShort();field_2_first_col = in.readShort();}
public TokenStream create(TokenStream input) {return new CJKBigramFilter(input, flags, outputUnigrams);}
public FuzzySet getSetForField(SegmentWriteState state,FieldInfo info) {return FuzzySet.createSetBasedOnQuality(state.segmentInfo.maxDoc(), 0.10f);}
public static int[] grow(int[] array) {return grow(array, 1 + array.length);}
public void setLength(int length) {if (length < 0) {throw new StringIndexOutOfBoundsException("length < 0: " + length);}if (length > value.length) {enlargeBuffer(length);} else {if (shared) {char[] newData = new char[value.length];System.arraycopy(value, 0, newData, 0, count);value = newData;shared = false;} else {if (count < length) {Arrays.fill(value, count, length, (char) 0);}}}count = length;}
public void sync() {boolean interrupted = false;try {while (true) {MergeThread toSync = null;synchronized (this) {for (MergeThread t : mergeThreads) {if (t.isAlive() && t != Thread.currentThread()) {toSync = t;break;}}}if (toSync != null) {try {toSync.join();} catch (InterruptedException ie) {interrupted = true;}} else {break;}}} finally {if (interrupted) Thread.currentThread().interrupt();}}
public DescribeIdentityPoolUsageResult describeIdentityPoolUsage(DescribeIdentityPoolUsageRequest request) {request = beforeClientExecution(request);return executeDescribeIdentityPoolUsage(request);}
public ClusterSecurityGroup createClusterSecurityGroup(CreateClusterSecurityGroupRequest request) {request = beforeClientExecution(request);return executeCreateClusterSecurityGroup(request);}
public K nextElement() { return nextEntryNotFailFast().key; }
public HSSFShapeGroup(EscherContainerRecord spgrContainer, ObjRecord objRecord) {super(spgrContainer, objRecord);EscherContainerRecord spContainer = spgrContainer.getChildContainers().get(0);_spgrRecord = (EscherSpgrRecord) spContainer.getChild(0);for (EscherRecord ch : spContainer.getChildRecords()) {switch (EscherRecordTypes.forTypeID(ch.getRecordId())) {case SPGR:break;case CLIENT_ANCHOR:anchor = new HSSFClientAnchor((EscherClientAnchorRecord) ch);break;case CHILD_ANCHOR:anchor = new HSSFChildAnchor((EscherChildAnchorRecord) ch);break;default:break;}}}
public SoraniStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SetAlbumCoverRequest() {super("CloudPhoto", "2017-07-11", "SetAlbumCover", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean equals(final Object o){boolean rval = false;if ((o != null) && (o.getClass() == this.getClass())){if (this == o){rval = true;}else{DocumentDescriptor descriptor = ( DocumentDescriptor ) o;rval = this.path.equals(descriptor.path)&& this.name.equals(descriptor.name);}}return rval;}
public void finish() {if (!sorted)resort();replace();}
public void map(K key, V value) {List<V> elementsForKey = get(key);if ( elementsForKey==null ) {elementsForKey = new ArrayList<V>();super.put(key, elementsForKey);}elementsForKey.add(value);}
public DescribeImportSnapshotTasksResult describeImportSnapshotTasks(DescribeImportSnapshotTasksRequest request) {request = beforeClientExecution(request);return executeDescribeImportSnapshotTasks(request);}
public ListEventSourcesResult listEventSources(ListEventSourcesRequest request) {request = beforeClientExecution(request);return executeListEventSources(request);}
public static double getExcelDate(Calendar date, boolean use1904windowing) {int year = date.get(Calendar.YEAR);int dayOfYear = date.get(Calendar.DAY_OF_YEAR);int hour = date.get(Calendar.HOUR_OF_DAY);int minute = date.get(Calendar.MINUTE);int second = date.get(Calendar.SECOND);int milliSecond = date.get(Calendar.MILLISECOND);return internalGetExcelDate(year, dayOfYear, hour, minute, second, milliSecond, use1904windowing);}
public TimeSpec(char type, int pos, int len, double factor) {this.type = type;this.pos = pos;this.len = len;this.factor = factor;modBy = 0;}
public DeleteApiMappingResult deleteApiMapping(DeleteApiMappingRequest request) {request = beforeClientExecution(request);return executeDeleteApiMapping(request);}
public static String typeString(int typeCode) {switch (typeCode) {case OBJ_COMMIT:return TYPE_COMMIT;case OBJ_TREE:return TYPE_TREE;case OBJ_BLOB:return TYPE_BLOB;case OBJ_TAG:return TYPE_TAG;default:throw new IllegalArgumentException(MessageFormat.format(JGitText.get().badObjectType, Integer.valueOf(typeCode)));}}
public long addAndGet(long delta) {return count.addAndGet(delta);}
public String toString() {StringBuilder sb = new StringBuilder(super.toString());sb.append(" fields=");sb.append(Arrays.toString(fields));return sb.toString();}
public UpdateTemplateActiveVersionResult updateTemplateActiveVersion(UpdateTemplateActiveVersionRequest request) {request = beforeClientExecution(request);return executeUpdateTemplateActiveVersion(request);}
public int compareTo(FacetLabel other) {final int len = length < other.length ? length : other.length;for (int i = 0, j = 0; i < len; i++, j++) {int cmp = components[i].compareTo(other.components[j]);if (cmp < 0) {return -1; }if (cmp > 0) {return 1; }}return length - other.length;}
public int find(String key) {int len = key.length();char strkey[] = new char[len + 1];key.getChars(0, len, strkey, 0);strkey[len] = 0;return find(strkey, 0);}
public final CharBuffer put(char[] src, int srcOffset, int charCount) {throw new ReadOnlyBufferException();}
public ListNodesResult listNodes(ListNodesRequest request) {request = beforeClientExecution(request);return executeListNodes(request);}
public DeleteVoiceConnectorStreamingConfigurationResult deleteVoiceConnectorStreamingConfiguration(DeleteVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorStreamingConfiguration(request);}
public TokenStream create(TokenStream input) {return new SoraniNormalizationFilter(input);}
public int following(int pos) {if (pos < start || pos > end) {throw new IllegalArgumentException("offset out of bounds");} else if (pos == end) {current = end;return DONE;} else {return last();}}
public SshSessionFactory getSshSessionFactory() {return sch;}
@Override public boolean contains(Object o) {if (!(o instanceof Multiset.Entry)) {return false;}Multiset.Entry<?> entry = (Multiset.Entry<?>) o;Collection<V> collection = map.get(entry.getElement());return (collection != null) &&(collection.size() == entry.getCount());}
public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = new CommonGramsFilter(input, commonWords);return commonGrams;}
public DescribeWorkspaceImagesResult describeWorkspaceImages(DescribeWorkspaceImagesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceImages(request);}
public ValueEval getItem(int index) {if (index < 0 || index > _size) {throw new IllegalArgumentException("Specified index " + index+ " is outside range (0.." + (_size - 1) + ")");}return getItemInternal(index);}
public ListEventBusesResult listEventBuses(ListEventBusesRequest request) {request = beforeClientExecution(request);return executeListEventBuses(request);}
public QualityStats(double maxGoodPoints, long searchTime) {this.maxGoodPoints = maxGoodPoints;this.searchTime = searchTime;this.recallPoints = new ArrayList<>();pAt = new double[MAX_POINTS+1]; }
public GetInvalidationRequest(String distributionId, String id) {setDistributionId(distributionId);setId(id);}
public int compareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.get().compareTo(this.bytes.get());elsereturn Float.compare(this.boost, other.boost);}
public RegenerateSecurityTokenResult regenerateSecurityToken(RegenerateSecurityTokenRequest request) {request = beforeClientExecution(request);return executeRegenerateSecurityToken(request);}
public DescribeRootFoldersResult describeRootFolders(DescribeRootFoldersRequest request) {request = beforeClientExecution(request);return executeDescribeRootFolders(request);}
public DeactivateUserResult deactivateUser(DeactivateUserRequest request) {request = beforeClientExecution(request);return executeDeactivateUser(request);}
public boolean contains(int el) {int n = intervals.size();int l = 0;int r = n - 1;while (l <= r) {int m = (l + r) / 2;Interval I = intervals.get(m);int a = I.a;int b = I.b;if ( b<el ) {l = m + 1;} else if ( a>el ) {r = m - 1;} else { return true;}}return false;}
public ListJobsResult listJobs(ListJobsRequest request) {request = beforeClientExecution(request);return executeListJobs(request);}
public RussianLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SearchSkillGroupsResult searchSkillGroups(SearchSkillGroupsRequest request) {request = beforeClientExecution(request);return executeSearchSkillGroups(request);}
public SortField getSortField(Bindings bindings, boolean reverse) {return getDoubleValuesSource(bindings).getSortField(reverse);}
public ModifyHostsResult modifyHosts(ModifyHostsRequest request) {request = beforeClientExecution(request);return executeModifyHosts(request);}
public void setDate(String date) {this.date = date;}
public ValueEval getAreaEval(int firstRowIndex, int firstColumnIndex,int lastRowIndex, int lastColumnIndex) {SheetRangeEvaluator sre = getRefEvaluatorForCurrentSheet();return new LazyAreaEval(firstRowIndex, firstColumnIndex, lastRowIndex, lastColumnIndex, sre);}
public CreateContactMethodResult createContactMethod(CreateContactMethodRequest request) {request = beforeClientExecution(request);return executeCreateContactMethod(request);}
public static final RevFilter before(Date ts) {return before(ts.getTime());}
public String toString() { return toString(VocabularyImpl.EMPTY_VOCABULARY); }
public void updateFormulasAfterCellShift(FormulaShifter shifter, int externSheetIndex) {for (int i = 0; i < _cfHeaders.size(); i++) {CFRecordsAggregate subAgg = _cfHeaders.get(i);boolean shouldKeep = subAgg.updateFormulasAfterCellShift(shifter, externSheetIndex);if (!shouldKeep) {_cfHeaders.remove(i);i--;}}}
public void insertCell(CellValueRecordInterface cvRec) {_valuesAgg.insertCell(cvRec);}
public ShingleFilter create(TokenStream input) {ShingleFilter r = new ShingleFilter(input, minShingleSize, maxShingleSize);r.setOutputUnigrams(outputUnigrams);r.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);r.setTokenSeparator(tokenSeparator);r.setFillerToken(fillerToken);return r;}
public SlopQueryNode(QueryNode query, int value) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));}this.value = value;setLeaf(false);allocate();add(query);}
public ReplaceRouteTableAssociationResult replaceRouteTableAssociation(ReplaceRouteTableAssociationRequest request) {request = beforeClientExecution(request);return executeReplaceRouteTableAssociation(request);}
public void setObjectIdFromRaw(byte[] bs, int p) {final int n = Constants.OBJECT_ID_LENGTH;System.arraycopy(bs, p, idBuffer(), idOffset(), n);}
public ListTablesResult listTables(Integer limit) {return listTables(new ListTablesRequest().withLimit(limit));}
public DeleteDeviceGroupRequest() {super("LinkFace", "2018-07-20", "DeleteDeviceGroup");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public void addRecords(RecordStream rs) {while (true) {if (!readARecord(rs)) {break;}}}
public static Collection<String> getSupportedFunctionNames() {Collection<String> lst = new TreeSet<>();for (int i = 0; i < functions.length; i++) {Function func = functions[i];FunctionMetadata metaData = FunctionMetadataRegistry.getFunctionByIndex(i);if (func != null && !(func instanceof NotImplementedFunction)) {lst.add(metaData.getName());}}lst.add("INDIRECT"); return Collections.unmodifiableCollection(lst);}
public PendingTaskCount countPendingActivityTasks(CountPendingActivityTasksRequest request) {request = beforeClientExecution(request);return executeCountPendingActivityTasks(request);}
public List<SegToken> process(String sentence) {SegGraph segGraph = createSegGraph(sentence);BiSegGraph biSegGraph = new BiSegGraph(segGraph);List<SegToken> shortPath = biSegGraph.getShortPath();return shortPath;}
public Area3DPtg(AreaReference arearef, int externIdx) {super(arearef);setExternSheetIndex(externIdx);}
public EnableRuleResult enableRule(EnableRuleRequest request) {request = beforeClientExecution(request);return executeEnableRule(request);}
public static boolean equals(byte[] array1, byte[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}
public boolean isExpectDataAfterPackFooter() {return expectDataAfterPackFooter;}
public ListIncomingTypedLinksResult listIncomingTypedLinks(ListIncomingTypedLinksRequest request) {request = beforeClientExecution(request);return executeListIncomingTypedLinks(request);}
public void removeRevNumber() {remove1stProperty(PropertyIDMap.PID_REVNUMBER);}
public DeleteMonitoringScheduleResult deleteMonitoringSchedule(DeleteMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeDeleteMonitoringSchedule(request);}
public synchronized boolean put(FacetLabel categoryPath, int ordinal) {boolean ret = cache.put(categoryPath, ordinal);if (ret) {cache.makeRoomLRU();}return ret;}
public void pushNewRecursionContext(ParserRuleContext localctx, int state, int ruleIndex) {ParserRuleContext previous = _ctx;previous.parent = localctx;previous.invokingState = state;previous.stop = _input.LT(-1);_ctx = localctx;_ctx.start = previous.start;if (_buildParseTrees) {_ctx.addChild(previous);}if ( _parseListeners != null ) {triggerEnterRuleEvent(); }}
public Writer() {output = new ByteArrayOutputStream();}
public String getSignerType() {return null;}
public void add(Ptg token) {if (token == null) {throw new IllegalArgumentException("token must not be null");}_ptgs[_offset] = token;_offset++;}
public Repository build() throws IOException {FileRepository repo = new FileRepository(setup());if (isMustExist() && !repo.getObjectDatabase().exists())throw new RepositoryNotFoundException(getGitDir());return repo;}
public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {Collections.sort( src, new ScoreComparator() );return src;}
public String toString() {return "epsilon";}
public DescribeDBLogFilesResult describeDBLogFiles(DescribeDBLogFilesRequest request) {request = beforeClientExecution(request);return executeDescribeDBLogFiles(request);}
public NoteRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readUShort();int length = in.readShort();field_5_hasMultibyte = in.readByte() != 0x00;if (field_5_hasMultibyte) {field_6_author = StringUtil.readUnicodeLE(in, length);} else {field_6_author = StringUtil.readCompressedUnicode(in, length);}if (in.available() == 1) {field_7_padding = Byte.valueOf(in.readByte());} else if (in.available() == 2 && length == 0) {field_7_padding = Byte.valueOf(in.readByte());in.readByte();}}
public CherryPickCommand setOurCommitName(String ourCommitName) {this.ourCommitName = ourCommitName;return this;}
public GetCloudFormationStackRecordsResult getCloudFormationStackRecords(GetCloudFormationStackRecordsRequest request) {request = beforeClientExecution(request);return executeGetCloudFormationStackRecords(request);}
public XPathTokenAnywhereElement(String tokenName, int tokenType) {super(tokenName);this.tokenType = tokenType;}
public boolean isExpired() {long now = System.currentTimeMillis();return now >= expiration - refreshIntervalInMillSeconds;}
public ListDetectorsResult listDetectors(ListDetectorsRequest request) {request = beforeClientExecution(request);return executeListDetectors(request);}
public void add(int index, T element) {if (index == size) {add(element);} else if (index < 0 || size < index) {throw new IndexOutOfBoundsException(String.valueOf(index));} else {add(null); for (int oldIdx = size - 2; index <= oldIdx; oldIdx--)set(oldIdx + 1, get(oldIdx));set(index, element);}}
public static int intersect(CellRangeAddress crA, CellRangeAddress crB ){int firstRow = crB.getFirstRow();int lastRow  = crB.getLastRow();int firstCol = crB.getFirstColumn();int lastCol  = crB.getLastColumn();if (gt(crA.getFirstRow(),    lastRow) || lt(crA.getLastRow(),    firstRow) ||gt(crA.getFirstColumn(), lastCol) || lt(crA.getLastColumn(), firstCol)){return NO_INTERSECTION;}else if( contains(crA, crB) ){return INSIDE;}else if( contains(crB, crA)){return ENCLOSES;}else{return OVERLAP;}}
public short getXFAt(int coffset) {return _xfs[coffset];}
public static final boolean isId(@Nullable String id) {if (id == null) {return false;}if (id.length() != Constants.OBJECT_ID_STRING_LENGTH)return false;try {for (int i = 0; i < Constants.OBJECT_ID_STRING_LENGTH; i++) {RawParseUtils.parseHexInt4((byte) id.charAt(i));}return true;} catch (ArrayIndexOutOfBoundsException e) {return false;}}
@Override public boolean isEmpty() {return countMap.isEmpty();}
public ByteVector(byte[] a, int capacity) {if (capacity > 0) {blockSize = capacity;} else {blockSize = DEFAULT_BLOCK_SIZE;}array = a;n = 0;}
public void write(int oneByte) throws IOException {write(new byte[] { (byte) oneByte }, 0, 1);}
public SegmentCommitInfo info(int i) {return segments.get(i);}
public ListDistributionsByWebACLIdResult listDistributionsByWebACLId(ListDistributionsByWebACLIdRequest request) {request = beforeClientExecution(request);return executeListDistributionsByWebACLId(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(iObjectKind);out.writeShort(iObjectContext);out.writeShort(iObjectInstance1);out.writeShort(iObjectInstance2);}
public CreateDeliveryStreamResult createDeliveryStream(CreateDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeCreateDeliveryStream(request);}
public ResetDBParameterGroupResult resetDBParameterGroup(ResetDBParameterGroupRequest request) {request = beforeClientExecution(request);return executeResetDBParameterGroup(request);}
public DescribeDocumentClassificationJobResult describeDocumentClassificationJob(DescribeDocumentClassificationJobRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentClassificationJob(request);}
public DescribeSecurityGroupsResult describeSecurityGroups(DescribeSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeSecurityGroups(request);}
public UpdateTrafficPolicyInstanceResult updateTrafficPolicyInstance(UpdateTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeUpdateTrafficPolicyInstance(request);}
public BinaryHunk getForwardBinaryHunk() {return forwardBinaryHunk;}
public static ByteBuffer allocateDirect(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteDirectByteBuffer(capacity);}
public void drawString(String str, int x, int y){if (str == null || str.isEmpty())return;Font excelFont = font;if ( font.getName().equals( "SansSerif" ) ){excelFont = new Font( "Arial", font.getStyle(), (int) ( font.getSize() / verticalPixelsPerPoint ) );}else{excelFont = new Font( font.getName(), font.getStyle(), (int) ( font.getSize() / verticalPixelsPerPoint ));}FontDetails d = StaticFontMetrics.getFontDetails( excelFont );int width = d.getStringWidth( str ) * 8  + 12;int height = (int) ( ( font.getSize() / verticalPixelsPerPoint ) + 6 ) * 2;y -= ( font.getSize() / verticalPixelsPerPoint ) + 2 * verticalPixelsPerPoint;    HSSFTextbox textbox = escherGroup.createTextbox( new HSSFChildAnchor( x, y, x + width, y + height ) );textbox.setNoFill( true );textbox.setLineStyle( HSSFShape.LINESTYLE_NONE );HSSFRichTextString s = new HSSFRichTextString( str );HSSFFont hssfFont = matchFont( excelFont );s.applyFont( hssfFont );textbox.setString( s );}
public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {List<Query> luceneSubQueries = makeLuceneSubQueriesField(fieldName, qf);BooleanQuery.Builder bq = new BooleanQuery.Builder();bq.add( luceneSubQueries.get(0), BooleanClause.Occur.MUST);SrndBooleanQuery.addQueriesToBoolean(bq,luceneSubQueries.subList(1, luceneSubQueries.size()),BooleanClause.Occur.MUST_NOT);return bq.build();}
public void reset(byte[] treeData) {attributesNode = null;raw = treeData;prevPtr = -1;currPtr = 0;if (eof())nextPtr = 0;elseparseEntry();}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_save_link_values);}
public static Boolean toBooleanOrNull(String stringValue) {if (stringValue == null)return null;if (equalsIgnoreCase("yes", stringValue) || equalsIgnoreCase("true", stringValue) || equalsIgnoreCase("1", stringValue) || equalsIgnoreCase("on", stringValue)) return Boolean.TRUE;else if (equalsIgnoreCase("no", stringValue) || equalsIgnoreCase("false", stringValue) || equalsIgnoreCase("0", stringValue) || equalsIgnoreCase("off", stringValue)) return Boolean.FALSE;elsereturn null;}
public RevObject lookupOrNull(AnyObjectId id) {return objects.get(id);}
public void cloneStyleFrom(FontRecord source) {field_1_font_height         = source.field_1_font_height;field_2_attributes          = source.field_2_attributes;field_3_color_palette_index = source.field_3_color_palette_index;field_4_bold_weight         = source.field_4_bold_weight;field_5_super_sub_script    = source.field_5_super_sub_script;field_6_underline           = source.field_6_underline;field_7_family              = source.field_7_family;field_8_charset             = source.field_8_charset;field_9_zero                = source.field_9_zero;field_11_font_name          = source.field_11_font_name;}
public BrazilianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static byte lookupCharacterClass(String characterClassName) {return (byte) CharacterClass.valueOf(characterClassName).ordinal();}
public ArrayList(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}array = (capacity == 0 ? EmptyArray.OBJECT : new Object[capacity]);}
public CreateHumanTaskUiResult createHumanTaskUi(CreateHumanTaskUiRequest request) {request = beforeClientExecution(request);return executeCreateHumanTaskUi(request);}
public GetSoftwareUpdatesResult getSoftwareUpdates(GetSoftwareUpdatesRequest request) {request = beforeClientExecution(request);return executeGetSoftwareUpdates(request);}
public NamePtg createPtg() {return new NamePtg(_index);}
public ListFlowDefinitionsResult listFlowDefinitions(ListFlowDefinitionsRequest request) {request = beforeClientExecution(request);return executeListFlowDefinitions(request);}
public LittleEndianOutput createDelayedOutput(int size) {checkPosition(size);LittleEndianOutput result = new LittleEndianByteArrayOutputStream(_buf, _writeIndex, size);_writeIndex += size;return result;}
public long get(int index) {return current.get(index);}
public StemmerOverrideFilterFactory(Map<String,String> args) {super(args);dictionaryFiles = get(args, "dictionary");ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public long get(int index) {final int o = index / 12;final int b = index % 12;final int shift = b * 5;return (blocks[o] >>> shift) & 31L;}
public DeleteDeploymentGroupResult deleteDeploymentGroup(DeleteDeploymentGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDeploymentGroup(request);}
public void setNamespaceAware(boolean awareness) {features.put (XmlPullParser.FEATURE_PROCESS_NAMESPACES, awareness);}
public static List<String> getBuiltinFormats() {return Arrays.asList(_builtinFormats);}
public Snapshot authorizeSnapshotAccess(AuthorizeSnapshotAccessRequest request) {request = beforeClientExecution(request);return executeAuthorizeSnapshotAccess(request);}
public void split() throws IOException {boolean success = false;DirectoryReader reader = DirectoryReader.open(input);try {createIndex(config1, dir1, reader, docsInFirstIndex, false);createIndex(config2, dir2, reader, docsInFirstIndex, true);success = true;} finally {if (success) {IOUtils.close(reader);} else {IOUtils.closeWhileHandlingException(reader);}}}
@Override public boolean equals(Object object) {return mapEntry.equals(object);}
public synchronized E pop() {if (elementCount == 0) {throw new EmptyStackException();}final int index = --elementCount;final E obj = (E) elementData[index];elementData[index] = null;modCount++;return obj;}
public ListHealthChecksResult listHealthChecks() {return listHealthChecks(new ListHealthChecksRequest());}
public boolean equals(Object obj) {if (!(obj instanceof File)) {return false;}return path.equals(((File) obj).getPath());}
public ListPhotoStoresRequest() {super("CloudPhoto", "2017-07-11", "ListPhotoStores", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public PutAccessControlRuleResult putAccessControlRule(PutAccessControlRuleRequest request) {request = beforeClientExecution(request);return executePutAccessControlRule(request);}
public StopTrainingEntityRecognizerResult stopTrainingEntityRecognizer(StopTrainingEntityRecognizerRequest request) {request = beforeClientExecution(request);return executeStopTrainingEntityRecognizer(request);}
public GetRevisionResult getRevision(GetRevisionRequest request) {request = beforeClientExecution(request);return executeGetRevision(request);}
public HSSFPicture createPicture(HSSFChildAnchor anchor, int pictureIndex) {HSSFPicture shape = new HSSFPicture(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shape.setPictureIndex(pictureIndex);shapes.add(shape);onCreate(shape);EscherSpRecord sp = shape.getEscherContainer().getChildById(EscherSpRecord.RECORD_ID);if (shape.getAnchor().isHorizontallyFlipped()){sp.setFlags(sp.getFlags() | EscherSpRecord.FLAG_FLIPHORIZ);}if (shape.getAnchor().isVerticallyFlipped()){sp.setFlags(sp.getFlags() | EscherSpRecord.FLAG_FLIPVERT);}return shape;}
public RecordSizingVisitor() {_totalSize = 0;}
public UpdateApplicationSettingsResult updateApplicationSettings(UpdateApplicationSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateApplicationSettings(request);}
public LogCommand addPath(String path) {checkCallable();pathFilters.add(PathFilter.create(path));return this;}
public GetRelationalDatabaseLogStreamsResult getRelationalDatabaseLogStreams(GetRelationalDatabaseLogStreamsRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseLogStreams(request);}
public FloatBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_lineColor);out.writeShort(field_2_linePattern);out.writeShort(field_3_weight);out.writeShort(field_4_format);out.writeShort(field_5_colourPaletteIndex);}
public DBInstanceAutomatedBackup deleteDBInstanceAutomatedBackup(DeleteDBInstanceAutomatedBackupRequest request) {request = beforeClientExecution(request);return executeDeleteDBInstanceAutomatedBackup(request);}
public MultiSimilarity(Similarity sims[]) {this.sims = sims;}
public final Explanation explain(BasicStats stats, double tfn) {return Explanation.match((float) (scoreTimes1pTfn(stats) / (1 + tfn)),getClass().getSimpleName()+ ", computed as (F + 1) / (n * (tfn + 1)) from:",Explanation.match((float) tfn, "tfn, normalized term frequency"),Explanation.match(stats.getTotalTermFreq(),"F, total number of occurrences of term across all documents + 1"),Explanation.match(stats.getDocFreq(),"n, number of documents containing term + 1"),Explanation.match((float) tfn, "tfn, normalized term frequency"));}
public GetNodeResult getNode(GetNodeRequest request) {request = beforeClientExecution(request);return executeGetNode(request);}
public CreateCapacityProviderResult createCapacityProvider(CreateCapacityProviderRequest request) {request = beforeClientExecution(request);return executeCreateCapacityProvider(request);}
public String[] listAll() throws IOException {List<String> files = new ArrayList<>();NoSuchFileException exc = null;try {for(String f : primaryDir.listAll()) {String ext = getExtension(f);if (primaryExtensions.contains(ext)) {files.add(f);}}} catch (NoSuchFileException e) {exc = e;}try {for(String f : secondaryDir.listAll()) {String ext = getExtension(f);if (primaryExtensions.contains(ext) == false) {files.add(f);}}} catch (NoSuchFileException e) {if (exc != null) {throw exc;}if (files.isEmpty()) {throw e;}}if (exc != null && files.isEmpty()) {throw exc;}String[] result = files.toArray(new String[files.size()]);Arrays.sort(result);return result;}
public int readUByte() {return readByte() & 0xFF;}
public NumberEval(double value) {_value = value;}
@Override public Iterator<E> iterator() {synchronized (mutex) {return c.iterator();}}
public String getInflectionType(int wordId) {return null;}
public GetDeliverabilityDashboardOptionsResult getDeliverabilityDashboardOptions(GetDeliverabilityDashboardOptionsRequest request) {request = beforeClientExecution(request);return executeGetDeliverabilityDashboardOptions(request);}
public static double getExcelDate(LocalDateTime date) {return getExcelDate(date, false);}
public String getBaseForm(int wordId, char surface[], int off, int len) {return null; }
public DescribeDhcpOptionsResult describeDhcpOptions() {return describeDhcpOptions(new DescribeDhcpOptionsRequest());}
public FormatRecord(int indexCode, String fs) {field_1_index_code = indexCode;field_4_formatstring = fs;field_3_hasMultibyte = StringUtil.hasMultibyte(fs);}
public String getPrintArea(int sheetIndex) {NameRecord name = workbook.getSpecificBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);if (name == null) {return null;}return HSSFFormulaParser.toFormulaString(this, name.getNameDefinition());}
public CreateLoadBalancerResult createLoadBalancer(CreateLoadBalancerRequest request) {request = beforeClientExecution(request);return executeCreateLoadBalancer(request);}
public GetVoiceConnectorTerminationHealthResult getVoiceConnectorTerminationHealth(GetVoiceConnectorTerminationHealthRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorTerminationHealth(request);}
public CRNCountRecord(RecordInputStream in) {field_1_number_crn_records = in.readShort();if(field_1_number_crn_records < 0) {field_1_number_crn_records = (short)-field_1_number_crn_records;}field_2_sheet_table_index = in.readShort();}
public BOFRecord(RecordInputStream in) {field_1_version  = in.readShort();field_2_type     = in.readShort();if (in.remaining() >= 2) {field_3_build = in.readShort();}if (in.remaining() >= 2) {field_4_year = in.readShort();}if (in.remaining() >= 4) {field_5_history  = in.readInt();}if (in.remaining() >= 4) {field_6_rversion = in.readInt();}}
public AcsRequest buildRequest() {if (uriPattern != null) {CommonRoaRequest request = new CommonRoaRequest(product);request.setSysUriPattern(uriPattern);for (String pathParamKey : pathParameters.keySet()) {request.putPathParameter(pathParamKey, pathParameters.get(pathParamKey));}fillParams(request);return request;} else {CommonRpcRequest request = new CommonRpcRequest(product);fillParams(request);return request;}}
public void undeleteAll()  {for (FakeDeleteLeafIndexReader r : getSequentialSubReaders()) {r.undeleteAll();}}
public final String GetImage() {return new String(buffer, tokenStart, bufferPosition - tokenStart);}
public DescribeComponentResult describeComponent(DescribeComponentRequest request) {request = beforeClientExecution(request);return executeDescribeComponent(request);}
public RoaringDocIdSet build() {flush();return new RoaringDocIdSet(sets, cardinality);}
public TokenStream create(TokenStream input) {return new GermanNormalizationFilter(input);}
public DrillSideways(IndexSearcher searcher, FacetsConfig config, TaxonomyReader taxoReader,SortedSetDocValuesReaderState state) {this(searcher, config, taxoReader, state, null);}
public DescribeAnalysisSchemesResult describeAnalysisSchemes(DescribeAnalysisSchemesRequest request) {request = beforeClientExecution(request);return executeDescribeAnalysisSchemes(request);}
public PutTargetsResult putTargets(PutTargetsRequest request) {request = beforeClientExecution(request);return executePutTargets(request);}
public RevokeIpRulesResult revokeIpRules(RevokeIpRulesRequest request) {request = beforeClientExecution(request);return executeRevokeIpRules(request);}
public RegisterGameServerResult registerGameServer(RegisterGameServerRequest request) {request = beforeClientExecution(request);return executeRegisterGameServer(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(_options);out.writeShort(_data);int[] jt = _jumpTable;if (jt != null) {for (int i = 0; i < jt.length; i++) {out.writeShort(jt[i]);}out.writeShort(_chooseFuncOffset);}}
public int getCellsPnt() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.ref >= 0) {size++;}}return size;}
public E removeFirst() {return removeFirstImpl();}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<boolean operation='default'/>";StringBuilder sb = new StringBuilder();sb.append("<boolean operation='default'>");for (QueryNode child : getChildren()) {sb.append("\n");sb.append(child.toString());}sb.append("\n</boolean>");return sb.toString();}
public TokenStream create(TokenStream input) {return new TruncateTokenFilter(input, prefixLength);}
public String getErrorDisplay(int c) {String s = String.valueOf((char)c);switch ( c ) {case Token.EOF :s = "<EOF>";break;case '\n' :s = "\\n";break;case '\t' :s = "\\t";break;case '\r' :s = "\\r";break;}return s;}
public CreateContactResult createContact(CreateContactRequest request) {request = beforeClientExecution(request);return executeCreateContact(request);}
public Transition[][] getSortedTransitions() {int numStates = getNumStates();Transition[][] transitions = new Transition[numStates][];for(int s=0;s<numStates;s++) {int numTransitions = getNumTransitions(s);transitions[s] = new Transition[numTransitions];for(int t=0;t<numTransitions;t++) {Transition transition = new Transition();getTransition(s, t, transition);transitions[s][t] = transition;}}return transitions;}
public DescribeAccountModificationsResult describeAccountModifications(DescribeAccountModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeAccountModifications(request);}
public ListSolutionVersionsResult listSolutionVersions(ListSolutionVersionsRequest request) {request = beforeClientExecution(request);return executeListSolutionVersions(request);}
public void finish(FieldInfos fis, int numDocs) throws IOException {if (numDocsWritten != numDocs) {throw new RuntimeException("mergeFields produced an invalid result: docCount is " + numDocs+ " but only saw " + numDocsWritten + " file=" + out.toString() + "; now aborting this merge to prevent index corruption");}write(END);newLine();SimpleTextUtil.writeChecksum(out, scratch);}
public SetVaultNotificationsRequest(String vaultName, VaultNotificationConfig vaultNotificationConfig) {setVaultName(vaultName);setVaultNotificationConfig(vaultNotificationConfig);}
public Trie reduce(Reduce by) {List<Trie> h = new ArrayList<>();for (Trie trie : tries)h.add(trie.reduce(by));MultiTrie m = new MultiTrie(forward);m.tries = h;return m;}
public void println() {synchronized (lock) {print(System.lineSeparator());if (autoFlush) {flush();}}}
public final void writeChar(int val) throws IOException {writeShort(val);}
public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(GREATERTHAN);buffer.append(operands[ 1 ]);return buffer.toString();}
public UpdateDeploymentResult updateDeployment(UpdateDeploymentRequest request) {request = beforeClientExecution(request);return executeUpdateDeployment(request);}
public ListRoutingProfilesResult listRoutingProfiles(ListRoutingProfilesRequest request) {request = beforeClientExecution(request);return executeListRoutingProfiles(request);}
public boolean isFormulaSame(SharedFormulaRecord other) {return field_7_parsed_expr.isSame(other.field_7_parsed_expr);}
public static byte getType(int ch) {switch (Character.getType(ch)) {case Character.UPPERCASE_LETTER: return UPPER;case Character.LOWERCASE_LETTER: return LOWER;case Character.TITLECASE_LETTER:case Character.MODIFIER_LETTER:case Character.OTHER_LETTER:case Character.NON_SPACING_MARK:case Character.ENCLOSING_MARK:  case Character.COMBINING_SPACING_MARK:return ALPHA;case Character.DECIMAL_DIGIT_NUMBER:case Character.LETTER_NUMBER:case Character.OTHER_NUMBER:return DIGIT;case Character.SURROGATE:  return ALPHA|DIGIT;default: return SUBWORD_DELIM;}}
public CreateImageResult createImage(CreateImageRequest request) {request = beforeClientExecution(request);return executeCreateImage(request);}
public void assume(RevCommit c) {if (c != null)assume.add(c);}
public DeleteTagsResult deleteTags(DeleteTagsRequest request) {request = beforeClientExecution(request);return executeDeleteTags(request);}
public ListTemplateVersionsResult listTemplateVersions(ListTemplateVersionsRequest request) {request = beforeClientExecution(request);return executeListTemplateVersions(request);}
public String toString() {return "(" + x + ", " + y + ")"; }
public DisjunctionMaxQueryBuilder(QueryBuilder factory) {this.factory = factory;}
public PutNotificationConfigurationResult putNotificationConfiguration(PutNotificationConfigurationRequest request) {request = beforeClientExecution(request);return executePutNotificationConfiguration(request);}
public RecognizeFlowerRequest() {super("visionai-poc", "2020-04-08", "RecognizeFlower");setMethod(MethodType.POST);}
public IndexFormatTooOldException(String resourceDescription, int version, int minVersion, int maxVersion) {super("Format version is not supported (resource " + resourceDescription + "): " +version + " (needs to be between " + minVersion + " and " + maxVersion +"). This version of Lucene only supports indexes created with release 8.0 and later.");this.resourceDescription = resourceDescription;this.version = version;this.minVersion = minVersion;this.maxVersion = maxVersion;this.reason = null;}
public void add(int el) {if ( readonly ) throw new IllegalStateException("can't alter readonly IntervalSet");add(el,el);}
@Override public final int read(byte[] buffer) throws IOException {return super.read(buffer);}
@Override public boolean remove(Object key) {if (!contains(key)) {return false;}removeFromBothMaps(key);return true;}
public DescribeClusterSecurityGroupsResult describeClusterSecurityGroups(DescribeClusterSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterSecurityGroups(request);}
public TokenStream create(TokenStream input) {return new ScandinavianFoldingFilter(input);}
public DeleteNotebookInstanceLifecycleConfigResult deleteNotebookInstanceLifecycleConfig(DeleteNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDeleteNotebookInstanceLifecycleConfig(request);}
public DescribeComponentConfigurationRecommendationResult describeComponentConfigurationRecommendation(DescribeComponentConfigurationRecommendationRequest request) {request = beforeClientExecution(request);return executeDescribeComponentConfigurationRecommendation(request);}
public SimpleMergedSegmentWarmer(InfoStream infoStream) {this.infoStream = infoStream;}
public int nextIndex() {return pos + 1;}
public ThaiTokenizerFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int doLogic() throws Exception {if (name==null || value==null) {throw new Exception(getName()+" - undefined name or value: name="+name+" value="+value);}getRunData().getConfig().set(name,value);return 0;}
public void setPrintArea(int sheetIndex, String reference){NameRecord name = workbook.getSpecificBuiltinRecord(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);if (name == null) {name = workbook.createBuiltInName(NameRecord.BUILTIN_PRINT_AREA, sheetIndex+1);}String[] parts = COMMA_PATTERN.split(reference);StringBuilder sb = new StringBuilder(32);for (int i = 0; i < parts.length; i++) {if(i>0) {sb.append(",");}SheetNameFormatter.appendFormat(sb, getSheetName(sheetIndex));sb.append("!");sb.append(parts[i]);}name.setNameDefinition(HSSFFormulaParser.parse(sb.toString(), this, FormulaType.NAMEDRANGE, sheetIndex));}
public String getPartOfSpeech() {return dictionary.getPartOfSpeech(wordId);}
public synchronized static DefaultProfile getProfile(String regionId) {return new DefaultProfile(regionId);}
public TurkishLowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static boolean equals(double[] array1, double[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (Double.doubleToLongBits(array1[i]) != Double.doubleToLongBits(array2[i])) {return false;}}return true;}
public ShortField(final int offset)throws ArrayIndexOutOfBoundsException{if (offset < 0){throw new ArrayIndexOutOfBoundsException("Illegal offset: "+ offset);}_offset = offset;}
public int getEffectivePort() {return getEffectivePort(scheme, port);}
public GetDiskSnapshotsResult getDiskSnapshots(GetDiskSnapshotsRequest request) {request = beforeClientExecution(request);return executeGetDiskSnapshots(request);}
public ParseTreePatternMatcher(Lexer lexer, Parser parser) {this.lexer = lexer;this.parser = parser;}
public PassageScorer(float k1, float b, float pivot) {this.k1 = k1;this.b = b;this.pivot = pivot;}
public CreateTicketRequest() {super("Ccs", "2017-10-01", "CreateTicket", "ccs");setMethod(MethodType.POST);}
public RejectTransitGatewayVpcAttachmentResult rejectTransitGatewayVpcAttachment(RejectTransitGatewayVpcAttachmentRequest request) {request = beforeClientExecution(request);return executeRejectTransitGatewayVpcAttachment(request);}
public DeleteApnsChannelResult deleteApnsChannel(DeleteApnsChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsChannel(request);}
public Entry getEntry(final String name) throws FileNotFoundException {Entry rval = null;if (name != null) {rval = _byname.get(name);}if (rval == null) {if(_byname.containsKey("Workbook")) {throw new IllegalArgumentException("The document is really a XLS file");} else if(_byname.containsKey("PowerPoint Document")) {throw new IllegalArgumentException("The document is really a PPT file");} else if(_byname.containsKey("VisioDocument")) {throw new IllegalArgumentException("The document is really a VSD file");}throw new FileNotFoundException("no such entry: \"" + name+ "\", had: " + _byname.keySet());}return rval;}
public TokenStream create(TokenStream input) {return new FrenchMinimalStemFilter(input);}
public int getDecimalExponent() {return _relativeDecimalExponent+EXPONENT_OFFSET;}
public DescribeInstanceCreditSpecificationsResult describeInstanceCreditSpecifications(DescribeInstanceCreditSpecificationsRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceCreditSpecifications(request);}
public GetSendQuotaResult getSendQuota() {return getSendQuota(new GetSendQuotaRequest());}
public String toString() {return "TERM: " + brToString(termBytes);}
public ListFacetNamesResult listFacetNames(ListFacetNamesRequest request) {request = beforeClientExecution(request);return executeListFacetNames(request);}
public PlainValueCellCacheEntry(ValueEval value) {updateValue(value);}
public PutEmailIdentityFeedbackAttributesResult putEmailIdentityFeedbackAttributes(PutEmailIdentityFeedbackAttributesRequest request) {request = beforeClientExecution(request);return executePutEmailIdentityFeedbackAttributes(request);}
public AbortMultipartUploadRequest(String vaultName, String uploadId) {setVaultName(vaultName);setUploadId(uploadId);}
public ResetDBParameterGroupRequest(String dBParameterGroupName) {setDBParameterGroupName(dBParameterGroupName);}
public HSSFClientAnchor createAnchor(int dx1, int dy1, int dx2, int dy2, int col1, int row1, int col2, int row2) {return new HSSFClientAnchor(dx1, dy1, dx2, dy2, (short) col1, row1, (short) col2, row2);}
public void updateCacheResult(ValueEval result) {int nFrames = _evaluationFrames.size();if (nFrames < 1) {throw new IllegalStateException("Call to endEvaluate without matching call to startEvaluate");}CellEvaluationFrame frame = _evaluationFrames.get(nFrames-1);if (result == ErrorEval.CIRCULAR_REF_ERROR && nFrames > 1) {return;}frame.updateFormulaResult(result);}
public Enumeration<String> keys() {return new Iterator();}
public void fromRaw(int[] ints) {fromRaw(ints, 0);}
public int[] init() {final int[] ord = super.init();start = new int[ArrayUtil.oversize(ord.length, Integer.BYTES)];end = new int[ArrayUtil.oversize(ord.length, Integer.BYTES)];freq = new int[ArrayUtil.oversize(ord.length, Integer.BYTES)];assert start.length >= ord.length;assert end.length >= ord.length;assert freq.length >= ord.length;return ord;}
public boolean addFetchRefSpec(RefSpec s) {if (fetch.contains(s))return false;return fetch.add(s);}
public char setIndex(int location) {if (location < start || location > end) {throw new IllegalArgumentException();}offset = location;if (offset == end) {return DONE;}return string.charAt(offset);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[ITERATION]\n");buffer.append("    .flags      = ").append(HexDump.shortToHex(_flags)).append("\n");buffer.append("[/ITERATION]\n");return buffer.toString();}
public LogByteSizeMergePolicy() {minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);}
public DescribeNetworkInterfacePermissionsResult describeNetworkInterfacePermissions(DescribeNetworkInterfacePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfacePermissions(request);}
public String toString() {return "<wildcard field='" + this.field + "' term='" + this.text + "'/>";}
public DeleteImageBuilderResult deleteImageBuilder(DeleteImageBuilderRequest request) {request = beforeClientExecution(request);return executeDeleteImageBuilder(request);}
public boolean requiresCommitBody() {return requiresCommitBody;}
public void removeDocparts() {remove1stProperty(PropertyIDMap.PID_DOCPARTS);}
public DescribeConfigurationSetResult describeConfigurationSet(DescribeConfigurationSetRequest request) {request = beforeClientExecution(request);return executeDescribeConfigurationSet(request);}
public static BufferSize megabytes(long mb) {return new BufferSize(mb * MB);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeInt(field_1_reserved);}
public ListLabelingJobsForWorkteamResult listLabelingJobsForWorkteam(ListLabelingJobsForWorkteamRequest request) {request = beforeClientExecution(request);return executeListLabelingJobsForWorkteam(request);}
public GetKeyPairResult getKeyPair(GetKeyPairRequest request) {request = beforeClientExecution(request);return executeGetKeyPair(request);}
@Override public boolean isEmpty() {Slice slice = this.slice;return slice.from == slice.to;}
public EveryNTermSelector(int interval) {this.interval = interval;count = interval;}
public void ReInit(CharStream stream) {token_source.ReInit(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 25; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public DirectTrackingAllocator(int blockSize, Counter bytesUsed) {super(blockSize);this.bytesUsed = bytesUsed;}
public static ShortBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteShortArrayBuffer(capacity);}
public DescribeDatasetImportJobResult describeDatasetImportJob(DescribeDatasetImportJobRequest request) {request = beforeClientExecution(request);return executeDescribeDatasetImportJob(request);}
public DescribeClusterSnapshotsResult describeClusterSnapshots() {return describeClusterSnapshots(new DescribeClusterSnapshotsRequest());}
public PushbackReader(Reader in, int size) {super(in);if (size <= 0) {throw new IllegalArgumentException("size <= 0");}buf = new char[size];pos = size;}
public final char getChar(int index) {checkIndex(index, SizeOf.CHAR);return (char) Memory.peekShort(backingArray, offset + index, order);}
public SingleCellValueArray(ValueEval value) {super(1);_value = value;}
public List<Ref> getCherryPickedRefs() {return cherryPickedRefs;}
public Destination(java.util.List<String> toAddresses) {setToAddresses(toAddresses);}
public String getHostname() {return Host.this.getHostName();}
public void setSize(int taxonomySize) {map = new int[taxonomySize];}
public void writeShort(int v) {int b1 = (v >>>  8) & 0xFF;int b0 = (v) & 0xFF;try {out.write(b0);out.write(b1);} catch (IOException e) {throw new RuntimeException(e);}}
public PathQueryNode(List<QueryText> pathElements) {this.values = pathElements;if (pathElements.size() <= 1) {throw new RuntimeException("PathQuerynode requires more 2 or more path elements.");}}
public int getMaxDeltaDepth() {return maxDeltaDepth;}
public DomainInfos listDomains(ListDomainsRequest request) {request = beforeClientExecution(request);return executeListDomains(request);}
public float weight(int contentLength, int totalTermFreq) {float numDocs = 1 + contentLength / pivot;return (k1 + 1) * (float) Math.log(1 + (numDocs + 0.5D) / (totalTermFreq + 0.5D));}
public PutIdentityPolicyResult putIdentityPolicy(PutIdentityPolicyRequest request) {request = beforeClientExecution(request);return executePutIdentityPolicy(request);}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<tokenizedphrase/>";StringBuilder sb = new StringBuilder();sb.append("<tokenizedtphrase>");for (QueryNode child : getChildren()) {sb.append("\n");sb.append(child.toString());}sb.append("\n</tokenizedphrase>");return sb.toString();}
public static File[] listRoots() {return new File[] { new File("/") };}
public CharBuffer slice() {return new ReadOnlyCharArrayBuffer(remaining(), backingArray, offset + position);}
public JapaneseKatakanaStemFilter(TokenStream input, int minimumLength) {super(input);this.minimumKatakanaLength = minimumLength;}
public String toString() {return brToString(termBytes);}
public void unsafeWrite(char b[], int off, int len) {System.arraycopy(b, off, buf, this.len, len);this.len += len;}
public ExternalNameRecord(RecordInputStream in) {field_1_option_flag = in.readShort();field_2_ixals       = in.readShort();field_3_not_used    = in.readShort();int numChars = in.readUByte();field_4_name = StringUtil.readUnicodeString(in, numChars);if(!isOLELink() && !isStdDocumentNameIdentifier()){if(isAutomaticLink()){if(in.available() > 0) {int nColumns = in.readUByte() + 1;int nRows = in.readShort() + 1;int totalCount = nRows * nColumns;_ddeValues = ConstantValueParser.parse(in, totalCount);_nColumns = nColumns;_nRows = nRows;}} else {int formulaLen = in.readUShort();field_5_name_definition = Formula.read(formulaLen, in);}}}
public PorterStemFilter create(TokenStream input) {return new PorterStemFilter(input);}
public LoginProfile(String userName, java.util.Date createDate) {setUserName(userName);setCreateDate(createDate);}
public void setUnknownFormulaData(byte[] formularData) {field_2_unknownFormulaData = formularData;}
public Reader create(Reader input) {return normMap == null ? input : new MappingCharFilter(normMap,input);}
public Iterator<Entry<K, V>> iterator() {return new EntryIterator();}
public final Buffer clear() {position = 0;mark = UNSET_MARK;limit = capacity;return this;}
public int getNameIx(int definedNameIndex) {return _externalNameRecords[definedNameIndex].getIx();}
public DeleteReceiptRuleResult deleteReceiptRule(DeleteReceiptRuleRequest request) {request = beforeClientExecution(request);return executeDeleteReceiptRule(request);}
public boolean equals(Object obj) {if (this == obj) return true;if (!super.equals(obj)) return false;if (getClass() != obj.getClass()) return false;SortedSetSortField other = (SortedSetSortField) obj;if (selector != other.selector) return false;return true;}
public JobFlowDetail(String jobFlowId, String name, JobFlowExecutionStatusDetail executionStatusDetail, JobFlowInstancesDetail instances) {setJobFlowId(jobFlowId);setName(name);setExecutionStatusDetail(executionStatusDetail);setInstances(instances);}
public PutVoiceConnectorOriginationResult putVoiceConnectorOrigination(PutVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorOrigination(request);}
public DBInstance startDBInstance(StartDBInstanceRequest request) {request = beforeClientExecution(request);return executeStartDBInstance(request);}
public DeleteChangeSetResult deleteChangeSet(DeleteChangeSetRequest request) {request = beforeClientExecution(request);return executeDeleteChangeSet(request);}
public int nextIndex() {return pos + 1;}
public DescribeGameSessionDetailsResult describeGameSessionDetails(DescribeGameSessionDetailsRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessionDetails(request);}
public ListDatasetImportJobsResult listDatasetImportJobs(ListDatasetImportJobsRequest request) {request = beforeClientExecution(request);return executeListDatasetImportJobs(request);}
public String toString() {return new StringBuilder().append("(").append(x).append(",").append(y).append(")").toString();}
public CharBlockArray append(char c) {if (this.current.length == this.blockSize) {addBlock();}this.current.chars[this.current.length++] = c;this.length++;return this;}
public SimpleBoolFunction(ValueSource source) {this.source = source;}
public String toStringUnquoted() {return getPrefix();}
public static Transport open(URIish uri) throws NotSupportedException, TransportException {for (WeakReference<TransportProtocol> ref : protocols) {TransportProtocol proto = ref.get();if (proto == null) {protocols.remove(ref);continue;}if (proto.canHandle(uri, null, null))return proto.open(uri);}throw new NotSupportedException(MessageFormat.format(JGitText.get().URINotSupported, uri));}
public void mark(int readAheadLimit) throws IOException {throw new IOException("mark/reset not supported");}
public DeleteClusterSecurityGroupResult deleteClusterSecurityGroup(DeleteClusterSecurityGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSecurityGroup(request);}
public GlobalReplicationGroup rebalanceSlotsInGlobalReplicationGroup(RebalanceSlotsInGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeRebalanceSlotsInGlobalReplicationGroup(request);}
public DeleteLocalGatewayRouteResult deleteLocalGatewayRoute(DeleteLocalGatewayRouteRequest request) {request = beforeClientExecution(request);return executeDeleteLocalGatewayRoute(request);}
public DBCluster restoreDBClusterFromSnapshot(RestoreDBClusterFromSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreDBClusterFromSnapshot(request);}
public String getReading(int wordId, char surface[], int off, int len) {return null;}
public CreateDBSnapshotRequest(String dBSnapshotIdentifier, String dBInstanceIdentifier) {setDBSnapshotIdentifier(dBSnapshotIdentifier);setDBInstanceIdentifier(dBInstanceIdentifier);}
public RemoveRoleFromDBInstanceResult removeRoleFromDBInstance(RemoveRoleFromDBInstanceRequest request) {request = beforeClientExecution(request);return executeRemoveRoleFromDBInstance(request);}
public Token nextToken() {if (i >= tokens.size()) {if (eofToken == null) {int start = -1;if (tokens.size() > 0) {int previousStop = tokens.get(tokens.size() - 1).getStopIndex();if (previousStop != -1) {start = previousStop + 1;}}int stop = Math.max(-1, start - 1);eofToken = _factory.create(new Pair<TokenSource, CharStream>(this, getInputStream()), Token.EOF, "EOF", Token.DEFAULT_CHANNEL, start, stop, getLine(), getCharPositionInLine());}return eofToken;}Token t = tokens.get(i);if (i == tokens.size() - 1 && t.getType() == Token.EOF) {eofToken = t;}i++;return t;}
public QueryMaker getQueryMaker() {return null; }
public GC(FileRepository repo) {this.repo = repo;this.pconfig = new PackConfig(repo);this.pm = NullProgressMonitor.INSTANCE;}
public synchronized void setLength(int length) {super.setLength(length);}
public CancelImportTaskResult cancelImportTask(CancelImportTaskRequest request) {request = beforeClientExecution(request);return executeCancelImportTask(request);}
public int first() {return (current = start);}
public DeleteDiskResult deleteDisk(DeleteDiskRequest request) {request = beforeClientExecution(request);return executeDeleteDisk(request);}
public DeleteVpcEndpointConnectionNotificationsResult deleteVpcEndpointConnectionNotifications(DeleteVpcEndpointConnectionNotificationsRequest request) {request = beforeClientExecution(request);return executeDeleteVpcEndpointConnectionNotifications(request);}
public final boolean equals(Object o) {if (o instanceof AnyObjectId) {return equals((AnyObjectId) o);}return false;}
public DescribeConfigurationSettingsRequest(String applicationName) {setApplicationName(applicationName);}
public ET next() {if (expectedModCount == list.modCount) {LinkedList.Link<ET> next = link.next;if (next != list.voidLink) {lastLink = link = next;pos++;return link.data;}throw new NoSuchElementException();}throw new ConcurrentModificationException();}
public CreateConfigurationResult createConfiguration(CreateConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateConfiguration(request);}
public ResetClusterParameterGroupResult resetClusterParameterGroup(ResetClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeResetClusterParameterGroup(request);}
public void mark(int readlimit) {in.mark(readlimit);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PASSWORD]\n");buffer.append("    .password = ").append(HexDump.shortToHex(field_1_password)).append("\n");buffer.append("[/PASSWORD]\n");return buffer.toString();}
public SendTemplatedEmailResult sendTemplatedEmail(SendTemplatedEmailRequest request) {request = beforeClientExecution(request);return executeSendTemplatedEmail(request);}
public boolean equals(Object obj) {if ( !(obj instanceof Predicate) ) return false;if ( this == obj ) return true;Predicate p = (Predicate)obj;return this.ruleIndex == p.ruleIndex &&this.predIndex == p.predIndex &&this.isCtxDependent == p.isCtxDependent;}
public void writeBoolean(boolean value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeBoolean(value);}
public boolean checkPosition(int position) {Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();while (positionSpanIt.hasNext()) {PositionSpan posSpan = positionSpanIt.next();if (((position >= posSpan.start) && (position <= posSpan.end))) {return true;}}return false;}
public static int log(long x, int base) {if (base <= 1) {throw new IllegalArgumentException("base must be > 1");}int ret = 0;while (x >= base) {x /= base;ret++;}return ret;}
public final LongBuffer get(long[] dst, int dstOffset, int longCount) {if (longCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, longCount);position += longCount;return this;}
public boolean equals(Object obj) {return obj == this;}
public void exportRepository(String name, Repository db) {exports.put(nameWithDotGit(name), db);}
public void println(long l) {println(String.valueOf(l));}
public HSSFFormulaEvaluator createFormulaEvaluator(){return new HSSFFormulaEvaluator(workbook);}
public boolean equals(Object obj) {if ( obj==null || !(obj instanceof IntervalSet) ) {return false;}IntervalSet other = (IntervalSet)obj;return this.intervals.equals(other.intervals);}
public FileMode getIndexFileMode(DirCacheIterator indexIter) {final FileMode wtMode = getEntryFileMode();if (indexIter == null) {return wtMode;}final FileMode iMode = indexIter.getEntryFileMode();if (getOptions().isFileMode() && iMode != FileMode.GITLINK && iMode != FileMode.TREE) {return wtMode;}if (!getOptions().isFileMode()) {if (FileMode.REGULAR_FILE == wtMode&& FileMode.EXECUTABLE_FILE == iMode) {return iMode;}if (FileMode.EXECUTABLE_FILE == wtMode&& FileMode.REGULAR_FILE == iMode) {return iMode;}}if (FileMode.GITLINK == iMode&& FileMode.TREE == wtMode && !getOptions().isDirNoGitLinks()) {return iMode;}if (FileMode.TREE == iMode&& FileMode.GITLINK == wtMode) {return iMode;}return wtMode;}
public CreateScheduledActionResult createScheduledAction(CreateScheduledActionRequest request) {request = beforeClientExecution(request);return executeCreateScheduledAction(request);}
public PackConfig getConfig() {return config;}
public CharBuffer put(char c) {throw new ReadOnlyBufferException();}
public DeleteDistributionRequest(String id, String ifMatch) {setId(id);setIfMatch(ifMatch);}
public static long pop_andnot(long[] arr1, long[] arr2, int wordOffset, int numWords) {long popCount = 0;for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {popCount += Long.bitCount(arr1[i] & ~arr2[i]);}return popCount;}
public boolean include(TreeWalk walker) {return true;}
public DescribeReservedDBInstancesOfferingsResult describeReservedDBInstancesOfferings() {return describeReservedDBInstancesOfferings(new DescribeReservedDBInstancesOfferingsRequest());}
public ByteVector(byte[] a) {blockSize = DEFAULT_BLOCK_SIZE;array = a;n = 0;}
public Appendable append(CharSequence csq) {return append(csq, 0, csq.length());}
public String getLookaheadName(TokenStream input) {return getTokenName(input.LA(1));}
public static final ObjectId fromRaw(byte[] bs) {return fromRaw(bs, 0);}
public GutsRecord(RecordInputStream in) {field_1_left_row_gutter = in.readShort();field_2_top_col_gutter  = in.readShort();field_3_row_level_max   = in.readShort();field_4_col_level_max   = in.readShort();}
public GermanMinimalStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DescribeActiveReceiptRuleSetResult describeActiveReceiptRuleSet(DescribeActiveReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDescribeActiveReceiptRuleSet(request);}
public GetGeoLocationResult getGeoLocation(GetGeoLocationRequest request) {request = beforeClientExecution(request);return executeGetGeoLocation(request);}
public KStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public PublishRequest(String topicArn, String message) {setTopicArn(topicArn);setMessage(message);}
public void replace(int start, int limit, String text) {final int charsLen = text.length();final int newLength = shiftForReplace(start, limit, charsLen);text.getChars(0, charsLen, buffer, start);token.setLength(length = newLength);}
public DescribeInternetGatewaysResult describeInternetGateways() {return describeInternetGateways(new DescribeInternetGatewaysRequest());}
public ListQualificationTypesResult listQualificationTypes(ListQualificationTypesRequest request) {request = beforeClientExecution(request);return executeListQualificationTypes(request);}
public DetachInstancesResult detachInstances(DetachInstancesRequest request) {request = beforeClientExecution(request);return executeDetachInstances(request);}
public boolean include(TreeWalk walker) {final int n = walker.getTreeCount();if (n == 1) return true;final int m = walker.getRawMode(baseTree);for (int i = 1; i < n; i++)if (walker.getRawMode(i) != m || !walker.idEqual(i, baseTree))return true;return false;}
public List<MatchingDocs> getMatchingDocs() {List<MatchingDocs> matchingDocs = super.getMatchingDocs();if (totalHits == NOT_CALCULATED) {totalHits = 0;for (MatchingDocs md : matchingDocs) {totalHits += md.totalHits;}}if (totalHits <= sampleSize) {return matchingDocs;}if (sampledDocs == null) {samplingRate = (1.0 * sampleSize) / totalHits;sampledDocs = createSampledDocs(matchingDocs);}return sampledDocs;}
public CreateDataSourceFromS3Result createDataSourceFromS3(CreateDataSourceFromS3Request request) {request = beforeClientExecution(request);return executeCreateDataSourceFromS3(request);}
public UpdateFleetMetadataResult updateFleetMetadata(UpdateFleetMetadataRequest request) {request = beforeClientExecution(request);return executeUpdateFleetMetadata(request);}
public ObjectId getNewObjectId() {return newValue;}
public long ramBytesUsed() {long sizeInBytes = ((termBytesReader!=null)? termBytesReader.ramBytesUsed() : 0);for(FieldIndexData entry : fields.values()) {sizeInBytes += entry.ramBytesUsed();}return sizeInBytes;}
public StringBuilder append(char c) {append0(c);return this;}
public void unread(int oneChar) throws IOException {synchronized (lock) {checkNotClosed();if (pos == 0) {throw new IOException("Pushback buffer full");}buf[--pos] = (char) oneChar;}}
public QueryFaceRequest() {super("LinkFace", "2018-07-20", "QueryFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ProductDomain(String product, String domain) {this.productName = product;this.domainName = domain;}
public void disableRefLog() {refLogMessage = null;refLogIncludeResult = false;}
public static TaxonomyWriterCache defaultTaxonomyWriterCache() {return new UTF8TaxonomyWriterCache();}
public PushCommand setDryRun(boolean dryRun) {checkCallable();this.dryRun = dryRun;return this;}
public ProcessBuilder runInShell(String cmd, String[] args) {List<String> argv = new ArrayList<>(3 + args.length);argv.add("cmd.exe"); argv.add("/c"); argv.add(cmd);argv.addAll(Arrays.asList(args));ProcessBuilder proc = new ProcessBuilder();proc.command(argv);return proc;}
public NameCommentRecord(final RecordInputStream ris) {field_1_record_type = ris.readShort();field_2_frt_cell_ref_flag = ris.readShort();field_3_reserved = ris.readLong();final int field_4_name_length = ris.readShort();final int field_5_comment_length = ris.readShort();if (ris.readByte() == 0) {field_6_name_text = StringUtil.readCompressedUnicode(ris, field_4_name_length);} else {field_6_name_text = StringUtil.readUnicodeLE(ris, field_4_name_length);}if (ris.readByte() == 0) {field_7_comment_text = StringUtil.readCompressedUnicode(ris, field_5_comment_length);} else {field_7_comment_text = StringUtil.readUnicodeLE(ris, field_5_comment_length);}}
public void onPull(float deltaDistance) {final long now = AnimationUtils.currentAnimationTimeMillis();if (mState == STATE_PULL_DECAY && now - mStartTime < mDuration) {return;}if (mState != STATE_PULL) {mGlowScaleY = PULL_GLOW_BEGIN;}mState = STATE_PULL;mStartTime = now;mDuration = PULL_TIME;mPullDistance += deltaDistance;float distance = Math.abs(mPullDistance);mEdgeAlpha = mEdgeAlphaStart = Math.max(PULL_EDGE_BEGIN, Math.min(distance, MAX_ALPHA));mEdgeScaleY = mEdgeScaleYStart = Math.max(HELD_EDGE_SCALE_Y, Math.min(distance * PULL_DISTANCE_EDGE_FACTOR, 1.f));mGlowAlpha = mGlowAlphaStart = Math.min(MAX_ALPHA,mGlowAlpha +(Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR));float glowChange = Math.abs(deltaDistance);if (deltaDistance > 0 && mPullDistance < 0) {glowChange = -glowChange;}if (mPullDistance == 0) {mGlowScaleY = 0;}mGlowScaleY = mGlowScaleYStart = Math.min(MAX_GLOW_HEIGHT, Math.max(0, mGlowScaleY + glowChange * PULL_DISTANCE_GLOW_FACTOR));mEdgeAlphaFinish = mEdgeAlpha;mEdgeScaleYFinish = mEdgeScaleY;mGlowAlphaFinish = mGlowAlpha;mGlowScaleYFinish = mGlowScaleY;}
public URIish setPath(String n) {final URIish r = new URIish(this);r.path = n;r.rawPath = n;return r;}
public UpdateTemplateResult updateTemplate(UpdateTemplateRequest request) {request = beforeClientExecution(request);return executeUpdateTemplate(request);}
public void encode(long[] values, int valuesOffset, byte[] blocks, int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = writeLong(block, blocks, blocksOffset);}}
public ListDomainDeliverabilityCampaignsResult listDomainDeliverabilityCampaigns(ListDomainDeliverabilityCampaignsRequest request) {request = beforeClientExecution(request);return executeListDomainDeliverabilityCampaigns(request);}
public void setReuseObjects(boolean reuseObjects) {this.reuseObjects = reuseObjects;}
public DiffFormatter(OutputStream out) {this.out = out;}
public ExpectedAttributeValue(Boolean exists) {setExists(exists);}
public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {PostingsReaderBase postingsReader = new Lucene84PostingsReader(state);boolean success = false;try {FieldsProducer ret = new FSTTermsReader(state, postingsReader);success = true;return ret;} finally {if (!success) {IOUtils.closeWhileHandlingException(postingsReader);}}}
public ListSubscribedWorkteamsResult listSubscribedWorkteams(ListSubscribedWorkteamsRequest request) {request = beforeClientExecution(request);return executeListSubscribedWorkteams(request);}
public BatchDeleteAttributesRequest(String domainName, java.util.List<DeletableItem> items) {setDomainName(domainName);setItems(items);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(_value ? 1 : 0);}
public NavigableMap<K, V> descendingMap() {return new BoundedMap(!ascending, from, fromBound, to, toBound);}
public ByteBuffer putLong(long value) {int newPosition = position + SizeOf.LONG;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeLong(backingArray, offset + position, value, order);position = newPosition;return this;}
public CFRecordsAggregate get(int index) {checkIndex(index);return _cfHeaders.get(index);}
public long get(int index) {final int o = index / 9;final int b = index % 9;final int shift = b * 7;return (blocks[o] >>> shift) & 127L;}
public GetSegmentsResult getSegments(GetSegmentsRequest request) {request = beforeClientExecution(request);return executeGetSegments(request);}
public DeleteVpcEndpointsResult deleteVpcEndpoints(DeleteVpcEndpointsRequest request) {request = beforeClientExecution(request);return executeDeleteVpcEndpoints(request);}
public String toString() {switch (getCellTypeEnum()) {case BLANK:return "";case BOOLEAN:return getBooleanCellValue()?"TRUE":"FALSE";case ERROR:return ErrorEval.getText((( BoolErrRecord ) _record).getErrorValue());case FORMULA:return getCellFormula();case NUMERIC:if (DateUtil.isCellDateFormatted(this)) {SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy", LocaleUtil.getUserLocale());sdf.setTimeZone(LocaleUtil.getUserTimeZone());return sdf.format(getDateCellValue());}return  String.valueOf(getNumericCellValue());case STRING:return getStringCellValue();default:return "Unknown Cell Type: " + getCellType();}}
public List<? extends HunkHeader> getHunks() {if (hunks == null)return Collections.emptyList();return hunks;}
public ObjectId toObjectId() {ensureId();return idBuffer.toObjectId();}
public ListQueuesRequest(String queueNamePrefix) {setQueueNamePrefix(queueNamePrefix);}
public AcceptTransitGatewayPeeringAttachmentResult acceptTransitGatewayPeeringAttachment(AcceptTransitGatewayPeeringAttachmentRequest request) {request = beforeClientExecution(request);return executeAcceptTransitGatewayPeeringAttachment(request);}
public String toString() {final int n = length();final StringBuilder b = new StringBuilder(n);for (int i = 0; i < n; i++)b.append(charAt(i));return b.toString();}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("(");for (int i = 0 ; i < disjuncts.length; i++) {Query subquery = disjuncts[i];if (subquery instanceof BooleanQuery) {   buffer.append("(");buffer.append(subquery.toString(field));buffer.append(")");}else buffer.append(subquery.toString(field));if (i != disjuncts.length-1) buffer.append(" | ");}buffer.append(")");if (tieBreakerMultiplier != 0.0f) {buffer.append("~");buffer.append(tieBreakerMultiplier);}return buffer.toString();}
@Override public boolean isEmpty() {return c.isEmpty();}
public String getContentDisposition() {return contentDisposition;}
public DescribeHsmClientCertificatesResult describeHsmClientCertificates() {return describeHsmClientCertificates(new DescribeHsmClientCertificatesRequest());}
public static int[] grow(int[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Integer.BYTES));} elsereturn array;}
public String highlightTerm(String originalText, TokenGroup tokenGroup) {if (tokenGroup.getTotalScore() <= 0) {return originalText;}StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());returnBuffer.append(preTag);returnBuffer.append(originalText);returnBuffer.append(postTag);return returnBuffer.toString();}
public LimitTokenCountFilter(TokenStream in, int maxTokenCount, boolean consumeAllTokens) {super(in);if (maxTokenCount < 1) {throw new IllegalArgumentException("maxTokenCount must be greater than zero");}this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}
public void encode(int[] values, int valuesOffset, byte[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = writeLong(block, blocks, blocksOffset);}}
public TokenFilter create(TokenStream input) {return new ClassicFilter(input);}
public boolean isAllowThin() {return allowThin;}
public boolean contains(Object o) {if (!(o instanceof Entry))return false;Entry<?, ?> e = (Entry<?, ?>) o;return containsMapping(e.getKey(), e.getValue());}
public void add(long v) throws IOException {assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;assert !finished;if (valueCount != -1 && written >= valueCount) {throw new EOFException("Writing past end of stream");}nextValues[off++] = v;if (off == nextValues.length) {flush();}++written;}
public GetOnlineServiceResultRequest() {super("industry-brain", "2018-07-12", "GetOnlineServiceResult");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public void setBigFileThreshold(int bigFileThreshold) {this.bigFileThreshold = bigFileThreshold;}
public boolean isEmpty() {return size == 0;}
public int compareTo(ScoreTerm other) {if (term.bytesEquals(other.term))return 0; if (this.boost == other.boost)return other.term.compareTo(this.term);elsereturn Float.compare(this.boost, other.boost);}
public int codePointCount(int start, int end) {if (start < 0 || end > count || start > end) {throw startEndAndLength(start, end);}return Character.codePointCount(value, start, end - start);}
public String[] getCommitNames() {return commitNames;}
public boolean isEmpty() {if (sizeIsValid)return 0 == size;return !iterator().hasNext();}
public boolean isBorder(){return border.isSet(field_1_options);}
public DeleteLaunchTemplateVersionsResult deleteLaunchTemplateVersions(DeleteLaunchTemplateVersionsRequest request) {request = beforeClientExecution(request);return executeDeleteLaunchTemplateVersions(request);}
public DescribeDeviceResult describeDevice(DescribeDeviceRequest request) {request = beforeClientExecution(request);return executeDescribeDevice(request);}
public static Class<? extends TokenizerFactory> lookupClass(String name) {return loader.lookupClass(name);}
public CreateParameterGroupResult createParameterGroup(CreateParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateParameterGroup(request);}
public FieldsQuery(SrndQuery q, String fieldName, char fieldOp) {this.q = q;fieldNames = new ArrayList<>();fieldNames.add(fieldName);this.fieldOp = fieldOp;}
public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings(DescribeReservedCacheNodesOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedCacheNodesOfferings(request);}
public String toString() {final StringBuilder s = new StringBuilder();s.append(Constants.typeString(getType()));s.append(' ');s.append(name());s.append(' ');appendCoreFlags(s);return s.toString();}
public UpdateTableReplicaAutoScalingResult updateTableReplicaAutoScaling(UpdateTableReplicaAutoScalingRequest request) {request = beforeClientExecution(request);return executeUpdateTableReplicaAutoScaling(request);}
public ValidateConfigurationResult validateConfiguration(ValidateConfigurationRequest request) {request = beforeClientExecution(request);return executeValidateConfiguration(request);}
public ModifyReservedInstancesResult modifyReservedInstances(ModifyReservedInstancesRequest request) {request = beforeClientExecution(request);return executeModifyReservedInstances(request);}
public void ReInit(CharStream stream, int lexState){ReInit(stream);SwitchTo(lexState);}
public DeleteIdentityResult deleteIdentity(DeleteIdentityRequest request) {request = beforeClientExecution(request);return executeDeleteIdentity(request);}
public PackConfig(Config cfg) {fromConfig(cfg);}
public StringBuilder append(float f) {RealToString.getInstance().appendFloat(this, f);return this;}
public DeleteBrokerResult deleteBroker(DeleteBrokerRequest request) {request = beforeClientExecution(request);return executeDeleteBroker(request);}
public static String stripTags(StringBuilder buf, int start) {return stripTags(buf.substring(start),0);}
public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {double idf = 0d; List<Explanation> subs = new ArrayList<>();for (final TermStatistics stat : termStats ) {Explanation idfExplain = idfExplain(collectionStats, stat);subs.add(idfExplain);idf += idfExplain.getValue().floatValue();}return Explanation.match((float) idf, "idf(), sum of:", subs);}
public CalcCountRecord clone() {return copy();}
public boolean matches(ParseTree tree, String pattern, int patternRuleIndex) {ParseTreePattern p = compile(pattern, patternRuleIndex);return matches(tree, p);}
public int addConditionalFormatting(CellRangeAddress[] regions,HSSFConditionalFormattingRule rule1) {return addConditionalFormatting(regions, rule1 == null ?null : new HSSFConditionalFormattingRule[] { rule1 });}
public long hash1(char carray[]) {final long p = 1099511628211L;long hash = 0xcbf29ce484222325L;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = (hash ^ (d & 0x00FF)) * p;hash = (hash ^ (d >> 8)) * p;}return hash;}
public PutAnomalyDetectorResult putAnomalyDetector(PutAnomalyDetectorRequest request) {request = beforeClientExecution(request);return executePutAnomalyDetector(request);}
public AssociateTransitGatewayRouteTableResult associateTransitGatewayRouteTable(AssociateTransitGatewayRouteTableRequest request) {request = beforeClientExecution(request);return executeAssociateTransitGatewayRouteTable(request);}
public List<String> getIPv4Association(String publicIp) {return EC2MetadataUtils.getItems(EC2_METADATA_ROOT + path+ "ipv4-associations/" + publicIp);}
public void reset() {count = 0;assert forwardCount == 0: "pos=" + pos + " forwardCount=" + forwardCount;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_recalc);}
public final void addConsumingCell(FormulaCellCacheEntry cellLoc) {_consumingCells.add(cellLoc);}
public DeleteUserRequest(String userName) {setUserName(userName);}
public SingleValueVector(ValueEval value) {_value = value;}
public DeleteMethodResult deleteMethod(DeleteMethodRequest request) {request = beforeClientExecution(request);return executeDeleteMethod(request);}
public static CompareResult valueOf(int simpleCompareResult) {if(simpleCompareResult < 0) {return LESS_THAN;}if(simpleCompareResult > 0) {return GREATER_THAN;}return EQUAL;}
public CreatePresetResult createPreset(CreatePresetRequest request) {request = beforeClientExecution(request);return executeCreatePreset(request);}
public S3Origin(String domainName) {setDomainName(domainName);}
public HTMLStripCharFilter create(Reader input) {HTMLStripCharFilter charFilter;if (null == escapedTags) {charFilter = new HTMLStripCharFilter(input);} else {charFilter = new HTMLStripCharFilter(input, escapedTags);}return charFilter;}
public void setCurrent(char text[], int length) {current = text;cursor = 0;limit = length;limit_backward = 0;bra = cursor;ket = limit;}
public DisableTransitGatewayRouteTablePropagationResult disableTransitGatewayRouteTablePropagation(DisableTransitGatewayRouteTablePropagationRequest request) {request = beforeClientExecution(request);return executeDisableTransitGatewayRouteTablePropagation(request);}
public UpdateTagsForDomainResult updateTagsForDomain(UpdateTagsForDomainRequest request) {request = beforeClientExecution(request);return executeUpdateTagsForDomain(request);}
public ObjectId getPeeledObjectId() {return peeledObjectId;}
public LexerActionExecutor(LexerAction[] lexerActions) {this.lexerActions = lexerActions;int hash = MurmurHash.initialize();for (LexerAction lexerAction : lexerActions) {hash = MurmurHash.update(hash, lexerAction);}this.hashCode = MurmurHash.finish(hash, lexerActions.length);}
public SetAlarmStateResult setAlarmState(SetAlarmStateRequest request) {request = beforeClientExecution(request);return executeSetAlarmState(request);}
public final File getFile() {return configFile;}
public DescribeUsersResult describeUsers(DescribeUsersRequest request) {request = beforeClientExecution(request);return executeDescribeUsers(request);}
public PagedMutable(long size, int pageSize, int bitsPerValue, float acceptableOverheadRatio) {this(size, pageSize, PackedInts.fastestFormatAndBits(pageSize, bitsPerValue, acceptableOverheadRatio));fillPages();}
public CFHeaderRecord() {createEmpty();}
public GetDataSourceResult getDataSource(GetDataSourceRequest request) {request = beforeClientExecution(request);return executeGetDataSource(request);}
public void serialize(LittleEndianOutput out) {out.writeDouble(field_1_margin);}
public DeleteProfilingGroupResult deleteProfilingGroup(DeleteProfilingGroupRequest request) {request = beforeClientExecution(request);return executeDeleteProfilingGroup(request);}
public IntBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public void setup(int id, int progress, boolean fromUser) {mId = id;mProgress = progress;mFromUser = fromUser;}
public static FuncVarPtg create(LittleEndianInput in)  {return create(in.readByte(), in.readUShort());}
public CreateAttendeeResult createAttendee(CreateAttendeeRequest request) {request = beforeClientExecution(request);return executeCreateAttendee(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[EXTERNALNAME]\n");sb.append("    .options = ").append(field_1_option_flag).append("\n");sb.append("    .ix      = ").append(field_2_ixals).append("\n");sb.append("    .name    = ").append(field_4_name).append("\n");if(field_5_name_definition != null) {Ptg[] ptgs = field_5_name_definition.getTokens();for (Ptg ptg : ptgs) {sb.append("    .namedef = ").append(ptg).append(ptg.getRVAType()).append("\n");}}sb.append("[/EXTERNALNAME]\n");return sb.toString();}
public DescribeDBClusterParameterGroupsResult describeDBClusterParameterGroups(DescribeDBClusterParameterGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterParameterGroups(request);}
public PropertyTable(HeaderBlock headerBlock){_header_block = headerBlock;_bigBigBlockSize = headerBlock.getBigBlockSize();addProperty(new RootProperty());}
public int getIndexOfName(String name) {for (int i = 0; i < _externalNameRecords.length; i++) {if (_externalNameRecords[i].getText().equalsIgnoreCase(name)) {return i;}}return -1;}
public AbortVaultLockResult abortVaultLock(AbortVaultLockRequest request) {request = beforeClientExecution(request);return executeAbortVaultLock(request);}
public CreateBatchPredictionResult createBatchPrediction(CreateBatchPredictionRequest request) {request = beforeClientExecution(request);return executeCreateBatchPrediction(request);}
public ListHostedZonesByNameResult listHostedZonesByName(ListHostedZonesByNameRequest request) {request = beforeClientExecution(request);return executeListHostedZonesByName(request);}
public final PersonIdent getAuthorIdent() {final byte[] raw = buffer;final int nameB = RawParseUtils.author(raw, 0);if (nameB < 0)return null;return RawParseUtils.parsePersonIdent(raw, nameB);}
public RecordLifecycleActionHeartbeatResult recordLifecycleActionHeartbeat(RecordLifecycleActionHeartbeatRequest request) {request = beforeClientExecution(request);return executeRecordLifecycleActionHeartbeat(request);}
public void flush() {if (logger!=null) {logger.flush();}}
public GetLoadBalancerTlsCertificatesResult getLoadBalancerTlsCertificates(GetLoadBalancerTlsCertificatesRequest request) {request = beforeClientExecution(request);return executeGetLoadBalancerTlsCertificates(request);}
public ExtSSTRecord createExtSSTRecord(int sstOffset) {if (bucketAbsoluteOffsets == null || bucketRelativeOffsets == null) {throw new IllegalStateException("SST record has not yet been serialized.");}ExtSSTRecord extSST = new ExtSSTRecord();extSST.setNumStringsPerBucket((short)8);int[] absoluteOffsets = bucketAbsoluteOffsets.clone();int[] relativeOffsets = bucketRelativeOffsets.clone();for ( int i = 0; i < absoluteOffsets.length; i++ ) {absoluteOffsets[i] += sstOffset;}extSST.setBucketOffsets(absoluteOffsets, relativeOffsets);return extSST;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());}
public ListMultipartUploadsResult listMultipartUploads(ListMultipartUploadsRequest request) {request = beforeClientExecution(request);return executeListMultipartUploads(request);}
public BytesRef add(BytesRef prefix, BytesRef output) {assert prefix != null;assert output != null;if (prefix == NO_OUTPUT) {return output;} else if (output == NO_OUTPUT) {return prefix;} else {assert prefix.length > 0;assert output.length > 0;BytesRef result = new BytesRef(prefix.length + output.length);System.arraycopy(prefix.bytes, prefix.offset, result.bytes, 0, prefix.length);System.arraycopy(output.bytes, output.offset, result.bytes, prefix.length, output.length);result.length = prefix.length + output.length;return result;}}
public void setParams(String params) {super.setParams(params);doWait = Boolean.valueOf(params).booleanValue();}
public RunBackgroundTask(PerfTask task, boolean letChildReport) {this.task = task;this.letChildReport = letChildReport;}
public GridsetRecord clone() {return copy();}
public BoundSheetRecord(String sheetname) {field_2_option_flags = 0;setSheetname(sheetname);}
public MFADevice(String userName, String serialNumber, java.util.Date enableDate) {setUserName(userName);setSerialNumber(serialNumber);setEnableDate(enableDate);}
public DescribeStreamSummaryResult describeStreamSummary(DescribeStreamSummaryRequest request) {request = beforeClientExecution(request);return executeDescribeStreamSummary(request);}
public ListClusterJobsResult listClusterJobs(ListClusterJobsRequest request) {request = beforeClientExecution(request);return executeListClusterJobs(request);}
public int compareTo(String version) {long gen = Long.parseLong(version, RADIX);long commitGen = commit.getGeneration();return commitGen < gen ? -1 : (commitGen > gen ? 1 : 0);}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChildren() == null || getChildren().size() == 0)return "";StringBuilder sb = new StringBuilder();String filler = "";for (QueryNode child : getChildren()) {sb.append(filler).append(child.toQueryString(escapeSyntaxParser));filler = ",";}return "[MTP[" + sb.toString() + "]]";}
public final float readFloat() throws IOException {return Float.intBitsToFloat(readInt());}
public boolean isSubTotal(int rowIndex, int columnIndex){boolean subtotal = false;EvaluationCell cell = getSheet().getCell(rowIndex, columnIndex);if(cell != null && cell.getCellType() == CellType.FORMULA){EvaluationWorkbook wb = _bookEvaluator.getWorkbook();for(Ptg ptg : wb.getFormulaTokens(cell)){if(ptg instanceof FuncVarPtg){FuncVarPtg f = (FuncVarPtg)ptg;if("SUBTOTAL".equals(f.getName())) {subtotal = true;break;}}}}return subtotal;}
public CreateMonitoringScheduleResult createMonitoringSchedule(CreateMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeCreateMonitoringSchedule(request);}
public TokenStream create(TokenStream input) {return new CzechStemFilter(input);}
public GetSpeechSynthesisTaskResult getSpeechSynthesisTask(GetSpeechSynthesisTaskRequest request) {request = beforeClientExecution(request);return executeGetSpeechSynthesisTask(request);}
public FuzzySet downsize(FieldInfo fieldInfo, FuzzySet initialSet) {float targetMaxSaturation = 0.1f;return initialSet.downsize(targetMaxSaturation);}
public MonitorInstancesResult monitorInstances(MonitorInstancesRequest request) {request = beforeClientExecution(request);return executeMonitorInstances(request);}
public ListDocumentClassifiersResult listDocumentClassifiers(ListDocumentClassifiersRequest request) {request = beforeClientExecution(request);return executeListDocumentClassifiers(request);}
public String toString() {StringBuilder buffer = new StringBuilder();for (int i = 0; i < fields.length; i++) {buffer.append(fields[i].toString());if ((i+1) < fields.length)buffer.append(',');}return buffer.toString();}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_axisType);out.writeInt(field_2_reserved1);out.writeInt(field_3_reserved2);out.writeInt(field_4_reserved3);out.writeInt(field_5_reserved4);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | (byte2 >>> 4);final long byte3 = blocks[blocksOffset++] & 0xFF;final long byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;}}
public StashDropCommand setStashRef(int stashRef) {if (stashRef < 0)throw new IllegalArgumentException();stashRefEntry = stashRef;return this;}
public CreateHITWithHITTypeResult createHITWithHITType(CreateHITWithHITTypeRequest request) {request = beforeClientExecution(request);return executeCreateHITWithHITType(request);}
public void setPlaceholder(int index, Ptg token) {if (_ptgs[index] != null) {throw new IllegalStateException("Invalid placeholder index (" + index + ")");}_ptgs[index] = token;}
public Area3DPtg(LittleEndianInput in)  {field_1_index_extern_sheet = in.readShort();readCoordinates(in);}
public UpdateNotebookInstanceResult updateNotebookInstance(UpdateNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeUpdateNotebookInstance(request);}
public org.apache.poi.hssf.record.Record findFirstRecordBySid(short sid) {for (org.apache.poi.hssf.record.Record record : records.getRecords() ) {if (record.getSid() == sid) {return record;}}return null;}
public void fromString(byte[] buf, int offset) {fromHexString(buf, offset);}
public AttachInstancesResult attachInstances(AttachInstancesRequest request) {request = beforeClientExecution(request);return executeAttachInstances(request);}
public NotifyWorkersResult notifyWorkers(NotifyWorkersRequest request) {request = beforeClientExecution(request);return executeNotifyWorkers(request);}
public CommitCommand commit() {return new CommitCommand(repo);}
public BufferedIndexInput clone() {BufferedIndexInput clone = (BufferedIndexInput)super.clone();clone.buffer = null;clone.bufferLength = 0;clone.bufferPosition = 0;clone.bufferStart = getFilePointer();return clone;}
public boolean hasEntry( String name ){return name != null && _byname.containsKey( name );}
public MorfologikFilterFactory(Map<String,String> args) {super(args);final String DICTIONARY_RESOURCE_ATTRIBUTE = "dictionary-resource";String dictionaryResource = get(args, DICTIONARY_RESOURCE_ATTRIBUTE);if (dictionaryResource != null && !dictionaryResource.isEmpty()) {throw new IllegalArgumentException("The " + DICTIONARY_RESOURCE_ATTRIBUTE + " attribute is no "+ "longer supported. Use the '" + DICTIONARY_ATTRIBUTE + "' attribute instead (see LUCENE-6833).");}resourceName = get(args, DICTIONARY_ATTRIBUTE);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static DVConstraint createNumericConstraint(int validationType, int comparisonOperator,String expr1, String expr2) {switch (validationType) {case ValidationType.ANY:if (expr1 != null || expr2 != null) {throw new IllegalArgumentException("expr1 and expr2 must be null for validation type 'any'");}break;case ValidationType.DECIMAL:case ValidationType.INTEGER:case ValidationType.TEXT_LENGTH:if (expr1 == null) {throw new IllegalArgumentException("expr1 must be supplied");}OperatorType.validateSecondArg(comparisonOperator, expr2);break;default:throw new IllegalArgumentException("Validation Type ("+ validationType + ") not supported with this method");}String formula1 = getFormulaFromTextExpression(expr1);Double value1 = formula1 == null ? convertNumber(expr1) : null;String formula2 = getFormulaFromTextExpression(expr2);Double value2 = formula2 == null ? convertNumber(expr2) : null;return new DVConstraint(validationType, comparisonOperator, formula1, formula2, value1, value2, null);}
public UpdateUsageResult updateUsage(UpdateUsageRequest request) {request = beforeClientExecution(request);return executeUpdateUsage(request);}
public UpdateEvaluationResult updateEvaluation(UpdateEvaluationRequest request) {request = beforeClientExecution(request);return executeUpdateEvaluation(request);}
public ProtectRecord(boolean isProtected) {this(0);setProtect(isProtected);}
public void serialize(LittleEndianOutput out) {out.writeShort(recordType);out.writeShort(grbitFrt);associatedRange.serialize(out);}
public GetDocumentPathResult getDocumentPath(GetDocumentPathRequest request) {request = beforeClientExecution(request);return executeGetDocumentPath(request);}
public CreateTransitGatewayVpcAttachmentResult createTransitGatewayVpcAttachment(CreateTransitGatewayVpcAttachmentRequest request) {request = beforeClientExecution(request);return executeCreateTransitGatewayVpcAttachment(request);}
public boolean isLarge() {return true;}
public DisassociateSubnetCidrBlockResult disassociateSubnetCidrBlock(DisassociateSubnetCidrBlockRequest request) {request = beforeClientExecution(request);return executeDisassociateSubnetCidrBlock(request);}
public static byte[] encode(String str) {final ByteBuffer bb = UTF_8.encode(str);final int len = bb.limit();if (bb.hasArray() && bb.arrayOffset() == 0) {final byte[] arr = bb.array();if (arr.length == len)return arr;}final byte[] arr = new byte[len];bb.get(arr);return arr;}
public DescribePlacementGroupsResult describePlacementGroups() {return describePlacementGroups(new DescribePlacementGroupsRequest());}
public UpdateTrialResult updateTrial(UpdateTrialRequest request) {request = beforeClientExecution(request);return executeUpdateTrial(request);}
public DeleteTransitGatewayPeeringAttachmentResult deleteTransitGatewayPeeringAttachment(DeleteTransitGatewayPeeringAttachmentRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGatewayPeeringAttachment(request);}
public boolean isLarge() {try {getCachedBytes();return false;} catch (LargeObjectException tooBig) {return true;}}
public synchronized Collection<V> values() {Collection<V> vs = values;return (vs != null) ? vs : (values = new Values());}
public EscherComplexProperty(short propertyNumber, boolean isBlipId, byte[] complexData) {this(propertyNumber, isBlipId, complexData == null ? 0 : complexData.length);setComplexData(complexData);}
public DeleteMatchmakingRuleSetResult deleteMatchmakingRuleSet(DeleteMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeDeleteMatchmakingRuleSet(request);}
public UnassignIpv6AddressesResult unassignIpv6Addresses(UnassignIpv6AddressesRequest request) {request = beforeClientExecution(request);return executeUnassignIpv6Addresses(request);}
public boolean equals(Object _other) {if ((_other instanceof FacetResult) == false) {return false;}FacetResult other = (FacetResult) _other;return value.equals(other.value) &&childCount == other.childCount &&Arrays.equals(labelValues, other.labelValues);}
public ConfirmSubscriptionRequest(String topicArn, String token) {setTopicArn(topicArn);setToken(token);}
public Ref put(String keyName, Ref value) {String name = toRefName(keyName);if (!name.equals(value.getName()))throw new IllegalArgumentException();if (!resolved.isEmpty()) {for (Ref ref : resolved)loose = loose.put(ref);resolved = RefList.emptyList();}int idx = loose.find(name);if (0 <= idx) {Ref prior = loose.get(name);loose = loose.set(idx, value);return prior;}Ref prior = get(keyName);loose = loose.add(idx, value);sizeIsValid = false;return prior;}
public void respondActivityTaskCanceled(RespondActivityTaskCanceledRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskCanceled(request);}
public DocumentInputStream createDocumentInputStream(final Entry document)throws IOException{if (!document.isDocumentEntry()) {throw new IOException("Entry '" + document.getName()+ "' is not a DocumentEntry");}DocumentEntry entry = (DocumentEntry)document;return new DocumentInputStream(entry);}
public DescribeInstanceStatusResult describeInstanceStatus() {return describeInstanceStatus(new DescribeInstanceStatusRequest());}
public boolean requiresCommitBody() {return true;}
public BinaryHunk getReverseBinaryHunk() {return reverseBinaryHunk;}
public static synchronized CoderResult malformedForLength(int length)throws IllegalArgumentException {if (length > 0) {Integer key = Integer.valueOf(length);synchronized (_malformedErrors) {CoderResult r = _malformedErrors.get(key);if (r == null) {r = new CoderResult(TYPE_MALFORMED_INPUT, length);_malformedErrors.put(key, r);}return r;}}throw new IllegalArgumentException("Length must be greater than 0; was " + length);}
public ByteBuffer get(byte[] dst, int dstOffset, int byteCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, byteCount);if (byteCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + byteCount; ++i) {dst[i] = get();}return this;}
public final ObjectId getObjectId(int nthPosition) {if (nthPosition >= 0)return getObjectId((long) nthPosition);final int u31 = nthPosition >>> 1;final int one = nthPosition & 1;return getObjectId(((long) u31) << 1 | one);}
public UpdateRoomMembershipResult updateRoomMembership(UpdateRoomMembershipRequest request) {request = beforeClientExecution(request);return executeUpdateRoomMembership(request);}
public void formatValue(StringBuffer toAppendTo, Object value) {double elapsed = ((Number) value).doubleValue();if (elapsed < 0) {toAppendTo.append('-');elapsed = -elapsed;}Object[] parts = new Long[specs.size()];for (int i = 0; i < specs.size(); i++) {parts[i] = specs.get(i).valueFor(elapsed);}try (Formatter formatter = new Formatter(toAppendTo, Locale.ROOT)) {formatter.format(printfFmt, parts);}}
public void writeDouble(double v) {writeContinueIfRequired(8);_ulrOutput.writeDouble(v);}
public CancelExportTaskResult cancelExportTask(CancelExportTaskRequest request) {request = beforeClientExecution(request);return executeCancelExportTask(request);}
public String toString() {if (length == 0) {return "FacetLabel: []";}String[] parts = new String[length];System.arraycopy(components, 0, parts, 0, length);return "FacetLabel: " + Arrays.toString(parts);}
public DescribeEventTrackerResult describeEventTracker(DescribeEventTrackerRequest request) {request = beforeClientExecution(request);return executeDescribeEventTracker(request);}
public UpdateJourneyResult updateJourney(UpdateJourneyRequest request) {request = beforeClientExecution(request);return executeUpdateJourney(request);}
public RemoveTagsFromVaultResult removeTagsFromVault(RemoveTagsFromVaultRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromVault(request);}
public RevertCommand include(Ref commit) {checkCallable();commits.add(commit);return this;}
public DeleteFargateProfileResult deleteFargateProfile(DeleteFargateProfileRequest request) {request = beforeClientExecution(request);return executeDeleteFargateProfile(request);}
public boolean evaluate(int cmpResult) {switch (_code) {case NONE:case EQ:return cmpResult == 0;case NE: return cmpResult != 0;case LT: return cmpResult <  0;case LE: return cmpResult <= 0;case GT: return cmpResult >  0;case GE: return cmpResult >= 0;}throw new RuntimeException("Cannot call boolean evaluate on non-equality operator '"+ _representation + "'");}
public SeriesRecord getSeries() {return series;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[UNCALCED]\n");buffer.append("    _reserved: ").append(_reserved).append('\n');buffer.append("[/UNCALCED]\n");return buffer.toString();}
public ListBotsResult listBots(ListBotsRequest request) {request = beforeClientExecution(request);return executeListBots(request);}
public int getPort() {return port;}
public void writeLong(long value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeLong(value);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {I_MatchPredicate mp = createCriteriaPredicate(arg1, srcRowIndex, srcColumnIndex);if(mp == null) {return NumberEval.ZERO;}double result = countMatchingCellsInArea(arg0, mp);return new NumberEval(result);}
public boolean requiresCommitBody() {return true;}
public DeleteVpcResult deleteVpc(DeleteVpcRequest request) {request = beforeClientExecution(request);return executeDeleteVpc(request);}
public VoteOnProposalResult voteOnProposal(VoteOnProposalRequest request) {request = beforeClientExecution(request);return executeVoteOnProposal(request);}
public void grow() {costs = ArrayUtil.grow(costs, 1+count);lastRightID = ArrayUtil.grow(lastRightID, 1+count);backPos = ArrayUtil.grow(backPos, 1+count);backIndex = ArrayUtil.grow(backIndex, 1+count);backID = ArrayUtil.grow(backID, 1+count);final Type[] newBackType = new Type[backID.length];System.arraycopy(backType, 0, newBackType, 0, backType.length);backType = newBackType;}
public String toString() {return "MERGE_BASE"; }
public float readFloat() throws IOException {return primitiveTypes.readFloat();}
public String substring(int start) {if (start >= 0 && start <= count) {if (start == count) {return "";}return new String(value, start, count - start);}throw indexAndLength(start);}
public DBCellRecord(RecordInputStream in) {field_1_row_offset   = in.readUShort();int size = in.remaining();field_2_cell_offsets = new short[ size / 2 ];for (int i=0;i<field_2_cell_offsets.length;i++) {field_2_cell_offsets[ i ] = in.readShort();}}
public DefaultAcsClient(IClientProfile profile) {this(profile, new StaticCredentialsProvider(profile));}
public int findStartOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 1 ) return start;int offset, count = maxScan;for( offset = start; offset > 0 && count > 0; count-- ){if( boundaryChars.contains( buffer.charAt( offset - 1 ) ) ) return offset;offset--;}if (offset == 0) {return 0;}return start;}
public BufferedTokenStream(TokenSource tokenSource) {if (tokenSource == null) {throw new NullPointerException("tokenSource cannot be null");}this.tokenSource = tokenSource;}
public final boolean isDirect() {return false;}
public TokenMgrError(String message, int reason) {super(message);errorCode = reason;}
public int getCells() {int size = 0;for (Row row : rows)size += row.getCells();return size;}
public int findStartOfRowOutlineGroup(int row) {RowRecord rowRecord = this.getRow( row );int level = rowRecord.getOutlineLevel();int currentRow = row;while (currentRow >= 0 && this.getRow( currentRow ) != null) {rowRecord = this.getRow( currentRow );if (rowRecord.getOutlineLevel() < level) {return currentRow + 1;}currentRow--;}return currentRow + 1;}
public DirCacheBuildIterator(DirCacheBuilder dcb) {super(dcb.getDirCache());builder = dcb;}
public DeleteGraphResult deleteGraph(DeleteGraphRequest request) {request = beforeClientExecution(request);return executeDeleteGraph(request);}
public String toString() {return "id=" + id + " version=" + version + " files=" + sourceFiles;}
public static Calendar parseDate(String strVal) throws EvaluationException {String[] parts = Pattern.compile("/").split(strVal);if (parts.length != 3) {throw new EvaluationException(ErrorEval.VALUE_INVALID);}String part2 = parts[2];int spacePos = part2.indexOf(' ');if (spacePos > 0) {part2 = part2.substring(0, spacePos);}int f0;int f1;int f2;try {f0 = Integer.parseInt(parts[0]);f1 = Integer.parseInt(parts[1]);f2 = Integer.parseInt(part2);} catch (NumberFormatException e) {throw new EvaluationException(ErrorEval.VALUE_INVALID);}if (f0 < 0 || f1 < 0 || f2 < 0 || (f0 > 12 && f1 > 12 && f2 > 12)) {throw new EvaluationException(ErrorEval.VALUE_INVALID);}if (f0 >= 1900 && f0 < 9999) {return makeDate(f0, f1, f2);}throw new RuntimeException("Unable to determine date format for text '" + strVal + "'");}
public void removeMMClipCount() {remove1stProperty(PropertyIDMap.PID_MMCLIPCOUNT);}
public void setDeltaCacheSize(long size) {deltaCacheSize = size;}
public UpdateKnowledgeRequest() {super("Chatbot", "2017-10-11", "UpdateKnowledge", "beebot");setMethod(MethodType.POST);}
public void readBytes(byte[] b, int offset, int len) {for(int i=0;i<len;i++) {b[offset+i] = bytes[pos--];}}
public void fillArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"fillArc not supported");}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex,ValueEval arg0, ValueEval arg1) {double result;try {ValueVector vvY = createValueVector(arg0);ValueVector vvX = createValueVector(arg1);int size = vvX.getSize();if (size == 0 || vvY.getSize() != size) {return ErrorEval.NA;}result = evaluateInternal(vvX, vvY, size);} catch (EvaluationException e) {return e.getErrorEval();}if (Double.isNaN(result) || Double.isInfinite(result)) {return ErrorEval.NUM_ERROR;}return new NumberEval(result);}
public void copyUpdatedCells(Workbook workbook) {_sewb.copyUpdatedCells(workbook);}
@Override public final String toString() {return key + "=" + value;}
public DescribeReservedInstancesOfferingsResult describeReservedInstancesOfferings() {return describeReservedInstancesOfferings(new DescribeReservedInstancesOfferingsRequest());}
public CacheParameterGroup createCacheParameterGroup(CreateCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateCacheParameterGroup(request);}
public OldStringRecord(RecordInputStream in) {sid = in.getSid();if (in.getSid() == biff2_sid) {field_1_string_len  = (short)in.readUByte();} else {field_1_string_len   = in.readShort();}field_2_bytes = IOUtils.safelyAllocate(field_1_string_len, MAX_RECORD_LENGTH);in.read(field_2_bytes, 0, field_1_string_len);}
public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null ? fst.ramBytesUsed() : 0)+ RamUsageEstimator.sizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}
public void fillRect(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor( x, y, x + width, y + height ) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_RECTANGLE);shape.setLineStyle(HSSFShape.LINESTYLE_NONE);shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());}
public void add(OneMerge merge) {merges.add(merge);}
public long computeNorm(FieldInvertState state) {return sims[0].computeNorm(state);}
public PolicyAttribute(String attributeName, String attributeValue) {setAttributeName(attributeName);setAttributeValue(attributeValue);}
public String getAccessKeyId() {return publicKeyId;}
public ListJourneysResult listJourneys(ListJourneysRequest request) {request = beforeClientExecution(request);return executeListJourneys(request);}
public FormulaCellCacheEntry getOrCreateFormulaCellEntry(EvaluationCell cell) {FormulaCellCacheEntry result = _formulaCellCache.get(cell);if (result == null) {result = new FormulaCellCacheEntry();_formulaCellCache.put(cell, result);}return result;}
public StartHumanLoopResult startHumanLoop(StartHumanLoopRequest request) {request = beforeClientExecution(request);return executeStartHumanLoop(request);}
public List<RefSpec> getRefSpecs() {return refSpecs;}
public void build(InputIterator iterator) throws IOException {if (iterator.hasPayloads()) {throw new IllegalArgumentException("this suggester doesn't support payloads");}if (iterator.hasContexts()) {throw new IllegalArgumentException("this suggester doesn't support contexts");}count = 0;BytesRef scratch = new BytesRef();InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);IntsRefBuilder scratchInts = new IntsRefBuilder();BytesRefBuilder previous = null;PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);while ((scratch = iter.next()) != null) {long cost = iter.weight();if (previous == null) {previous = new BytesRefBuilder();} else if (scratch.equals(previous.get())) {continue; }Util.toIntsRef(scratch, scratchInts);fstCompiler.add(scratchInts.get(), cost);previous.copyBytes(scratch);count++;}fst = fstCompiler.compile();}
public Comparator<? super K> comparator() {if (ascending) {return TreeMap.this.comparator();} else {return Collections.reverseOrder(comparator);}}
public PrintHeadersRecord(RecordInputStream in) {field_1_print_headers = in.readShort();}
public DeleteBranchCommand branchDelete() {return new DeleteBranchCommand(repo);}
public DetectLabelsResult detectLabels(DetectLabelsRequest request) {request = beforeClientExecution(request);return executeDetectLabels(request);}
public FnGroupCountRecord(RecordInputStream in){field_1_count = in.readShort();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {double result;try {double d0 = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double multi = Math.pow(10d,d1);if(d0 < 0) result = -Math.floor(-d0 * multi) / multi;else result = Math.floor(d0 * multi) / multi;checkValue(result);}catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public DoubleBuffer put(double[] src, int srcOffset, int doubleCount) {if (doubleCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, doubleCount);position += doubleCount;return this;}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return getTermEscaped(escaper) + "~" + this.similarity;} else {return this.field + ":" + getTermEscaped(escaper) + "~" + this.similarity;}}
public AbstractBlockPackedWriter(DataOutput out, int blockSize) {checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);reset(out);values = new long[blockSize];}
public String getMessage() {return message;}
public ListAttendeesResult listAttendees(ListAttendeesRequest request) {request = beforeClientExecution(request);return executeListAttendees(request);}
public void reset() {upto = count = 0;posIncr = 1;}
public FeatHdrRecord clone() {return copy();}
public synchronized void addElement(E object) {if (elementCount == elementData.length) {growByOne();}elementData[elementCount++] = object;modCount++;}
public long fileLength(String name) throws IOException {ensureOpen();if (pendingDeletes.contains(name)) {throw new NoSuchFileException("file \"" + name + "\" is pending delete");}return Files.size(directory.resolve(name));}
public PutExternalModelResult putExternalModel(PutExternalModelRequest request) {request = beforeClientExecution(request);return executePutExternalModel(request);}
public PutConferencePreferenceResult putConferencePreference(PutConferencePreferenceRequest request) {request = beforeClientExecution(request);return executePutConferencePreference(request);}
public int size() {return size;}
public CreateApiMappingResult createApiMapping(CreateApiMappingRequest request) {request = beforeClientExecution(request);return executeCreateApiMapping(request);}
public CharBlockArray append(CharSequence chars, int start, int length) {int end = start + length;for (int i = start; i < end; i++) {append(chars.charAt(i));}return this;}
public UpdateAdmChannelResult updateAdmChannel(UpdateAdmChannelRequest request) {request = beforeClientExecution(request);return executeUpdateAdmChannel(request);}
public DirCacheIterator(DirCache dc) {cache = dc;tree = dc.getCacheTree(true);treeStart = 0;treeEnd = tree.getEntrySpan();subtreeId = new byte[Constants.OBJECT_ID_LENGTH];if (!eof())parseEntry();}
public void setBytesRef(BytesRef term, int textStart) {final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];int pos = textStart & BYTE_BLOCK_MASK;if ((bytes[pos] & 0x80) == 0) {term.length = bytes[pos];term.offset = pos+1;} else {term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);term.offset = pos+2;}assert term.length >= 0;}
public Restrictions(GeoRestriction geoRestriction) {setGeoRestriction(geoRestriction);}
public DisableRuleResult disableRule(DisableRuleRequest request) {request = beforeClientExecution(request);return executeDisableRule(request);}
public GetSuppressedDestinationResult getSuppressedDestination(GetSuppressedDestinationRequest request) {request = beforeClientExecution(request);return executeGetSuppressedDestination(request);}
public ListDomainsResult listDomains(ListDomainsRequest request) {request = beforeClientExecution(request);return executeListDomains(request);}
public StartLifecyclePolicyPreviewResult startLifecyclePolicyPreview(StartLifecyclePolicyPreviewRequest request) {request = beforeClientExecution(request);return executeStartLifecyclePolicyPreview(request);}
public CreateDiskFromSnapshotResult createDiskFromSnapshot(CreateDiskFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateDiskFromSnapshot(request);}
public SubmoduleSyncCommand submoduleSync() {return new SubmoduleSyncCommand(repo);}
public DeleteConfigurationSetTrackingOptionsResult deleteConfigurationSetTrackingOptions(DeleteConfigurationSetTrackingOptionsRequest request) {request = beforeClientExecution(request);return executeDeleteConfigurationSetTrackingOptions(request);}
public V setValue(V value) {if (!allowModify)throw new UnsupportedOperationException();V old = values[lastPos];values[lastPos] = value;return old;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FtPioGrbit ]\n");buffer.append("  size     = ").append(length).append("\n");buffer.append("  flags    = ").append(HexDump.toHex(flags)).append("\n");buffer.append("[/FtPioGrbit ]\n");return buffer.toString();}
static public double ipmt(double r, int per, int nper, double pv, double fv, int type) {double ipmt = fv(r, per - 1, pmt(r, nper, pv, fv, type), pv, type) * r;if (type==1) ipmt /= (1 + r);return ipmt;}
public FileDictionary(InputStream dictFile, String fieldDelimiter) {in = new BufferedReader(IOUtils.getDecodingReader(dictFile, StandardCharsets.UTF_8));this.fieldDelimiter = fieldDelimiter;}
public DocumentSummaryInformation(final PropertySet ps)throws UnexpectedPropertySetTypeException {super(ps);if (!isDocumentSummaryInformation()) {throw new UnexpectedPropertySetTypeException("Not a " + getClass().getName());}}
public EscherBSERecord getBSERecord(int pictureIndex) {return escherBSERecords.get(pictureIndex-1);}
public CreateDetectorVersionResult createDetectorVersion(CreateDetectorVersionRequest request) {request = beforeClientExecution(request);return executeCreateDetectorVersion(request);}
public static DVConstraint createExplicitListConstraint(String[] explicitListValues) {return new DVConstraint(null, explicitListValues);}
public ListGroupsResult listGroups(ListGroupsRequest request) {request = beforeClientExecution(request);return executeListGroups(request);}
public DeleteScriptResult deleteScript(DeleteScriptRequest request) {request = beforeClientExecution(request);return executeDeleteScript(request);}
public DescribeSpotDatafeedSubscriptionResult describeSpotDatafeedSubscription(DescribeSpotDatafeedSubscriptionRequest request) {request = beforeClientExecution(request);return executeDescribeSpotDatafeedSubscription(request);}
public CharArrayReader(char[] buf) {this.buf = buf;this.count = buf.length;}
public CharSequence subSequence(int start, int end) {return substring(start, end);}
public Builder(boolean dedup) {this.dedup = dedup;}
public synchronized void setPerfObject(String key, Object obj) {perfObjects.put(key, obj);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[DIMENSIONS]\n");buffer.append("    .firstrow       = ").append(Integer.toHexString(getFirstRow())).append("\n");buffer.append("    .lastrow        = ").append(Integer.toHexString(getLastRow())).append("\n");buffer.append("    .firstcol       = ").append(Integer.toHexString(getFirstCol())).append("\n");buffer.append("    .lastcol        = ").append(Integer.toHexString(getLastCol())).append("\n");buffer.append("    .zero           = ").append(Integer.toHexString(field_5_zero)).append("\n");buffer.append("[/DIMENSIONS]\n");return buffer.toString();}
public ExitStandbyResult exitStandby(ExitStandbyRequest request) {request = beforeClientExecution(request);return executeExitStandby(request);}
public String toString() {return "MultiDocsAndPositionsEnum(" + Arrays.toString(getSubs()) + ")";}
public MergeException(Throwable exc, Directory dir) {super(exc);this.dir = dir;}
public int read(CharBuffer target) throws IOException {int remaining = remaining();if (target == this) {if (remaining == 0) {return -1;}throw new IllegalArgumentException();}if (remaining == 0) {return limit > 0 && target.remaining() == 0 ? 0 : -1;}remaining = Math.min(target.remaining(), remaining);if (remaining > 0) {char[] chars = new char[remaining];get(chars);target.put(chars);}return remaining;}
public final float getFloat() {return Float.intBitsToFloat(getInt());}
public UpdateApplicationRequest(String applicationName) {setApplicationName(applicationName);}
public void initReader(ByteSliceReader reader, int termID, int stream) {assert stream < streamCount;int intStart = postingsArray.intStarts[termID];final int[] ints = intPool.buffers[intStart >> IntBlockPool.INT_BLOCK_SHIFT];final int upto = intStart & IntBlockPool.INT_BLOCK_MASK;reader.init(bytePool,postingsArray.byteStarts[termID]+stream*ByteBlockPool.FIRST_LEVEL_SIZE,ints[upto+stream]);}
public T next() {if (size <= index)throw new NoSuchElementException();T res = block[blkIdx];if (++blkIdx == BLOCK_SIZE) {if (++dirIdx < directory.length)block = directory[dirIdx];elseblock = null;blkIdx = 0;}index++;return res;}
public DescribeOptionGroupOptionsResult describeOptionGroupOptions(DescribeOptionGroupOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeOptionGroupOptions(request);}
public int alloc(int size) {int index = n;int len = array.length;if (n + size >= len) {byte[] aux = new byte[len + blockSize];System.arraycopy(array, 0, aux, 0, len);array = aux;}n += size;return index;}
public String getText() {StringBuilder text = new StringBuilder();for ( TermInfo ti: termsInfos ) {text.append( ti.getText() );}return text.toString();}
public ReplaceableItem(String name) {setName(name);}
public NamePtg(LittleEndianInput in)  {field_1_label_index = in.readUShort();field_2_zero = in.readShort();}
public int indexOf(Object object) {if (object != null) {for (int i = 0; i < a.length; i++) {if (object.equals(a[i])) {return i;}}} else {for (int i = 0; i < a.length; i++) {if (a[i] == null) {return i;}}}return -1;}
public ListContactFlowsResult listContactFlows(ListContactFlowsRequest request) {request = beforeClientExecution(request);return executeListContactFlows(request);}
public int doLogic() throws IOException {String analyzerName = null;try {if (current >= analyzerNames.size()) {current = 0;}analyzerName = analyzerNames.get(current++);Analyzer analyzer = null;if (null == analyzerName || 0 == analyzerName.length()) {analyzerName = "org.apache.lucene.analysis.standard.StandardAnalyzer";}AnalyzerFactory factory = getRunData().getAnalyzerFactories().get(analyzerName);if (null != factory) {analyzer = factory.create();} else {if (analyzerName.contains(".")) {if (analyzerName.startsWith("standard.")) {analyzerName = "org.apache.lucene.analysis." + analyzerName;}analyzer = createAnalyzer(analyzerName);} else { try {String coreClassName = "org.apache.lucene.analysis.core." + analyzerName;analyzer = createAnalyzer(coreClassName);analyzerName = coreClassName;} catch (ClassNotFoundException e) {analyzerName = "org.apache.lucene.analysis." + analyzerName;analyzer = createAnalyzer(analyzerName);}}}getRunData().setAnalyzer(analyzer);} catch (Exception e) {throw new RuntimeException("Error creating Analyzer: " + analyzerName, e);}return 1;}
public int serializeSimplePart( byte[] data, int offset ){LittleEndian.putShort(data, offset, getId());LittleEndian.putInt(data, offset + 2, propertyValue);return 6;}
public static short[] copyOf(short[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
@Override public Iterator<V> iterator() {return new ValueIterator();}
public boolean equals(Object obj) {if (this == obj) {return true;}if (!super.equals(obj)) {return false;}PrefixQuery other = (PrefixQuery) obj;if (!term.equals(other.term)) {return false;}return true;}
public boolean isSheetVeryHidden(int sheetnum) {return getBoundSheetRec(sheetnum).isVeryHidden();}
public UpdateAccessKeyRequest(String accessKeyId, StatusType status) {setAccessKeyId(accessKeyId);setStatus(status.toString());}
public static int countMatchingCellsInArea(ThreeDEval areaEval, I_MatchPredicate criteriaPredicate) {int result = 0;final int firstSheetIndex = areaEval.getFirstSheetIndex();final int lastSheetIndex = areaEval.getLastSheetIndex();for (int sIx = firstSheetIndex; sIx <= lastSheetIndex; sIx++) {int height = areaEval.getHeight();int width = areaEval.getWidth();for (int rrIx=0; rrIx<height; rrIx++) {for (int rcIx=0; rcIx<width; rcIx++) {ValueEval ve = areaEval.getValue(sIx, rrIx, rcIx);if(criteriaPredicate instanceof I_MatchAreaPredicate){I_MatchAreaPredicate areaPredicate = (I_MatchAreaPredicate)criteriaPredicate;if(!areaPredicate.matches(areaEval, rrIx, rcIx)) continue;}if(criteriaPredicate.matches(ve)) {result++;}}}}return result;}
public PushCommand setRefSpecs(List<RefSpec> specs) {checkCallable();this.refSpecs.clear();this.refSpecs.addAll(specs);return this;}
public EscherComplexProperty(short id, int complexSize) {super((short)(id | IS_COMPLEX));complexData = IOUtils.safelyAllocate(complexSize, MAX_RECORD_LENGTH);}
public CreateNodeResult createNode(CreateNodeRequest request) {request = beforeClientExecution(request);return executeCreateNode(request);}
public Note call() throws GitAPIException {checkCallable();NoteMap map = NoteMap.newEmptyMap();RevCommit notesCommit = null;try (RevWalk walk = new RevWalk(repo)) {Ref ref = repo.exactRef(notesRef);if (ref != null) {notesCommit = walk.parseCommit(ref.getObjectId());map = NoteMap.read(walk.getObjectReader(), notesCommit);}return map.getNote(id);} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}}
public void ReInit(CharStream stream){jjmatchedPos = jjnewStateCnt = 0;curLexState = defaultLexState;input_stream = stream;ReInitRounds();}
public boolean add(char[] text) {return map.put(text, PLACEHOLDER) == null;}
public void setDeltaBaseCacheLimit(int newLimit) {deltaBaseCacheLimit = newLimit;}
public ServerException(String errCode, String errMsg, String requestId) {this(errCode, errMsg);this.setRequestId(requestId);}
final public SrndQuery NQuery() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries;Token dt;q = WQuery();label_5:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case N:;break;default:jj_la1[3] = jj_gen;break label_5;}dt = jj_consume_token(N);queries = new ArrayList<SrndQuery>();queries.add(q); q = WQuery();queries.add(q);q = getDistanceQuery(queries, true , dt, false );}{if (true) return q;}throw new Error("Missing return statement in function");}
public MoreLikeThisQuery(String likeText, String[] moreLikeFields, Analyzer analyzer, String fieldName) {this.likeText = Objects.requireNonNull(likeText);this.moreLikeFields = Objects.requireNonNull(moreLikeFields);this.analyzer = Objects.requireNonNull(analyzer);this.fieldName = Objects.requireNonNull(fieldName);}
public DescribeImageAttributeResult describeImageAttribute(DescribeImageAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeImageAttribute(request);}
public void println(Object o) {println(String.valueOf(o));}
public DeregisterFromWorkMailResult deregisterFromWorkMail(DeregisterFromWorkMailRequest request) {request = beforeClientExecution(request);return executeDeregisterFromWorkMail(request);}
public PutClusterCapacityProvidersResult putClusterCapacityProviders(PutClusterCapacityProvidersRequest request) {request = beforeClientExecution(request);return executePutClusterCapacityProviders(request);}
public ChangeMessageVisibilityBatchRequestEntry(String id, String receiptHandle) {setId(id);setReceiptHandle(receiptHandle);}
public StringBuffer append(float f) {RealToString.getInstance().appendFloat(this, f);return this;}
@Override public int compare(T o1, T o2) {return cmp.compare(o2, o1);}
public GetAttributesRequest(String domainName, String itemName) {setDomainName(domainName);setItemName(itemName);}
public String toString() {return getClass().getName() +" [" +_firstMovedIndex +_lastMovedIndex +_amountToMove +"]";}
public final ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {double result;try {result = eval(args, srcCellRow, srcCellCol);checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public DescribeFpgaImagesResult describeFpgaImages(DescribeFpgaImagesRequest request) {request = beforeClientExecution(request);return executeDescribeFpgaImages(request);}
public ObjectDirectoryInserter newInserter() {return new ObjectDirectoryInserter(this, config);}
public LongBuffer put(int index, long c) {checkIndex(index);byteBuffer.putLong(index * SizeOf.LONG, c);return this;}
public boolean isRetainBody() {return retainBody;}
public AddApplicationVpcConfigurationResult addApplicationVpcConfiguration(AddApplicationVpcConfigurationRequest request) {request = beforeClientExecution(request);return executeAddApplicationVpcConfiguration(request);}
public Entry<K, V> next() { return nextEntry(); }
public SpreadsheetVersion getSpreadsheetVersion(){return SpreadsheetVersion.EXCEL97;}
public String[] promptKeyboardInteractive(String destination, String name,String instruction, String[] prompt, boolean[] echo) {CredentialItem.StringType[] v = new CredentialItem.StringType[prompt.length];for (int i = 0; i < prompt.length; i++)v[i] = new CredentialItem.StringType(prompt[i], !echo[i]);List<CredentialItem> items = new ArrayList<>();if (instruction != null && instruction.length() > 0)items.add(new CredentialItem.InformationalMessage(instruction));items.addAll(Arrays.asList(v));if (!provider.get(uri, items))return null; String[] result = new String[v.length];for (int i = 0; i < v.length; i++)result[i] = v[i].getValue();return result;}
public static synchronized MergeStrategy get(String name) {return STRATEGIES.get(name);}
public AssociateConnectionWithLagResult associateConnectionWithLag(AssociateConnectionWithLagRequest request) {request = beforeClientExecution(request);return executeAssociateConnectionWithLag(request);}
public short getShortValue(final short holder){return ( short ) getValue(holder);}
public static BreakIterator getSentenceInstance() {return getSentenceInstance(Locale.getDefault());}
public MissingObjectException(ObjectId id, String type) {super(MessageFormat.format(JGitText.get().missingObject, type, id.name()));missing = id.copy();}
public PipedReader(PipedWriter out, int pipeSize) throws IOException {this(pipeSize);connect(out);}
public ImportKeyPairRequest(String keyName, String publicKeyMaterial) {setKeyName(keyName);setPublicKeyMaterial(publicKeyMaterial);}
public DeleteFaceRequest() {super("LinkFace", "2018-07-20", "DeleteFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public CreateReceiptRuleSetResult createReceiptRuleSet(CreateReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeCreateReceiptRuleSet(request);}
public RemovePermissionRequest(String queueUrl, String label) {setQueueUrl(queueUrl);setLabel(label);}
public String toString() {return "DFR " + basicModel.toString() + afterEffect.toString()+ normalization.toString();}
public void setResult(RefUpdate.Result r) {switch (r) {case NOT_ATTEMPTED:setResult(Result.NOT_ATTEMPTED);break;case LOCK_FAILURE:case IO_FAILURE:setResult(Result.LOCK_FAILURE);break;case NO_CHANGE:case NEW:case FORCED:case FAST_FORWARD:setResult(Result.OK);break;case REJECTED:setResult(Result.REJECTED_NONFASTFORWARD);break;case REJECTED_CURRENT_BRANCH:setResult(Result.REJECTED_CURRENT_BRANCH);break;case REJECTED_MISSING_OBJECT:setResult(Result.REJECTED_MISSING_OBJECT);break;case REJECTED_OTHER_REASON:setResult(Result.REJECTED_OTHER_REASON);break;default:setResult(Result.REJECTED_OTHER_REASON, r.name());break;}}
public DeleteMatchmakingConfigurationResult deleteMatchmakingConfiguration(DeleteMatchmakingConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteMatchmakingConfiguration(request);}
public double resolveDistErr(SpatialContext ctx, double defaultDistErrPct) {if (distErr != null)return distErr;double distErrPct = (this.distErrPct != null ? this.distErrPct : defaultDistErrPct);return calcDistanceFromErrPct(shape, distErrPct, ctx);}
public final CharsetEncoder replaceWith(byte[] replacement) {if (replacement == null) {throw new IllegalArgumentException("replacement == null");}if (replacement.length == 0) {throw new IllegalArgumentException("replacement.length == 0");}if (replacement.length > maxBytesPerChar()) {throw new IllegalArgumentException("replacement length > maxBytesPerChar: " +replacement.length + " > " + maxBytesPerChar());}if (!isLegalReplacement(replacement)) {throw new IllegalArgumentException("bad replacement: " + Arrays.toString(replacement));}this.replacementBytes = replacement;implReplaceWith(replacementBytes);return this;}
public CreateApplicationSnapshotResult createApplicationSnapshot(CreateApplicationSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateApplicationSnapshot(request);}
public ValueEval evaluate(int srcCellRow, int srcCellCol, ValueEval arg0) {double d;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcCellRow, srcCellCol);if(ve instanceof StringEval) {return ve;}d = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(+d);}
public MoPenBindIsvRequest() {super("MoPen", "2018-02-11", "MoPenBindIsv", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public AssociateIpGroupsResult associateIpGroups(AssociateIpGroupsRequest request) {request = beforeClientExecution(request);return executeAssociateIpGroups(request);}
public TestEventPatternResult testEventPattern(TestEventPatternRequest request) {request = beforeClientExecution(request);return executeTestEventPattern(request);}
public LockFailedException(File file, String message) {super(message);this.file = file;}
public DeleteSkillGroupResult deleteSkillGroup(DeleteSkillGroupRequest request) {request = beforeClientExecution(request);return executeDeleteSkillGroup(request);}
public SortedDocValuesField(String name, BytesRef bytes) {super(name, TYPE);fieldsData = bytes;}
public CreateNetworkResult createNetwork(CreateNetworkRequest request) {request = beforeClientExecution(request);return executeCreateNetwork(request);}
public DeleteGroupRequest(String groupName) {setGroupName(groupName);}
public DescribeCacheEngineVersionsResult describeCacheEngineVersions(DescribeCacheEngineVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheEngineVersions(request);}
public int compareSameType(Object other) {assert exists || (false == value);MutableValueBool b = (MutableValueBool)other;if (value != b.value) return value ? 1 : -1;if (exists == b.exists) return 0;return exists ? 1 : -1;}
public LineParser(String[] header) {this.header = header;}
public DBInstance restoreDBInstanceFromDBSnapshot(RestoreDBInstanceFromDBSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreDBInstanceFromDBSnapshot(request);}
public void push(E e) {addFirstImpl(e);}
public synchronized void reset() throws IOException {if (buf == null) {throw new IOException("Stream is closed");}if (-1 == markpos) {throw new IOException("Mark has been invalidated.");}pos = markpos;}
public UpdateUsagePlanResult updateUsagePlan(UpdateUsagePlanRequest request) {request = beforeClientExecution(request);return executeUpdateUsagePlan(request);}
public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}TermInfo other = (TermInfo) obj;return position == other.position;}
public StringPtg(String value) {if (value.length() > 255) {throw new IllegalArgumentException("String literals in formulas can't be bigger than 255 characters ASCII");}_is16bitUnicode = StringUtil.hasMultibyte(value);field_3_string = value;}
public ChangeType getChangeType() {return changeType;}
public String asFormulaString() {StringBuilder sb = new StringBuilder(32);asFormulaString(sb);return sb.toString();}
public void serialize(LittleEndianOutput out) {out.writeShort(sid);out.writeShort(getDataSize());out.writeShort(field_1_objectType);out.writeShort(field_2_objectId);out.writeShort(field_3_option);out.writeInt(field_4_reserved1);out.writeInt(field_5_reserved2);out.writeInt(field_6_reserved3);}
public DescribeAppResult describeApp(DescribeAppRequest request) {request = beforeClientExecution(request);return executeDescribeApp(request);}
public Map<String, DirCacheEntry> getToBeCheckedOut() {return toBeCheckedOut;}
public CreatePublicVirtualInterfaceResult createPublicVirtualInterface(CreatePublicVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeCreatePublicVirtualInterface(request);}
public CreateQueueResult createQueue(String queueName) {return createQueue(new CreateQueueRequest().withQueueName(queueName));}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[33];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 33; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public CreateFieldLevelEncryptionProfileResult createFieldLevelEncryptionProfile(CreateFieldLevelEncryptionProfileRequest request) {request = beforeClientExecution(request);return executeCreateFieldLevelEncryptionProfile(request);}
public static int getSmileyResource(int which) {return sIconIds[which];}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SCL]\n");buffer.append("    .numerator            = ").append("0x").append(HexDump.toHex(  getNumerator ())).append(" (").append( getNumerator() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("    .denominator          = ").append("0x").append(HexDump.toHex(  getDenominator ())).append(" (").append( getDenominator() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/SCL]\n");return buffer.toString();}
public final void setBufferSize(int newSize) {assert buffer == null || bufferSize == buffer.length: "buffer=" + buffer + " bufferSize=" + bufferSize + " buffer.length=" + (buffer != null ? buffer.length : 0);if (newSize != bufferSize) {checkBufferSize(newSize);bufferSize = newSize;if (buffer != null) {byte[] newBuffer = new byte[newSize];final int leftInBuffer = bufferLength-bufferPosition;final int numToCopy;if (leftInBuffer > newSize)numToCopy = newSize;elsenumToCopy = leftInBuffer;System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);bufferStart += bufferPosition;bufferPosition = 0;bufferLength = numToCopy;newBuffer(newBuffer);}}}
public DisassociateSigninDelegateGroupsFromAccountResult disassociateSigninDelegateGroupsFromAccount(DisassociateSigninDelegateGroupsFromAccountRequest request) {request = beforeClientExecution(request);return executeDisassociateSigninDelegateGroupsFromAccount(request);}
public TokenStream create(TokenStream input) {return new IndicNormalizationFilter(input);}
public TickRecord(RecordInputStream in) {field_1_majorTickType = in.readByte();field_2_minorTickType = in.readByte();field_3_labelPosition = in.readByte();field_4_background    = in.readByte();field_5_labelColorRgb = in.readInt();field_6_zero1         = in.readInt();field_7_zero2         = in.readInt();field_8_zero3         = in.readInt();field_9_zero4         = in.readInt();field_10_options      = in.readShort();field_11_tickColor    = in.readShort();field_12_zero5        = in.readShort();}
public long getPackedGitLimit() {return packedGitLimit;}
public DisassociateContactFromAddressBookResult disassociateContactFromAddressBook(DisassociateContactFromAddressBookRequest request) {request = beforeClientExecution(request);return executeDisassociateContactFromAddressBook(request);}
public void writeShort(int v) {checkPosition(2);int i = _writeIndex;_buf[i++] = (byte)((v >>>  0) & 0xFF);_buf[i++] = (byte)((v >>>  8) & 0xFF);_writeIndex = i;}
public int read(char[] c, int off, int len) {if (pos < size) {len = Math.min(len, size-pos);s.getChars(pos, pos+len, c, off);pos += len;return len;} else {s = null;return -1;}}
public AssociateSkillWithUsersResult associateSkillWithUsers(AssociateSkillWithUsersRequest request) {request = beforeClientExecution(request);return executeAssociateSkillWithUsers(request);}
public boolean doPrune(double ageSec, IndexSearcher searcher) {return ageSec > maxAgeSec;}
public DescribeObservationResult describeObservation(DescribeObservationRequest request) {request = beforeClientExecution(request);return executeDescribeObservation(request);}
public DeletePresetResult deletePreset(DeletePresetRequest request) {request = beforeClientExecution(request);return executeDeletePreset(request);}
public long ramBytesUsed() {long size = 0;for (Map.Entry<String,DocValuesProducer> entry : formats.entrySet()) {size += (entry.getKey().length() * Character.BYTES) + entry.getValue().ramBytesUsed();}return size;}
public UserSViewBegin clone() {return copy();}
public char[] toCharArray() {synchronized (lock) {char[] result = new char[count];System.arraycopy(buf, 0, result, 0, count);return result;}}
public RebuildWorkspacesResult rebuildWorkspaces(RebuildWorkspacesRequest request) {request = beforeClientExecution(request);return executeRebuildWorkspaces(request);}
public GetLexiconResult getLexicon(GetLexiconRequest request) {request = beforeClientExecution(request);return executeGetLexicon(request);}
public UpdateDeploymentStrategyResult updateDeploymentStrategy(UpdateDeploymentStrategyRequest request) {request = beforeClientExecution(request);return executeUpdateDeploymentStrategy(request);}
public GetAlgorithmListRequest() {super("industry-brain", "2018-07-12", "GetAlgorithmList");setProtocol(ProtocolType.HTTPS);}
public boolean isForceUpdate() {return forceUpdate;}
public ListGameServersResult listGameServers(ListGameServersRequest request) {request = beforeClientExecution(request);return executeListGameServers(request);}
public boolean delete(){boolean rval = false;if ((!isRoot()) && isDeleteOK()){rval = _parent.deleteEntry(this);}return rval;}
public TableRecord(RecordInputStream in) {super(in);field_5_flags        = in.readByte();field_6_res          = in.readByte();field_7_rowInputRow  = in.readShort();field_8_colInputRow  = in.readShort();field_9_rowInputCol  = in.readShort();field_10_colInputCol = in.readShort();}
public AllocateHostsResult allocateHosts(AllocateHostsRequest request) {request = beforeClientExecution(request);return executeAllocateHosts(request);}
public void writeContinue() {_ulrOutput.terminate();_totalPreviousRecordsSize += _ulrOutput.getTotalSize();_ulrOutput = new UnknownLengthRecordOutput(_out, ContinueRecord.sid);}
public void unread(byte[] buffer, int offset, int length) throws IOException {if (length > pos) {throw new IOException("Pushback buffer full");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (buf == null) {throw streamClosed();}System.arraycopy(buffer, offset, buf, pos - length, length);pos = pos - length;}
public boolean containsCell(BookSheetKey key, int rowIndex, int columnIndex) {BlankCellSheetGroup bcsg = _sheetGroupsByBookSheet.get(key);if (bcsg == null) {return false;}return bcsg.containsCell(rowIndex, columnIndex);}
public DescribeTextTranslationJobResult describeTextTranslationJob(DescribeTextTranslationJobRequest request) {request = beforeClientExecution(request);return executeDescribeTextTranslationJob(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );if (remainingData == null) {remainingData = new byte[0];}LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );int remainingBytes = remainingData.length + (shortRecord ? 8 : 18);LittleEndian.putInt( data, offset + 4, remainingBytes );LittleEndian.putShort( data, offset + 8, field_1_flag );LittleEndian.putShort( data, offset + 10, field_2_col1 );LittleEndian.putShort( data, offset + 12, field_3_dx1 );LittleEndian.putShort( data, offset + 14, field_4_row1 );if(!shortRecord) {LittleEndian.putShort( data, offset + 16, field_5_dy1 );LittleEndian.putShort( data, offset + 18, field_6_col2 );LittleEndian.putShort( data, offset + 20, field_7_dx2 );LittleEndian.putShort( data, offset + 22, field_8_row2 );LittleEndian.putShort( data, offset + 24, field_9_dy2 );}System.arraycopy( remainingData, 0, data, offset + (shortRecord ? 16 : 26), remainingData.length );int pos = offset + 8 + (shortRecord ? 8 : 18) + remainingData.length;listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public final void serialize(LittleEndianOutput out) {int nBreaks = _breaks.size();out.writeShort(nBreaks);for (Break aBreak : _breaks) {aBreak.serialize(out);}}
public float baselineTf(float freq) {if (0.0f == freq) return 0.0f;return (freq <= tf_min)? tf_base: (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);}
public StringBuilder delete(int start, int end) {delete0(start, end);return this;}
public boolean isError() {return this.type == TYPE_MALFORMED_INPUT|| this.type == TYPE_UNMAPPABLE_CHAR;}
public int getLastSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.getLastInternalSheetIndexForExtIndex(externSheetNumber);}
public PlainTextDictionary(InputStream dictFile) {in = new BufferedReader(IOUtils.getDecodingReader(dictFile, StandardCharsets.UTF_8));}
public LittleEndianByteArrayOutputStream(byte[] buf, int startOffset, int maxWriteLen) { if (startOffset < 0 || startOffset > buf.length) {throw new IllegalArgumentException("Specified startOffset (" + startOffset+ ") is out of allowable range (0.." + buf.length + ")");}_buf = buf;_writeIndex = startOffset;_endIndex = startOffset + maxWriteLen;if (_endIndex < startOffset ||  _endIndex > buf.length) {throw new IllegalArgumentException("calculated end index (" + _endIndex+ ") is out of allowable range (" + _writeIndex + ".." + buf.length + ")");}}
public void addRecords(MergeCellsRecord[] mcrs) {for (int i = 0; i < mcrs.length; i++) {addMergeCellsRecord(mcrs[i]);}}
public DescribeInternetGatewaysResult describeInternetGateways(DescribeInternetGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeInternetGateways(request);}
public void removeLastSaveDateTime() {remove1stProperty(PropertyIDMap.PID_LASTSAVE_DTM);}
public boolean hitEnd() {return hitEndImpl(address);}
public ListSkillsResult listSkills(ListSkillsRequest request) {request = beforeClientExecution(request);return executeListSkills(request);}
public String toString() {return "popMode";}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 16) | (byte1 << 8) | byte2;}}
public GetCloudFrontOriginAccessIdentityResult getCloudFrontOriginAccessIdentity(GetCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentity(request);}
public boolean include(RevWalk walker, RevCommit c) {return false;}
public DocumentStoredFieldVisitor() {this.fieldsToAdd = null;}
public int addConditionalFormatting(CellRangeAddress[] regions, HSSFConditionalFormattingRule[] cfRules) {if (regions == null) {throw new IllegalArgumentException("regions must not be null");}for(CellRangeAddress range : regions) range.validate(SpreadsheetVersion.EXCEL97);if (cfRules == null) {throw new IllegalArgumentException("cfRules must not be null");}if (cfRules.length == 0) {throw new IllegalArgumentException("cfRules must not be empty");}if (cfRules.length > 3) {throw new IllegalArgumentException("Number of rules must not exceed 3");}CFRuleBase[] rules = new CFRuleBase[cfRules.length];for (int i = 0; i != cfRules.length; i++) {rules[i] = cfRules[i].getCfRuleRecord();}CFRecordsAggregate cfra = new CFRecordsAggregate(regions, rules);return _conditionalFormattingTable.add(cfra);}
public FloatBuffer get(float[] dst, int dstOffset, int floatCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, floatCount);if (floatCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + floatCount; ++i) {dst[i] = get();}return this;}
public void rewind() {pos = 0;}
public boolean include(TreeWalk walker) {final int cmp = walker.isPathPrefix(raw, raw.length);if (cmp > 0)throw StopWalkException.INSTANCE;return cmp == 0;}
public TagDeliveryStreamResult tagDeliveryStream(TagDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeTagDeliveryStream(request);}
public NormalisedDecimal normaliseBaseTen() {return NormalisedDecimal.create(_significand, _binaryExponent);}
public NavigableSet<K> descendingKeySet() {return new BoundedMap(!ascending, from, fromBound, to, toBound).navigableKeySet();}
public void serialize(LittleEndianOutput out) {out.writeShort(_row);out.writeShort(_firstCol);int nItems = _xfs.length;for (short xf : _xfs) {out.writeShort(xf);}out.writeShort(_lastCol);}
public byte[] toByteArray() {byte[] result = new byte[LONG_SIZE];LittleEndian.putLong( result, 0, fileTime);return result;}
public DiffCommand diff() {return new DiffCommand(repo);}
public ModifySnapshotAttributeResult modifySnapshotAttribute(ModifySnapshotAttributeRequest request) {request = beforeClientExecution(request);return executeModifySnapshotAttribute(request);}
public CreateSubnetResult createSubnet(CreateSubnetRequest request) {request = beforeClientExecution(request);return executeCreateSubnet(request);}
@Override public List<E> subList(int start, int end) {return new UnmodifiableRandomAccessList<E>(list.subList(start, end));}
public long getClipboardFormat() throws HPSFException{if (!(getClipboardFormatTag() == CFTAG_WINDOWS))throw new HPSFException("Clipboard Format Tag of Thumbnail must " +"be CFTAG_WINDOWS.");return LittleEndian.getInt(getThumbnail(), OFFSET_CF);}
public HSSFDataValidation(CellRangeAddressList regions, DataValidationConstraint constraint) {_regions = regions;_constraint = (DVConstraint)constraint;}
public DiffCommand setProgressMonitor(ProgressMonitor monitor) {if (monitor == null) {monitor = NullProgressMonitor.INSTANCE;}this.monitor = monitor;return this;}
public DeleteSegmentResult deleteSegment(DeleteSegmentRequest request) {request = beforeClientExecution(request);return executeDeleteSegment(request);}
public AcceptVpcPeeringConnectionResult acceptVpcPeeringConnection(AcceptVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeAcceptVpcPeeringConnection(request);}
public final FloatBuffer put(float[] src) {return put(src, 0, src.length);}
public PortugueseLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public RefPtg(int row, int column, boolean isRowRelative, boolean isColumnRelative) {super(row, column, isRowRelative, isColumnRelative);}
public ExportJournalToS3Result exportJournalToS3(ExportJournalToS3Request request) {request = beforeClientExecution(request);return executeExportJournalToS3(request);}
public AssociatePhoneNumbersWithVoiceConnectorGroupResult associatePhoneNumbersWithVoiceConnectorGroup(AssociatePhoneNumbersWithVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeAssociatePhoneNumbersWithVoiceConnectorGroup(request);}
public RecursivePrefixTreeStrategy(SpatialPrefixTree grid, String fieldName) {super(grid, fieldName);prefixGridScanLevel = grid.getMaxLevels() - 4;}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = ((blocks[blocksOffset++] & 0xFFL) << 8) | (blocks[blocksOffset++] & 0xFFL);}}
public GetAlbumsByNamesRequest() {super("CloudPhoto", "2017-07-11", "GetAlbumsByNames", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public SendRawEmailRequest(RawMessage rawMessage) {setRawMessage(rawMessage);}
public boolean equals(Object other) {return sameClassAs(other) &&equalsTo(getClass().cast(other));}
public Rule(String suffix, int min, String replacement) {this.suffix = suffix.toCharArray();this.replacement = replacement.toCharArray();this.min = min;}
public ListDataSetsResult listDataSets(ListDataSetsRequest request) {request = beforeClientExecution(request);return executeListDataSets(request);}
public int lastIndexOf(E object, int to) {Object[] snapshot = elements;return lastIndexOf(object, snapshot, 0, to);}
public DBCluster stopDBCluster(StopDBClusterRequest request) {request = beforeClientExecution(request);return executeStopDBCluster(request);}
public ListRuleNamesByTargetResult listRuleNamesByTarget(ListRuleNamesByTargetRequest request) {request = beforeClientExecution(request);return executeListRuleNamesByTarget(request);}
public void readFully(byte[] buf, int off, int len){_in.readFully(buf, off, len);}
public SSTRecord(RecordInputStream in) {field_1_num_strings = in.readInt();field_2_num_unique_strings = in.readInt();field_3_strings = new IntMapper<>();deserializer = new SSTDeserializer(field_3_strings);if(field_1_num_strings == 0) {field_2_num_unique_strings = 0;return;}deserializer.manufactureStrings( field_2_num_unique_strings, in );}
public DeleteBatchPredictionResult deleteBatchPrediction(DeleteBatchPredictionRequest request) {request = beforeClientExecution(request);return executeDeleteBatchPrediction(request);}
public SetReceiptRulePositionResult setReceiptRulePosition(SetReceiptRulePositionRequest request) {request = beforeClientExecution(request);return executeSetReceiptRulePosition(request);}
public Ref3DPtg(String cellref, int externIdx ) {this(new CellReference(cellref), externIdx);}
public DisableAvailabilityZonesForLoadBalancerRequest(String loadBalancerName, java.util.List<String> availabilityZones) {setLoadBalancerName(loadBalancerName);setAvailabilityZones(availabilityZones);}
public Set<Entry<K, V>> entrySet() {Set<Entry<K, V>> es = entrySet;return (es != null) ? es : (entrySet = new EntrySet());}
public char[] get(int posStart, int length) {assert length > 0;assert inBounds(posStart): "posStart=" + posStart + " length=" + length;final int startIndex = getIndex(posStart);final int endIndex = getIndex(posStart + length);final char[] result = new char[length];if (endIndex >= startIndex && length < buffer.length) {System.arraycopy(buffer, startIndex, result, 0, endIndex-startIndex);} else {final int part1 = buffer.length-startIndex;System.arraycopy(buffer, startIndex, result, 0, part1);System.arraycopy(buffer, 0, result, buffer.length-startIndex, length-part1);}return result;}
public IndexInput openInput(String name, IOContext context) throws IOException {ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect || fileLength(name) < minBytesDirect) {return delegate.openInput(name, context);} else {return new NativeUnixIndexInput(getDirectory().resolve(name), mergeBufferSize);}}
public EscherArrayProperty(short id, byte[] complexData) {this(id, safeSize(complexData == null ? 0 : complexData.length));setComplexData(complexData);}
public NamePtg(int nameIndex) {field_1_label_index = 1 + nameIndex; }
public DescribeHumanLoopResult describeHumanLoop(DescribeHumanLoopRequest request) {request = beforeClientExecution(request);return executeDescribeHumanLoop(request);}
public PutDedicatedIpInPoolResult putDedicatedIpInPool(PutDedicatedIpInPoolRequest request) {request = beforeClientExecution(request);return executePutDedicatedIpInPool(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(" [XCT");sb.append(" nCRNs=").append(field_1_number_crn_records);sb.append(" sheetIx=").append(field_2_sheet_table_index);sb.append("]");return sb.toString();}
public ObjectId idFor(int objectType, long length, InputStream in)throws IOException {SHA1 md = SHA1.newInstance();md.update(Constants.encodedTypeString(objectType));md.update((byte) ' ');md.update(Constants.encodeASCII(length));md.update((byte) 0);byte[] buf = buffer();while (length > 0) {int n = in.read(buf, 0, (int) Math.min(length, buf.length));if (n < 0)throw new EOFException(JGitText.get().unexpectedEndOfInput);md.update(buf, 0, n);length -= n;}return md.toObjectId();}
public List<Query> makeLuceneSubQueriesField(String fn, BasicQueryFactory qf) {List<Query> luceneSubQueries = new ArrayList<>();Iterator<SrndQuery> sqi = getSubQueriesIterator();while (sqi.hasNext()) {luceneSubQueries.add( (sqi.next()).makeLuceneQueryField(fn, qf));}return luceneSubQueries;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SHARED FEATURE]\n");buffer.append("[/SHARED FEATURE]\n");return buffer.toString();}
public QueryNode process(QueryNode queryTree) throws QueryNodeException {Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null) {throw new IllegalArgumentException("StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler");}this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;return processIteration(queryTree);}
public DBCluster startDBCluster(StartDBClusterRequest request) {request = beforeClientExecution(request);return executeStartDBCluster(request);}
public Ptg[] getParsedExpression() {return Formula.getTokens(field_5_name_definition);}
public final long getFilePointer() { return bufferStart + bufferPosition; }
public ListDevicesResult listDevices(ListDevicesRequest request) {request = beforeClientExecution(request);return executeListDevices(request);}
public ApplyTokenRequest() {super("OnsMqtt", "2019-12-11", "ApplyToken", "onsmqtt");setMethod(MethodType.POST);}
public EnableVpcClassicLinkDnsSupportResult enableVpcClassicLinkDnsSupport(EnableVpcClassicLinkDnsSupportRequest request) {request = beforeClientExecution(request);return executeEnableVpcClassicLinkDnsSupport(request);}
public Cluster modifyClusterDbRevision(ModifyClusterDbRevisionRequest request) {request = beforeClientExecution(request);return executeModifyClusterDbRevision(request);}
public final LongBuffer put(long[] src) {return put(src, 0, src.length);}
public Object clone() {try {return super.clone();} catch (CloneNotSupportedException e) {throw new AssertionError();}}
public LinkFaceRequest() {super("LinkFace", "2018-07-20", "LinkFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public RemoveAttributesResult removeAttributes(RemoveAttributesRequest request) {request = beforeClientExecution(request);return executeRemoveAttributes(request);}
public boolean remove(Object o) {return ConcurrentHashMap.this.remove(o) != null;}
public String toFormulaString(String[] operands) {return "(" + operands[0] + ")";}
public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;PostingsAndFreq other = (PostingsAndFreq) obj;if (position != other.position) return false;if (terms == null) return other.terms == null;return Arrays.equals(terms, other.terms);}
public ModifyMountTargetSecurityGroupsResult modifyMountTargetSecurityGroups(ModifyMountTargetSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeModifyMountTargetSecurityGroups(request);}
public ListBatchInferenceJobsResult listBatchInferenceJobs(ListBatchInferenceJobsRequest request) {request = beforeClientExecution(request);return executeListBatchInferenceJobs(request);}
public long get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public LimitTokenPositionFilterFactory(Map<String,String> args) {super(args);maxTokenPosition = requireInt(args, MAX_TOKEN_POSITION_KEY);consumeAllTokens = getBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SaveRecalcRecord(RecordInputStream in) {field_1_recalc = in.readShort();}
public DeleteSecurityGroupResult deleteSecurityGroup(DeleteSecurityGroupRequest request) {request = beforeClientExecution(request);return executeDeleteSecurityGroup(request);}
public IntervalSet getExpectedTokens() {return getATN().getExpectedTokens(getState(), getContext());}
public void print(long l) {print(String.valueOf(l));}
public ResetPersonalPINResult resetPersonalPIN(ResetPersonalPINRequest request) {request = beforeClientExecution(request);return executeResetPersonalPIN(request);}
public StartSmartHomeApplianceDiscoveryResult startSmartHomeApplianceDiscovery(StartSmartHomeApplianceDiscoveryRequest request) {request = beforeClientExecution(request);return executeStartSmartHomeApplianceDiscovery(request);}
public Query parse(String queryText) {if ("*".equals(queryText.trim())) {return new MatchAllDocsQuery();}char data[] = queryText.toCharArray();char buffer[] = new char[data.length];State state = new State(data, buffer, 0, data.length);parseSubQuery(state);if (state.top == null) {return new MatchNoDocsQuery("empty string passed to query parser");} else {return state.top;}}
public FuzzySet downsize(float targetMaxSaturation){int numBitsSet = filter.cardinality();FixedBitSet rightSizedBitSet = filter;int rightSizedBitSetSize = bloomSize;for (int i = 0; i < usableBitSetSizes.length; i++) {int candidateBitsetSize = usableBitSetSizes[i];float candidateSaturation = (float) numBitsSet/ (float) candidateBitsetSize;if (candidateSaturation <= targetMaxSaturation) {rightSizedBitSetSize = candidateBitsetSize;break;}}if (rightSizedBitSetSize < bloomSize) {rightSizedBitSet = new FixedBitSet(rightSizedBitSetSize + 1);int bitIndex = 0;do {bitIndex = filter.nextSetBit(bitIndex);if (bitIndex != DocIdSetIterator.NO_MORE_DOCS) {int downSizedBitIndex = bitIndex & rightSizedBitSetSize;rightSizedBitSet.set(downSizedBitIndex);bitIndex++;}} while ( (bitIndex >= 0)&&(bitIndex<=bloomSize));} else {return null;}return new FuzzySet(rightSizedBitSet,rightSizedBitSetSize, hashFunction);}
public void set(int val) {this.val = val;returned = false;}
public Set<URIishField> getRequiredFields() {return Collections.unmodifiableSet(EnumSet.of(URIishField.PATH));}
public Config(Config defaultConfig) {baseConfig = defaultConfig;state = new AtomicReference<>(newState());}
public PutAccountSuppressionAttributesResult putAccountSuppressionAttributes(PutAccountSuppressionAttributesRequest request) {request = beforeClientExecution(request);return executePutAccountSuppressionAttributes(request);}
public BufferedIndexInput(String resourceDesc, int bufferSize) {super(resourceDesc);checkBufferSize(bufferSize);this.bufferSize = bufferSize;}
public DescribeDocumentClassifierResult describeDocumentClassifier(DescribeDocumentClassifierRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentClassifier(request);}
public static Function getBasicFunction(int functionIndex) {switch (functionIndex) {case FunctionID.INDIRECT:case FunctionID.EXTERNAL_FUNC:return null;}Function result = functions[functionIndex];if (result == null) {throw new NotImplementedException("FuncIx=" + functionIndex);}return result;}
public DeleteFacetResult deleteFacet(DeleteFacetRequest request) {request = beforeClientExecution(request);return executeDeleteFacet(request);}
public NameXPtg getNameXPtg(String name, int sheetRefIndex, UDFFinder udf) {LinkTable lnk = getOrCreateLinkTable();NameXPtg xptg = lnk.getNameXPtg(name, sheetRefIndex);if(xptg == null && udf.findFunction(name) != null) {xptg = lnk.addNameXPtg(name);}return xptg;}
public int getIndex() {return index;}
public final String toFormulaString() {return formatReferenceAsString();}
public AllocateTransitVirtualInterfaceResult allocateTransitVirtualInterface(AllocateTransitVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAllocateTransitVirtualInterface(request);}
public PushbackInputStream(InputStream in) {super(in);buf = (in == null) ? null : new byte[1];pos = 1;}
public int compareTo(PostingsAndFreq other) {if (position != other.position) {return position - other.position;}if (nTerms != other.nTerms) {return nTerms - other.nTerms;}if (nTerms == 0) {return 0;}for (int i=0; i<terms.length; i++) {int res = terms[i].compareTo(other.terms[i]);if (res!=0) return res;}return 0;}
public void notifyUpdateCell(EvaluationCell cell) {int sheetIndex = getSheetIndex(cell.getSheet());_cache.notifyUpdateCell(_workbookIx, sheetIndex, cell);}
public BatchRefUpdate setAllowNonFastForwards(boolean allow) {allowNonFastForwards = allow;return this;}
public UpdateRouteResult updateRoute(UpdateRouteRequest request) {request = beforeClientExecution(request);return executeUpdateRoute(request);}
public DoubleConstValueSource(double constant) {this.constant = constant;this.fv = (float)constant;this.lv = (long)constant;}
public void yypushback(int number)  {if ( number > yylength() )zzScanError(ZZ_PUSHBACK_2BIG);zzMarkedPos -= number;}
public int getReturnState(int index) {return returnStates[index];}
final public SrndQuery WQuery() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries;Token wt;q = PrimaryQuery();label_6:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case W:;break;default:jj_la1[4] = jj_gen;break label_6;}wt = jj_consume_token(W);queries = new ArrayList<SrndQuery>();queries.add(q); q = PrimaryQuery();queries.add(q);q = getDistanceQuery(queries, true , wt, true );}{if (true) return q;}throw new Error("Missing return statement in function");}
public ListHITsResult listHITs(ListHITsRequest request) {request = beforeClientExecution(request);return executeListHITs(request);}
public Set<String> getSubsections(String section) {return getState().getSubsections(section);}
public AttachDiskResult attachDisk(AttachDiskRequest request) {request = beforeClientExecution(request);return executeAttachDisk(request);}
public DescribePoliciesResult describePolicies(DescribePoliciesRequest request) {request = beforeClientExecution(request);return executeDescribePolicies(request);}
public boolean isEmpty(){return _limit == 0;}
public HSSFCombobox(HSSFShape parent, HSSFAnchor anchor) {super(parent, anchor);super.setShapeType(OBJECT_TYPE_COMBO_BOX);CommonObjectDataSubRecord cod = (CommonObjectDataSubRecord) getObjRecord().getSubRecords().get(0);cod.setObjectType(CommonObjectDataSubRecord.OBJECT_TYPE_COMBO_BOX);}
public void setCalcMode(short calcmode){field_1_calcmode = calcmode;}
public void resize(double scale) {resize(scale,scale);}
public AssociateAddressResult associateAddress(AssociateAddressRequest request) {request = beforeClientExecution(request);return executeAssociateAddress(request);}
public ConfirmConnectionResult confirmConnection(ConfirmConnectionRequest request) {request = beforeClientExecution(request);return executeConfirmConnection(request);}
public UseSelFSRecord(boolean b) {this(0);_options = useNaturalLanguageFormulasFlag.setBoolean(_options, b);}
public void start(String originalText, TokenStream stream) {offsetAtt = stream.addAttribute(OffsetAttribute.class);currentNumFrags = 1;}
public FieldFragList createFieldFragList( FieldPhraseList fieldPhraseList, int fragCharSize ){return createFieldFragList( fieldPhraseList, new SimpleFieldFragList( fragCharSize ), fragCharSize );}
public StopImageBuilderResult stopImageBuilder(StopImageBuilderRequest request) {request = beforeClientExecution(request);return executeStopImageBuilder(request);}
public final int readUnsignedShort() throws IOException {return ((int) readShort()) & 0xffff;}
public static long pop_xor(long[] arr1, long[] arr2, int wordOffset, int numWords) {long popCount = 0;for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {popCount += Long.bitCount(arr1[i] ^ arr2[i]);}return popCount;}
public GetDocumentResult getDocument(GetDocumentRequest request) {request = beforeClientExecution(request);return executeGetDocument(request);}
public AutocompletePagedResponse(SimpleResponse<AutocompleteResult> autocompleteResponse) {super(autocompleteResponse.getRequest(),autocompleteResponse.getStatusCode(),autocompleteResponse.getHeaders(),autocompleteResponse.getValue().getResults(),null,null);}
public PutPermissionResult putPermission(PutPermissionRequest request) {request = beforeClientExecution(request);return executePutPermission(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(0);out.writeInt(getFirstRow());out.writeInt(getLastRowAdd1());out.writeInt(field_4_zero);for (int k = 0; k < getNumDbcells(); k++) {out.writeInt(getDbcellAt(k));}}
public HSSFFormulaEvaluator(HSSFWorkbook workbook) {this(workbook, null);}
public int hash2(char carray[]) {int hash = 5381;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}
public void fillRoundRect(int x, int y, int width, int height,int arcWidth, int arcHeight){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"fillRoundRect not supported");}
public static SimpleFraction buildFractionExactDenominator(double val, int exactDenom){int num =  (int)Math.round(val*exactDenom);return new SimpleFraction(num,exactDenom);}
public DescribeInsightRulesResult describeInsightRules(DescribeInsightRulesRequest request) {request = beforeClientExecution(request);return executeDescribeInsightRules(request);}
public ListMFADevicesRequest(String userName) {setUserName(userName);}
public void removeRow(RowRecord row) {int rowIndex = row.getRowNumber();_valuesAgg.removeAllCellsValuesForRow(rowIndex);Integer key = Integer.valueOf(rowIndex);RowRecord rr = _rowRecords.remove(key);if (rr == null) {throw new RuntimeException("Invalid row index (" + key.intValue() + ")");}if (row != rr) {_rowRecords.put(key, rr);throw new RuntimeException("Attempt to remove row that does not belong to this sheet");}_rowRecordValues = null;}
public DeleteRepositoryPolicyResult deleteRepositoryPolicy(DeleteRepositoryPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteRepositoryPolicy(request);}
public BackupRecord(RecordInputStream in) {field_1_backup = in.readShort();}
public DiffCommand setNewTree(AbstractTreeIterator newTree) {this.newTree = newTree;return this;}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 63; shift >= 0; shift -= 1) {values[valuesOffset++] = (block >>> shift) & 1;}}}
public void execute(Lexer lexer) {action.execute(lexer);}
public DeleteModelPackageResult deleteModelPackage(DeleteModelPackageRequest request) {request = beforeClientExecution(request);return executeDeleteModelPackage(request);}
public Object getValue() {return value;}
public void applyFont( short fontIndex ) {applyFont(0, _string.getCharCount(), fontIndex);}
public SliceWriter(IntBlockPool pool) {this.pool = pool;}
public DisableVgwRoutePropagationResult disableVgwRoutePropagation(DisableVgwRoutePropagationRequest request) {request = beforeClientExecution(request);return executeDisableVgwRoutePropagation(request);}
public String toString() {return getClass().getName() + " [" +_name.getNameText() +"]";}
public AttachObjectResult attachObject(AttachObjectRequest request) {request = beforeClientExecution(request);return executeAttachObject(request);}
public DBClusterParameterGroup copyDBClusterParameterGroup(CopyDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCopyDBClusterParameterGroup(request);}
public GetRoutesResult getRoutes(GetRoutesRequest request) {request = beforeClientExecution(request);return executeGetRoutes(request);}
public Entry<String, Ref> next() {if (hasNext()) {Entry<String, Ref> r = next;next = peek();return r;}throw new NoSuchElementException();}
public boolean containsKey(Object key) {return ((key instanceof Long && dictionary.containsKey(key)) || dictionary.containsValue(key));}
public UpdateNamespaceRequest() {super("cr", "2016-06-07", "UpdateNamespace", "cr");setUriPattern("/namespace/[Namespace]");setMethod(MethodType.POST);}
public ListNotebookInstancesResult listNotebookInstances(ListNotebookInstancesRequest request) {request = beforeClientExecution(request);return executeListNotebookInstances(request);}
public RoaringDocIdSet build() {flush();return new RoaringDocIdSet(sets, cardinality);}
public DescribeGroupsResult describeGroups(DescribeGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeGroups(request);}
public GetShippingLabelResult getShippingLabel(GetShippingLabelRequest request) {request = beforeClientExecution(request);return executeGetShippingLabel(request);}
public MonitorInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public AtomTransition(ATNState target, int label) {super(target);this.label = label;}
public MulRKRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_first_col = in.readShort();field_3_rks = RkRec.parseRKs(in);field_4_last_col = in.readShort();}
public State complete() {if (this.stateRegistry == null) throw new IllegalStateException();if (root.hasChildren()) replaceOrRegister(root);stateRegistry = null;return root;}
public DescribeWorkspaceDirectoriesResult describeWorkspaceDirectories(DescribeWorkspaceDirectoriesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceDirectories(request);}
@Override public E remove(int index) {synchronized (CopyOnWriteArrayList.this) {slice.checkElementIndex(index);slice.checkConcurrentModification(elements);E removed = CopyOnWriteArrayList.this.remove(slice.from + index);slice = new Slice(elements, slice.from, slice.to - 1);return removed;}}
public StreamTokenizer(InputStream is) {this();if (is == null) {throw new NullPointerException();}inStream = is;}
public ModifyVpcPeeringConnectionOptionsResult modifyVpcPeeringConnectionOptions(ModifyVpcPeeringConnectionOptionsRequest request) {request = beforeClientExecution(request);return executeModifyVpcPeeringConnectionOptions(request);}
public GetAppResult getApp(GetAppRequest request) {request = beforeClientExecution(request);return executeGetApp(request);}
public void start(int totalTasks) {if (!isMainThread())throw new IllegalStateException();pm.start(totalTasks);}
public ModifyFleetResult modifyFleet(ModifyFleetRequest request) {request = beforeClientExecution(request);return executeModifyFleet(request);}
public UpdateFolderResult updateFolder(UpdateFolderRequest request) {request = beforeClientExecution(request);return executeUpdateFolder(request);}
public CreateAppResult createApp(CreateAppRequest request) {request = beforeClientExecution(request);return executeCreateApp(request);}
public static DVConstraint createDateConstraint(int comparisonOperator, String expr1, String expr2, String dateFormat) {if (expr1 == null) {throw new IllegalArgumentException("expr1 must be supplied");}OperatorType.validateSecondArg(comparisonOperator, expr2);SimpleDateFormat df = null;if (dateFormat != null) {df = new SimpleDateFormat(dateFormat, LocaleUtil.getUserLocale());df.setTimeZone(LocaleUtil.getUserTimeZone());}String formula1 = getFormulaFromTextExpression(expr1);Double value1 = formula1 == null ? convertDate(expr1, df) : null;String formula2 = getFormulaFromTextExpression(expr2);Double value2 = formula2 == null ? convertDate(expr2, df) : null;return new DVConstraint(ValidationType.DATE, comparisonOperator, formula1, formula2, value1, value2, null);}
public final String toString() {return getClass().getName() + " [" + lookupName(_functionIndex) + " nArgs=" + _numberOfArgs + "]";}
public ModifyDefaultCreditSpecificationResult modifyDefaultCreditSpecification(ModifyDefaultCreditSpecificationRequest request) {request = beforeClientExecution(request);return executeModifyDefaultCreditSpecification(request);}
public Iterator<Note> iterator() {try {return root.iterator(new MutableObjectId(), reader);} catch (IOException e) {throw new RuntimeException(e);}}
public ObjectId idFor(TreeFormatter formatter) {return delegate().idFor(formatter);}
public ClientException(String errCode, String errMsg, String requestId) {this(errCode, errMsg);this.requestId = requestId;this.setErrorType(ErrorType.Client);}
public int getInputLength() {return this.inputLength;}
public void onInvalidated() {Log.d(TAG, mSrc + ": invalidated");}
public TerminalNode addChild(Token matchedToken) {TerminalNodeImpl t = new TerminalNodeImpl(matchedToken);addAnyChild(t);t.setParent(this);return t;}
public boolean isUnknown() {return type == Type.UNKNOWN;}
public boolean promptPassword(String msg) {CredentialItem.Password p = new CredentialItem.Password(msg);if (provider.get(uri, p)) {password = new String(p.getValue());return true;}password = null;return false;}
public CreateTransitGatewayResult createTransitGateway(CreateTransitGatewayRequest request) {request = beforeClientExecution(request);return executeCreateTransitGateway(request);}
public CreateCampaignResult createCampaign(CreateCampaignRequest request) {request = beforeClientExecution(request);return executeCreateCampaign(request);}
public ClientException(String errCode, String errMsg) {super(errCode + " : " + errMsg);this.errCode = errCode;this.errMsg = errMsg;this.setErrorType(ErrorType.Client);}
public void removeConditionalFormatting(int index) {_conditionalFormattingTable.remove(index);}
public static void fill(float[] array, float value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public TokenStream create(TokenStream input) {return dictionary == null ? input : new StemmerOverrideFilter(input, dictionary);}
public ListS3ResourcesResult listS3Resources(ListS3ResourcesRequest request) {request = beforeClientExecution(request);return executeListS3Resources(request);}
public String toString() {return new StringBuilder("'").appendCodePoint(from).append("'..'").appendCodePoint(to).append("'").toString();}
public DoubleBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public CreatePresignedNotebookInstanceUrlResult createPresignedNotebookInstanceUrl(CreatePresignedNotebookInstanceUrlRequest request) {request = beforeClientExecution(request);return executeCreatePresignedNotebookInstanceUrl(request);}
public IterationRecord(RecordInputStream in) {_flags = in.readShort();}
public CreateUserInfoRequest() {super("cr", "2016-06-07", "CreateUserInfo", "cr");setUriPattern("/users");setMethod(MethodType.PUT);}
public void notifyUpdatedBlankCell(BookSheetKey bsk, int rowIndex, int columnIndex, IEvaluationListener evaluationListener) {if (_usedBlankCellGroup != null) {if (_usedBlankCellGroup.containsCell(bsk, rowIndex, columnIndex)) {clearFormulaEntry();recurseClearCachedFormulaResults(evaluationListener);}}}
public IntervalSet addAll(IntSet set) {if ( set==null ) {return this;}if (set instanceof IntervalSet) {IntervalSet other = (IntervalSet)set;int n = other.intervals.size();for (int i = 0; i < n; i++) {Interval I = other.intervals.get(i);this.add(I.a,I.b);}}else {for (int value : set.toList()) {add(value);}}return this;}
public OpenStringBuilder(char[] arr, int len) {set(arr, len);}
public boolean isRefLogIncludingResult() {return refLogIncludeResult;}
public HeaderFooterRecord(byte[] data) {_rawData = data;}
public byte[] getPath(){return Arrays.copyOf(path, path.length);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[REFMODE]\n");buffer.append("    .mode           = ").append(Integer.toHexString(getMode())).append("\n");buffer.append("[/REFMODE]\n");return buffer.toString();}
public HSSFChildAnchor() {_escherChildAnchor = new EscherChildAnchorRecord();}
public final boolean isRegistered() {return !canonicalName.startsWith("x-") && !canonicalName.startsWith("X-");}
@Override public boolean remove(Object o) {if (containsKey(o)) {unfiltered.remove(o);return true;}return false;}
public static Token newToken(int ofKind, String image){switch(ofKind){default : return new Token(ofKind, image);}}
public float overheadPerValue(int bitsPerValue) {assert isSupported(bitsPerValue);final int valuesPerBlock = 64 / bitsPerValue;final int overhead = 64 % bitsPerValue;return (float) overhead / valuesPerBlock;}
public void clear() {backingMap.clear();}
public CompoundException(Collection<Throwable> why) {super(format(why));causeList = Collections.unmodifiableList(new ArrayList<>(why));}
public DeleteEnvironmentConfigurationRequest(String applicationName, String environmentName) {setApplicationName(applicationName);setEnvironmentName(environmentName);}
public ModifyImageAttributeRequest(String imageId, String attribute) {setImageId(imageId);setAttribute(attribute);}
public LastCellOfRowDummyRecord(int row, int lastColumnNumber) {this.row = row;this.lastColumnNumber = lastColumnNumber;}
public String toString() {return path.toString();}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(ADD);buffer.append(operands[ 0]);return buffer.toString();}
public void abort() {try {reset();} finally {if (nextTermsHash != null) {nextTermsHash.abort();}}}
public CreateUsagePlanKeyResult createUsagePlanKey(CreateUsagePlanKeyRequest request) {request = beforeClientExecution(request);return executeCreateUsagePlanKey(request);}
public boolean isOutOfBounds(int lowValidIx, int highValidIx) {if(_offset < lowValidIx) {return true;}if(getLastIndex() > highValidIx) {return true;}return false;}
public CherryPickStatus getStatus() {return status;}
public static String getRomanization(String s) {StringBuilder out = new StringBuilder();try {getRomanization(out, s);} catch (IOException bogus) {throw new RuntimeException(bogus);}return out.toString();}
public GetDistributionRequest(String id) {setId(id);}
public String signString(String stringToSign, String accessKeySecret) {return null;}
public Repository open(C req, String name)throws RepositoryNotFoundException, ServiceNotEnabledException {if (isUnreasonableName(name))throw new RepositoryNotFoundException(name);Repository db = exports.get(nameWithDotGit(name));if (db != null) {db.incrementOpen();return db;}for (File base : exportBase) {File dir = FileKey.resolve(new File(base, name), FS.DETECTED);if (dir == null)continue;try {FileKey key = FileKey.exact(dir, FS.DETECTED);db = RepositoryCache.open(key, true);} catch (IOException e) {throw new RepositoryNotFoundException(name, e);}try {if (isExportOk(req, name, db)) {return db;}throw new ServiceNotEnabledException();} catch (RuntimeException | IOException e) {db.close();throw new RepositoryNotFoundException(name, e);} catch (ServiceNotEnabledException e) {db.close();throw e;}}if (exportBase.size() == 1) {File dir = new File(exportBase.iterator().next(), name);throw new RepositoryNotFoundException(name,new RepositoryNotFoundException(dir));}throw new RepositoryNotFoundException(name);}
public synchronized boolean addIfAbsent(E object) {if (contains(object)) {return false;}add(object);return true;}
public EnableTransitGatewayRouteTablePropagationResult enableTransitGatewayRouteTablePropagation(EnableTransitGatewayRouteTablePropagationRequest request) {request = beforeClientExecution(request);return executeEnableTransitGatewayRouteTablePropagation(request);}
public PatternKeywordMarkerFilter(TokenStream in, Pattern pattern) {super(in);this.matcher = pattern.matcher("");}
public AddInstanceGroupsRequest(java.util.List<InstanceGroupConfig> instanceGroups, String jobFlowId) {setInstanceGroups(instanceGroups);setJobFlowId(jobFlowId);}
public FSTTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FSTTermsWriter.TERMS_EXTENSION);this.postingsReader = postingsReader;final IndexInput in = state.directory.openInput(termsFileName, state.context);boolean success = false;try {CodecUtil.checkIndexHeader(in, FSTTermsWriter.TERMS_CODEC_NAME,FSTTermsWriter.TERMS_VERSION_START,FSTTermsWriter.TERMS_VERSION_CURRENT,state.segmentInfo.getId(), state.segmentSuffix);CodecUtil.checksumEntireFile(in);this.postingsReader.init(in, state);seekDir(in);final FieldInfos fieldInfos = state.fieldInfos;final int numFields = in.readVInt();for (int i = 0; i < numFields; i++) {int fieldNumber = in.readVInt();FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);long numTerms = in.readVLong();long sumTotalTermFreq = in.readVLong();long sumDocFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS ? sumTotalTermFreq : in.readVLong();int docCount = in.readVInt();TermsReader current = new TermsReader(fieldInfo, in, numTerms, sumTotalTermFreq, sumDocFreq, docCount);TermsReader previous = fields.put(fieldInfo.name, current);checkFieldSummary(state.segmentInfo, in, current, previous);}success = true;} finally {if (success) {IOUtils.close(in);} else {IOUtils.closeWhileHandlingException(in);}}}
public DescribeVpcEndpointsResult describeVpcEndpoints(DescribeVpcEndpointsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpoints(request);}
public void setNewPrefix(String prefix) {newPrefix = prefix;}
public GetHostedZoneRequest(String id) {setId(id);}
public List<File> getUpdatedFiles() {return updatedFiles;}
public DeleteDhcpOptionsRequest(String dhcpOptionsId) {setDhcpOptionsId(dhcpOptionsId);}
public QueryPhraseMap getTermMap( String term ){return subMap.get( term );}
public PutConfigurationSetDeliveryOptionsResult putConfigurationSetDeliveryOptions(PutConfigurationSetDeliveryOptionsRequest request) {request = beforeClientExecution(request);return executePutConfigurationSetDeliveryOptions(request);}
public ChartRecord(RecordInputStream in) {field_1_x = in.readInt();field_2_y = in.readInt();field_3_width = in.readInt();field_4_height = in.readInt();}
public ListTaskDefinitionsResult listTaskDefinitions(ListTaskDefinitionsRequest request) {request = beforeClientExecution(request);return executeListTaskDefinitions(request);}
public String getRawPath() {return rawPath;}
public IndexRecord(RecordInputStream in) {int field_1_zero          = in.readInt();if (field_1_zero != 0) {throw new RecordFormatException("Expected zero for field 1 but got " + field_1_zero);}field_2_first_row     = in.readInt();field_3_last_row_add1 = in.readInt();field_4_zero      = in.readInt();int nCells = in.remaining() / 4;field_5_dbcells = new IntList(nCells);for(int i=0; i<nCells; i++) {field_5_dbcells.add(in.readInt());}}
public Class<? extends Enum> enumType() {return enumType;}
public boolean isSupportedType(final int variantType) {for (int st : SUPPORTED_TYPES) {if (variantType == st) {return true;}}return false;}
public PersonIdent getSourceCommitter(int idx) {return sourceCommitters[idx];}
public RemoveTagsRequest(String resourceId, java.util.List<String> tagKeys) {setResourceId(resourceId);setTagKeys(tagKeys);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[ENDBLOCK]\n");buffer.append("    .rt         =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt   =").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .iObjectKind=").append(HexDump.shortToHex(iObjectKind)).append('\n');buffer.append("    .unused     =").append(HexDump.toHex(unused)).append('\n');buffer.append("[/ENDBLOCK]\n");return buffer.toString();}
public int stem(char text[], int length, boolean stemDerivational) {flags = 0;numSyllables = 0;for (int i = 0; i < length; i++)if (isVowel(text[i]))numSyllables++;if (numSyllables > 2) length = removeParticle(text, length);if (numSyllables > 2) length = removePossessivePronoun(text, length);if (stemDerivational)length = stemDerivational(text, length);return length;}
public final long computeNorm(FieldInvertState state) {final int numTerms;if (state.getIndexOptions() == IndexOptions.DOCS && state.getIndexCreatedVersionMajor() >= 8) {numTerms = state.getUniqueTermCount();} else if (discountOverlaps) {numTerms = state.getLength() - state.getNumOverlap();} else {numTerms = state.getLength();}return SmallFloat.intToByte4(numTerms);}
public OpenNLPChunkerFilter create(TokenStream in) {try {NLPChunkerOp chunkerOp = null;if (chunkerModelFile != null) {chunkerOp = OpenNLPOpsFactory.getChunker(chunkerModelFile);}return new OpenNLPChunkerFilter(in, chunkerOp);} catch (IOException e) {throw new IllegalArgumentException(e);}}
public List<PackedObjectInfo> getSortedObjectList(Comparator<PackedObjectInfo> cmp) {Arrays.sort(entries, 0, entryCount, cmp);List<PackedObjectInfo> list = Arrays.asList(entries);if (entryCount < entries.length)list = list.subList(0, entryCount);return list;}
public String getSecurityToken() {AlibabaCloudCredentials credentials = getCredentials();if (credentials instanceof BasicSessionCredentials) {return ((BasicSessionCredentials) credentials).getSessionToken();} else {return null;}}
public StopAutoMLJobResult stopAutoMLJob(StopAutoMLJobRequest request) {request = beforeClientExecution(request);return executeStopAutoMLJob(request);}
public int findStartOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 1 ) return start;bi.setText(buffer.substring(0, start));bi.last();return bi.previous();}
public StartImageBuilderResult startImageBuilder(StartImageBuilderRequest request) {request = beforeClientExecution(request);return executeStartImageBuilder(request);}
public double readDouble() {long valueLongBits = readLong();double result = Double.longBitsToDouble(valueLongBits);if (Double.isNaN(result)) {throw new RuntimeException("Did not expect to read NaN");}return result;}
public double readDouble(){return _in.readDouble();}
public int compareTo(Cell other) {return Double.compare(distanceSquared, other.distanceSquared);}
public GetCampaignDateRangeKpiResult getCampaignDateRangeKpi(GetCampaignDateRangeKpiRequest request) {request = beforeClientExecution(request);return executeGetCampaignDateRangeKpi(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(" [CRN");sb.append(" rowIx=").append(field_3_row_index);sb.append(" firstColIx=").append(field_2_first_column_index);sb.append(" lastColIx=").append(field_1_last_column_index);sb.append("]");return sb.toString();}
public void add(double value) {ensureCapacity(_count + 1);_array[_count] = value;_count++;}
public String getSheetName(int sheetIndex) {return getSheetEvaluator(sheetIndex).getSheetName();}
public TransferDomainToAnotherAwsAccountResult transferDomainToAnotherAwsAccount(TransferDomainToAnotherAwsAccountRequest request) {request = beforeClientExecution(request);return executeTransferDomainToAnotherAwsAccount(request);}
public final boolean weakCompareAndSet(V expect, V update) {return unsafe.compareAndSwapObject(this, valueOffset, expect, update);}
public void setResult(ReceiveCommand.Result status, String msg) {result = decode(status);super.setResult(status, msg);}
public String toString() {return "skip";}
public List<String> getModifiedFiles() {return modifiedFiles;}
public final void serialize(LittleEndianOutput out) {out.writeShort(getRow());out.writeShort(getColumn());out.writeShort(getXFIndex());serializeValue(out);}
public String toString() {return "NotIgnored(" + index + ")";}
public DescribeDBClusterParametersResult describeDBClusterParameters(DescribeDBClusterParametersRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterParameters(request);}
public CellRangeAddress copy() {return new CellRangeAddress(getFirstRow(), getLastRow(), getFirstColumn(), getLastColumn());}
public final boolean hasAny(RevFlagSet set) {return (flags & set.mask) != 0;}
public GetPolicyResult getPolicy(GetPolicyRequest request) {request = beforeClientExecution(request);return executeGetPolicy(request);}
public BookSheetKey(int bookIndex, int sheetIndex) {_bookIndex = bookIndex;_sheetIndex = sheetIndex;}
public void setRate(int rate, boolean perMin) {this.rate = rate;this.perMin = perMin;setSequenceName();}
public DescribeVpcEndpointConnectionsResult describeVpcEndpointConnections(DescribeVpcEndpointConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointConnections(request);}
public GetHostedZoneResult getHostedZone(GetHostedZoneRequest request) {request = beforeClientExecution(request);return executeGetHostedZone(request);}
public ChangeBatch(java.util.List<Change> changes) {setChanges(changes);}
public String[] getExternalBookAndSheetName(int extRefIndex) {int ebIx = _externSheetRecord.getExtbookIndexFromRefIndex(extRefIndex);SupBookRecord ebr = _externalBookBlocks[ebIx].getExternalBookRecord();if (!ebr.isExternalReferences()) {return null;}int shIx1 = _externSheetRecord.getFirstSheetIndexFromRefIndex(extRefIndex);int shIx2 = _externSheetRecord.getLastSheetIndexFromRefIndex(extRefIndex);String firstSheetName = null;String lastSheetName = null;if (shIx1 >= 0) {firstSheetName = ebr.getSheetNames()[shIx1];}if (shIx2 >= 0) {lastSheetName = ebr.getSheetNames()[shIx2];}if (shIx1 == shIx2) {return new String[]{ebr.getURL(),firstSheetName};} else {return new String[]{ebr.getURL(),firstSheetName,lastSheetName};}}
public ChartEndBlockRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();iObjectKind = in.readShort();if(in.available() == 0) {unused = new byte[0];} else {unused = new byte[6];in.readFully(unused);}}
public CreateQueueResult createQueue(CreateQueueRequest request) {request = beforeClientExecution(request);return executeCreateQueue(request);}
public void setMaxDocCharsToAnalyze(int maxDocCharsToAnalyze) {this.maxCharsToAnalyze = maxDocCharsToAnalyze;}
public CreateCodeRepositoryResult createCodeRepository(CreateCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeCreateCodeRepository(request);}
public static String getLastCommitSegmentsFileName(String[] files) {return IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",getLastCommitGeneration(files));}
public final CharBuffer put(char[] src) {return put(src, 0, src.length);}
public Certificate modifyCertificates(ModifyCertificatesRequest request) {request = beforeClientExecution(request);return executeModifyCertificates(request);}
public void updateCell(String sheetName, int rowIndex, int columnIndex, ValueEval value) {ForkedEvaluationCell cell = _sewb.getOrCreateUpdatableCell(sheetName, rowIndex, columnIndex);cell.setValue(value);_evaluator.notifyUpdateCell(cell);}
public DisassociateMemberAccountResult disassociateMemberAccount(DisassociateMemberAccountRequest request) {request = beforeClientExecution(request);return executeDisassociateMemberAccount(request);}
public boolean run(byte[] s, int offset, int length) {int p = 0;int l = offset + length;for (int i = offset; i < l; i++) {p = step(p, s[i] & 0xFF);if (p == -1) return false;}return accept.get(p);}
public DeleteTrafficPolicyResult deleteTrafficPolicy(DeleteTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficPolicy(request);}
public static PackIndex read(InputStream fd) throws IOException,CorruptObjectException {final byte[] hdr = new byte[8];IO.readFully(fd, hdr, 0, hdr.length);if (isTOC(hdr)) {final int v = NB.decodeInt32(hdr, 4);switch (v) {case 2:return new PackIndexV2(fd);default:throw new UnsupportedPackIndexVersionException(v);}}return new PackIndexV1(fd, hdr);}
public double[] toArray() {if (_count < 1) {return EMPTY_DOUBLE_ARRAY;}double[] result = new double[_count];System.arraycopy(_array, 0, result, 0, _count);return result;}
public GetHostReservationPurchasePreviewResult getHostReservationPurchasePreview(GetHostReservationPurchasePreviewRequest request) {request = beforeClientExecution(request);return executeGetHostReservationPurchasePreview(request);}
public CustomAvailabilityZone createCustomAvailabilityZone(CreateCustomAvailabilityZoneRequest request) {request = beforeClientExecution(request);return executeCreateCustomAvailabilityZone(request);}
public EvaluationTracker(EvaluationCache cache) {_cache = cache;_evaluationFrames = new ArrayList<>();_currentlyEvaluatingCells = new HashSet<>();}
public String toString() {return format(false, false);}
public AcceptQualificationRequestResult acceptQualificationRequest(AcceptQualificationRequestRequest request) {request = beforeClientExecution(request);return executeAcceptQualificationRequest(request);}
public boolean markSupported() {return false;}
public StringBuffer appendTail(StringBuffer buffer) {if (appendPos < regionEnd) {buffer.append(input.substring(appendPos, regionEnd));}return buffer;}
public String getSignificantDecimalDigits() {return Long.toString(_wholePart);}
public void setVerticalBorder(boolean value){field_1_options = verticalBorder.setShortBoolean(field_1_options, value);}
public CRNRecord(RecordInputStream in) {field_1_last_column_index = in.readUByte();field_2_first_column_index = in.readUByte();field_3_row_index = in.readShort();int nValues = field_1_last_column_index - field_2_first_column_index + 1;field_4_constant_values = ConstantValueParser.parse(in, nValues);}
public DBSecurityGroup revokeDBSecurityGroupIngress(RevokeDBSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeRevokeDBSecurityGroupIngress(request);}
public CharBlockArray append(char[] chars, int start, int length) {int offset = start;int remain = length;while (remain > 0) {if (this.current.length == this.blockSize) {addBlock();}int toCopy = remain;int remainingInBlock = this.blockSize - this.current.length;if (remainingInBlock < toCopy) {toCopy = remainingInBlock;}System.arraycopy(chars, offset, this.current.chars, this.current.length, toCopy);offset += toCopy;remain -= toCopy;this.current.length += toCopy;}this.length += length;return this;}
public String toString() {return toString(null, true);}
public int doLogic() throws Exception {try {Locale locale = getRunData().getLocale();if (locale == null) throw new RuntimeException("Locale must be set with the NewLocale task!");Analyzer analyzer = createAnalyzer(locale, impl);getRunData().setAnalyzer(analyzer);System.out.println("Changed Analyzer to: "+ analyzer.getClass().getName() + "(" + locale + ")");} catch (Exception e) {throw new RuntimeException("Error creating Analyzer: impl=" + impl, e);}return 1;}
public final short get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public static String toHex(final short[] value){StringBuilder retVal = new StringBuilder();retVal.append('[');for(int x = 0; x < value.length; x++){if (x>0) {retVal.append(", ");}retVal.append(toHex(value[x]));}retVal.append(']');return retVal.toString();}
public ListIPSetsResult listIPSets(ListIPSetsRequest request) {request = beforeClientExecution(request);return executeListIPSets(request);}
public int getLevelForDistance(double dist) {if (dist == 0){return maxLevels;}int level =  S2Projections.MAX_WIDTH.getMinLevel(dist * DistanceUtils.DEGREES_TO_RADIANS);int roundLevel = level % arity != 0 ? 1 : 0;level = level/arity + roundLevel;return Math.min(maxLevels, level + 1);}
public IndexableField[] getFields(String name) {List<IndexableField> result = new ArrayList<>();for (IndexableField field : fields) {if (field.name().equals(name)) {result.add(field);}}return result.toArray(new IndexableField[result.size()]);}
public GetTrafficPolicyResult getTrafficPolicy(GetTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeGetTrafficPolicy(request);}
public String name() {ensureId();return idBuffer.name();}
public DeleteExperimentResult deleteExperiment(DeleteExperimentRequest request) {request = beforeClientExecution(request);return executeDeleteExperiment(request);}
public static byte[] grow(byte[] array) {return grow(array, 1 + array.length);}
public void serialize(LittleEndianOutput out) {out.writeShort(getReadOnly());out.writeShort(getPassword());out.writeShort(field_3_username_value.length());if(field_3_username_value.length() > 0) {out.writeByte(field_3_username_unicode_options);StringUtil.putCompressedUnicode(getUsername(), out);}}
public BulgarianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetMirrorListRequest() {super("cr", "2016-06-07", "GetMirrorList", "cr");setUriPattern("/mirrors");setMethod(MethodType.GET);}
public DescribeDomainEndpointOptionsResult describeDomainEndpointOptions(DescribeDomainEndpointOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeDomainEndpointOptions(request);}
public CommonToken(Pair<TokenSource, CharStream> source, int type, int channel, int start, int stop) {this.source = source;this.type = type;this.channel = channel;this.start = start;this.stop = stop;if (source.a != null) {this.line = source.a.getLine();this.charPositionInLine = source.a.getCharPositionInLine();}}
public boolean get(URIish uri, CredentialItem... items)throws UnsupportedCredentialItem {for (CredentialItem i : items) {if (i instanceof CredentialItem.Username) {((CredentialItem.Username) i).setValue(username);continue;}if (i instanceof CredentialItem.Password) {((CredentialItem.Password) i).setValue(password);continue;}if (i instanceof CredentialItem.StringType) {if (i.getPromptText().equals("Password: ")) { ((CredentialItem.StringType) i).setValue(new String(password));continue;}}throw new UnsupportedCredentialItem(uri, i.getClass().getName()+ ":" + i.getPromptText()); }return true;}
public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public UpdateDocumentationVersionResult updateDocumentationVersion(UpdateDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDocumentationVersion(request);}
public DeleteApplicationInputProcessingConfigurationResult deleteApplicationInputProcessingConfiguration(DeleteApplicationInputProcessingConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationInputProcessingConfiguration(request);}
public PurchaseScheduledInstancesResult purchaseScheduledInstances(PurchaseScheduledInstancesRequest request) {request = beforeClientExecution(request);return executePurchaseScheduledInstances(request);}
public String getHost() {return host;}
public DeleteNetworkProfileResult deleteNetworkProfile(DeleteNetworkProfileRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkProfile(request);}
public ListSchemasResult listSchemas(ListSchemasRequest request) {request = beforeClientExecution(request);return executeListSchemas(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_first_row);out.writeShort(field_2_first_col);}
public ByteSliceWriter(ByteBlockPool pool) {this.pool = pool;}
public void replace(int start, int limit, char[] text, int charsStart,int charsLen) {final int newLength = shiftForReplace(start, limit, charsLen);System.arraycopy(text, charsStart, buffer, start, charsLen);token.setLength(length = newLength);}
public synchronized void getChars(int start, int end, char[] buffer, int idx) {super.getChars(start, end, buffer, idx);}
public RestoreAddressToClassicResult restoreAddressToClassic(RestoreAddressToClassicRequest request) {request = beforeClientExecution(request);return executeRestoreAddressToClassic(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = ((blocks[blocksOffset++] & 0xFFL) << 8) | (blocks[blocksOffset++] & 0xFFL);}}
public CreateNamespaceRequest() {super("cr", "2016-06-07", "CreateNamespace", "cr");setUriPattern("/namespace");setMethod(MethodType.PUT);}
public ShortBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public GetEventsConfigurationResult getEventsConfiguration(GetEventsConfigurationRequest request) {request = beforeClientExecution(request);return executeGetEventsConfiguration(request);}
public String toString() {return "docFreq=" + docFreq + " totalTermFreq=" + totalTermFreq + " termBlockOrd=" + termBlockOrd + " blockFP=" + blockFilePointer;}
public EstimateTemplateCostResult estimateTemplateCost(EstimateTemplateCostRequest request) {request = beforeClientExecution(request);return executeEstimateTemplateCost(request);}
public TreeFilter clone() {return new Binary(a.clone(), b.clone());}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 1:return evaluate(srcRowIndex, srcColumnIndex, args[0]);case 0:return new NumberEval(srcColumnIndex+1);}return ErrorEval.VALUE_INVALID;}
public ByteOrder order() {return ByteOrder.nativeOrder();}
public void insert(char[] key, int start, char val) {int len = strlen(key) + 1;if (freenode + len > eq.length) {redimNodeArrays(eq.length + BLOCK_SIZE);}root = insert(root, key, start, val);}
public final DFAState getPrecedenceStartState(int precedence) {if (!isPrecedenceDfa()) {throw new IllegalStateException("Only precedence DFAs may contain a precedence start state.");}if (precedence < 0 || precedence >= s0.edges.length) {return null;}return s0.edges[precedence];}
public SetActiveReceiptRuleSetResult setActiveReceiptRuleSet(SetActiveReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeSetActiveReceiptRuleSet(request);}
public CreateLaunchTemplateResult createLaunchTemplate(CreateLaunchTemplateRequest request) {request = beforeClientExecution(request);return executeCreateLaunchTemplate(request);}
public ListTrafficPolicyVersionsResult listTrafficPolicyVersions(ListTrafficPolicyVersionsRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyVersions(request);}
public Locale effectiveLocale() {return effectiveLocale;}
public void encode(long[] values, int valuesOffset, long[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {blocks[blocksOffset++] = encode(values, valuesOffset);valuesOffset += valueCount;}}
public static String revisionVersion(IndexCommit commit) {return Long.toString(commit.getGeneration(), RADIX);}
public ListServicesResult listServices(ListServicesRequest request) {request = beforeClientExecution(request);return executeListServices(request);}
public BatchModifyClusterSnapshotsResult batchModifyClusterSnapshots(BatchModifyClusterSnapshotsRequest request) {request = beforeClientExecution(request);return executeBatchModifyClusterSnapshots(request);}
public DeleteBackupResult deleteBackup(DeleteBackupRequest request) {request = beforeClientExecution(request);return executeDeleteBackup(request);}
public DescribeDBParameterGroupsResult describeDBParameterGroups() {return describeDBParameterGroups(new DescribeDBParameterGroupsRequest());}
public void reset(boolean zeroFillBuffers, boolean reuseFirst) {if (bufferUpto != -1) {if (zeroFillBuffers) {for(int i=0;i<bufferUpto;i++) {Arrays.fill(buffers[i], 0);}Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);}if (bufferUpto > 0 || !reuseFirst) {final int offset = reuseFirst ? 1 : 0;allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);Arrays.fill(buffers, offset, bufferUpto+1, null);}if (reuseFirst) {bufferUpto = 0;intUpto = 0;intOffset = 0;buffer = buffers[0];} else {bufferUpto = -1;intUpto = INT_BLOCK_SIZE;intOffset = -INT_BLOCK_SIZE;buffer = null;}}}
public SaveRecalcRecord clone() {return copy();}
public static void main(String[] args) {exec(args);}
public DeregisterImageResult deregisterImage(DeregisterImageRequest request) {request = beforeClientExecution(request);return executeDeregisterImage(request);}
public DBSnapshot modifyDBSnapshot(ModifyDBSnapshotRequest request) {request = beforeClientExecution(request);return executeModifyDBSnapshot(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[BOUNDSHEET]\n");buffer.append("    .bof        = ").append(HexDump.intToHex(getPositionOfBof())).append("\n");buffer.append("    .options    = ").append(HexDump.shortToHex(field_2_option_flags)).append("\n");buffer.append("    .unicodeflag= ").append(HexDump.byteToHex(field_4_isMultibyteUnicode)).append("\n");buffer.append("    .sheetname  = ").append(field_5_sheetname).append("\n");buffer.append("[/BOUNDSHEET]\n");return buffer.toString();}
public void setParams(String params) {this.params = params; fieldsToLoad = new HashSet<>();for (StringTokenizer tokenizer = new StringTokenizer(params, ","); tokenizer.hasMoreTokens();) {String s = tokenizer.nextToken();fieldsToLoad.add(s);}}
public GetNamedQueryResult getNamedQuery(GetNamedQueryRequest request) {request = beforeClientExecution(request);return executeGetNamedQuery(request);}
public GermanStemFilter create(TokenStream in) {return new GermanStemFilter(in);}
public ExtendedFormatRecord createCellXF() {ExtendedFormatRecord xf = createExtendedFormat();records.add(records.getXfpos()+1, xf);records.setXfpos( records.getXfpos() + 1 );numxfs++;return xf;}
public Cluster modifyClusterMaintenance(ModifyClusterMaintenanceRequest request) {request = beforeClientExecution(request);return executeModifyClusterMaintenance(request);}
public DeleteDBSecurityGroupResult deleteDBSecurityGroup(DeleteDBSecurityGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDBSecurityGroup(request);}
public static FormulaError forInt(int type) throws IllegalArgumentException {FormulaError err = imap.get(type);if(err == null) err = bmap.get((byte)type);if(err == null) throw new IllegalArgumentException("Unknown error type: " + type);return err;}
public void finish(StringBuffer toAppendTo) {if (hStart >= 0 && !showAmPm) {for (int i = 0; i < hLen; i++) {toAppendTo.setCharAt(hStart + i, 'H');}}}
public SendRawEmailResult sendRawEmail(SendRawEmailRequest request) {request = beforeClientExecution(request);return executeSendRawEmail(request);}
public void clear() {if ( readonly ) throw new IllegalStateException("can't alter readonly IntervalSet");intervals.clear();}
public int previous() {if (current == start) {return DONE;} else {return first();}}
public DeleteDocumentClassifierResult deleteDocumentClassifier(DeleteDocumentClassifierRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentClassifier(request);}
public DeleteDeviceAllGroupRequest() {super("LinkFace", "2018-07-20", "DeleteDeviceAllGroup");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");sb.append("sheetIx=").append(getExternSheetIndex());sb.append(" ! ");sb.append(formatReferenceAsString());sb.append("]");return sb.toString();}
public CreateBGPPeerResult createBGPPeer(CreateBGPPeerRequest request) {request = beforeClientExecution(request);return executeCreateBGPPeer(request);}
public String toASCIIString() {StringBuilder result = new StringBuilder();ASCII_ONLY.appendEncoded(result, toString());return result.toString();}
public CharSequence subSequence(int start, int end) {int remaining = end - start;StringBuilder sb = new StringBuilder(remaining);int blockIdx = blockIndex(start);int indexInBlock = indexInBlock(start);while (remaining > 0) {Block b = blocks.get(blockIdx++);int numToAppend = Math.min(remaining, b.length - indexInBlock);sb.append(b.chars, indexInBlock, numToAppend);remaining -= numToAppend;indexInBlock = 0; }return sb.toString();}
public long get(int index) {final int o = index >>> 3;final int b = index & 7;final int shift = b << 3;return (blocks[o] >>> shift) & 255L;}
public static Collection<String> getNotSupportedFunctionNames() {Collection<String> lst = new TreeSet<>();for (int i = 0; i < functions.length; i++) {Function func = functions[i];if (func != null && (func instanceof NotImplementedFunction)) {FunctionMetadata metaData = FunctionMetadataRegistry.getFunctionByIndex(i);lst.add(metaData.getName());}}lst.remove("INDIRECT"); return Collections.unmodifiableCollection(lst);}
public ItalianLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(getNumberOfOperands());out.writeShort(getFunctionIndex());}
public String getTokenErrorDisplay(Token t) {if ( t==null ) return "<no token>";String s = t.getText();if ( s==null ) {if ( t.getType()==Token.EOF ) {s = "<EOF>";}else {s = "<"+t.getType()+">";}}s = s.replace("\n","\\n");s = s.replace("\r","\\r");s = s.replace("\t","\\t");return "'"+s+"'";}
public NumericPayloadTokenFilter create(TokenStream input) {return new NumericPayloadTokenFilter(input,payload,typeMatch);}
public void incrementDrawingsSaved(){dgg.setDrawingsSaved(dgg.getDrawingsSaved()+1);}
public UploadSigningCertificateRequest(String certificateBody) {setCertificateBody(certificateBody);}
public DeleteJourneyResult deleteJourney(DeleteJourneyRequest request) {request = beforeClientExecution(request);return executeDeleteJourney(request);}
public void reset() {ptr = mark;}
public DescribeInstanceHealthRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}
public static Automaton toAutomaton(Term wildcardquery) {List<Automaton> automata = new ArrayList<>();String wildcardText = wildcardquery.text();for (int i = 0; i < wildcardText.length();) {final int c = wildcardText.codePointAt(i);int length = Character.charCount(c);switch(c) {case WILDCARD_STRING:automata.add(Automata.makeAnyString());break;case WILDCARD_CHAR:automata.add(Automata.makeAnyChar());break;case WILDCARD_ESCAPE:if (i + length < wildcardText.length()) {final int nextChar = wildcardText.codePointAt(i + length);length += Character.charCount(nextChar);automata.add(Automata.makeChar(nextChar));break;} default:automata.add(Automata.makeChar(c));}i += length;}return Operations.concatenate(automata);}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (obj instanceof ExtendedFormatRecord) {final ExtendedFormatRecord other = (ExtendedFormatRecord) obj;if (field_1_font_index != other.field_1_font_index)return false;if (field_2_format_index != other.field_2_format_index)return false;if (field_3_cell_options != other.field_3_cell_options)return false;if (field_4_alignment_options != other.field_4_alignment_options)return false;if (field_5_indention_options != other.field_5_indention_options)return false;if (field_6_border_options != other.field_6_border_options)return false;if (field_7_palette_options != other.field_7_palette_options)return false;if (field_8_adtl_palette_options != other.field_8_adtl_palette_options)return false;if (field_9_fill_palette_options != other.field_9_fill_palette_options)return false;return true;}return false;}
public short[] getTriplet(){return new short[]{(short) (_red   & 0xff),(short) (_green & 0xff),(short) (_blue  & 0xff)};}
public BlameCommand setFollowFileRenames(boolean follow) {followFileRenames = Boolean.valueOf(follow);return this;}
public StringMatcher(String value, CmpOp operator) {super(operator);_value = value;switch(operator.getCode()) {case CmpOp.NONE:case CmpOp.EQ:case CmpOp.NE:_pattern = getWildCardPattern(value);break;default:_pattern = null;}}
public DefaultColWidthRecord() {field_1_col_width = DEFAULT_COLUMN_WIDTH;}
public GetIndustryInfoListRequest() {super("industry-brain", "2018-07-12", "GetIndustryInfoList");setProtocol(ProtocolType.HTTPS);}
public AssociateTrialComponentResult associateTrialComponent(AssociateTrialComponentRequest request) {request = beforeClientExecution(request);return executeAssociateTrialComponent(request);}
public FileIdCluster addCluster(int dgId, int numShapedUsed) {return addCluster(dgId, numShapedUsed, true);}
public GetFieldLevelEncryptionResult getFieldLevelEncryption(GetFieldLevelEncryptionRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryption(request);}
public CharBuffer get(char[] dst, int dstOffset, int charCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, charCount);if (charCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + charCount; ++i) {dst[i] = get();}return this;}
public UpdateServiceResult updateService(UpdateServiceRequest request) {request = beforeClientExecution(request);return executeUpdateService(request);}
public FlushStageCacheResult flushStageCache(FlushStageCacheRequest request) {request = beforeClientExecution(request);return executeFlushStageCache(request);}
public ModifyInstanceMetadataOptionsResult modifyInstanceMetadataOptions(ModifyInstanceMetadataOptionsRequest request) {request = beforeClientExecution(request);return executeModifyInstanceMetadataOptions(request);}
public DefaultRowHeightRecord(RecordInputStream in) {field_1_option_flags = in.readShort();field_2_row_height   = in.readShort();}
public ListModelPackagesResult listModelPackages(ListModelPackagesRequest request) {request = beforeClientExecution(request);return executeListModelPackages(request);}
public StopFleetActionsResult stopFleetActions(StopFleetActionsRequest request) {request = beforeClientExecution(request);return executeStopFleetActions(request);}
public boolean matches(ValueEval x) {double testValue;if(x instanceof StringEval) {switch (getCode()) {case CmpOp.EQ:case CmpOp.NONE:break;case CmpOp.NE:return true;default:return false;}StringEval se = (StringEval)x;Double val = OperandResolver.parseDouble(se.getStringValue());if(val == null) {return false;}return _value == val.doubleValue();} else if((x instanceof NumberEval)) {NumberEval ne = (NumberEval) x;testValue = ne.getNumberValue();} else if((x instanceof BlankEval)) {switch (getCode()) {case CmpOp.NE:return true;default:return false;}} else {return false;}return evaluate(Double.compare(testValue, _value));}
public boolean include(RevWalk walker, RevCommit c) {throw new UnsupportedOperationException(JGitText.get().cannotBeCombined);}
public LongList(int capacity) {entries = new long[capacity];}
public static String readAsciiLine(InputStream in) throws IOException {StringBuilder result = new StringBuilder(80);while (true) {int c = in.read();if (c == -1) {throw new EOFException();} else if (c == '\n') {break;}result.append((char) c);}int length = result.length();if (length > 0 && result.charAt(length - 1) == '\r') {result.setLength(length - 1);}return result.toString();}
public DeleteRouteRequestParameterResult deleteRouteRequestParameter(DeleteRouteRequestParameterRequest request) {request = beforeClientExecution(request);return executeDeleteRouteRequestParameter(request);}
public int getRowCountForBlock(int block) {int startIndex = block * DBCellRecord.BLOCK_SIZE;int endIndex = startIndex + DBCellRecord.BLOCK_SIZE - 1;if (endIndex >= _rowRecords.size())endIndex = _rowRecords.size()-1;return endIndex-startIndex+1;}
public boolean add(CharSequence text) {return map.put(text, PLACEHOLDER) == null;}
public FSTCompletion(FST<Object> automaton, boolean higherWeightsFirst, boolean exactFirst) {this.automaton = automaton;if (automaton != null) {this.rootArcs = cacheRootArcs(automaton);} else {this.rootArcs = new Arc[0];}this.higherWeightsFirst = higherWeightsFirst;this.exactFirst = exactFirst;}
public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats[]) {double idf = 0d; List<Explanation> details = new ArrayList<>();for (final TermStatistics stat : termStats ) {Explanation idfExplain = idfExplain(collectionStats, stat);details.add(idfExplain);idf += idfExplain.getValue().floatValue();}return Explanation.match((float) idf, "idf, sum of:", details);}
public CreateEndpointResult createEndpoint(CreateEndpointRequest request) {request = beforeClientExecution(request);return executeCreateEndpoint(request);}
public int serialize(int offset, byte[] data){LittleEndian.putShort( data, 0 + offset, getSid() );LittleEndian.putShort( data, 2 + offset, (short) ( getRecordSize() - 4 ) );byte[] rawData = getRawData();if ( escherRecords.size() == 0 && rawData != null ){LittleEndian.putShort(data, 0 + offset, getSid());LittleEndian.putShort(data, 2 + offset, (short)(getRecordSize() - 4));System.arraycopy( rawData, 0, data, 4 + offset, rawData.length);return rawData.length + 4;}LittleEndian.putShort(data, 0 + offset, getSid());LittleEndian.putShort(data, 2 + offset, (short)(getRecordSize() - 4));int pos = offset + 4;for (EscherRecord r : escherRecords) {pos += r.serialize( pos, data, new NullEscherSerializationListener() );}return getRecordSize();}
public boolean isBelowMaxRep() {int sc = _significand.bitLength() - C_64;return _significand.compareTo(BI_MAX_BASE.shiftLeft(sc)) < 0;}
public FieldIndexEnum getFieldEnum(FieldInfo fieldInfo) {final FieldIndexData fieldData = fields.get(fieldInfo.name);if (fieldData.fst == null) {return null;} else {return new IndexEnum(fieldData.fst);}}
public AssociationsFacetsExample() {config = new FacetsConfig();config.setMultiValued("tags", true);config.setIndexFieldName("tags", "$tags");config.setMultiValued("genre", true);config.setIndexFieldName("genre", "$genre");}
public void fill(int fromIndex, int toIndex, long val) {ensureCapacity(val);current.fill(fromIndex, toIndex, val);}
public ListDeploymentConfigsResult listDeploymentConfigs(ListDeploymentConfigsRequest request) {request = beforeClientExecution(request);return executeListDeploymentConfigs(request);}
public ListUserPoliciesRequest(String userName) {setUserName(userName);}
public TokenStream create(TokenStream input) {return new FinnishLightStemFilter(input);}
public CharSequence getLastOnPath(CharSequence key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {CharSequence r = tries.get(i).getLastOnPath(key);if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {return result;}result.append(r);}return result;}
public int getExternalSheetIndex(String workbookName, String firstSheetName, String lastSheetName) {int externalBookIndex = getExternalWorkbookIndex(workbookName);if (externalBookIndex == -1) {throw new RuntimeException("No external workbook with name '" + workbookName + "'");}SupBookRecord ebrTarget = _externalBookBlocks[externalBookIndex].getExternalBookRecord();int firstSheetIndex = getSheetIndex(ebrTarget.getSheetNames(), firstSheetName);int lastSheetIndex = getSheetIndex(ebrTarget.getSheetNames(), lastSheetName);int result = _externSheetRecord.getRefIxForSheet(externalBookIndex, firstSheetIndex, lastSheetIndex);if (result < 0) {result = _externSheetRecord.addRef(externalBookIndex, firstSheetIndex, lastSheetIndex);}return result;}
public String findSheetLastNameFromExternSheet(int externSheetIndex){int indexToSheet = linkTable.getLastInternalSheetIndexForExtIndex(externSheetIndex);return findSheetNameFromIndex(indexToSheet);}
public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(iObjectKind);out.write(reserved);}
public final ValueEval getValue() {return _value;}
public ImportImageResult importImage(ImportImageRequest request) {request = beforeClientExecution(request);return executeImportImage(request);}
public PruneByAge(double maxAgeSec) {if (maxAgeSec < 0) {throw new IllegalArgumentException("maxAgeSec must be > 0 (got " + maxAgeSec + ")");}this.maxAgeSec = maxAgeSec;}
public DeleteSecurityGroupRequest(String groupName) {setGroupName(groupName);}
public GetRoomSkillParameterResult getRoomSkillParameter(GetRoomSkillParameterRequest request) {request = beforeClientExecution(request);return executeGetRoomSkillParameter(request);}
public ParserRuleContext parse(int startRuleIndex) {RuleStartState startRuleStartState = atn.ruleToStartState[startRuleIndex];rootContext = createInterpreterRuleContext(null, ATNState.INVALID_STATE_NUMBER, startRuleIndex);if (startRuleStartState.isLeftRecursiveRule) {enterRecursionRule(rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);}else {enterRule(rootContext, startRuleStartState.stateNumber, startRuleIndex);}while ( true ) {ATNState p = getATNState();switch ( p.getStateType() ) {case ATNState.RULE_STOP :if ( _ctx.isEmpty() ) {if (startRuleStartState.isLeftRecursiveRule) {ParserRuleContext result = _ctx;Pair<ParserRuleContext, Integer> parentContext = _parentContextStack.pop();unrollRecursionContexts(parentContext.a);return result;}else {exitRule();return rootContext;}}visitRuleStopState(p);break;default :try {visitState(p);}catch (RecognitionException e) {setState(atn.ruleToStopState[p.ruleIndex].stateNumber);getContext().exception = e;getErrorHandler().reportError(this, e);recover(e);}break;}}}
public DeleteInstallationMediaResult deleteInstallationMedia(DeleteInstallationMediaRequest request) {request = beforeClientExecution(request);return executeDeleteInstallationMedia(request);}
public boolean accept(double value) {return value >= min && value <= max;}
public GetVariablesResult getVariables(GetVariablesRequest request) {request = beforeClientExecution(request);return executeGetVariables(request);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 16) | (byte1 << 8) | byte2;}}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_pointNumber);out.writeShort(field_2_seriesIndex);out.writeShort(field_3_seriesNumber);out.writeShort(field_4_formatFlags);}
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, String arearef) {this(externalWorkbookNumber, sheetName, new AreaReference(arearef, SpreadsheetVersion.EXCEL2007));}
public final CharSequence subSequence(int start, int end) {checkStartEndRemaining(start, end);CharBuffer result = duplicate();result.limit(position + end);result.position(position + start);return result;}
public DescribeInstallationMediaResult describeInstallationMedia(DescribeInstallationMediaRequest request) {request = beforeClientExecution(request);return executeDescribeInstallationMedia(request);}
public UpdateConferenceProviderResult updateConferenceProvider(UpdateConferenceProviderRequest request) {request = beforeClientExecution(request);return executeUpdateConferenceProvider(request);}
public void release(int marker) {int expectedMark = -numMarkers;if ( marker!=expectedMark ) {throw new IllegalStateException("release() called with an invalid marker.");}numMarkers--;if ( numMarkers==0 && p > 0 ) { System.arraycopy(data, p, data, 0, n - p); n = n - p;p = 0;lastCharBufferStart = lastChar;}}
public static int getDataSize() {return 12;}
public TokenStream create(TokenStream input) {return new UpperCaseFilter(input);}
public void serialize(LittleEndianOutput out) {out.writeShort(getHideObj());}
public V setValue(V value) {V oldValue = this.value;this.value = value;return oldValue;}
public String toString() {return toString(0);}
public CreateHITResult createHIT(CreateHITRequest request) {request = beforeClientExecution(request);return executeCreateHIT(request);}
public void setDelimiters(String start, String stop, String escapeLeft) {if (start == null || start.isEmpty()) {throw new IllegalArgumentException("start cannot be null or empty");}if (stop == null || stop.isEmpty()) {throw new IllegalArgumentException("stop cannot be null or empty");}this.start = start;this.stop = stop;this.escape = escapeLeft;}
public final int serialize(int offset, byte[] data) {int dataSize = getDataSize();int recSize = 4 + dataSize;try (LittleEndianByteArrayOutputStream out =new LittleEndianByteArrayOutputStream(data, offset, recSize)) {out.writeShort(getSid());out.writeShort(dataSize);serialize(out);if (out.getWriteIndex() - offset != recSize) {throw new IllegalStateException("Error in serialization of (" + getClass().getName() + "): "+ "Incorrect number of bytes written - expected " + recSize + " but got "+ (out.getWriteIndex() - offset));}} catch (IOException ioe) {throw new IllegalStateException(ioe);}return recSize;}
public DoubleBuffer duplicate() {return copy(this, mark);}
public ByteBuffer putInt(int value) {int newPosition = position + SizeOf.INT;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeInt(backingArray, offset + position, value, order);position = newPosition;return this;}
public final boolean has(RevFlag flag) {return (flags & flag.mask) != 0;}
public ListGeoLocationsResult listGeoLocations(ListGeoLocationsRequest request) {request = beforeClientExecution(request);return executeListGeoLocations(request);}
public DescribeClusterSnapshotsResult describeClusterSnapshots(DescribeClusterSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterSnapshots(request);}
public DeleteDirectConnectGatewayAssociationProposalResult deleteDirectConnectGatewayAssociationProposal(DeleteDirectConnectGatewayAssociationProposalRequest request) {request = beforeClientExecution(request);return executeDeleteDirectConnectGatewayAssociationProposal(request);}
public V get() throws InterruptedException, ExecutionException {return sync.innerGet();}
public static final int prevLF(byte[] b, int ptr) {return prev(b, ptr, '\n');}
public GetVoiceConnectorTerminationResult getVoiceConnectorTermination(GetVoiceConnectorTerminationRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorTermination(request);}
public int getLevelForDistance(double dist) {if (dist == 0)return maxLevels;final int level = GeohashUtils.lookupHashLenForWidthHeight(dist, dist);return Math.max(Math.min(level, maxLevels), 1);}
public DescribeHsmConfigurationsResult describeHsmConfigurations() {return describeHsmConfigurations(new DescribeHsmConfigurationsRequest());}
public DeleteInternetGatewayResult deleteInternetGateway(DeleteInternetGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteInternetGateway(request);}
public synchronized StringBuffer append(char ch) {append0(ch);return this;}
public boolean equals( Object o ) {return o instanceof SwedishStemmer;}
public int getNameOffset() {return pathOffset;}
public SingleTermsEnum(TermsEnum tenum, BytesRef termText) {super(tenum);singleRef = termText;setInitialSeekTerm(termText);}
public ListAllowedNodeTypeModificationsResult listAllowedNodeTypeModifications(ListAllowedNodeTypeModificationsRequest request) {request = beforeClientExecution(request);return executeListAllowedNodeTypeModifications(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE, ValueEval formVE) {int number = 0;try {ValueEval ve = OperandResolver.getSingleValue(numberVE, srcRowIndex, srcColumnIndex);number = OperandResolver.coerceValueToInt(ve);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}if (number < 0) {return ErrorEval.VALUE_INVALID;}if (number > 3999) {return ErrorEval.VALUE_INVALID;}if (number == 0) {return new StringEval("");}int form = 0;try {ValueEval ve = OperandResolver.getSingleValue(formVE, srcRowIndex, srcColumnIndex);form = OperandResolver.coerceValueToInt(ve);} catch (EvaluationException e) {return ErrorEval.NUM_ERROR;}if (form > 4 || form < 0) {return ErrorEval.VALUE_INVALID;}String result = this.integerToRoman(number);if (form == 0) {return new StringEval(result);}return new StringEval(makeConcise(result, form));}
public void registerDomain(RegisterDomainRequest request) {request = beforeClientExecution(request);executeRegisterDomain(request);}
public V get(Object o) {if(o == null)throw new NullPointerException();return null;}
public String toStringEscaped() {StringBuilder result = new StringBuilder();for (int i = 0; i >= this.length(); i++) {if (this.chars[i] == '\\') {result.append('\\');} else if (this.wasEscaped[i])result.append('\\');result.append(this.chars[i]);}return result.toString();}
public TrustedSigners(java.util.List<String> items) {setItems(items);}
public ModifyVpnTunnelCertificateResult modifyVpnTunnelCertificate(ModifyVpnTunnelCertificateRequest request) {request = beforeClientExecution(request);return executeModifyVpnTunnelCertificate(request);}
public AuthorizeClientVpnIngressResult authorizeClientVpnIngress(AuthorizeClientVpnIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeClientVpnIngress(request);}
public void deprecateWorkflowType(DeprecateWorkflowTypeRequest request) {request = beforeClientExecution(request);executeDeprecateWorkflowType(request);}
public String toString() {return pattern;}
public ICUNormalizer2FilterFactory(Map<String,String> args) {super(args);String form = get(args, "form", "nfkc_cf");String mode = get(args, "mode", Arrays.asList("compose", "decompose"), "compose");Normalizer2 normalizer = Normalizer2.getInstance(null, form, "compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);String filter = get(args, "filter");if (filter != null) {UnicodeSet set = new UnicodeSet(filter);if (!set.isEmpty()) {set.freeze();normalizer = new FilteredNormalizer2(normalizer, set);}}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}this.normalizer = normalizer;}
public LongBuffer compact() {throw new ReadOnlyBufferException();}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return "";return getChild().toQueryString(escapeSyntaxParser) + "~"+ getValueString();}
public GetResolverRuleAssociationResult getResolverRuleAssociation(GetResolverRuleAssociationRequest request) {request = beforeClientExecution(request);return executeGetResolverRuleAssociation(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return arg0;}
public Set<String> getRemoved() {return Collections.unmodifiableSet(diff.getRemoved());}
public void serialize(LittleEndianOutput out) {out.writeInt(getXPosition());out.writeInt(getYPosition());out.writeInt(getWidth());out.writeInt(getHeight());out.writeShort(field5_grbit);out.writeShort(field6_unknown);}
public TokenStream create(TokenStream input) {return new BulgarianStemFilter(input);}
public GetClientCertificateResult getClientCertificate(GetClientCertificateRequest request) {request = beforeClientExecution(request);return executeGetClientCertificate(request);}
public boolean equals( Object o ) {return o instanceof PorterStemmer;}
@Override public void clear() {filteredEntrySet.clear();}
public long readLong() throws IOException {return primitiveTypes.readLong();}
public byte[] toByteArray() throws IOException {if (onDiskFile == null) {return super.toByteArray();}final long len = length();if (Integer.MAX_VALUE < len)throw new OutOfMemoryError(JGitText.get().lengthExceedsMaximumArraySize);final byte[] out = new byte[(int) len];try (FileInputStream in = new FileInputStream(onDiskFile)) {IO.readFully(in, out, 0, (int) len);}return out;}
public void reset(byte[] bytes) {reset(bytes, 0, bytes.length);}
public CheckDNSAvailabilityRequest(String cNAMEPrefix) {setCNAMEPrefix(cNAMEPrefix);}
public DescribeVpcAttributeResult describeVpcAttribute(DescribeVpcAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeVpcAttribute(request);}
public AddResourcePermissionsResult addResourcePermissions(AddResourcePermissionsRequest request) {request = beforeClientExecution(request);return executeAddResourcePermissions(request);}
public DisassociateTrialComponentResult disassociateTrialComponent(DisassociateTrialComponentRequest request) {request = beforeClientExecution(request);return executeDisassociateTrialComponent(request);}
public boolean hasNext() {return nextExternal != null;}
public void removeCategory() {remove1stProperty(PropertyIDMap.PID_CATEGORY);}
public PutConfigurationSetSendingOptionsResult putConfigurationSetSendingOptions(PutConfigurationSetSendingOptionsRequest request) {request = beforeClientExecution(request);return executePutConfigurationSetSendingOptions(request);}
public DisableEbsEncryptionByDefaultResult disableEbsEncryptionByDefault(DisableEbsEncryptionByDefaultRequest request) {request = beforeClientExecution(request);return executeDisableEbsEncryptionByDefault(request);}
public Iterator<E> iterator() {return listIterator(0);}
public void deprecateDomain(DeprecateDomainRequest request) {request = beforeClientExecution(request);executeDeprecateDomain(request);}
public GetSegmentExportJobsResult getSegmentExportJobs(GetSegmentExportJobsRequest request) {request = beforeClientExecution(request);return executeGetSegmentExportJobs(request);}
public boolean contains(Object value) {return containsValue(value);}
public int getEndOffset() {return endOffset;}
public void enterRecursionRule(ParserRuleContext localctx, int ruleIndex) {enterRecursionRule(localctx, getATN().ruleToStartState[ruleIndex].stateNumber, ruleIndex, 0);}
public File getEntryFile() {return ((FileEntry) current()).getFile();}
public RevFilter clone() {return this;}
public void setEnabled(boolean on) {enabled = on;}
public UpdatePushTemplateResult updatePushTemplate(UpdatePushTemplateRequest request) {request = beforeClientExecution(request);return executeUpdatePushTemplate(request);}
public String toString() {return "SimpleFSLock(path=" + path + ",creationTime=" + creationTime + ")";}
public PrintWriter append(char c) {write(c);return this;}
public GetStageResult getStage(GetStageRequest request) {request = beforeClientExecution(request);return executeGetStage(request);}
public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {int nArgs = args.length;if (nArgs < 1) {return ErrorEval.VALUE_INVALID;}if (nArgs > 30) {return ErrorEval.VALUE_INVALID;}int temp = 0;for(int i=0; i<nArgs; i++) {temp += CountUtils.countArg(args[i], _predicate);}return new NumberEval(temp);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 1:return fixed(args[0], new NumberEval(2), BoolEval.FALSE,srcRowIndex, srcColumnIndex);case 2:return fixed(args[0], args[1], BoolEval.FALSE,srcRowIndex, srcColumnIndex);case 3:return fixed(args[0], args[1], args[2], srcRowIndex, srcColumnIndex);}return ErrorEval.VALUE_INVALID;}
public void clear() {n = 0;}
public Iterator<ThreadState> allActiveThreadStates() {return getPerThreadsIterator(perThreadPool.getActiveThreadStateCount());}
public EnglishMinimalStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public NameRecord getNameRecord(int index){return linkTable.getNameRecord(index);}
public String printQueries() {String newline = System.getProperty("line.separator");StringBuilder sb = new StringBuilder();if (queries != null) {for (int i = 0; i < queries.length; i++) {sb.append(i).append(". ").append(queries[i].getClass().getSimpleName()).append(" - ").append(queries[i].toString());sb.append(newline);}}return sb.toString();}
public SkipWaitTimeForInstanceTerminationResult skipWaitTimeForInstanceTermination(SkipWaitTimeForInstanceTerminationRequest request) {request = beforeClientExecution(request);return executeSkipWaitTimeForInstanceTermination(request);}
public void drawRoundRect(int x, int y, int width, int height,int arcWidth, int arcHeight){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"drawRoundRect not supported");}
public EdgeNGramFilterFactory(Map<String, String> args) {super(args);minGramSize = requireInt(args, "minGramSize");maxGramSize = requireInt(args, "maxGramSize");preserveOriginal = getBoolean(args, "preserveOriginal", EdgeNGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetApplicationRevisionResult getApplicationRevision(GetApplicationRevisionRequest request) {request = beforeClientExecution(request);return executeGetApplicationRevision(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex,ValueEval arg0, ValueEval arg1, ValueEval arg2) {return fixed(arg0, arg1, arg2, srcRowIndex, srcColumnIndex);}
public static final byte[] apply(byte[] base, byte[] delta) {return apply(base, delta, null);}
public static TreeFilter create(Collection<PathFilter> paths) {if (paths.isEmpty())throw new IllegalArgumentException(JGitText.get().atLeastOnePathIsRequired);final PathFilter[] p = new PathFilter[paths.size()];paths.toArray(p);return create(p);}
@Override public Iterator<E> iterator() {return new ArrayListIterator();}
public boolean isClean() {return clean;}
public static boolean startsWith(BytesRef ref, BytesRef prefix) {if (ref.length < prefix.length) {return false;}return Arrays.equals(ref.bytes, ref.offset, ref.offset + prefix.length,prefix.bytes, prefix.offset, prefix.offset + prefix.length);}
public UpdateStackInstancesResult updateStackInstances(UpdateStackInstancesRequest request) {request = beforeClientExecution(request);return executeUpdateStackInstances(request);}
public ValueEval getItem(int index) {if(index >= _size) {throw new ArrayIndexOutOfBoundsException("Specified index (" + index+ ") is outside the allowed range (0.." + (_size-1) + ")");}int sheetIndex = _re.getFirstSheetIndex() + index;return _re.getInnerValueEval(sheetIndex);}
public GetApiMappingsResult getApiMappings(GetApiMappingsRequest request) {request = beforeClientExecution(request);return executeGetApiMappings(request);}
public ServerCertificateMetadata(String path, String serverCertificateName, String serverCertificateId, String arn) {setPath(path);setServerCertificateName(serverCertificateName);setServerCertificateId(serverCertificateId);setArn(arn);}
public ListLedgersResult listLedgers(ListLedgersRequest request) {request = beforeClientExecution(request);return executeListLedgers(request);}
public UnknownFormatConversionException(String s) {if (s == null) {throw new NullPointerException();}this.s = s;}
public BytesRef next() throws IOException {if (done) {return null;}if (isFirstLine) {isFirstLine = false;return spare.get();}line = in.readLine();if (line != null) {String[] fields = line.split(fieldDelimiter);if (fields.length > 3) {throw new IllegalArgumentException("More than 3 fields in one line");} else if (fields.length == 3) { spare.copyChars(fields[0]);readWeight(fields[1]);if (hasPayloads) {curPayload.copyChars(fields[2]);}} else if (fields.length == 2) { spare.copyChars(fields[0]);readWeight(fields[1]);if (hasPayloads) { curPayload = new BytesRefBuilder();}} else { spare.copyChars(fields[0]);curWeight = 1;if (hasPayloads) {curPayload = new BytesRefBuilder();}}return spare.get();} else {done = true;IOUtils.close(in);return null;}}
public String getRemote() {return remote;}
public DefaultUDFFinder(String[] functionNames, FreeRefFunction[] functionImpls) {int nFuncs = functionNames.length;if (functionImpls.length != nFuncs) {throw new IllegalArgumentException("Mismatch in number of function names and implementations");}HashMap<String, FreeRefFunction> m = new HashMap<>(nFuncs * 3 / 2);for (int i = 0; i < functionImpls.length; i++) {m.put(functionNames[i].toUpperCase(Locale.ROOT), functionImpls[i]);}_functionsByName = m;}
public void drawOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor(x,y,x+width,y+height) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.setLineWidth(0);shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setNoFill(true);}
public static FontUnderline valueOf(int value){return _table[value];}
public PutAttributesRequest(String domainName, String itemName, java.util.List<ReplaceableAttribute> attributes) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);}
public ListExportsResult listExports(ListExportsRequest request) {request = beforeClientExecution(request);return executeListExports(request);}
public OpenStringBuilder(int size) {buf = new char[size];}
public StopTextTranslationJobResult stopTextTranslationJob(StopTextTranslationJobRequest request) {request = beforeClientExecution(request);return executeStopTextTranslationJob(request);}
public void execute(Lexer lexer) {lexer.action(null, ruleIndex, actionIndex);}
public TestInvokeAuthorizerResult testInvokeAuthorizer(TestInvokeAuthorizerRequest request) {request = beforeClientExecution(request);return executeTestInvokeAuthorizer(request);}
public int stem(char s[], int len) {len = removeCase(s, len);return normalize(s, len);}
public DescribeTableReplicaAutoScalingResult describeTableReplicaAutoScaling(DescribeTableReplicaAutoScalingRequest request) {request = beforeClientExecution(request);return executeDescribeTableReplicaAutoScaling(request);}
public int readUShort() {return readShort() & 0xFFFF;}
public int groupCount() {return groupCountImpl(address);}
public GetConsoleOutputRequest(String instanceId) {setInstanceId(instanceId);}
public DeleteHITResult deleteHIT(DeleteHITRequest request) {request = beforeClientExecution(request);return executeDeleteHIT(request);}
public static DVConstraint createFormulaListConstraint(String listFormula) {return new DVConstraint(listFormula, null);}
public UnbufferedCharStream(Reader input, int bufferSize) {this(bufferSize);this.input = input;fill(1); }
public String toString() {return "LimitTokenCountAnalyzer(" + delegate.toString() + ", maxTokenCount=" + maxTokenCount + ", consumeAllTokens=" + consumeAllTokens + ")";}
@Override public boolean contains(Object object) {return c.contains(object);}
public NotImplementedFunction(String name) {_functionName = name;}
public CreateRecommenderConfigurationResult createRecommenderConfiguration(CreateRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateRecommenderConfiguration(request);}
public GetNamespaceListRequest() {super("cr", "2016-06-07", "GetNamespaceList", "cr");setUriPattern("/namespace");setMethod(MethodType.GET);}
public CreateDefaultVpcResult createDefaultVpc(CreateDefaultVpcRequest request) {request = beforeClientExecution(request);return executeCreateDefaultVpc(request);}
public CreateTemplateResult createTemplate(CreateTemplateRequest request) {request = beforeClientExecution(request);return executeCreateTemplate(request);}
public Collection<ReflogEntry> call() throws GitAPIException,InvalidRefNameException {checkCallable();try {ReflogReader reader = repo.getReflogReader(ref);if (reader == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, ref));return reader.getReverseEntries();} catch (IOException e) {throw new InvalidRefNameException(MessageFormat.format(JGitText.get().cannotRead, ref), e);}}
public CreateVpcRequest(String cidrBlock) {setCidrBlock(cidrBlock);}
public FormulaUsedBlankCellSet() {_sheetGroupsByBookSheet = new HashMap<>();}
public SpatialPrefixTree(SpatialContext ctx, int maxLevels) {assert maxLevels > 0;this.ctx = ctx;this.maxLevels = maxLevels;}
public ListObjectParentsResult listObjectParents(ListObjectParentsRequest request) {request = beforeClientExecution(request);return executeListObjectParents(request);}
static public double ppmt(double r, int per, int nper, double pv) {return pmt(r, nper, pv) - ipmt(r, per, nper, pv);}
public Header(InputStream is) throws IOException {final MimeStreamParser parser = new MimeStreamParser();parser.setContentHandler(new AbstractContentHandler() {@Override
public DescribeSpotInstanceRequestsResult describeSpotInstanceRequests() {return describeSpotInstanceRequests(new DescribeSpotInstanceRequestsRequest());}
public SetTransition(ATNState target, IntervalSet set) {super(target);if ( set == null ) set = IntervalSet.of(Token.INVALID_TYPE);this.set = set;}
public LbsDataSubRecord clone() {return copy();}
public int read(char[] cbuf, int off, int len) throws IOException {if (off < 0) throw new IllegalArgumentException("off < 0");if (off >= cbuf.length) throw new IllegalArgumentException("off >= cbuf.length");if (len <= 0) throw new IllegalArgumentException("len <= 0");while (!inputFinished || inputBuffer.length() > 0 || resultBuffer.length() > 0) {int retLen;if (resultBuffer.length() > 0) {retLen = outputFromResultBuffer(cbuf, off, len);if (retLen > 0) {return retLen;}}int resLen = readAndNormalizeFromInput();if (resLen > 0) {retLen = outputFromResultBuffer(cbuf, off, len);if (retLen > 0) {return retLen;}}readInputToBuffer();}return -1;}
public void readFully(byte[] buffer) {checkPosition(buffer.length);read(buffer, 0, buffer.length);}
public void setBaselineTfFactors(float base, float min) {tf_min = min;tf_base = base;}
public DatasetSplitter(double testRatio, double crossValidationRatio) {this.crossValidationRatio = crossValidationRatio;this.testRatio = testRatio;}
public ListBuildsResult listBuilds(ListBuildsRequest request) {request = beforeClientExecution(request);return executeListBuilds(request);}
public int getStartLine() {return startLine;}
public void ReInit(CharStream stream) {token_source.ReInit(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public void serialize(LittleEndianOutput out) {out.writeShort(rtFirst);out.writeShort(rtLast);}
public DBCluster restoreDBClusterFromS3(RestoreDBClusterFromS3Request request) {request = beforeClientExecution(request);return executeRestoreDBClusterFromS3(request);}
public void println(boolean b) {println(String.valueOf(b));}
public ThrowingPrintWriter(Writer out) {this.out = out;LF = AccessController.doPrivileged((PrivilegedAction<String>) () -> SystemReader.getInstance().getProperty("line.separator") );}
public DescribeResourceResult describeResource(DescribeResourceRequest request) {request = beforeClientExecution(request);return executeDescribeResource(request);}
public String getFlags() {return flags;}
public GetAccountSettingsResult getAccountSettings(GetAccountSettingsRequest request) {request = beforeClientExecution(request);return executeGetAccountSettings(request);}
public UpdateClusterSettingsResult updateClusterSettings(UpdateClusterSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateClusterSettings(request);}
public GetRelationalDatabaseSnapshotsResult getRelationalDatabaseSnapshots(GetRelationalDatabaseSnapshotsRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseSnapshots(request);}
public ByteBuffer putShort(short value) {int newPosition = position + SizeOf.SHORT;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeShort(backingArray, offset + position, value, order);position = newPosition;return this;}
public DescribeProcessingJobResult describeProcessingJob(DescribeProcessingJobRequest request) {request = beforeClientExecution(request);return executeDescribeProcessingJob(request);}
public UnbindInstance2VpcRequest() {super("Ots", "2016-06-20", "UnbindInstance2Vpc", "ots");setMethod(MethodType.POST);}
public ByteArrayBackedDataSource(byte[] data, int size) { this.buffer = data;this.size = size;}
public Set<String> getSchemes() {return Collections.emptySet();}
public void seekExact(long ord) {termOrd = (int) ord;setTerm();}
public QueryConfigHandler getQueryConfigHandler() {return queryConfigHandler;}
public void set(int index, long value) {final int o = index / 9;final int b = index % 9;final int shift = b * 7;blocks[o] = (blocks[o] & ~(127L << shift)) | (value << shift);}
public UpdateDocumentationPartResult updateDocumentationPart(UpdateDocumentationPartRequest request) {request = beforeClientExecution(request);return executeUpdateDocumentationPart(request);}
public DBCluster deleteDBCluster(DeleteDBClusterRequest request) {request = beforeClientExecution(request);return executeDeleteDBCluster(request);}
public Drawable getProgressDrawable() {return mProgressDrawable;}
public ConfigureHealthCheckRequest(String loadBalancerName, HealthCheck healthCheck) {setLoadBalancerName(loadBalancerName);setHealthCheck(healthCheck);}
public Row(Row old) {cells = old.cells;}
public void incrementShapeCount(){this.field_1_numShapes++;}
public EnableEbsEncryptionByDefaultResult enableEbsEncryptionByDefault(EnableEbsEncryptionByDefaultRequest request) {request = beforeClientExecution(request);return executeEnableEbsEncryptionByDefault(request);}
public void setValueNoCopy(char[] newValue) {clear();value = newValue;}
public String toString() {return "(" + a.toString() + " AND " + b.toString() + ")";}
public DeleteIntegrationResponseResult deleteIntegrationResponse(DeleteIntegrationResponseRequest request) {request = beforeClientExecution(request);return executeDeleteIntegrationResponse(request);}
public boolean contains(CharSequence cs) {return map.containsKey(cs);}
public String getLocalizedMessage(Locale locale) {return this.message.getLocalizedMessage(locale);}
public static long nextHighestPowerOfTwo(long v) {v--;v |= v >> 1;v |= v >> 2;v |= v >> 4;v |= v >> 8;v |= v >> 16;v |= v >> 32;v++;return v;}
public CreateTransitGatewayMulticastDomainResult createTransitGatewayMulticastDomain(CreateTransitGatewayMulticastDomainRequest request) {request = beforeClientExecution(request);return executeCreateTransitGatewayMulticastDomain(request);}
public DisassociateDomainResult disassociateDomain(DisassociateDomainRequest request) {request = beforeClientExecution(request);return executeDisassociateDomain(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("arn:");sb.append(this.partition);sb.append(":");sb.append(this.service);sb.append(":");sb.append(region);sb.append(":");sb.append(this.accountId);sb.append(":");sb.append(this.resource);return sb.toString();}
public CellWalk(Sheet sheet, CellRangeAddress range) {this.sheet = sheet;this.range = range;this.traverseEmptyCells = false;}
public SendMessageBatchResult sendMessageBatch(String queueUrl, java.util.List<SendMessageBatchRequestEntry> entries) {return sendMessageBatch(new SendMessageBatchRequest().withQueueUrl(queueUrl).withEntries(entries));}
public GetImportJobsResult getImportJobs(GetImportJobsRequest request) {request = beforeClientExecution(request);return executeGetImportJobs(request);}
public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return numPayloadsSeen > 0 ? payloadScore : 1;}
public CreateRelationalDatabaseResult createRelationalDatabase(CreateRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabase(request);}
public Arc<T> copyFrom(Arc<T> other) {label = other.label();target = other.target();flags = other.flags();output = other.output();nextFinalOutput = other.nextFinalOutput();nextArc = other.nextArc();nodeFlags = other.nodeFlags();bytesPerArc = other.bytesPerArc();if (bytesPerArc() != 0) {posArcsStart = other.posArcsStart();arcIdx = other.arcIdx();numArcs = other.numArcs();if (nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {bitTable = other.bitTable() == null ? null : other.bitTable().copy();firstLabel = other.firstLabel();}}return this;}
public AbbreviatedObjectId getOldId() {return oldId;}
public ContinueUpdateRollbackResult continueUpdateRollback(ContinueUpdateRollbackRequest request) {request = beforeClientExecution(request);return executeContinueUpdateRollback(request);}
public ListDataSourcesResult listDataSources(ListDataSourcesRequest request) {request = beforeClientExecution(request);return executeListDataSources(request);}
public void execute(Lexer lexer) {lexer.setChannel(channel);}
public int LA(int i) {if ( i==-1 ) return lastChar; sync(i);int index = p + i - 1;if ( index < 0 ) throw new IndexOutOfBoundsException();if ( index >= n ) return IntStream.EOF;return data[index];}
public final int[] array() {return protectedArray();}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("-");buffer.append(operands[ 1 ]);return buffer.toString();}
public RefWriter(RefList<Ref> refs) {this.refs = refs.asList();}
public long get(int index) {final int o = index / 6;final int b = index % 6;final int shift = b * 10;return (blocks[o] >>> shift) & 1023L;}
public SubmoduleUpdateCommand setProgressMonitor(final ProgressMonitor monitor) {this.monitor = monitor;return this;}
public DescribeDatasetGroupResult describeDatasetGroup(DescribeDatasetGroupRequest request) {request = beforeClientExecution(request);return executeDescribeDatasetGroup(request);}
public ListGameServerGroupsResult listGameServerGroups(ListGameServerGroupsRequest request) {request = beforeClientExecution(request);return executeListGameServerGroups(request);}
public NameRecord getSpecificBuiltinRecord(byte name, int sheetNumber){return getOrCreateLinkTable().getSpecificBuiltinRecord(name, sheetNumber);}
public long readLong(){int b0 = _in.readUByte();int b1 = _in.readUByte();int b2 = _in.readUByte();int b3 = _in.readUByte();int b4 = _in.readUByte();int b5 = _in.readUByte();int b6 = _in.readUByte();int b7 = _in.readUByte();return (((long)b7 << 56) +((long)b6 << 48) +((long)b5 << 40) +((long)b4 << 32) +((long)b3 << 24) +(b2 << 16) +(b1 <<  8) +(b0 <<  0));}
public static ValueVector createVector(TwoDEval ae) {if (ae.isColumn()) {return createColumnVector(ae, 0);}if (ae.isRow()) {return createRowVector(ae, 0);}return null;}
public boolean isSupported(int bitsPerValue) {return bitsPerValue >= 1 && bitsPerValue <= 64;}
public String toString() {return "{" +"decision=" + decision +", contextSensitivities=" + contextSensitivities.size() +", errors=" + errors.size() +", ambiguities=" + ambiguities.size() +", SLL_lookahead=" + SLL_TotalLook +", SLL_ATNTransitions=" + SLL_ATNTransitions +", SLL_DFATransitions=" + SLL_DFATransitions +", LL_Fallback=" + LL_Fallback +", LL_lookahead=" + LL_TotalLook +", LL_ATNTransitions=" + LL_ATNTransitions +'}';}
public RemoveNoteCommand notesRemove() {return new RemoveNoteCommand(repo);}
public int serialize(int offset, byte[] data, EscherSerializationListener listener) {listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort(data, offset, getOptions());LittleEndian.putShort(data, offset+2, getRecordId());int remainingBytes = thedata.length;for (EscherRecord r : _childRecords) {remainingBytes += r.getRecordSize();}LittleEndian.putInt(data, offset+4, remainingBytes);System.arraycopy(thedata, 0, data, offset+8, thedata.length);int pos = offset+8+thedata.length;for (EscherRecord r : _childRecords) {pos += r.serialize(pos, data, listener );}listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public void inform(ResourceLoader loader) throws IOException {if (stopWordFiles != null) {if (FORMAT_WORDSET.equalsIgnoreCase(format)) {stopWords = getWordSet(loader, stopWordFiles, ignoreCase);} else if (FORMAT_SNOWBALL.equalsIgnoreCase(format)) {stopWords = getSnowballWordSet(loader, stopWordFiles, ignoreCase);} else {throw new IllegalArgumentException("Unknown 'format' specified for 'words' file: " + format);}} else {if (null != format) {throw new IllegalArgumentException("'format' can not be specified w/o an explicit 'words' file: " + format);}stopWords = new CharArraySet(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, ignoreCase);}}
public PredicateTransition(ATNState target, int ruleIndex, int predIndex, boolean isCtxDependent) {super(target);this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}
public CharFilter(Reader input) {super(input);this.input = input;}
public final DoubleBuffer put(DoubleBuffer buf) {throw new ReadOnlyBufferException();}
public AssociateVpcCidrBlockResult associateVpcCidrBlock(AssociateVpcCidrBlockRequest request) {request = beforeClientExecution(request);return executeAssociateVpcCidrBlock(request);}
public static Date getJavaDate(double date, boolean use1904windowing, TimeZone tz, boolean roundSeconds) {Calendar calendar = getJavaCalendar(date, use1904windowing, tz, roundSeconds);return calendar == null ? null : calendar.getTime();}
public AttachTypedLinkResult attachTypedLink(AttachTypedLinkRequest request) {request = beforeClientExecution(request);return executeAttachTypedLink(request);}
public static CellValue getError(int errorCode) {return new CellValue(CellType.ERROR, 0.0, false, null, errorCode);}
public short getHeaderValue() {return headerValue;}
public DescribeFindingsResult describeFindings(DescribeFindingsRequest request) {request = beforeClientExecution(request);return executeDescribeFindings(request);}
public GetSdkTypeResult getSdkType(GetSdkTypeRequest request) {request = beforeClientExecution(request);return executeGetSdkType(request);}
public PutLifecycleConfigurationResult putLifecycleConfiguration(PutLifecycleConfigurationRequest request) {request = beforeClientExecution(request);return executePutLifecycleConfiguration(request);}
public CommonToken create(int type, String text) {return new CommonToken(type, text);}
public CommitBuilder() {parentIds = EMPTY_OBJECTID_LIST;encoding = UTF_8;}
public boolean isWholeColumnReference() {return isWholeColumnReference(_version, _firstCell, _lastCell);}
public final T add(T element) {size++;heap[size] = element;upHeap(size);return heap[1];}
public ListTagCommand tagList() {return new ListTagCommand(repo);}
public DescribeLoadBalancerPoliciesResult describeLoadBalancerPolicies() {return describeLoadBalancerPolicies(new DescribeLoadBalancerPoliciesRequest());}
public LikePhotoRequest() {super("CloudPhoto", "2017-07-11", "LikePhoto", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public ByteBuffer putShort(int index, short value) {throw new ReadOnlyBufferException();}
public E pollLast() {return (size == 0) ? null : removeLastImpl();}
@Override public int size() {return countMap.size();}
public static float[] copyOf(float[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public LogoutUserResult logoutUser(LogoutUserRequest request) {request = beforeClientExecution(request);return executeLogoutUser(request);}
public final boolean matches(char c) {return Character.isLetter(c);}
public ListResolverEndpointIpAddressesResult listResolverEndpointIpAddresses(ListResolverEndpointIpAddressesRequest request) {request = beforeClientExecution(request);return executeListResolverEndpointIpAddresses(request);}
public ListHealthChecksResult listHealthChecks(ListHealthChecksRequest request) {request = beforeClientExecution(request);return executeListHealthChecks(request);}
@Override public int indexOf(Object object) {Slice slice = this.slice;Object[] snapshot = elements;slice.checkConcurrentModification(snapshot);int result = CopyOnWriteArrayList.indexOf(object, snapshot, slice.from, slice.to);return (result != -1) ? (result - slice.from) : -1;}
public GetQualificationScoreResult getQualificationScore(GetQualificationScoreRequest request) {request = beforeClientExecution(request);return executeGetQualificationScore(request);}
public ListMeetingsResult listMeetings(ListMeetingsRequest request) {request = beforeClientExecution(request);return executeListMeetings(request);}
public LookupPolicyResult lookupPolicy(LookupPolicyRequest request) {request = beforeClientExecution(request);return executeLookupPolicy(request);}
public ListAssessmentRunAgentsResult listAssessmentRunAgents(ListAssessmentRunAgentsRequest request) {request = beforeClientExecution(request);return executeListAssessmentRunAgents(request);}
public UpdateEndpointWeightsAndCapacitiesResult updateEndpointWeightsAndCapacities(UpdateEndpointWeightsAndCapacitiesRequest request) {request = beforeClientExecution(request);return executeUpdateEndpointWeightsAndCapacities(request);}
public UpdateCloudFrontOriginAccessIdentityResult updateCloudFrontOriginAccessIdentity(UpdateCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeUpdateCloudFrontOriginAccessIdentity(request);}
public BatchPutAttributesRequest(String domainName, java.util.List<ReplaceableItem> items) {setDomainName(domainName);setItems(items);}
public DeleteAnomalyDetectorResult deleteAnomalyDetector(DeleteAnomalyDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteAnomalyDetector(request);}
public DeleteSpotDatafeedSubscriptionResult deleteSpotDatafeedSubscription() {return deleteSpotDatafeedSubscription(new DeleteSpotDatafeedSubscriptionRequest());}
public void unread(char[] buffer, int offset, int length) throws IOException {synchronized (lock) {checkNotClosed();if (length > pos) {throw new IOException("Pushback buffer full");}Arrays.checkOffsetAndCount(buffer.length, offset, length);for (int i = offset + length - 1; i >= offset; i--) {unread(buffer[i]);}}}
public String getOldPrefix() {return this.oldPrefix;}
public CommonGramsFilterFactory(Map<String,String> args) {super(args);commonWordFiles = get(args, "words");format = get(args, "format");ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DeleteCorsConfigurationResult deleteCorsConfiguration(DeleteCorsConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteCorsConfiguration(request);}
public void write(String str, int offset, int count) {if (str == null) {throw new NullPointerException("str == null");}if ((offset | count) < 0 || offset > str.length() - count) {throw new StringIndexOutOfBoundsException(str, offset, count);}synchronized (lock) {expand(count);str.getChars(offset, offset + count, buf, this.count);this.count += count;}}
public GetMethodResult getMethod(GetMethodRequest request) {request = beforeClientExecution(request);return executeGetMethod(request);}
public Repository getRepository() {return repo;}
public DeleteTrafficMirrorFilterRuleResult deleteTrafficMirrorFilterRule(DeleteTrafficMirrorFilterRuleRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficMirrorFilterRule(request);}
public CreateLabelingJobResult createLabelingJob(CreateLabelingJobRequest request) {request = beforeClientExecution(request);return executeCreateLabelingJob(request);}
@Override public boolean equals(Object other) {if (other instanceof CopyOnWriteArrayList) {return this == other|| Arrays.equals(elements, ((CopyOnWriteArrayList<?>) other).elements);} else if (other instanceof List) {Object[] snapshot = elements;Iterator<?> i = ((List<?>) other).iterator();for (Object o : snapshot) {if (!i.hasNext() || !Objects.equal(o, i.next())) {return false;}}return !i.hasNext();} else {return false;}}
public DeleteCustomMetadataResult deleteCustomMetadata(DeleteCustomMetadataRequest request) {request = beforeClientExecution(request);return executeDeleteCustomMetadata(request);}
public DescribeNetworkAclsResult describeNetworkAcls(DescribeNetworkAclsRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkAcls(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CONTINUE RECORD]\n");buffer.append("    .data = ").append(HexDump.toHex(_data)).append("\n");buffer.append("[/CONTINUE RECORD]\n");return buffer.toString();}
public UnsubscribeRequest(String subscriptionArn) {setSubscriptionArn(subscriptionArn);}
public ListRulesPackagesResult listRulesPackages(ListRulesPackagesRequest request) {request = beforeClientExecution(request);return executeListRulesPackages(request);}
public DisableMetricsCollectionResult disableMetricsCollection(DisableMetricsCollectionRequest request) {request = beforeClientExecution(request);return executeDisableMetricsCollection(request);}
public static FloatBuffer wrap(float[] array) {return wrap(array, 0, array.length);}
public void set(int index, long value) {final int o = index / 7;final int b = index % 7;final int shift = b * 9;blocks[o] = (blocks[o] & ~(511L << shift)) | (value << shift);}
public synchronized boolean containsKey(Object key) {int hash = key.hashCode();hash ^= (hash >>> 20) ^ (hash >>> 12);hash ^= (hash >>> 7) ^ (hash >>> 4);HashtableEntry<K, V>[] tab = table;for (HashtableEntry<K, V> e = tab[hash & (tab.length - 1)];e != null; e = e.next) {K eKey = e.key;if (eKey == key || (e.hash == hash && key.equals(eKey))) {return true;}}return false;}
public void close() throws IOException {Throwable thrown = null;try {flush();} catch (Throwable e) {thrown = e;}try {out.close();} catch (Throwable e) {if (thrown == null) {thrown = e;}}if (thrown != null) {SneakyThrow.sneakyThrow(thrown);}}
public List<String> getConflictList() {return conflictList;}
public ListOrganizationAdminAccountsResult listOrganizationAdminAccounts(ListOrganizationAdminAccountsRequest request) {request = beforeClientExecution(request);return executeListOrganizationAdminAccounts(request);}
public static double min(double[] values) {double min = Double.POSITIVE_INFINITY;for (double value : values) {min = Math.min(min, value);}return min;}
@Override public int read() throws IOException {return Streams.readSingleByte(this);}
public void removeLineCount() {remove1stProperty(PropertyIDMap.PID_LINECOUNT);}
public RowRecordsAggregate(RecordStream rs, SharedValueManager svm) {this(svm);while(rs.hasNext()) {Record rec = rs.getNext();switch (rec.getSid()) {case RowRecord.sid:insertRow((RowRecord) rec);continue;case DConRefRecord.sid:addUnknownRecord(rec);continue;case DBCellRecord.sid:continue;}if (rec instanceof UnknownRecord) {addUnknownRecord(rec);while (rs.peekNextSid() == ContinueRecord.sid) {addUnknownRecord(rs.getNext());}continue;}if (rec instanceof MulBlankRecord) {_valuesAgg.addMultipleBlanks((MulBlankRecord) rec);continue;}if (!(rec instanceof CellValueRecordInterface)) {throw new RuntimeException("Unexpected record type (" + rec.getClass().getName() + ")");}_valuesAgg.construct((CellValueRecordInterface)rec, rs, svm);}}
public CreateRepoSyncTaskRequest() {super("cr", "2016-06-07", "CreateRepoSyncTask", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/syncTasks");setMethod(MethodType.PUT);}
public SharedFormula(SpreadsheetVersion ssVersion){_columnWrappingMask = ssVersion.getLastColumnIndex(); _rowWrappingMask = ssVersion.getLastRowIndex();}
public LexerTypeAction(int type) {this.type = type;}
public char first() {if (start == end) {return DONE;}offset = start;return string.charAt(offset);}
public ShortBuffer slice() {return new ReadOnlyShortArrayBuffer(remaining(), backingArray, offset + position);}
public RenameBranchCommand setNewName(String newName) {checkCallable();this.newName = newName;return this;}
public void serialize(LittleEndianOutput out) {out.writeShort(getOptions());out.writeInt(getHorizontalPos());out.writeInt(getVerticalPos());out.writeInt(getObjectID());out.writeInt(getDVRecNo());}
public SheetBuilder setCreateEmptyCells(boolean shouldCreateEmptyCells) {this.shouldCreateEmptyCells = shouldCreateEmptyCells;return this;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval serialNumVE, ValueEval returnTypeVE) {double serialNum;try {serialNum = NumericFunction.singleOperandEvaluate(serialNumVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}Calendar serialNumCalendar = LocaleUtil.getLocaleCalendar();serialNumCalendar.setTime(DateUtil.getJavaDate(serialNum, false));int returnType;try {ValueEval ve = OperandResolver.getSingleValue(returnTypeVE, srcRowIndex, srcColumnIndex);returnType = OperandResolver.coerceValueToInt(ve);} catch (EvaluationException e) {return ErrorEval.NUM_ERROR;}if (returnType != 1 && returnType != 2) {return ErrorEval.NUM_ERROR;}return new NumberEval(this.getWeekNo(serialNumCalendar, returnType));}
public static int checkHeader(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {final int actualHeader = in.readInt();if (actualHeader != CODEC_MAGIC) {throw new CorruptIndexException("codec header mismatch: actual header=" + actualHeader + " vs expected header=" + CODEC_MAGIC, in);}return checkHeaderNoMagic(in, codec, minVersion, maxVersion);}
public String getErrorDisplay(String s) {StringBuilder buf = new StringBuilder();for (char c : s.toCharArray()) {buf.append(getErrorDisplay(c));}return buf.toString();}
public boolean seekExact(BytesRef text) {termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms);return termUpto >= 0;}
public CacheSecurityGroup createCacheSecurityGroup(CreateCacheSecurityGroupRequest request) {request = beforeClientExecution(request);return executeCreateCacheSecurityGroup(request);}
public FetchMomentPhotosRequest() {super("CloudPhoto", "2017-07-11", "FetchMomentPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public int getRuleIndex(String ruleName) {Integer ruleIndex = getRuleIndexMap().get(ruleName);if ( ruleIndex!=null ) return ruleIndex;return -1;}
public RebootInstanceRequest() {super("Ens", "2017-11-10", "RebootInstance", "ens");setMethod(MethodType.POST);}
public RevokeClientVpnIngressResult revokeClientVpnIngress(RevokeClientVpnIngressRequest request) {request = beforeClientExecution(request);return executeRevokeClientVpnIngress(request);}
public boolean supportsExecute() {return false;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SHARED FORMULA (").append(HexDump.intToHex(sid)).append("]\n");buffer.append("    .range      = ").append(getRange()).append("\n");buffer.append("    .reserved    = ").append(HexDump.shortToHex(field_5_reserved)).append("\n");Ptg[] ptgs = field_7_parsed_expr.getTokens();for (int k = 0; k < ptgs.length; k++ ) {buffer.append("Formula[").append(k).append("]");Ptg ptg = ptgs[k];buffer.append(ptg).append(ptg.getRVAType()).append("\n");}buffer.append("[/SHARED FORMULA]\n");return buffer.toString();}
public LexerPushModeAction(int mode) {this.mode = mode;}
public void mark(int readlimit) {mark = ptr;}
public ClusterParameterGroup createClusterParameterGroup(CreateClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateClusterParameterGroup(request);}
public String distanceSubQueryNotAllowed() {Iterator<SrndQuery> sqi = getSubQueriesIterator();while (sqi.hasNext()) {SrndQuery leq = sqi.next();if (leq instanceof DistanceSubQuery) {String m = ((DistanceSubQuery)leq).distanceSubQueryNotAllowed();if (m != null) {return m;}} else {return "subquery not allowed: " + leq.toString();}}return null;}
public DescribeBrokerEngineTypesResult describeBrokerEngineTypes(DescribeBrokerEngineTypesRequest request) {request = beforeClientExecution(request);return executeDescribeBrokerEngineTypes(request);}
public DescribeReservedDBInstancesOfferingsResult describeReservedDBInstancesOfferings(DescribeReservedDBInstancesOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedDBInstancesOfferings(request);}
public ByteBuffer slice() {return new ReadWriteHeapByteBuffer(backingArray, remaining(), offset + position);}
public GetCollectionRequest() {super("cr", "2016-06-07", "GetCollection", "cr");setUriPattern("/collections");setMethod(MethodType.GET);}
public DeleteApplicationVersionRequest(String applicationName, String versionLabel) {setApplicationName(applicationName);setVersionLabel(versionLabel);}
public int last() {return (current = end);}
public DeleteFleetResult deleteFleet(DeleteFleetRequest request) {request = beforeClientExecution(request);return executeDeleteFleet(request);}
public void sync(Collection<String> names) {throw new UnsupportedOperationException();}
public DescribeWorkteamResult describeWorkteam(DescribeWorkteamRequest request) {request = beforeClientExecution(request);return executeDescribeWorkteam(request);}
public StatusCommand status() {return new StatusCommand(repo);}
public StopInstancesResult stopInstances(StopInstancesRequest request) {request = beforeClientExecution(request);return executeStopInstances(request);}
public boolean equals(Object obj) {if (obj == null)return false;if (obj == this)return true;if (obj.getClass() != getClass())return false;HSSFChildAnchor anchor = (HSSFChildAnchor) obj;return anchor.getDx1() == getDx1() && anchor.getDx2() == getDx2() && anchor.getDy1() == getDy1()&& anchor.getDy2() == getDy2();}
public DescribeDBSubnetGroupsResult describeDBSubnetGroups() {return describeDBSubnetGroups(new DescribeDBSubnetGroupsRequest());}
public PostingsEnum reset(int[] docIDs, int[] freqs) {this.docIDs = docIDs;this.freqs = freqs;docID = upto = -1;return this;}
public boolean hasNext() {return index < size;}
public ListTagsForResourceResult listTagsForResource(ListTagsForResourceRequest request) {request = beforeClientExecution(request);return executeListTagsForResource(request);}
public static String getBuiltinFormat(int index) {if (index < 0 || index >=_formats.length) {return null;}return _formats[index];}
public ExpandedDouble(long rawBits) {int biasedExp = Math.toIntExact(rawBits >> 52);if (biasedExp == 0) {BigInteger frac = BigInteger.valueOf(rawBits).and(BI_FRAC_MASK);int expAdj = 64 - frac.bitLength();_significand = frac.shiftLeft(expAdj);_binaryExponent = (biasedExp & 0x07FF) - 1023 - expAdj;} else {_significand = getFrac(rawBits);_binaryExponent = (biasedExp & 0x07FF) - 1023;}}
public void serialize(LittleEndianOutput out) {out.writeShort(_codepage);}
public void add(RevCommit c) {throw new UnsupportedOperationException();}
public CellRangeAddress[] getFormattingRanges() {return cfAggregate.getHeader().getCellRanges();}
public PrintStream append(CharSequence charSequence) {if (charSequence == null) {print("null");} else {print(charSequence.toString());}return this;}
public GetSkillGroupResult getSkillGroup(GetSkillGroupRequest request) {request = beforeClientExecution(request);return executeGetSkillGroup(request);}
public DeleteObjectResult deleteObject(DeleteObjectRequest request) {request = beforeClientExecution(request);return executeDeleteObject(request);}
public boolean removeAll(final IntList c){boolean rval = false;for (int j = 0; j < c._limit; j++){if (removeValue(c._array[ j ])){rval = true;}}return rval;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FILEPASS]\n");buffer.append("    .type = ").append(HexDump.shortToHex(encryptionType)).append('\n');String prefix = "     ."+encryptionInfo.getEncryptionMode();buffer.append(prefix+".info = ").append(HexDump.shortToHex(encryptionInfo.getVersionMajor())).append('\n');buffer.append(prefix+".ver  = ").append(HexDump.shortToHex(encryptionInfo.getVersionMinor())).append('\n');buffer.append(prefix+".salt = ").append(HexDump.toHex(encryptionInfo.getVerifier().getSalt())).append('\n');buffer.append(prefix+".verifier = ").append(HexDump.toHex(encryptionInfo.getVerifier().getEncryptedVerifier())).append('\n');buffer.append(prefix+".verifierHash = ").append(HexDump.toHex(encryptionInfo.getVerifier().getEncryptedVerifierHash())).append('\n');buffer.append("[/FILEPASS]\n");return buffer.toString();}
public CreateCustomerGatewayResult createCustomerGateway(CreateCustomerGatewayRequest request) {request = beforeClientExecution(request);return executeCreateCustomerGateway(request);}
public CharBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public DirCache getDirCache() {return cache;}
public PatternReplaceCharFilterFactory(Map<String, String> args) {super(args);pattern = getPattern(args, "pattern");replacement = get(args, "replacement", "");if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean getCreateEmptyCells() {return shouldCreateEmptyCells;}
public long getIndexSize() {long sz = 8 ;sz += 4 * 4 ;sz += sizeOf(src);sz += sizeOf(table);sz += sizeOf(entries);return sz;}
public ShortBuffer put(short[] src, int srcOffset, int shortCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, shortCount);if (shortCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + shortCount; ++i) {put(src[i]);}return this;}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<multiPhrase/>";StringBuilder sb = new StringBuilder();sb.append("<multiPhrase>");for (QueryNode child : getChildren()) {sb.append("\n");sb.append(child.toString());}sb.append("\n</multiPhrase>");return sb.toString();}
public GetGatewayResponseResult getGatewayResponse(GetGatewayResponseRequest request) {request = beforeClientExecution(request);return executeGetGatewayResponse(request);}
public SubscribeRequest(String topicArn, String protocol, String endpoint) {setTopicArn(topicArn);setProtocol(protocol);setEndpoint(endpoint);}
public void setLengthNormFactors(int min, int max, float steepness, boolean discountOverlaps) {this.ln_min = min;this.ln_max = max;this.ln_steep = steepness;this.discountOverlaps = discountOverlaps;}
public void start() {mStartTime = ANIMATION_START;}
public DeleteLaunchConfigurationResult deleteLaunchConfiguration(DeleteLaunchConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteLaunchConfiguration(request);}
public void remove( Object record ) {int i = 0;for (org.apache.poi.hssf.record.Record r : records) {if (r == record) {remove(i);break;}i++;}}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(getFunctionIndex());}
public Term(String fld, BytesRef bytes) {field = fld;this.bytes = bytes == null ? null : BytesRef.deepCopyOf(bytes);}
public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ RamUsageEstimator.NUM_BYTES_OBJECT_REF+ Long.BYTES+ Float.BYTES)+ current.ramBytesUsed();}
public int serialize( int offset, byte[] data){return serialize( offset, data, new NullEscherSerializationListener() );}
public String toString() {if (count == 0) {return "";}int wasted = value.length - count;if (wasted >= 256|| (wasted >= INITIAL_CAPACITY && wasted >= (count >> 1))) {return new String(value, 0, count);}shared = true;return new String(0, count, value);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_protect);}
public AssociateResolverEndpointIpAddressResult associateResolverEndpointIpAddress(AssociateResolverEndpointIpAddressRequest request) {request = beforeClientExecution(request);return executeAssociateResolverEndpointIpAddress(request);}
public RevertCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}
public static ByteBuffer wrap(byte[] array) {return new ReadWriteHeapByteBuffer(array);}
public void removeSecurity() {remove1stProperty(PropertyIDMap.PID_SECURITY);}
public ImportVolumeResult importVolume(ImportVolumeRequest request) {request = beforeClientExecution(request);return executeImportVolume(request);}
public boolean isDetectRenames() {return renameDetector != null;}
public CacheCluster rebootCacheCluster(RebootCacheClusterRequest request) {request = beforeClientExecution(request);return executeRebootCacheCluster(request);}
public DescribeTemplateAliasResult describeTemplateAlias(DescribeTemplateAliasRequest request) {request = beforeClientExecution(request);return executeDescribeTemplateAlias(request);}
public void reset() {if (overflow != null) {destroy();}if (blocks != null)blocks.clear();elseblocks = new ArrayList<>(initialBlocks);blocks.add(new Block(Math.min(inCoreLimit, Block.SZ)));}
public DescribeWorkspaceSnapshotsResult describeWorkspaceSnapshots(DescribeWorkspaceSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceSnapshots(request);}
public void clear() {name = null;body = null;title = null;date = null;props = null;id = -1;}
public DeleteDistributionResult deleteDistribution(DeleteDistributionRequest request) {request = beforeClientExecution(request);return executeDeleteDistribution(request);}
public final long next() {assert hasNext();long result = currentValues[pOff++];if (pOff == currentCount) {vOff += 1;pOff = 0;fillBlock();}return result;}
public AttachInstancesToLoadBalancerResult attachInstancesToLoadBalancer(AttachInstancesToLoadBalancerRequest request) {request = beforeClientExecution(request);return executeAttachInstancesToLoadBalancer(request);}
public PrintSetupRecord(RecordInputStream in) {field_1_paper_size    = in.readShort();field_2_scale         = in.readShort();field_3_page_start    = in.readShort();field_4_fit_width     = in.readShort();field_5_fit_height    = in.readShort();field_6_options       = in.readShort();field_7_hresolution   = in.readShort();field_8_vresolution   = in.readShort();field_9_headermargin  = in.readDouble();field_10_footermargin = in.readDouble();field_11_copies       = in.readShort();}
public UpdateNotificationSettingsResult updateNotificationSettings(UpdateNotificationSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateNotificationSettings(request);}
public DescribeSnapshotAttributeResult describeSnapshotAttribute(DescribeSnapshotAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotAttribute(request);}
public ListDocumentClassificationJobsResult listDocumentClassificationJobs(ListDocumentClassificationJobsRequest request) {request = beforeClientExecution(request);return executeListDocumentClassificationJobs(request);}
public Item() {parent = 0;child = 0;}
public static final AbbreviatedObjectId fromObjectId(AnyObjectId id) {return new AbbreviatedObjectId(Constants.OBJECT_ID_STRING_LENGTH,id.w1, id.w2, id.w3, id.w4, id.w5);}
public String format(Object value) {StringBuffer sb = new StringBuffer();formatValue(sb, value);return sb.toString();}
public void processContinueRecord( byte[] record ){rawDataContainer.concatenate(record);}
public ListenerHandle addChangeListener(ConfigChangedListener listener) {return listeners.addConfigChangedListener(listener);}
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),ArrayUtil.copyOfSubArray(contexts, 0, numTerms),rewriteMethod);}
public void setFlagByBit(int bitmask, boolean enabled) {if (enabled) {flags |= bitmask;} else {flags &= (0xFFFF ^ bitmask);}}
public static double calculate(double pStartDateVal, double pEndDateVal, int basis) throws EvaluationException {if (basis < 0 || basis >= 5) {throw new EvaluationException(ErrorEval.NUM_ERROR);}int startDateVal = (int) Math.floor(pStartDateVal);int endDateVal = (int) Math.floor(pEndDateVal);if (startDateVal == endDateVal) {return 0;}if (startDateVal > endDateVal) {int temp = startDateVal;startDateVal = endDateVal;endDateVal = temp;}switch (basis) {case 0: return basis0(startDateVal, endDateVal);case 1: return basis1(startDateVal, endDateVal);case 2: return basis2(startDateVal, endDateVal);case 3: return basis3(startDateVal, endDateVal);case 4: return basis4(startDateVal, endDateVal);}throw new IllegalStateException("cannot happen");}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChildren() == null || getChildren().size() == 0)return "";StringBuilder sb = new StringBuilder();String filler = "";for (QueryNode child : getChildren()) {sb.append(filler).append(child.toQueryString(escapeSyntaxParser));filler = " ";}if ((getParent() != null && getParent() instanceof GroupQueryNode)|| isRoot())return sb.toString();elsereturn "( " + sb.toString() + " )";}
public ByteBuffer putDouble(int index, double value) {throw new ReadOnlyBufferException();}
public GetVoiceConnectorGroupResult getVoiceConnectorGroup(GetVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorGroup(request);}
public BatchUpdateUserResult batchUpdateUser(BatchUpdateUserRequest request) {request = beforeClientExecution(request);return executeBatchUpdateUser(request);}
public String toString() {return new String(chars, offset, length);}
public DescribeStorageResult describeStorage(DescribeStorageRequest request) {request = beforeClientExecution(request);return executeDescribeStorage(request);}
public void close() {flush();}
public void close() throws IOException {super.close();}
public final void backup(int amount) {bufferPosition -= amount;}
public UpdateDashboardPublishedVersionResult updateDashboardPublishedVersion(UpdateDashboardPublishedVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDashboardPublishedVersion(request);}
public DocumentStoredFieldVisitor(String... fields) {fieldsToAdd = new HashSet<>(fields.length);for(String field : fields) {fieldsToAdd.add(field);}}
public ResumeGameServerGroupResult resumeGameServerGroup(ResumeGameServerGroupRequest request) {request = beforeClientExecution(request);return executeResumeGameServerGroup(request);}
public PushCommand setPushAll() {refSpecs.add(Transport.REFSPEC_PUSH_ALL);return this;}
public DBSnapshot createDBSnapshot(CreateDBSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateDBSnapshot(request);}
public boolean willSoonExpire() {if (roleSessionDurationSeconds == 0) {return false;}long now = System.currentTimeMillis();double expireFact = 0.95;return roleSessionDurationSeconds * expireFact < (now - sessionStartedTimeInMilliSeconds) / 1000.0;}
public List<Interval> getIntervals() {return intervals;}
public GetNamespaceRequest() {super("cr", "2016-06-07", "GetNamespace", "cr");setUriPattern("/namespace/[Namespace]");setMethod(MethodType.GET);}
public DeleteVpcRequest(String vpcId) {setVpcId(vpcId);}
public long ramBytesUsed() {long bytesUsed = BASE_RAM_BYTES_USED;if (dict != null) {bytesUsed += dict.ramBytesUsed();}return bytesUsed;}
public final ValueEval evaluate(ValueEval[] args, int srcRow, int srcCol) {if (args.length < 1) {return ErrorEval.VALUE_INVALID;}boolean boolResult;try {boolResult = calculate(args);} catch (EvaluationException e) {return e.getErrorEval();}return BoolEval.valueOf(boolResult);}
public void println(String str) {synchronized (lock) {print(str);println();}}
public TypedPropertyValue( int type, Object value ) {_type = type;_value = value;}
public FloatBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());FloatToByteBufferAdapter buf = new FloatToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public MigrateWorkspaceResult migrateWorkspace(MigrateWorkspaceRequest request) {request = beforeClientExecution(request);return executeMigrateWorkspace(request);}
public GetRequestValidatorResult getRequestValidator(GetRequestValidatorRequest request) {request = beforeClientExecution(request);return executeGetRequestValidator(request);}
public String toString() { return toString(false); }
public ForgetSmartHomeAppliancesResult forgetSmartHomeAppliances(ForgetSmartHomeAppliancesRequest request) {request = beforeClientExecution(request);return executeForgetSmartHomeAppliances(request);}
public DeleteApiResult deleteApi(DeleteApiRequest request) {request = beforeClientExecution(request);return executeDeleteApi(request);}
public void setKeyProgressIncrement(int increment) {mKeyProgressIncrement = increment < 0 ? -increment : increment;}
public boolean addAll(final IntList c){if (c._limit != 0){if ((_limit + c._limit) > _array.length){growArray(_limit + c._limit);}System.arraycopy(c._array, 0, _array, _limit, c._limit);_limit += c._limit;}return true;}
public DVRecord createDVRecord(HSSFSheet sheet) {FormulaPair fp = _constraint.createFormulas(sheet);return new DVRecord(_constraint.getValidationType(),_constraint.getOperator(),_errorStyle, _emptyCellAllowed, getSuppressDropDownArrow(),_constraint.getValidationType()==ValidationType.LIST && _constraint.getExplicitListValues()!=null,_showPromptBox, _prompt_title, _prompt_text,_showErrorBox, _error_title, _error_text,fp.getFormula1(), fp.getFormula2(),_regions);}
public boolean evaluate(int cmpResult) {switch (_code) {case NONE:case EQ:return cmpResult == 0;case NE: return cmpResult != 0;case LT: return cmpResult <  0;case LE: return cmpResult <= 0;case GT: return cmpResult >  0;case GE: return cmpResult >= 0;}throw new RuntimeException("Cannot call boolean evaluate on non-equality operator '"+ _representation + "'");}
public boolean isCancelled() {return false;}
public ListHoursOfOperationsResult listHoursOfOperations(ListHoursOfOperationsRequest request) {request = beforeClientExecution(request);return executeListHoursOfOperations(request);}
public int serialize(int offset, byte [] data) {throw new RecordFormatException("Label Records are supported READ ONLY...convert to LabelSST");}
public URI normalize() {if (opaque) {return this;}String normalizedPath = normalize(path, false);if (path.equals(normalizedPath)) {return this;}URI result = duplicate();result.path = normalizedPath;result.setSchemeSpecificPart();return result;}
public FreeRefFunction findUserDefinedFunction(String functionName) {return _udfFinder.findFunction(functionName);}
public UpdateGatewayResponseResult updateGatewayResponse(UpdateGatewayResponseRequest request) {request = beforeClientExecution(request);return executeUpdateGatewayResponse(request);}
public GetOperationDetailResult getOperationDetail(GetOperationDetailRequest request) {request = beforeClientExecution(request);return executeGetOperationDetail(request);}
public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!getField().equals(field)) {buffer.append(getField());buffer.append(":");}buffer.append(term.text());return buffer.toString();}
public NameXPtg getNameXPtg(String name, UDFFinder udf) {return getNameXPtg(name, -1, udf);}
public String getCharsetName() {return charsetName;}
public DescribeWebsiteCertificateAuthorityResult describeWebsiteCertificateAuthority(DescribeWebsiteCertificateAuthorityRequest request) {request = beforeClientExecution(request);return executeDescribeWebsiteCertificateAuthority(request);}
static public double ppmt(double r, int per, int nper, double pv, double fv) {return pmt(r, nper, pv, fv) - ipmt(r, per, nper, pv, fv);}
public ShortBuffer put(int index, short c) {throw new ReadOnlyBufferException();}
public void writeBytes(String value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeBytes(value);}
public LinkTable(int numberOfSheets, WorkbookRecordList workbookRecordList) {_workbookRecordList = workbookRecordList;_definedNames = new ArrayList<>();_externalBookBlocks = new ExternalBookBlock[]{new ExternalBookBlock(numberOfSheets),};_externSheetRecord = new ExternSheetRecord();_recordCount = 2;SupBookRecord supbook = _externalBookBlocks[0].getExternalBookRecord();int idx = findFirstRecordLocBySid(CountryRecord.sid);if (idx < 0) {throw new RuntimeException("CountryRecord not found");}_workbookRecordList.add(idx + 1, _externSheetRecord);_workbookRecordList.add(idx + 1, supbook);}
public void remove() {throw new UnsupportedOperationException();}
public static int[] grow(int[] array) {return grow(array, 1 + array.length);}
public void addAll(T[] src, int srcIdx, int srcCnt) {while (0 < srcCnt) {int i = tailBlkIdx;int n = Math.min(srcCnt, BLOCK_SIZE - i);if (n == 0) {add(src[srcIdx++]);srcCnt--;continue;}System.arraycopy(src, srcIdx, tailBlock, i, n);tailBlkIdx += n;size += n;srcIdx += n;srcCnt -= n;}}
public RenewDomainResult renewDomain(RenewDomainRequest request) {request = beforeClientExecution(request);return executeRenewDomain(request);}
public static boolean isInRange(int i) {return i >= MIN_VALUE && i <= MAX_VALUE;}
public AddApplicationInputResult addApplicationInput(AddApplicationInputRequest request) {request = beforeClientExecution(request);return executeAddApplicationInput(request);}
public Request<DeletePublicKeyRequest> marshall(DeletePublicKeyRequest deletePublicKeyRequest) {if (deletePublicKeyRequest == null) {throw new SdkClientException("Invalid argument passed to marshall(...)");}Request<DeletePublicKeyRequest> request = new DefaultRequest<DeletePublicKeyRequest>(deletePublicKeyRequest, "AmazonCloudFront");request.setHttpMethod(HttpMethodName.DELETE);if (deletePublicKeyRequest.getIfMatch() != null) {request.addHeader("If-Match", StringUtils.fromString(deletePublicKeyRequest.getIfMatch()));}String uriResourcePath = "/2019-03-26/public-key/{Id}";uriResourcePath = com.amazonaws.transform.PathMarshallers.NON_GREEDY.marshall(uriResourcePath, "Id", deletePublicKeyRequest.getId());request.setResourcePath(uriResourcePath);return request;}
public boolean matches(ParseTree tree) {return matcher.match(tree, this).succeeded();}
public CreateDetectorResult createDetector(CreateDetectorRequest request) {request = beforeClientExecution(request);return executeCreateDetector(request);}
public boolean equals(Object other) {if (other instanceof IndexCommit) {IndexCommit otherCommit = (IndexCommit) other;return otherCommit.getDirectory() == getDirectory() && otherCommit.getGeneration() == getGeneration();} else {return false;}}
public void yypushback(int number)  {if ( number > yylength() )zzScanError(ZZ_PUSHBACK_2BIG);zzMarkedPos -= number;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {return fixed(arg0, arg1, BoolEval.FALSE, srcRowIndex, srcColumnIndex);}
public RevisionSyntaxException(String message, String revstr) {super(message);this.revstr = revstr;}
public void reset() throws IOException {synchronized (lock) {super.reset();lineNumber = markedLineNumber;lastWasCR = markedLastWasCR;}}
public QueryParser(CharStream stream) {token_source = new QueryParserTokenManager(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public Float floatValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Float.valueOf(responseMap.get(key));}
public ModifyClusterResult modifyCluster(ModifyClusterRequest request) {request = beforeClientExecution(request);return executeModifyCluster(request);}
public DescribeSolutionResult describeSolution(DescribeSolutionRequest request) {request = beforeClientExecution(request);return executeDescribeSolution(request);}
public BootstrapActionConfig build() {return new BootstrapActionConfig().withName("Configure Hadoop").withScriptBootstrapAction(new ScriptBootstrapActionConfig().withPath("s3:.withArgs(args));}
public void append(String name, RevCommit commit) {append(name, GITLINK, commit);}
public int read() {if (ptr == data.length)return -1;return data[ptr++] & 0xff;}
public void setOutputUnigramsIfNoShingles(boolean outputUnigramsIfNoShingles) {this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;}
public RevFilter clone() {return this; }
public void updateFormulasAfterRowShift(FormulaShifter shifter, int currentExternSheetIndex) {for (int i = 0; i < records.length; i++) {CellValueRecordInterface[] rowCells = records[i];if (rowCells == null) {continue;}for (int j = 0; j < rowCells.length; j++) {CellValueRecordInterface cell = rowCells[j];if (cell instanceof FormulaRecordAggregate) {FormulaRecordAggregate fra = (FormulaRecordAggregate)cell;Ptg[] ptgs = fra.getFormulaTokens(); Ptg[] ptgs2 = ((FormulaRecordAggregate)cell).getFormulaRecord().getParsedExpression(); if (shifter.adjustFormula(ptgs, currentExternSheetIndex)) {fra.setParsedExpression(ptgs);}}}}}
public UpdateGroupRequest(String groupName) {setGroupName(groupName);}
public ListBrokersResult listBrokers(ListBrokersRequest request) {request = beforeClientExecution(request);return executeListBrokers(request);}
public final FormulaCellCacheEntry[] getConsumingCells() {return _consumingCells.toArray();}
public int cardinality() {return cardinality;}
public static final WeightedTerm[] getTerms(Query query, boolean prohibited){return getTerms(query,prohibited,null);}
public void serialize(LittleEndianOutput out) {out.writeShort(getColWidth());}
public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);boolean success = false;try {FieldsConsumer ret = new FSTTermsWriter(state, postingsWriter);success = true;return ret;} finally {if (!success) {IOUtils.closeWhileHandlingException(postingsWriter);}}}
public int getThumbOffset() {return mThumbOffset;}
public GetApnsChannelResult getApnsChannel(GetApnsChannelRequest request) {request = beforeClientExecution(request);return executeGetApnsChannel(request);}
public boolean equals(Object obj) {if (this == obj) return true;if (null == obj || getClass() != obj.getClass()) return false;NGramDistance o = (NGramDistance)obj;return o.n == this.n;}
public GetDomainDetailResult getDomainDetail(GetDomainDetailRequest request) {request = beforeClientExecution(request);return executeGetDomainDetail(request);}
public UpdateConfigurationSetReputationMetricsEnabledResult updateConfigurationSetReputationMetricsEnabled(UpdateConfigurationSetReputationMetricsEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetReputationMetricsEnabled(request);}
public PackedDataInput(DataInput in) {this.in = in;skipToNextByte();}
public AssociateQualificationWithWorkerResult associateQualificationWithWorker(AssociateQualificationWithWorkerRequest request) {request = beforeClientExecution(request);return executeAssociateQualificationWithWorker(request);}
public String toString() {return "arc=" + fstArc + " state=" + fsaState;}
public void signalWorkflowExecution(SignalWorkflowExecutionRequest request) {request = beforeClientExecution(request);executeSignalWorkflowExecution(request);}
public String getTokenName(int t) {if (t == Token.EOF) {return "EOF";}Vocabulary vocabulary = parser != null ? parser.getVocabulary() : VocabularyImpl.EMPTY_VOCABULARY;String displayName = vocabulary.getDisplayName(t);if (displayName.equals(Integer.toString(t))) {return displayName;}return displayName + "<" + t + ">";}
public CJKWidthFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetHLSStreamingSessionURLResult getHLSStreamingSessionURL(GetHLSStreamingSessionURLRequest request) {request = beforeClientExecution(request);return executeGetHLSStreamingSessionURL(request);}
public boolean updateFormulasAfterCellShift(FormulaShifter shifter, int currentExternSheetIx) {CellRangeAddress[] cellRanges = header.getCellRanges();boolean changed = false;List<CellRangeAddress> temp = new ArrayList<>();for (CellRangeAddress craOld : cellRanges) {CellRangeAddress craNew = BaseRowColShifter.shiftRange(shifter, craOld, currentExternSheetIx);if (craNew == null) {changed = true;continue;}temp.add(craNew);if (craNew != craOld) {changed = true;}}if (changed) {int nRanges = temp.size();if (nRanges == 0) {return false;}CellRangeAddress[] newRanges = new CellRangeAddress[nRanges];temp.toArray(newRanges);header.setCellRanges(newRanges);}for (CFRuleBase rule : rules) {Ptg[] ptgs;ptgs = rule.getParsedExpression1();if (ptgs != null && shifter.adjustFormula(ptgs, currentExternSheetIx)) {rule.setParsedExpression1(ptgs);}ptgs = rule.getParsedExpression2();if (ptgs != null && shifter.adjustFormula(ptgs, currentExternSheetIx)) {rule.setParsedExpression2(ptgs);}if (rule instanceof CFRule12Record) {CFRule12Record rule12 = (CFRule12Record)rule;ptgs = rule12.getParsedExpressionScale();if (ptgs != null && shifter.adjustFormula(ptgs, currentExternSheetIx)) {rule12.setParsedExpressionScale(ptgs);}}}return true;}
public int keyAt(int index) {if (mGarbage) {gc();}return mKeys[index];}
public JapaneseKatakanaStemFilterFactory(Map<String,String> args) {super(args);minimumLength = getInt(args, MINIMUM_LENGTH_PARAM, JapaneseKatakanaStemFilter.DEFAULT_MINIMUM_LENGTH);if (minimumLength < 2) {throw new IllegalArgumentException("Illegal " + MINIMUM_LENGTH_PARAM + " " + minimumLength + " (must be 2 or greater)");}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static void byteArray(StringBuilder buffer, byte[] bytes) {for (int i = 0; i < bytes.length; i++) {buffer.append("b[").append(i).append("]=").append(bytes[i]);if (i < bytes.length - 1) {buffer.append(',');}}}
public int available(){return _in.available();}
public DeleteDatasetGroupResult deleteDatasetGroup(DeleteDatasetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDatasetGroup(request);}
public DescribeBuildResult describeBuild(DescribeBuildRequest request) {request = beforeClientExecution(request);return executeDescribeBuild(request);}
public E peekLast() {Link<E> last = voidLink.previous;return (last == voidLink) ? null : last.data;}
public long get(long index) {assert index >= 0 && index < valueCount;final int block = (int) (index >>> blockShift);final int idx = (int) (index & blockMask);return expected(minValues[block], averages[block], idx) + subReaders[block].get(idx);}
public DescribeVpnGatewaysResult describeVpnGateways() {return describeVpnGateways(new DescribeVpnGatewaysRequest());}
public Iterator<E> iterator() {return backingMap.keySet().iterator();}
public void parseLine(DocData docData, String line) {int n = 0;int k1 = 0;int k2;while ((k2 = line.indexOf(WriteLineDocTask.SEP, k1)) >= 0) {if (n>=header.length) {throw new RuntimeException("input line has invalid format: "+(n+1)+" fields instead of "+header.length+" :: [" + line + "]");}setDocDataField(docData, n, line.substring(k1,k2));++n;k1 = k2 + 1;}if (n!=header.length-1) {throw new RuntimeException("input line has invalid format: "+(n+1)+" fields instead of "+header.length+" :: [" + line + "]");}setDocDataField(docData, n, line.substring(k1));}
public long getTotalLLLookaheadOps() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long k = 0;for (int i = 0; i < decisions.length; i++) {k += decisions[i].LL_TotalLook;}return k;}
public static boolean matches(String regularExpression, CharSequence input) {return new Matcher(new Pattern(regularExpression, 0), input).matches();}
public HSSFChildAnchor(int dx1, int dy1, int dx2, int dy2) {super(Math.min(dx1, dx2), Math.min(dy1, dy2), Math.max(dx1, dx2), Math.max(dy1, dy2));if (dx1 > dx2){_isHorizontallyFlipped = true;}if (dy1 > dy2){_isVerticallyFlipped = true;}}
public final CharBuffer put(String str) {return put(str, 0, str.length());}
public StartExportTaskResult startExportTask(StartExportTaskRequest request) {request = beforeClientExecution(request);return executeStartExportTask(request);}
public UpdateUserHierarchyResult updateUserHierarchy(UpdateUserHierarchyRequest request) {request = beforeClientExecution(request);return executeUpdateUserHierarchy(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[SERIESTEXT]\n");sb.append("  .id     =").append(HexDump.shortToHex(getId())).append('\n');sb.append("  .textLen=").append(field_4_text.length()).append('\n');sb.append("  .is16bit=").append(is16bit).append('\n');sb.append("  .text   =").append(" (").append(getText()).append(" )").append('\n');sb.append("[/SERIESTEXT]\n");return sb.toString();}
public int put(Object key, int value) {Object _key = key;int _value = value;int index = findIndex(_key, keys);if (keys[index] != _key) {if (++size > threshold) {rehash();index = findIndex(_key, keys);}keys[index] = _key;values[index] = -1;}int result = values[index];values[index] = _value;return result;}
public TagCommand setMessage(String message) {checkCallable();this.message = message;return this;}
public DeleteIndexFieldResult deleteIndexField(DeleteIndexFieldRequest request) {request = beforeClientExecution(request);return executeDeleteIndexField(request);}
public AbbreviatedObjectId getAbbreviatedObjectId() {return missing;}
public ParserRuleContext getInvokingContext(int ruleIndex) {ParserRuleContext p = _ctx;while ( p!=null ) {if ( p.getRuleIndex() == ruleIndex ) return p;p = (ParserRuleContext)p.parent;}return null;}
public boolean containsCell(int rowIndex, int columnIndex) {if (rowIndex > _lastDefinedRow) return true;for (int i=_rectangleGroups.size()-1; i>=0; i--) {BlankCellRectangleGroup bcrg = _rectangleGroups.get(i);if (bcrg.containsCell(rowIndex, columnIndex)) {return true;}}if(_currentRectangleGroup != null && _currentRectangleGroup.containsCell(rowIndex, columnIndex)) {return true;}if (_currentRowIndex != -1 && _currentRowIndex == rowIndex) {if (_firstColumnIndex <=  columnIndex && columnIndex <= _lastColumnIndex) {return true;}}return false;}
public DisassociateS3ResourcesResult disassociateS3Resources(DisassociateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeDisassociateS3Resources(request);}
public FontRecord createNewFont() {FontRecord rec = createFont();records.add(records.getFontpos()+1, rec);records.setFontpos( records.getFontpos() + 1 );numfonts++;return rec;}
public boolean equals( Object o ) {return o instanceof SpanishStemmer;}
public final boolean matches(char c) {return Character.isLowerCase(c);}
public ByteOrder order() {return byteBuffer.order();}
public DeleteVolumeRequest(String volumeId) {setVolumeId(volumeId);}
public LinkedDataRecord getDataSecondaryCategoryLabels() {return dataSecondaryCategoryLabels;}
public int depth() {int n = 0;RuleContext p = this;while ( p!=null ) {p = p.parent;n++;}return n;}
public PersonIdent getTagger() {return tagger;}
public ObjectId insert(int objectType, long length, InputStream in)throws IOException {throw new UnsupportedOperationException();}
public Automaton convert(Automaton utf32) {if (utf32.getNumStates() == 0) {return utf32;}int[] map = new int[utf32.getNumStates()];Arrays.fill(map, -1);List<Integer> pending = new ArrayList<>();int utf32State = 0;pending.add(utf32State);utf8 = new Automaton.Builder();int utf8State = utf8.createState();utf8.setAccept(utf8State, utf32.isAccept(utf32State));map[utf32State] = utf8State;Transition scratch = new Transition();while (pending.size() != 0) {utf32State = pending.remove(pending.size()-1);utf8State = map[utf32State];assert utf8State != -1;int numTransitions = utf32.getNumTransitions(utf32State);utf32.initTransition(utf32State, scratch);for(int i=0;i<numTransitions;i++) {utf32.getNextTransition(scratch);int destUTF32 = scratch.dest;int destUTF8 = map[destUTF32];if (destUTF8 == -1) {destUTF8 = utf8.createState();utf8.setAccept(destUTF8, utf32.isAccept(destUTF32));map[destUTF32] = destUTF8;pending.add(destUTF32);}convertOneEdge(utf8State, destUTF8, scratch.min, scratch.max);}}return utf8.finish();}
public static String[] listServices() throws RemoteException {return null;}
public void startWorkers(int count) {workers.addAndGet(count);}
public FacetEntry(BytesRef value, int count) {this.value = value;this.count = count;}
public String toString() {String inv = invert ? "!" : "";return getClass().getSimpleName()+"["+inv+nodeName+"]";}
public RemoveNoteCommand setNotesRef(String notesRef) {checkCallable();this.notesRef = notesRef;return this;}
final public SrndQuery FieldsQuery() throws ParseException {SrndQuery q;ArrayList<String> fieldNames;fieldNames = OptionalFields();q = OrQuery();{if (true) return (fieldNames == null) ? q : getFieldsQuery(q, fieldNames);}throw new Error("Missing return statement in function");}
public DescribeParametersResult describeParameters(DescribeParametersRequest request) {request = beforeClientExecution(request);return executeDescribeParameters(request);}
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}
public ListHumanTaskUisResult listHumanTaskUis(ListHumanTaskUisRequest request) {request = beforeClientExecution(request);return executeListHumanTaskUis(request);}
public static ShortBuffer wrap(short[] array) {return wrap(array, 0, array.length);}
public Parser(boolean dedup, Analyzer analyzer) {super(dedup);this.analyzer = analyzer;}
public ObjectProtectRecord(RecordInputStream in) {field_1_protect = in.readShort();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeInt(_reserved0Int);out.writeShort(_reserved1Short);out.writeByte(_reserved2Byte);}
public int size() {if (mGarbage) {gc();}return mSize;}
public BigDecimal getFractionalPart() {return new BigDecimal(_fractionalPart).divide(BD_2_POW_24);}
public AttachLoadBalancerTlsCertificateResult attachLoadBalancerTlsCertificate(AttachLoadBalancerTlsCertificateRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancerTlsCertificate(request);}
public final int step(int state, int c) {assert c < alphabetSize;if (c >= classmap.length) {return transitions[state * points.length + getCharClass(c)];} else {return transitions[state * points.length + classmap[c]];}}
public UpdateVoiceChannelResult updateVoiceChannel(UpdateVoiceChannelRequest request) {request = beforeClientExecution(request);return executeUpdateVoiceChannel(request);}
public void onPreReceive(ReceivePack rp,Collection<ReceiveCommand> commands) {for (int i = 0; i < count; i++)hooks[i].onPreReceive(rp, commands);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length != 1) {return ErrorEval.VALUE_INVALID;}return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0]);}
public DescribeSpotDatafeedSubscriptionResult describeSpotDatafeedSubscription() {return describeSpotDatafeedSubscription(new DescribeSpotDatafeedSubscriptionRequest());}
public int getTimeZoneOffset() {return tzOffset;}
public void close() {allocationSite = null;}
public AssociateClientVpnTargetNetworkResult associateClientVpnTargetNetwork(AssociateClientVpnTargetNetworkRequest request) {request = beforeClientExecution(request);return executeAssociateClientVpnTargetNetwork(request);}
public ListEnvironmentsResult listEnvironments(ListEnvironmentsRequest request) {request = beforeClientExecution(request);return executeListEnvironments(request);}
public String toFormulaString() {if(semiVolatile.isSet(_options)) {return "ATTR(semiVolatile)";}if(optiIf.isSet(_options)) {return "IF";}if( optiChoose.isSet(_options)) {return "CHOOSE";}if(optiSkip.isSet(_options)) {return "";}if(optiSum.isSet(_options)) {return "SUM";}if(baxcel.isSet(_options)) {return "ATTR(baxcel)";}if(space.isSet(_options)) {return "";}return "UNKNOWN ATTRIBUTE";}
public int capacity() {return value.length;}
public synchronized void setMax(int max) {if (max < 0) {max = 0;}if (max != mMax) {mMax = max;postInvalidate();if (mProgress > max) {mProgress = max;}refreshProgress(R.id.progress, mProgress, false);}}
public GetVaultNotificationsRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public FloatBuffer asReadOnlyBuffer() {return ReadOnlyFloatArrayBuffer.copy(this, mark);}
public MissingResourceException(String detailMessage, String className,String resourceName) {super(detailMessage);this.className = className;key = resourceName;}
public ValueEval getRelativeValue(int relativeRowIndex, int relativeColumnIndex) {return getRelativeValue(getFirstSheetIndex(), relativeRowIndex, relativeColumnIndex);}
public Matcher matcher(CharSequence input) {return new Matcher(this, input);}
public ListRoomMembershipsResult listRoomMemberships(ListRoomMembershipsRequest request) {request = beforeClientExecution(request);return executeListRoomMemberships(request);}
public StringBuilder insert(int offset, String str) {insert0(offset, str);return this;}
public void registerActivityType(RegisterActivityTypeRequest request) {request = beforeClientExecution(request);executeRegisterActivityType(request);}
public DescribeSuggestersResult describeSuggesters(DescribeSuggestersRequest request) {request = beforeClientExecution(request);return executeDescribeSuggesters(request);}
public boolean acceptRow(int rowIndex, int firstColumnIndex, int lastColumnIndex) {if (firstColumnIndex != _firstColumnIndex) {return false;}if (lastColumnIndex != _lastColumnIndex) {return false;}if (rowIndex != _lastRowIndex+1) {return false;}_lastRowIndex = rowIndex;return true;}
public boolean equals( Object o ) {return o instanceof FinnishStemmer;}
public StopDeploymentResult stopDeployment(StopDeploymentRequest request) {request = beforeClientExecution(request);return executeStopDeployment(request);}
public ListGitHubAccountTokenNamesResult listGitHubAccountTokenNames(ListGitHubAccountTokenNamesRequest request) {request = beforeClientExecution(request);return executeListGitHubAccountTokenNames(request);}
public CreateBackupResult createBackup(CreateBackupRequest request) {request = beforeClientExecution(request);return executeCreateBackup(request);}
public ModifyTransitGatewayVpcAttachmentResult modifyTransitGatewayVpcAttachment(ModifyTransitGatewayVpcAttachmentRequest request) {request = beforeClientExecution(request);return executeModifyTransitGatewayVpcAttachment(request);}
public RejectSkillResult rejectSkill(RejectSkillRequest request) {request = beforeClientExecution(request);return executeRejectSkill(request);}
public String getHexString() {return getGnumericPart(_red) + ":" + getGnumericPart(_green) + ":" + getGnumericPart(_blue);}
public String toString() {return "<prefixWildcard field='" + this.field + "' term='" + this.text+ "'/>";}
public GetOSSImageAccessRequest() {super("industry-brain", "2018-07-12", "GetOSSImageAccess");setProtocol(ProtocolType.HTTPS);}
public DeleteFleetsResult deleteFleets(DeleteFleetsRequest request) {request = beforeClientExecution(request);return executeDeleteFleets(request);}
public void set(E object) {if (expectedModCount == modCount) {try {AbstractList.this.set(lastPosition, object);} catch (IndexOutOfBoundsException e) {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public InvalidationBatch(Paths paths, String callerReference) {setPaths(paths);setCallerReference(callerReference);}
public int getPrecision() {return p;}
public boolean addSubRecord(SubRecord o) {return subrecords.add(o);}
public int serialize(int offset, byte[] data, EscherSerializationListener listener) {listener.beforeRecordSerialize( offset, getRecordId(), this );int pos = offset;LittleEndian.putShort( data, pos, getOptions() );          pos += 2;LittleEndian.putShort( data, pos, getRecordId() );         pos += 2;LittleEndian.putInt( data, pos, getRecordSize()-8 );       pos += 4;LittleEndian.putInt( data, pos, field_1_dx1 );             pos += 4;LittleEndian.putInt( data, pos, field_2_dy1 );             pos += 4;LittleEndian.putInt( data, pos, field_3_dx2 );             pos += 4;LittleEndian.putInt( data, pos, field_4_dy2 );             pos += 4;listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public static final ObjectId fromRaw(int[] is) {return fromRaw(is, 0);}
public DisassociateIpGroupsResult disassociateIpGroups(DisassociateIpGroupsRequest request) {request = beforeClientExecution(request);return executeDisassociateIpGroups(request);}
public static void mkdirs(File d, boolean skipExisting)throws IOException {if (!d.mkdirs()) {if (skipExisting && d.isDirectory())return;throw new IOException(MessageFormat.format(JGitText.get().mkDirsFailed, d.getAbsolutePath()));}}
public GetImageManifestRequest() {super("cr", "2016-06-07", "GetImageManifest", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/manifest");setMethod(MethodType.GET);}
public ListIdentitiesResult listIdentities(ListIdentitiesRequest request) {request = beforeClientExecution(request);return executeListIdentities(request);}
public final String toString() {return getClass().getName() + " [" +_sfr.getRange() +"]";}
public byte[] toByteArray() {byte[] result = new byte[LittleEndianConsts.INT_SIZE*2+_value.length];LittleEndianByteArrayOutputStream bos = new LittleEndianByteArrayOutputStream(result,0);try {bos.writeInt(LittleEndianConsts.INT_SIZE + _value.length);bos.writeInt(_format);bos.write(_value);return result;} finally {IOUtils.closeQuietly(bos);}}
public void update(byte[] b, int off, int len) {if (len >= buffer.length) {flush();in.update(b, off, len);} else {if (upto + len > buffer.length) {flush();}System.arraycopy(b, off, buffer, upto, len);upto += len;}}
public HSSFPicture createPicture(ClientAnchor anchor, int pictureIndex) {return createPicture((HSSFClientAnchor) anchor, pictureIndex);}
public String getAccessKeySecret() {return legacyCredential.getAccessSecret();}
public int compareTo(ByteBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;byte thisByte, otherByte;while (compareRemaining > 0) {thisByte = get(thisPos);otherByte = otherBuffer.get(otherPos);if (thisByte != otherByte) {return thisByte < otherByte ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public CreateResolverEndpointResult createResolverEndpoint(CreateResolverEndpointRequest request) {request = beforeClientExecution(request);return executeCreateResolverEndpoint(request);}
public HunspellStemFilterFactory(Map<String,String> args) {super(args);dictionaryFiles = require(args, PARAM_DICTIONARY);affixFile = get(args, PARAM_AFFIX);ignoreCase = getBoolean(args, PARAM_IGNORE_CASE, false);longestOnly = getBoolean(args, PARAM_LONGEST_ONLY, false);getBoolean(args, "strictAffixParsing", true);getInt(args, "recursionCap", 0);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 4) & 15;values[valuesOffset++] = block & 15;}}
public CancelSpotInstanceRequestsResult cancelSpotInstanceRequests(CancelSpotInstanceRequestsRequest request) {request = beforeClientExecution(request);return executeCancelSpotInstanceRequests(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_headers);}
public void copyTo(char[] tmp, StringBuilder w) {toHexCharArray(tmp);w.append(tmp, 0, Constants.OBJECT_ID_STRING_LENGTH);}
public DeleteVaultAccessPolicyResult deleteVaultAccessPolicy(DeleteVaultAccessPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteVaultAccessPolicy(request);}
public SpanOrBuilder(SpanQueryBuilder factory) {this.factory = factory;}
public DescribeConnectionsOnInterconnectResult describeConnectionsOnInterconnect(DescribeConnectionsOnInterconnectRequest request) {request = beforeClientExecution(request);return executeDescribeConnectionsOnInterconnect(request);}
public MultiBoolFunction(List<ValueSource> sources) {this.sources = sources;}
public TokenStream create(TokenStream input) {return new ICUTransformFilter(input, transliterator);}
public void extendA() {endA++;}
public DeleteReceiptRuleSetResult deleteReceiptRuleSet(DeleteReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDeleteReceiptRuleSet(request);}
public PutRetentionPolicyRequest(String logGroupName, Integer retentionInDays) {setLogGroupName(logGroupName);setRetentionInDays(retentionInDays);}
public void insertRow(RowRecord row) {_rowRecords.put(Integer.valueOf(row.getRowNumber()), row);_rowRecordValues = null;if ((row.getRowNumber() < _firstrow) || (_firstrow == -1)) {_firstrow = row.getRowNumber();}if ((row.getRowNumber() > _lastrow) || (_lastrow == -1)) {_lastrow = row.getRowNumber();}}
public String toString() {return "TermState";}
public LsRemoteCommand setHeads(boolean heads) {this.heads = heads;return this;}
public void remove(String key) {deleteNode(getNode(key.trim().toLowerCase(locale)));}
public Object[][] getTokenArrayValues() {if (_arrayValues == null) {throw new IllegalStateException("array values not read yet");}Object[][] result = new Object[_nRows][_nColumns];for (int r = 0; r < _nRows; r++) {Object[] rowData = result[r];for (int c = 0; c < _nColumns; c++) {rowData[c] = _arrayValues[getValueIndex(c, r)];}}return result;}
public PutIntegrationResponseResult putIntegrationResponse(PutIntegrationResponseRequest request) {request = beforeClientExecution(request);return executePutIntegrationResponse(request);}
public void write(String str, int offset, int count) throws IOException {synchronized (lock) {if (count < 0) {throw new StringIndexOutOfBoundsException(str, offset, count);}if (str == null) {throw new NullPointerException("str == null");}if ((offset | count) < 0 || offset > str.length() - count) {throw new StringIndexOutOfBoundsException(str, offset, count);}checkStatus();CharBuffer chars = CharBuffer.wrap(str, offset, count + offset);convert(chars);}}
public String subscriptionId() {return this.subscriptionId;}
public HSSFPicture createPicture(HSSFClientAnchor anchor, int pictureIndex) {HSSFPicture shape = new HSSFPicture(null, anchor);shape.setPictureIndex(pictureIndex);addShape(shape);onCreate(shape);return shape;}
public ReleaseStaticIpResult releaseStaticIp(ReleaseStaticIpRequest request) {request = beforeClientExecution(request);return executeReleaseStaticIp(request);}
public ListConfigurationSetsResult listConfigurationSets(ListConfigurationSetsRequest request) {request = beforeClientExecution(request);return executeListConfigurationSets(request);}
public UpdateRecordsResult updateRecords(UpdateRecordsRequest request) {request = beforeClientExecution(request);return executeUpdateRecords(request);}
public Token emit() {Token t = _factory.create(_tokenFactorySourcePair, _type, _text, _channel, _tokenStartCharIndex, getCharIndex()-1,_tokenStartLine, _tokenStartCharPositionInLine);emit(t);return t;}
public synchronized IndexCommit snapshot() throws IOException {if (!initCalled) {throw new IllegalStateException("this instance is not being used by IndexWriter; be sure to use the instance returned from writer.getConfig().getIndexDeletionPolicy()");}if (lastCommit == null) {throw new IllegalStateException("No index commit to snapshot");}incRef(lastCommit);return lastCommit;}
public void build(InputIterator iter) throws IOException {synchronized (searcherMgrLock) {if (searcherMgr != null) {searcherMgr.close();searcherMgr = null;}if (writer != null) {writer.close();writer = null;}boolean success = false;try {writer = new IndexWriter(dir,getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.CREATE));BytesRef text;while ((text = iter.next()) != null) {BytesRef payload;if (iter.hasPayloads()) {payload = iter.payload();} else {payload = null;}add(text, iter.contexts(), iter.weight(), payload);}if (commitOnBuild || closeIndexWriterOnBuild) {commit();}searcherMgr = new SearcherManager(writer, null);success = true;} finally {if (success) {if (closeIndexWriterOnBuild) {writer.close();writer = null;}} else {  if (writer != null) {writer.rollback();writer = null;}}}}}
public ShortBuffer put(ShortBuffer buf) {throw new ReadOnlyBufferException();}
public int stemSuffix(char s[], int len) {for (int i = 0; i < suffixes.length; i++)if (endsWithCheckLength(s, len, suffixes[i]))len = deleteN(s, len - suffixes[i].length, len, suffixes[i].length);return len;}
public SeriesListRecord(RecordInputStream in) {int nItems = in.readUShort();short[] ss = new short[nItems];for (int i = 0; i < nItems; i++) {ss[i] = in.readShort();}field_1_seriesNumbers = ss;}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerModeAction)) {return false;}return mode == ((LexerModeAction)obj).mode;}
public String getLineDelimiter() {if (size() == 0) {return null;}int e = getEnd(0);if (content[e - 1] != '\n') {return null;}if (content.length > 1 && e > 1 && content[e - 2] == '\r') {return "\r\n"; }return "\n"; }
public NormalisedDecimal roundUnits() {long wholePart = _wholePart;if (_fractionalPart >= FRAC_HALF) {wholePart++;}int de = _relativeDecimalExponent;if (wholePart < MAX_REP_WHOLE_PART) {return new NormalisedDecimal(wholePart, 0, de);}return new NormalisedDecimal(wholePart/10, 0, de+1);}
public PLSAggregate(RecordStream rs) {_pls = rs.getNext();if (rs.peekNextSid()==ContinueRecord.sid) {List<ContinueRecord> temp = new ArrayList<>();while (rs.peekNextSid()==ContinueRecord.sid) {temp.add((ContinueRecord)rs.getNext());}_plsContinues = new ContinueRecord[temp.size()];temp.toArray(_plsContinues);} else {_plsContinues = EMPTY_CONTINUE_RECORD_ARRAY;}}
public AssociateDelegateToResourceResult associateDelegateToResource(AssociateDelegateToResourceRequest request) {request = beforeClientExecution(request);return executeAssociateDelegateToResource(request);}
public static void setDefault(CredentialsProvider p) {defaultProvider = p;}
public EscherProperty getEscherProperty( int index ){return properties.get( index );}
@Override public void add(int index, E object) {synchronized (CopyOnWriteArrayList.this) {slice.checkPositionIndex(index);slice.checkConcurrentModification(elements);CopyOnWriteArrayList.this.add(index + slice.from, object);slice = new Slice(elements, slice.from, slice.to + 1);}}
public static BitField getInstance(int mask) {BitField f = instances.get(Integer.valueOf(mask));if (f == null) {f = new BitField(mask);instances.put(Integer.valueOf(mask), f);}return f;}
public boolean get(int doc) {final int reader = ReaderUtil.subIndex(doc, starts);assert reader != -1;final Bits bits = subs[reader];if (bits == null) {return defaultValue;} else {assert checkLength(reader, doc);return bits.get(doc-starts[reader]);}}
public DeleteFieldLevelEncryptionProfileResult deleteFieldLevelEncryptionProfile(DeleteFieldLevelEncryptionProfileRequest request) {request = beforeClientExecution(request);return executeDeleteFieldLevelEncryptionProfile(request);}
public EscherComplexProperty(short id, byte[] complexData) {this(id, complexData == null ? 0 : complexData.length);setComplexData(complexData);}
public TermVectorsReader clone() {if (in == null) {throw new AlreadyClosedException("this TermVectorsReader is closed");}return new SimpleTextTermVectorsReader(offsets, in.clone());}
public static void fill(short[] array, short value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public final int getEndB() {return endB;}
public DescribeAutoMLJobResult describeAutoMLJob(DescribeAutoMLJobRequest request) {request = beforeClientExecution(request);return executeDescribeAutoMLJob(request);}
public SelectionRecord(int activeCellRow, int activeCellCol) {field_1_pane = 3; field_2_row_active_cell = activeCellRow;field_3_col_active_cell = activeCellCol;field_4_active_cell_ref_index = 0;field_6_refs = new CellRangeAddress8Bit[] {new CellRangeAddress8Bit(activeCellRow, activeCellRow, activeCellCol, activeCellCol),};}
public InvalidationBatch(String callerReference) {setCallerReference(callerReference);}
public int compareTo(IndexCommit commit) {if (getDirectory() != commit.getDirectory()) {throw new UnsupportedOperationException("cannot compare IndexCommits from different Directory instances");}long gen = getGeneration();long comgen = commit.getGeneration();return Long.compare(gen, comgen);}
public void serialize(LittleEndianOutput out) {out.writeShort(getOptions());out.writeShort(getTopRow());out.writeShort(getLeftCol());out.writeInt(getHeaderColor());out.writeShort(getPageBreakZoom());out.writeShort(getNormalZoom());out.writeInt(getReserved());}
public PhoneticFilter create(TokenStream input) {return new PhoneticFilter(input, getEncoder(), inject);}
public StartMatchmakingResult startMatchmaking(StartMatchmakingRequest request) {request = beforeClientExecution(request);return executeStartMatchmaking(request);}
public CreateReusableDelegationSetResult createReusableDelegationSet(CreateReusableDelegationSetRequest request) {request = beforeClientExecution(request);return executeCreateReusableDelegationSet(request);}
public GC setProgressMonitor(ProgressMonitor pm) {this.pm = (pm == null) ? NullProgressMonitor.INSTANCE : pm;return this;}
public synchronized String getRegionId() {return regionId;}
public CreateVpcEndpointServiceConfigurationResult createVpcEndpointServiceConfiguration(CreateVpcEndpointServiceConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpointServiceConfiguration(request);}
public IndexableField getField(FieldInfo fieldInfo) {fieldNames.add(fieldInfo.name);List<LazyField> values = fields.get(fieldInfo.number);if (null == values) {values = new ArrayList<>();fields.put(fieldInfo.number, values);}LazyField value = new LazyField(fieldInfo.name, fieldInfo.number);values.add(value);synchronized (this) {doc = null;}return value;}
public static int nextHighestPowerOfTwo(int v) {v--;v |= v >> 1;v |= v >> 2;v |= v >> 4;v |= v >> 8;v |= v >> 16;v++;return v;}
public boolean contains(int x, int y) {return isValid() &&x >= this.x &&y >= this.y &&x < (this.x + this.w) &&y < (this.y + this.h);}
public int getFormat() {return PACK_DELTA;}
public Tag(String key) {setKey(key);}
public InactivatePhotosRequest() {super("CloudPhoto", "2017-07-11", "InactivatePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DescribeEventSubscriptionsResult describeEventSubscriptions() {return describeEventSubscriptions(new DescribeEventSubscriptionsRequest());}
public short get(int index) {checkIndex(index);return byteBuffer.getShort(index * SizeOf.SHORT);}
public boolean isExportAll() {return exportAll;}
public static void validateSecondArg(int comparisonOperator, String paramValue) {switch (comparisonOperator) {case BETWEEN:case NOT_BETWEEN:if (paramValue == null) {throw new IllegalArgumentException("expr2 must be supplied for 'between' comparisons");}}}
public V next() {V v = nextValue;advance();return v;}
public UpdateSchemaResult updateSchema(UpdateSchemaRequest request) {request = beforeClientExecution(request);return executeUpdateSchema(request);}
public PortugueseMinimalStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SeriesChartGroupIndexRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}
public ValueEval evaluate(int srcCellRow, int srcCellCol) {return ErrorEval.NA;}
public E get(int key) {return get(key, null);}
public DescribeComponentConfigurationResult describeComponentConfiguration(DescribeComponentConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeComponentConfiguration(request);}
public CellRangeAddressList copy() {CellRangeAddressList result = new CellRangeAddressList();int nItems = _list.size();for (int k = 0; k < nItems; k++) {CellRangeAddress region = _list.get(k);result.addCellRangeAddress(region.copy());}return result;}
public DescribeClientVpnAuthorizationRulesResult describeClientVpnAuthorizationRules(DescribeClientVpnAuthorizationRulesRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnAuthorizationRules(request);}
public HSSFConditionalFormattingRule getRule(int idx) {CFRuleBase ruleRecord = cfAggregate.getRule(idx);return new HSSFConditionalFormattingRule(sheet, ruleRecord);}
public final Ref getAdvertisedRef(String name) {return advertisedRefs.get(name);}
public int getType() {return delegate().getType();}
public DeleteCustomVerificationEmailTemplateResult deleteCustomVerificationEmailTemplate(DeleteCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteCustomVerificationEmailTemplate(request);}
public void setRefLogMessage(String msg) {if (msg == null)disableRefLog();elsedestination.setRefLogMessage(msg, false);}
public CreateVpcEndpointConnectionNotificationResult createVpcEndpointConnectionNotification(CreateVpcEndpointConnectionNotificationRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpointConnectionNotification(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {int rnum;if (arg0 instanceof AreaEval) {rnum = ((AreaEval) arg0).getFirstColumn();} else if (arg0 instanceof RefEval) {rnum = ((RefEval) arg0).getColumn();} else {return ErrorEval.VALUE_INVALID;}return new NumberEval(rnum + 1);}
public CompleteMultipartUploadRequest(String accountId, String vaultName, String uploadId, String archiveSize, String checksum) {setAccountId(accountId);setVaultName(vaultName);setUploadId(uploadId);setArchiveSize(archiveSize);setChecksum(checksum);}
public void clearRect(int x, int y, int width, int height){Color color = foreground;setColor(background);fillRect(x,y,width,height);setColor(color);}
public String getRawFragment() {return fragment;}
public String toString() {StringBuilder s = new StringBuilder();for(int i=0;i<count;i++) {if (i > 0) {s.append(' ');}s.append(points[i].point).append(':').append(points[i].starts.next/3).append(',').append(points[i].ends.next/3);}return s.toString();}
public static double sinh(double d) {double ePowX = Math.pow(Math.E, d);double ePowNegX = Math.pow(Math.E, -d);return (ePowX - ePowNegX) / 2;}
public GetMembersResult getMembers(GetMembersRequest request) {request = beforeClientExecution(request);return executeGetMembers(request);}
public HSSFPatternFormatting createPatternFormatting(){return getPatternFormatting(true);}
public DeleteSpotDatafeedSubscriptionResult deleteSpotDatafeedSubscription(DeleteSpotDatafeedSubscriptionRequest request) {request = beforeClientExecution(request);return executeDeleteSpotDatafeedSubscription(request);}
public RevFilter clone() {return new SkipRevFilter(skip);}
public BinarySearchIndexes(int highIx) {_lowIx = -1;_highIx = highIx;}
public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {return SrndBooleanQuery.makeBooleanQuery(makeLuceneSubQueriesField(fieldName, qf), BooleanClause.Occur.SHOULD);}
public static CloneCommand cloneRepository() {return new CloneCommand();}
public EnableMetricsCollectionResult enableMetricsCollection(EnableMetricsCollectionRequest request) {request = beforeClientExecution(request);return executeEnableMetricsCollection(request);}
public DescribePlayerSessionsResult describePlayerSessions(DescribePlayerSessionsRequest request) {request = beforeClientExecution(request);return executeDescribePlayerSessions(request);}
public UpdateDocumentVersionResult updateDocumentVersion(UpdateDocumentVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDocumentVersion(request);}
public TagCommand setTagger(PersonIdent tagger) {this.tagger = tagger;return this;}
public void setCellValue(boolean value) {int row=_record.getRow();short col=_record.getColumn();short styleIndex=_record.getXFIndex();switch (_cellType) {default:setCellType(CellType.BOOLEAN, false, row, col, styleIndex);case BOOLEAN:(( BoolErrRecord ) _record).setValue(value);break;case FORMULA:((FormulaRecordAggregate)_record).setCachedBooleanResult(value);break;}}
public PatternReplaceFilterFactory(Map<String, String> args) {super(args);pattern = getPattern(args, "pattern");replacement = get(args, "replacement");replaceAll = "all".equals(get(args, "replace", Arrays.asList("all", "first"), "all"));if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public List<T> asList(Object output) {if (!(output instanceof List)) {List<T> result = new ArrayList<>(1);result.add((T) output);return result;} else {return (List<T>) output;}}
public FooterKey(String keyName) {name = keyName;raw = Constants.encode(keyName.toLowerCase(Locale.ROOT));}
public List<Token> getTokens() { return tokens; }
public DeleteTaskSetResult deleteTaskSet(DeleteTaskSetRequest request) {request = beforeClientExecution(request);return executeDeleteTaskSet(request);}
public DescribeLifecycleConfigurationResult describeLifecycleConfiguration(DescribeLifecycleConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleConfiguration(request);}
public DescribeNodegroupResult describeNodegroup(DescribeNodegroupRequest request) {request = beforeClientExecution(request);return executeDescribeNodegroup(request);}
public CustomProperty() {this.name = null;}
public DeleteDirectConnectGatewayResult deleteDirectConnectGateway(DeleteDirectConnectGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteDirectConnectGateway(request);}
public AddCommand(Repository repo) {super(repo);filepatterns = new LinkedList<>();}
public UpdateStageResult updateStage(UpdateStageRequest request) {request = beforeClientExecution(request);return executeUpdateStage(request);}
public ModifyIdFormatResult modifyIdFormat(ModifyIdFormatRequest request) {request = beforeClientExecution(request);return executeModifyIdFormat(request);}
public RemoveRoleFromDBClusterResult removeRoleFromDBCluster(RemoveRoleFromDBClusterRequest request) {request = beforeClientExecution(request);return executeRemoveRoleFromDBCluster(request);}
public E set(int location, E object) {if (location >= 0 && location < size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}E result = link.data;link.data = object;return result;}throw new IndexOutOfBoundsException();}
public ListPhoneNumbersResult listPhoneNumbers(ListPhoneNumbersRequest request) {request = beforeClientExecution(request);return executeListPhoneNumbers(request);}
public GermanNormalizationFilter(TokenStream input) {super(input);}
@Override public boolean equals(Object object) {return list.equals(object);}
public PullCommand pull() {return new PullCommand(repo);}
public String toString() {return "ALL"; }
public CreateIngestionResult createIngestion(CreateIngestionRequest request) {request = beforeClientExecution(request);return executeCreateIngestion(request);}
public StashCreateCommand(Repository repo) {super(repo);person = new PersonIdent(repo);}
public final ShortBuffer asShortBuffer() {return ShortToByteBufferAdapter.asShortBuffer(this);}
public FeatSmartTag() {data = new byte[0];}
public LogCommand setSkip(int skip) {checkCallable();this.skip = skip;return this;}
public Ptg[] getFormulaTokens(FormulaRecord formula) {int formulaRow = formula.getRow();int formulaColumn = formula.getColumn();if (!isInRange(formulaRow, formulaColumn)) {throw new RuntimeException("Shared Formula Conversion: Coding Error");}SharedFormula sf = new SharedFormula(SpreadsheetVersion.EXCEL97);return sf.convertSharedFormulas(field_7_parsed_expr.getTokens(), formulaRow, formulaColumn);}
public int regionEnd() {return regionEnd;}
public int getBehindCount() {return behindCount;}
public void encode(int[] values, int valuesOffset, long[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {blocks[blocksOffset++] = encode(values, valuesOffset);valuesOffset += valueCount;}}
public PutImageScanningConfigurationResult putImageScanningConfiguration(PutImageScanningConfigurationRequest request) {request = beforeClientExecution(request);return executePutImageScanningConfiguration(request);}
public BlameCommand blame() {return new BlameCommand(repo);}
public BytesRef textToBytesRef() {return new BytesRef(text);}
public int compareTo(DoubleBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;double thisDouble, otherDouble;while (compareRemaining > 0) {thisDouble = get(thisPos);otherDouble = otherBuffer.get(otherPos);if ((thisDouble != otherDouble)&& ((thisDouble == thisDouble) || (otherDouble == otherDouble))) {return thisDouble < otherDouble ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public CreateIpGroupResult createIpGroup(CreateIpGroupRequest request) {request = beforeClientExecution(request);return executeCreateIpGroup(request);}
public synchronized E set(int index, E e) {Object[] newElements = elements.clone();@SuppressWarnings("unchecked")E result = (E) newElements[index];newElements[index] = e;elements = newElements;return result;}
public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(":");buffer.append(operands[ 1 ]);return buffer.toString();}
public synchronized String substring(int start, int end) {return super.substring(start, end);}
public static TreeFilter create(TreeFilter a, TreeFilter b) {if (a == ALL)return b;if (b == ALL)return a;return new Binary(a, b);}
public static String authoritySafePath(String authority, String path) {if (authority != null && !authority.isEmpty() && !path.isEmpty() && !path.startsWith("/")) {return "/" + path;}return path;}
public final void smudgeRacilyClean() {final int base = infoOffset + P_SIZE;Arrays.fill(info, base, base + 4, (byte) 0);}
public SeriesListRecord clone() {return copy();}
public void decode(){if (null == escherRecords || 0 == escherRecords.size()){byte[] rawData = getRawData();convertToEscherRecords(0, rawData.length, rawData );}}
public RemoveAutoScalingPolicyResult removeAutoScalingPolicy(RemoveAutoScalingPolicyRequest request) {request = beforeClientExecution(request);return executeRemoveAutoScalingPolicy(request);}
public byte readByte() {assert !eof();assert upto <= limit;if (upto == limit)nextSlice();return buffer[upto++];}
public CreateAliasResult createAlias(CreateAliasRequest request) {request = beforeClientExecution(request);return executeCreateAlias(request);}
public boolean markSupported() {return in.markSupported();}
public String getRawSchemeSpecificPart() {return schemeSpecificPart;}
public CreateRouteResponseResult createRouteResponse(CreateRouteResponseRequest request) {request = beforeClientExecution(request);return executeCreateRouteResponse(request);}
public void remove() {if (lastEntryReturned == null)throw new IllegalStateException();if (modCount != expectedModCount)throw new ConcurrentModificationException();HashMap.this.remove(lastEntryReturned.key);lastEntryReturned = null;expectedModCount = modCount;}
public void put(int key, E value) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {mValues[i] = value;} else {i = ~i;if (i < mSize && mValues[i] == DELETED) {mKeys[i] = key;mValues[i] = value;return;}if (mGarbage && mSize >= mKeys.length) {gc();i = ~binarySearch(mKeys, 0, mSize, key);}if (mSize >= mKeys.length) {int n = ArrayUtils.idealIntArraySize(mSize + 1);int[] nkeys = new int[n];Object[] nvalues = new Object[n];System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);System.arraycopy(mValues, 0, nvalues, 0, mValues.length);mKeys = nkeys;mValues = nvalues;}if (mSize - i != 0) {System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);System.arraycopy(mValues, i, mValues, i + 1, mSize - i);}mKeys[i] = key;mValues[i] = value;mSize++;}}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerCustomAction)) {return false;}LexerCustomAction other = (LexerCustomAction)obj;return ruleIndex == other.ruleIndex&& actionIndex == other.actionIndex;}
public void seekExact(BytesRef term, TermState state) throws IOException {throw new UnsupportedOperationException(getClass().getName()+" does not support seeking");}
public void readBytes(byte[] b, int offset, int len) {assert b.length >= offset + len;final int offsetEnd = offset + len;while (true) {final int blockLeft = blockSize - currentBlockUpto;final int left = offsetEnd - offset;if (blockLeft < left) {System.arraycopy(currentBlock, currentBlockUpto,b, offset,blockLeft);nextBlock();offset += blockLeft;} else {System.arraycopy(currentBlock, currentBlockUpto,b, offset,left);currentBlockUpto += left;break;}}}
public FileResolver(File basePath, boolean exportAll) {this();exportDirectory(basePath);setExportAll(exportAll);}
@Override public void add(int location, E object) {synchronized (mutex) {list.add(location, object);}}
public String replaceFirst(String replacement) {reset();StringBuffer buffer = new StringBuffer(input.length());if (find()) {appendReplacement(buffer, replacement);}return appendTail(buffer).toString();}
public String format2DRefAsString() {return formatReferenceAsString();}
public static String trimFromLast(String str, String stripString) {int pos = str.lastIndexOf(stripString);if (pos > -1) {return str.substring(0, pos);} else {return str;}}
public float hyperbolicTf(float freq) {if (0.0f == freq) return 0.0f;final float min = tf_hyper_min;final float max = tf_hyper_max;final double base = tf_hyper_base;final float xoffset = tf_hyper_xoffset;final double x = (double)(freq - xoffset);final float result = min +(float)((max-min) / 2.0f*(( ( Math.pow(base,x) - Math.pow(base,-x) )/ ( Math.pow(base,x) + Math.pow(base,-x) ))+ 1.0d));return Float.isNaN(result) ? max : result;}
public void setConfig(Config config) {super.setConfig(config);sortRange = config.get("sort.rng", 20000);r = new Random(config.get("rand.seed", 13));}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[33];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 33; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public int addConditionalFormatting(CellRangeAddress[] regions,ConditionalFormattingRule rule1) {return addConditionalFormatting(regions,  (HSSFConditionalFormattingRule)rule1);}
public void setObjectInserter(ObjectInserter oi) {walk.close();reader.close();inserter.close();inserter = oi;reader = oi.newReader();walk = new RevWalk(reader);}
public void clear() {head = null;free = null;index = null;inQueue = 0;sinceLastIndex = 0;last = -1;}
public void ReInit(CharStream stream, int lexState){ReInit(stream);SwitchTo(lexState);}
public boolean contains(Object o) {if (!(o instanceof Map.Entry))return false;Map.Entry<?,?> e = (Map.Entry<?,?>)o;V v = ConcurrentHashMap.this.get(e.getKey());return v != null && v.equals(e.getValue());}
public List<String> getRemovedList() {return removedList;}
public synchronized TaxonomyReader getTaxonomyReader() {if (taxonomyReader != null) {taxonomyReader.incRef();}return taxonomyReader;}
public String toString(String field) {return getBooleanQuery().toString(field);}
public HSSFShapeGroup createGroup(HSSFClientAnchor anchor) {HSSFShapeGroup group = new HSSFShapeGroup(null, anchor);addShape(group);onCreate(group);return group;}
public String toString(){StringBuilder sb = new StringBuilder();sb.append( getText() ).append( '(' ).append( boost ).append( ")(" );for( Toffs to : termsOffsets ){sb.append( to );}sb.append( ')' );return sb.toString();}
public ClassicFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public UpdateApplicationResult updateApplication(UpdateApplicationRequest request) {request = beforeClientExecution(request);return executeUpdateApplication(request);}
public PackParser newPackParser(InputStream in) throws IOException {throw new UnsupportedOperationException();}
public void print(boolean bool) {print(String.valueOf(bool));}
public int centerY() {return y + h / 2;}
public Query makeQuery(SpatialArgs args) {if(! SpatialOperation.is( args.getOperation(),SpatialOperation.Intersects,SpatialOperation.IsWithin ))throw new UnsupportedSpatialOperation(args.getOperation());Shape shape = args.getShape();if (shape instanceof Rectangle) {Rectangle bbox = (Rectangle) shape;return new ConstantScoreQuery(makeWithin(bbox));} else if (shape instanceof Circle) {Circle circle = (Circle)shape;Rectangle bbox = circle.getBoundingBox();return new DistanceRangeQuery(makeWithin(bbox), makeDistanceValueSource(circle.getCenter()), circle.getRadius());} else {throw new UnsupportedOperationException("Only Rectangles and Circles are currently supported, " +"found [" + shape.getClass() + "]");}}
public BooleanQuery build() {return new BooleanQuery(minimumNumberShouldMatch, clauses.toArray(new BooleanClause[0]));}
public GetManagedScalingPolicyResult getManagedScalingPolicy(GetManagedScalingPolicyRequest request) {request = beforeClientExecution(request);return executeGetManagedScalingPolicy(request);}
public ListApplicationsResult listApplications() {return listApplications(new ListApplicationsRequest());}
public String getFormatSpecifier() {return s;}
public static String getBuiltinFormat(short index) {return BuiltinFormats.getBuiltinFormat(index);}
public void addTask(PerfTask task) {tasks.add(task);task.setDepth(getDepth()+1);}
public GetQueueUrlResult getQueueUrl(String queueName) {return getQueueUrl(new GetQueueUrlRequest().withQueueName(queueName));}
public static double asinh(double d) {return Math.log(Math.sqrt(d*d + 1) + d);}
public ActivityTypeDetail describeActivityType(DescribeActivityTypeRequest request) {request = beforeClientExecution(request);return executeDescribeActivityType(request);}
public RegisterTransitGatewayMulticastGroupSourcesResult registerTransitGatewayMulticastGroupSources(RegisterTransitGatewayMulticastGroupSourcesRequest request) {request = beforeClientExecution(request);return executeRegisterTransitGatewayMulticastGroupSources(request);}
public void onRelease() {mPullDistance = 0;if (mState != STATE_PULL && mState != STATE_PULL_DECAY) {return;}mState = STATE_RECEDE;mEdgeAlphaStart = mEdgeAlpha;mEdgeScaleYStart = mEdgeScaleY;mGlowAlphaStart = mGlowAlpha;mGlowScaleYStart = mGlowScaleY;mEdgeAlphaFinish = 0.f;mEdgeScaleYFinish = 0.f;mGlowAlphaFinish = 0.f;mGlowScaleYFinish = 0.f;mStartTime = AnimationUtils.currentAnimationTimeMillis();mDuration = RECEDE_TIME;}
public ImportKeyPairResult importKeyPair(ImportKeyPairRequest request) {request = beforeClientExecution(request);return executeImportKeyPair(request);}
public String metricFilterPattern() {return this.metricFilterPattern;}
public long getTotalTimeInPrediction() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long t = 0;for (int i=0; i<decisions.length; i++) {t += decisions[i].timeInPrediction;}return t;}
public TokenStream create(TokenStream input) {return new HungarianLightStemFilter(input);}
public String getDescription() {return desc;}
public DeleteAlgorithmResult deleteAlgorithm(DeleteAlgorithmRequest request) {request = beforeClientExecution(request);return executeDeleteAlgorithm(request);}
public void setPrefix(String prefix) {this.prefix = prefix;}
public Collection<ChildScorable> getChildren() {return Collections.singleton(new ChildScorable(childScorer, "BLOCK_JOIN"));}
public void run() {sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);}
public String apiVersion() {return this.apiVersion;}
public OpenNLPPOSFilter create(TokenStream in) {try {return new OpenNLPPOSFilter(in, OpenNLPOpsFactory.getPOSTagger(posTaggerModelFile));} catch (IOException e) {throw new IllegalArgumentException(e);}}
public SendBulkTemplatedEmailResult sendBulkTemplatedEmail(SendBulkTemplatedEmailRequest request) {request = beforeClientExecution(request);return executeSendBulkTemplatedEmail(request);}
public ByteBuffer putFloat(float value) {return putInt(Float.floatToRawIntBits(value));}
public TotalTermFreqValueSource(String field, String val, String indexedField, BytesRef indexedBytes) {this.field = field;this.val = val;this.indexedField = indexedField;this.indexedBytes = indexedBytes;}
public static final int encoding(byte[] b, int ptr) {final int sz = b.length;while (ptr < sz) {if (b[ptr] == '\n')return -1;if (b[ptr] == 'e')break;ptr = nextLF(b, ptr);}return match(b, ptr, encoding);}
public void init(ByteBlockPool pool, int startIndex, int endIndex) {assert endIndex-startIndex >= 0;assert startIndex >= 0;assert endIndex >= 0;this.pool = pool;this.endIndex = endIndex;level = 0;bufferUpto = startIndex / ByteBlockPool.BYTE_BLOCK_SIZE;bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;buffer = pool.buffers[bufferUpto];upto = startIndex & ByteBlockPool.BYTE_BLOCK_MASK;final int firstSize = ByteBlockPool.LEVEL_SIZE_ARRAY[0];if (startIndex+firstSize >= endIndex) {limit = endIndex & ByteBlockPool.BYTE_BLOCK_MASK;} elselimit = upto+firstSize-4;}
public MergeCellsRecord(RecordInputStream in) {int nRegions = in.readUShort();CellRangeAddress[] cras = new CellRangeAddress[nRegions];for (int i = 0; i < nRegions; i++) {cras[i] = new CellRangeAddress(in);}_numberOfRegions = nRegions;_startIndex = 0;_regions = cras;}
public List<? extends FileHeader> getFiles() {return files;}
public final long get(int index) {checkIndex(index);return backingArray[offset + index];}
public DescribeClusterTracksResult describeClusterTracks(DescribeClusterTracksRequest request) {request = beforeClientExecution(request);return executeDescribeClusterTracks(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");if (externalWorkbookNumber >= 0) {sb.append(" [");sb.append("workbook=").append(getExternalWorkbookNumber());sb.append("] ");}sb.append("sheet=").append(getSheetName());sb.append(" ! ");sb.append(FormulaError.REF.getString());sb.append("]");return sb.toString();}
public void setParsedExpression(Ptg[] ptgs) {field_8_parsed_expr = Formula.create(ptgs);}
public ActivityTypeInfos listActivityTypes(ListActivityTypesRequest request) {request = beforeClientExecution(request);return executeListActivityTypes(request);}
public DescribeDBSecurityGroupsResult describeDBSecurityGroups() {return describeDBSecurityGroups(new DescribeDBSecurityGroupsRequest());}
public <T> Collection<T> getAllMatchingGroups() {return (Collection<T>) matchingGroups;}
public void setCachedResultBoolean(boolean value) {specialCachedValue = FormulaSpecialCachedValue.createCachedBoolean(value);}
public static boolean doesFormulaReferToDeletedCell(Ptg[] ptgs) {for (Ptg ptg : ptgs) {if (isDeletedCellRef(ptg)) {return true;}}return false;}
public static float[] grow(float[] array) {return grow(array, 1 + array.length);}
public void clear() {head = null;tail = null;free.clear();}
public DeleteIPSetResult deleteIPSet(DeleteIPSetRequest request) {request = beforeClientExecution(request);return executeDeleteIPSet(request);}
public StaticCredentialsProvider(AlibabaCloudCredentials credentials) {this.credentials = credentials;}
public static double[] copyOfRange(double[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);double[] result = new double[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public DescribeEntityRecognizerResult describeEntityRecognizer(DescribeEntityRecognizerRequest request) {request = beforeClientExecution(request);return executeDescribeEntityRecognizer(request);}
public void removeTitle() {remove1stProperty(PropertyIDMap.PID_TITLE);}
public GetDigestResult getDigest(GetDigestRequest request) {request = beforeClientExecution(request);return executeGetDigest(request);}
public CreateStackResult createStack(CreateStackRequest request) {request = beforeClientExecution(request);return executeCreateStack(request);}
public boolean adjustFormula(Ptg[] ptgs, int currentExternSheetIx) {boolean refsWereChanged = false;for(int i=0; i<ptgs.length; i++) {Ptg newPtg = adjustPtg(ptgs[i], currentExternSheetIx);if (newPtg != null) {refsWereChanged = true;ptgs[i] = newPtg;}}return refsWereChanged;}
public void print(Object o) {print(String.valueOf(o));}
public void setParams(String params) {super.setParams(params);useAddIndexesDir = Boolean.parseBoolean(params);}
public void close() throws IOException {if (isOpen && !isClone) {try {channel.close();} finally {if (!isClone) {fis.close();}}}}
public void reset() {count = 0;assert forwardCount == 0: "pos=" + pos + " forwardCount=" + forwardCount;}
public void unlinkSharedFormulas() {for (int i = 0; i < _numberOfFormulas; i++) {_frAggs[i].unlinkSharedFormula();}}
public boolean isIndexTerm(BytesRef term, TermStats stats) {if (stats.docFreq >= docFreqThresh || count >= interval) {count = 1;return true;} else {count++;return false;}}
public void removeHeadingPair() {remove1stProperty(PropertyIDMap.PID_HEADINGPAIR);}
public synchronized String[] getPOSTags(String[] words) {return tagger.tag(words);}
public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {throw new IllegalArgumentException("please use CompiledAutomaton.getTermsEnum instead");}return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm);}
public AttachLoadBalancerToSubnetsResult attachLoadBalancerToSubnets(AttachLoadBalancerToSubnetsRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancerToSubnets(request);}
public PrecedenceQueryParser() {setQueryNodeProcessor(new PrecedenceQueryNodeProcessorPipeline(getQueryConfigHandler()));}
public CommonToken(int type) {this.type = type;this.source = EMPTY_SOURCE;}
public DeleteEmailChannelResult deleteEmailChannel(DeleteEmailChannelRequest request) {request = beforeClientExecution(request);return executeDeleteEmailChannel(request);}
public DeleteNotificationSubscriptionResult deleteNotificationSubscription(DeleteNotificationSubscriptionRequest request) {request = beforeClientExecution(request);return executeDeleteNotificationSubscription(request);}
public void close() throws IOException {synchronized (lock) {if (isClosed()) {return;}Throwable thrown = null;try {flushInternal();} catch (Throwable e) {thrown = e;}buf = null;try {out.close();} catch (Throwable e) {if (thrown == null) {thrown = e;}}out = null;if (thrown != null) {SneakyThrow.sneakyThrow(thrown);}}}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("spanPosRange(");buffer.append(match.toString(field));buffer.append(", ").append(start).append(", ");buffer.append(end);buffer.append(")");return buffer.toString();}
public ListPipelinesResult listPipelines(ListPipelinesRequest request) {request = beforeClientExecution(request);return executeListPipelines(request);}
public ConfirmProductInstanceResult confirmProductInstance(ConfirmProductInstanceRequest request) {request = beforeClientExecution(request);return executeConfirmProductInstance(request);}
public CreateProjectResult createProject(CreateProjectRequest request) {request = beforeClientExecution(request);return executeCreateProject(request);}
public ListMomentsRequest() {super("CloudPhoto", "2017-07-11", "ListMoments", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String getCCByGB2312Id(int ccid) {if (ccid < 0 || ccid > AbstractDictionary.GB2312_CHAR_NUM)return "";int cc1 = ccid / 94 + 161;int cc2 = ccid % 94 + 161;byte[] buffer = new byte[2];buffer[0] = (byte) cc1;buffer[1] = (byte) cc2;try {String cchar = new String(buffer, "GB2312");return cchar;} catch (UnsupportedEncodingException e) {return "";}}
public static RevFilter create(RevFilter a, RevFilter b) {if (a == ALL || b == ALL)return ALL;return new Binary(a, b);}
public UpdateTableRequest(String tableName, ProvisionedThroughput provisionedThroughput) {setTableName(tableName);setProvisionedThroughput(provisionedThroughput);}
public Repository getRepository() {return db;}
public ShortBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public CreateInstanceExportTaskResult createInstanceExportTask(CreateInstanceExportTaskRequest request) {request = beforeClientExecution(request);return executeCreateInstanceExportTask(request);}
public String toString() {return "MultiDocsAndPositionsEnum(" + Arrays.toString(getSubs()) + ")";}
public DescribeStacksResult describeStacks(DescribeStacksRequest request) {request = beforeClientExecution(request);return executeDescribeStacks(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_xf_index);if (isBuiltin()) {out.writeByte(field_2_builtin_style);out.writeByte(field_3_outline_style_level);} else {out.writeShort(field_4_name.length());out.writeByte(field_3_stringHasMultibyte ? 0x01 : 0x00);if (field_3_stringHasMultibyte) {StringUtil.putUnicodeLE(getName(), out);} else {StringUtil.putCompressedUnicode(getName(), out);}}}
public void write(byte[] b, int off, int len) throws IOException {deflater.setInput(b, off, len);for (;;) {if (outPtr == zbuf.length)throw new EOFException();int n = deflater.deflate(zbuf, outPtr, zbuf.length - outPtr);if (n == 0) {if (deflater.needsInput())break;throw new IOException();}outPtr += n;}}
public String toFormulaString() {return " ";}
public StringBuffer insert(int index, double d) {return insert(index, Double.toString(d));}
public FieldWriter addField(FieldInfo field, long termsFilePointer) {SimpleFieldWriter writer = new SimpleFieldWriter(field, termsFilePointer);fields.add(writer);return writer;}
public DeleteUserEndpointsResult deleteUserEndpoints(DeleteUserEndpointsRequest request) {request = beforeClientExecution(request);return executeDeleteUserEndpoints(request);}
public HSSFColor addColor( byte red, byte green, byte blue ){byte[] b = _palette.getColor(PaletteRecord.FIRST_COLOR_INDEX);short i;for (i = PaletteRecord.FIRST_COLOR_INDEX; i < PaletteRecord.STANDARD_PALETTE_SIZE + PaletteRecord.FIRST_COLOR_INDEX; b = _palette.getColor(++i)){if (b == null){setColorAtIndex( i, red, green, blue );return getColor(i);}}throw new RuntimeException("Could not find free color index");}
public boolean isRenameDetectionEnabled() {return renameDetectionType != RenameDetectionType.FALSE;}
public static boolean safe(String pattern) {for (int i = 0; i < pattern.length(); i++) {final char c = pattern.charAt(i);switch (c) {case '.':case '?':case '*':case '+':case '{':case '}':case '(':case ')':case '[':case ']':case '\\':return false;}}return true;}
public void SwitchTo(int lexState){if (lexState >= 3 || lexState < 0)throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);elsecurLexState = lexState;}
public CreateDeliverabilityTestReportResult createDeliverabilityTestReport(CreateDeliverabilityTestReportRequest request) {request = beforeClientExecution(request);return executeCreateDeliverabilityTestReport(request);}
public void set(int index, long value) {final int o = index / 10;final int b = index % 10;final int shift = b * 6;blocks[o] = (blocks[o] & ~(63L << shift)) | (value << shift);}
public String toString() {return getClass().getName() + " [" +formatAsString() +"]";}
public String getRemoteName() {return remoteName;}
public CherryPickCommand cherryPick() {return new CherryPickCommand(repo);}
public HSSFClientAnchor createClientAnchor(){return new HSSFClientAnchor();}
public DeleteProfileResult deleteProfile(DeleteProfileRequest request) {request = beforeClientExecution(request);return executeDeleteProfile(request);}
@Override public int size() {return count(entrySet().iterator());}
public ByteBuffer put(ByteBuffer buf) {throw new ReadOnlyBufferException();}
public CreateBranchCommand setStartPoint(RevCommit startPoint) {checkCallable();this.startCommit = startPoint;this.startPoint = null;return this;}
public ListOnPremisesInstancesResult listOnPremisesInstances(ListOnPremisesInstancesRequest request) {request = beforeClientExecution(request);return executeListOnPremisesInstances(request);}
public int[] clear() {if (perField.postingsArray != null) {bytesUsed.addAndGet(-(perField.postingsArray.size * perField.postingsArray.bytesPerPosting()));perField.postingsArray = null;perField.newPostingsArray();}return null;}
public String getSourcePath() {return outCandidate.sourcePath.getPath();}
public static SingletonPredictionContext create(PredictionContext parent, int returnState) {if ( returnState == EMPTY_RETURN_STATE && parent == null ) {return EMPTY;}return new SingletonPredictionContext(parent, returnState);}
public void cleanupSession(String sessionID) throws IOException {if (sessionID.isEmpty()) { throw new IllegalArgumentException("sessionID cannot be empty");}IOUtils.rm(workDir.resolve(sessionID));}
public DescribeSnapshotCopyGrantsResult describeSnapshotCopyGrants(DescribeSnapshotCopyGrantsRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotCopyGrants(request);}
public String toString() {return Utils.join(Arrays.asList(opnds).iterator(), "&&");}
public DescribeApplicationResult describeApplication(DescribeApplicationRequest request) {request = beforeClientExecution(request);return executeDescribeApplication(request);}
@Override public E set(int index, E object) {Object[] a = array;if (index >= size) {throwIndexOutOfBoundsException(index, size);}@SuppressWarnings("unchecked") E result = (E) a[index];a[index] = object;return result;}
public void set(int x, int y) {this.x = x;this.y = y;}
public BatchSendMessagesRequest() {super("OnsMqtt", "2019-12-11", "BatchSendMessages", "onsmqtt");setMethod(MethodType.POST);}
public DeleteEgressOnlyInternetGatewayResult deleteEgressOnlyInternetGateway(DeleteEgressOnlyInternetGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteEgressOnlyInternetGateway(request);}
public static String byteToHex(int value) {StringBuilder sb = new StringBuilder(4);writeHex(sb, value & 0xFFL, 2, "0x");return sb.toString();}
public DescribeLoadBalancerPoliciesResult describeLoadBalancerPolicies(DescribeLoadBalancerPoliciesRequest request) {request = beforeClientExecution(request);return executeDescribeLoadBalancerPolicies(request);}
public void close() throws IOException {try {beginWrite();dst.close();} catch (InterruptedIOException e) {throw writeTimedOut(e);} finally {endWrite();}}
public UpdateVirtualInterfaceAttributesResult updateVirtualInterfaceAttributes(UpdateVirtualInterfaceAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateVirtualInterfaceAttributes(request);}
public ScandinavianNormalizationFilter(TokenStream input) {super(input);}
public DeleteHumanLoopResult deleteHumanLoop(DeleteHumanLoopRequest request) {request = beforeClientExecution(request);return executeDeleteHumanLoop(request);}
public void onWindowFocusChanged(boolean hasWindowFocus) {super.onWindowFocusChanged(hasWindowFocus);if (!hasWindowFocus && !mPopup.isDropDownAlwaysVisible()) {dismissDropDown();}}
public GetApnsSandboxChannelResult getApnsSandboxChannel(GetApnsSandboxChannelRequest request) {request = beforeClientExecution(request);return executeGetApnsSandboxChannel(request);}
public TreeFilter clone() {final TreeFilter n = a.clone();return n == a ? this : new NotTreeFilter(n);}
public void addBuilder(String nodeName, QueryBuilder builder) {builders.put(nodeName, builder);}
public static boolean isSupported(int bitsPerValue) {return Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE, bitsPerValue) >= 0;}
@Override public V getValue() {return mapEntry.getValue();}
public DeletedArea3DPtg(LittleEndianInput in)  {field_1_index_extern_sheet = in.readUShort();unused1 = in.readInt();unused2 = in.readInt();}
public String toString() {return "NativeFSLock(path=" + path + ",impl=" + lock + ",creationTime=" + creationTime + ")";}
public CreateVolumeResult createVolume(CreateVolumeRequest request) {request = beforeClientExecution(request);return executeCreateVolume(request);}
public EvaluationCell getCell(int rowIndex, int columnIndex) {HSSFRow row = _hs.getRow(rowIndex);if (row == null) {return null;}HSSFCell cell = row.getCell(columnIndex);if (cell == null) {return null;}return new HSSFEvaluationCell(cell, this);}
public DeleteBasePathMappingResult deleteBasePathMapping(DeleteBasePathMappingRequest request) {request = beforeClientExecution(request);return executeDeleteBasePathMapping(request);}
public void removeState(ATNState state) {states.set(state.stateNumber, null); }
public boolean equals(Object other) {if (!(other instanceof ShortBuffer)) {return false;}ShortBuffer otherBuffer = (ShortBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}
public boolean equals(final Object o) {if (!(o instanceof PropertySet)) {return false;}final PropertySet ps = (PropertySet) o;int byteOrder1 = ps.getByteOrder();int byteOrder2 = getByteOrder();ClassID classID1 = ps.getClassID();ClassID classID2 = getClassID();int format1 = ps.getFormat();int format2 = getFormat();int osVersion1 = ps.getOSVersion();int osVersion2 = getOSVersion();int sectionCount1 = ps.getSectionCount();int sectionCount2 = getSectionCount();if (byteOrder1 != byteOrder2      ||!classID1.equals(classID2)    ||format1 != format2            ||osVersion1 != osVersion2      ||sectionCount1 != sectionCount2) {return false;}return getSections().containsAll(ps.getSections());}
public static int getEstimatedNumberUniqueValuesAllowingForCollisions(int setSize, int numRecordedBits) {double setSizeAsDouble = setSize;double numRecordedBitsAsDouble = numRecordedBits;double saturation = numRecordedBitsAsDouble / setSizeAsDouble;double logInverseSaturation = Math.log(1 - saturation) * -1;return (int) (setSizeAsDouble * logInverseSaturation);}
public static boolean isGitRepository(File dir, FS fs) {return fs.resolve(dir, Constants.OBJECTS).exists()&& fs.resolve(dir, "refs").exists() && (fs.resolve(dir, Constants.REFTABLE).exists()|| isValidHead(new File(dir, Constants.HEAD)));}
public void setBackgroundImage(int pictureIndex){setPropertyValue(new EscherSimpleProperty( EscherPropertyTypes.FILL__PATTERNTEXTURE, false, true, pictureIndex));setPropertyValue(new EscherSimpleProperty( EscherPropertyTypes.FILL__FILLTYPE, false, false, FILL_TYPE_PICTURE));EscherBSERecord bse = getPatriarch().getSheet().getWorkbook().getWorkbook().getBSERecord(pictureIndex);bse.setRef(bse.getRef() + 1);}
public DirectPostingsFormat(int minSkipCount, int lowFreqCutoff) {super("Direct");this.minSkipCount = minSkipCount;this.lowFreqCutoff = lowFreqCutoff;}
public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,Counter bytesUsed) {super(blockSize);freeByteBlocks = new byte[maxBufferedBlocks][];this.maxBufferedBlocks = maxBufferedBlocks;this.bytesUsed = bytesUsed;}
public int stemPrefix(char s[], int len) {for (int i = 0; i < prefixes.length; i++)if (startsWithCheckLength(s, len, prefixes[i]))return deleteN(s, 0, len, prefixes[i].length);return len;}
public String toString() {final StringBuilder s = new StringBuilder();for (Entry q = head; q != null; q = q.next)describe(s, q.commit);return s.toString();}
public CodingErrorAction malformedInputAction() {return malformedInputAction;}
public Result(IntsRef input, T output) {this.input = input;this.output = output;}
public String getInflectionForm(int wordId) {return null; }
public void removeComments() {remove1stProperty(PropertyIDMap.PID_COMMENTS);}
public GetBlacklistReportsResult getBlacklistReports(GetBlacklistReportsRequest request) {request = beforeClientExecution(request);return executeGetBlacklistReports(request);}
public String getMessages() {return messageWriter != null ? messageWriter.toString() : ""; }
public boolean equals(Object object) {if (!(object instanceof StringCharacterIterator)) {return false;}StringCharacterIterator it = (StringCharacterIterator) object;return string.equals(it.string) && start == it.start && end == it.end&& offset == it.offset;}
public AddFacetToObjectResult addFacetToObject(AddFacetToObjectRequest request) {request = beforeClientExecution(request);return executeAddFacetToObject(request);}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[34];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 34; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public final int correctOffset(int currentOff) {final int corrected = correct(currentOff);return (input instanceof CharFilter) ? ((CharFilter) input).correctOffset(corrected) : corrected;}
public static ContinuableRecordOutput createForCountingOnly() {return new ContinuableRecordOutput(NOPOutput, -777); }
public DisassociateAddressRequest(String publicIp) {setPublicIp(publicIp);}
public DescribeVirtualGatewaysResult describeVirtualGateways(DescribeVirtualGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeVirtualGateways(request);}
public void setSheetHidden(int sheetnum, boolean hidden) {setSheetHidden(sheetnum, hidden ? SheetVisibility.HIDDEN : SheetVisibility.VISIBLE);}
public static Cell createCell(Row row, int column, String value, CellStyle style) {Cell cell = getCell(row, column);cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(value));if (style != null) {cell.setCellStyle(style);}return cell;}
public CreateCacheParameterGroupRequest(String cacheParameterGroupName, String cacheParameterGroupFamily, String description) {setCacheParameterGroupName(cacheParameterGroupName);setCacheParameterGroupFamily(cacheParameterGroupFamily);setDescription(description);}
public DirCacheEntry(byte[] path, int stage) {checkPath(path);if (stage < 0 || 3 < stage)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidStageForPath,stage, toString(path)));info = new byte[INFO_LEN];infoOffset = 0;this.path = path;int flags = ((stage & 0x3) << 12);if (path.length < NAME_MASK)flags |= path.length;elseflags |= NAME_MASK;NB.encodeInt16(info, infoOffset + P_FLAGS, flags);}
public FileOutputStream(String path, boolean append) throws FileNotFoundException {this(new File(path), append);}
public DescribeVolumesResult describeVolumes() {return describeVolumes(new DescribeVolumesRequest());}
public String toString() {return String.valueOf(label);}
public MutableValue duplicate() {MutableValueDouble v = new MutableValueDouble();v.value = this.value;v.exists = this.exists;return v;}
public boolean shouldBeRecursive() {for (byte b : pathRaw)if (b == '/')return true;return false;}
public boolean equals( Object o ) {return o instanceof BasqueStemmer;}
public SheetBuilder setSheetName(String sheetName) {this.sheetName = sheetName;return this;}
public ListTimeLinesRequest() {super("CloudPhoto", "2017-07-11", "ListTimeLines", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DescribeStackResourcesResult describeStackResources(DescribeStackResourcesRequest request) {request = beforeClientExecution(request);return executeDescribeStackResources(request);}
public UpdateBotResult updateBot(UpdateBotRequest request) {request = beforeClientExecution(request);return executeUpdateBot(request);}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return symbol >= minVocabSymbol&& symbol <= maxVocabSymbol&& !super.matches(symbol, minVocabSymbol, maxVocabSymbol);}
public void fillTo(int toIndex, int val) {while (count < toIndex)add(val);}
public static long[] grow(long[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Long.BYTES));} elsereturn array;}
public ExportSnapshotResult exportSnapshot(ExportSnapshotRequest request) {request = beforeClientExecution(request);return executeExportSnapshot(request);}
public boolean hasChildOfType(short recordId) {return _childRecords.stream().anyMatch(r -> r.getRecordId() == recordId);}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );thedata = IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, offset + 8, thedata, 0, bytesRemaining );return bytesRemaining + 8;}
public RmCommand addFilepattern(String filepattern) {checkCallable();filepatterns.add(filepattern);return this;}
public GetEmailIdentityResult getEmailIdentity(GetEmailIdentityRequest request) {request = beforeClientExecution(request);return executeGetEmailIdentity(request);}
public E remove(int location) {try {ListIterator<E> it = listIterator(location);E result = it.next();it.remove();return result;} catch (NoSuchElementException e) {throw new IndexOutOfBoundsException();}}
public CanonicalTreeParser next() {CanonicalTreeParser p = this;for (;;) {if (p.nextPtr == p.raw.length) {if (p.parent == null) {p.currPtr = p.nextPtr;return p;}p = (CanonicalTreeParser) p.parent;continue;}p.prevPtr = p.currPtr;p.currPtr = p.nextPtr;p.parseEntry();return p;}}
public UpdateClusterConfigResult updateClusterConfig(UpdateClusterConfigRequest request) {request = beforeClientExecution(request);return executeUpdateClusterConfig(request);}
public Point(int x, int y) {this.x = x;this.y = y;}
public void cloneStyleFrom(ExtendedFormatRecord source) {field_1_font_index           = source.field_1_font_index;field_2_format_index         = source.field_2_format_index;field_3_cell_options         = source.field_3_cell_options;field_4_alignment_options    = source.field_4_alignment_options;field_5_indention_options    = source.field_5_indention_options;field_6_border_options       = source.field_6_border_options;field_7_palette_options      = source.field_7_palette_options;field_8_adtl_palette_options = source.field_8_adtl_palette_options;field_9_fill_palette_options = source.field_9_fill_palette_options;}
public GetInvitationConfigurationResult getInvitationConfiguration(GetInvitationConfigurationRequest request) {request = beforeClientExecution(request);return executeGetInvitationConfiguration(request);}
public RevTag parseTag(AnyObjectId id) throws MissingObjectException,IncorrectObjectTypeException, IOException {RevObject c = parseAny(id);if (!(c instanceof RevTag))throw new IncorrectObjectTypeException(id.toObjectId(),Constants.TYPE_TAG);return (RevTag) c;}
public List<String> matchAlmost(String key) {return matchAlmost(key, defaultNumReturnValues);}
public boolean remove(Object o) {synchronized (Hashtable.this) {int oldSize = size;Hashtable.this.remove(o);return size != oldSize;}}
public StringEval(String value) {if (value == null) {throw new IllegalArgumentException("value must not be null");}_value = value;}
public BatchGetOnPremisesInstancesResult batchGetOnPremisesInstances(BatchGetOnPremisesInstancesRequest request) {request = beforeClientExecution(request);return executeBatchGetOnPremisesInstances(request);}
public void update(Config rc) {final List<String> vlst = new ArrayList<>();vlst.clear();for (URIish u : getURIs())vlst.add(u.toPrivateString());rc.setStringList(SECTION, getName(), KEY_URL, vlst);vlst.clear();for (URIish u : getPushURIs())vlst.add(u.toPrivateString());rc.setStringList(SECTION, getName(), KEY_PUSHURL, vlst);vlst.clear();for (RefSpec u : getFetchRefSpecs())vlst.add(u.toString());rc.setStringList(SECTION, getName(), KEY_FETCH, vlst);vlst.clear();for (RefSpec u : getPushRefSpecs())vlst.add(u.toString());rc.setStringList(SECTION, getName(), KEY_PUSH, vlst);set(rc, KEY_UPLOADPACK, getUploadPack(), DEFAULT_UPLOAD_PACK);set(rc, KEY_RECEIVEPACK, getReceivePack(), DEFAULT_RECEIVE_PACK);set(rc, KEY_TAGOPT, getTagOpt().option(), TagOpt.AUTO_FOLLOW.option());set(rc, KEY_MIRROR, mirror, DEFAULT_MIRROR);set(rc, KEY_TIMEOUT, timeout, 0);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[OBJ]\n");for (final SubRecord record : subrecords) {sb.append("SUBRECORD: ").append(record);}sb.append("[/OBJ]\n");return sb.toString();}
public StashCreateCommand setPerson(PersonIdent person) {this.person = person;return this;}
public GetDefaultCreditSpecificationResult getDefaultCreditSpecification(GetDefaultCreditSpecificationRequest request) {request = beforeClientExecution(request);return executeGetDefaultCreditSpecification(request);}
public static IntervalSet of(int a) {IntervalSet s = new IntervalSet();s.add(a);return s;}
public static int idealFloatArraySize(int need) {return idealByteArraySize(need * 4) / 4;}
public GetJobManifestResult getJobManifest(GetJobManifestRequest request) {request = beforeClientExecution(request);return executeGetJobManifest(request);}
public ListGroupMembersResult listGroupMembers(ListGroupMembersRequest request) {request = beforeClientExecution(request);return executeListGroupMembers(request);}
public CreateMatchmakingConfigurationResult createMatchmakingConfiguration(CreateMatchmakingConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingConfiguration(request);}
public GetQueryResultsResult getQueryResults(GetQueryResultsRequest request) {request = beforeClientExecution(request);return executeGetQueryResults(request);}
public int[] lookupSegmentation(int phraseID) {return segmentations[phraseID];}
public StartTextTranslationJobResult startTextTranslationJob(StartTextTranslationJobRequest request) {request = beforeClientExecution(request);return executeStartTextTranslationJob(request);}
public final ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double val;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);val = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}if (val < 0) {return ErrorEval.NUM_ERROR;}return new NumberEval(getCalField(val));}
public GetAutoSnapshotsResult getAutoSnapshots(GetAutoSnapshotsRequest request) {request = beforeClientExecution(request);return executeGetAutoSnapshots(request);}
public RestoreDBInstanceToPointInTimeRequest(String sourceDBInstanceIdentifier, String targetDBInstanceIdentifier) {setSourceDBInstanceIdentifier(sourceDBInstanceIdentifier);setTargetDBInstanceIdentifier(targetDBInstanceIdentifier);}
public boolean isDryRun() {return dryRun;}
public static boolean equals(Object[] array1, Object[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {Object e1 = array1[i], e2 = array2[i];if (!(e1 == null ? e2 == null : e1.equals(e2))) {return false;}}return true;}
public boolean isSame(Formula other) {return Arrays.equals(_byteEncoding, other._byteEncoding);}
public ObjectId idFor(TreeFormatter formatter) {return formatter.computeId(this);}
public static int[] grow(int[] array) {return grow(array, 1 + array.length);}
public DescribeReservedDBInstancesResult describeReservedDBInstances(DescribeReservedDBInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedDBInstances(request);}
public String toString() {StringBuilder b = new StringBuilder();b.append(subs.length).append(" subs: ");for(int i=0;i<subs.length;i++) {if (i != 0) {b.append("; ");}if (subs[i] == null) {b.append("s=").append(starts[i]).append(" l=null");} else {b.append("s=").append(starts[i]).append(" l=").append(subs[i].length()).append(" b=").append(subs[i]);}}b.append(" end=").append(starts[subs.length]);return b.toString();}
public DescribeLogStreamsRequest(String logGroupName) {setLogGroupName(logGroupName);}
public static String[] getAll() {return _formats.clone();}
public CreateVoiceTemplateResult createVoiceTemplate(CreateVoiceTemplateRequest request) {request = beforeClientExecution(request);return executeCreateVoiceTemplate(request);}
public static long getLastCommitGeneration(Directory directory) throws IOException {return getLastCommitGeneration(directory.listAll());}
public SearchTransitGatewayRoutesResult searchTransitGatewayRoutes(SearchTransitGatewayRoutesRequest request) {request = beforeClientExecution(request);return executeSearchTransitGatewayRoutes(request);}
public ListCompilationJobsResult listCompilationJobs(ListCompilationJobsRequest request) {request = beforeClientExecution(request);return executeListCompilationJobs(request);}
public static Query createJoinQuery(String fromField,boolean multipleValuesPerDocument,String toField,Query fromQuery,IndexSearcher fromSearcher,ScoreMode scoreMode) throws IOException {final GenericTermsCollector termsWithScoreCollector;if (multipleValuesPerDocument) {Function<SortedSetDocValues> mvFunction = DocValuesTermsCollector.sortedSetDocValues(fromField);termsWithScoreCollector = GenericTermsCollector.createCollectorMV(mvFunction, scoreMode);} else {Function<BinaryDocValues> svFunction = DocValuesTermsCollector.binaryDocValues(fromField);termsWithScoreCollector = GenericTermsCollector.createCollectorSV(svFunction, scoreMode);}return createJoinQuery(multipleValuesPerDocument, toField, fromQuery, fromField, fromSearcher, scoreMode, termsWithScoreCollector);}
public int serialize(int offset, byte[] data, EscherSerializationListener listener) {listener.beforeRecordSerialize(offset, getRecordId(), this);LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );System.arraycopy( field_pictureData, 0, data, offset + 4, field_pictureData.length );listener.afterRecordSerialize(offset + 4 + field_pictureData.length, getRecordId(), field_pictureData.length + 4, this);return field_pictureData.length + 4;}
public SeekStatus seekCeil(BytesRef term) {final int ord = findTerm(term);if (ord >= 0) {termOrd = ord;setTerm();return SeekStatus.FOUND;} else if (ord == -terms.length-1) {return SeekStatus.END;} else {termOrd = -ord - 1;setTerm();return SeekStatus.NOT_FOUND;}}
public DeleteLoadBalancerResult deleteLoadBalancer(DeleteLoadBalancerRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancer(request);}
public DeleteVpcPeeringAuthorizationResult deleteVpcPeeringAuthorization(DeleteVpcPeeringAuthorizationRequest request) {request = beforeClientExecution(request);return executeDeleteVpcPeeringAuthorization(request);}
public SendAnnouncementResult sendAnnouncement(SendAnnouncementRequest request) {request = beforeClientExecution(request);return executeSendAnnouncement(request);}
@Override public int lastIndexOf(Object object) {final int size;final Object[] array;synchronized (mutex) {size = list.size();array = new Object[size];list.toArray(array);}if (object != null) {for (int i = size - 1; i >= 0; i--) {if (object.equals(array[i])) {return i;}}} else {for (int i = size - 1; i >= 0; i--) {if (array[i] == null) {return i;}}}return -1;}
public SortedDocValues getSortedDocValues(String field) {return getSortedDocValues(field, DocValuesType.SORTED);}
public void setBaseline() {setBaseline(clock.get());}
public final IntBuffer put(int[] src, int srcOffset, int intCount) {throw new ReadOnlyBufferException();}
public SortingBits(final Bits in, Sorter.DocMap docMap) {this.in = in;this.docMap = docMap;}
public static String quoteEscape(String original) {String result = original;if (result.indexOf('\"') >= 0) {result = result.replace("\"", ESCAPED_QUOTE);}if(result.indexOf(COMMA) >= 0) {result = "\"" + result + "\"";}return result;}
public static double fv(double r, double n, double y, double p, boolean t) {double retval = 0;if (r == 0) {retval = -1*(p+(n*y));}else {double r1 = r + 1;retval =((1-Math.pow(r1, n)) * (t ? r1 : 1) * y ) / r-p*Math.pow(r1, n);}return retval;}
public CharBuffer put(int index, char c) {throw new ReadOnlyBufferException();}
public UpdateLifecyclePolicyResult updateLifecyclePolicy(UpdateLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeUpdateLifecyclePolicy(request);}
public CreateNotebookInstanceLifecycleConfigResult createNotebookInstanceLifecycleConfig(CreateNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeCreateNotebookInstanceLifecycleConfig(request);}
public boolean add(String text) {return map.put(text, PLACEHOLDER) == null;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_axisType);out.writeInt(field_2_x);out.writeInt(field_3_y);out.writeInt(field_4_width);out.writeInt(field_5_height);}
public GetJourneyResult getJourney(GetJourneyRequest request) {request = beforeClientExecution(request);return executeGetJourney(request);}
public PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);for (int i = 0 ; i < size() ; i++) {if (get(i).getClass().equals(BooleanQuery2ModifierNodeProcessor.class)) {remove(i--);}}add(new BooleanModifiersQueryNodeProcessor());}
public static boolean startsWith(byte[] ref, BytesRef prefix) {if (ref.length < prefix.length) {return false;}return Arrays.equals(ref, 0, prefix.length,prefix.bytes, prefix.offset, prefix.offset + prefix.length);}
public DeleteUsageReportSubscriptionResult deleteUsageReportSubscription(DeleteUsageReportSubscriptionRequest request) {request = beforeClientExecution(request);return executeDeleteUsageReportSubscription(request);}
public File[] listFiles(FilenameFilter filter) {return filenamesToFiles(list(filter));}
public void respondActivityTaskFailed(RespondActivityTaskFailedRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskFailed(request);}
public ListIdentitiesResult listIdentities() {return listIdentities(new ListIdentitiesRequest());}
@Override public int compare(T o1, T o2) {Comparable<T> c2 = (Comparable<T>) o2;return c2.compareTo(o1);}
public ListFindingsResult listFindings(ListFindingsRequest request) {request = beforeClientExecution(request);return executeListFindings(request);}
public boolean contains(final int o){boolean rval = false;for (int j = 0; !rval && (j < _limit); j++){if (_array[ j ] == o){rval = true;}}return rval;}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length < 2) {return ErrorEval.VALUE_INVALID;}try {int ix = evaluateFirstArg(args[0], srcRowIndex, srcColumnIndex);if (ix < 1 || ix >= args.length) {return ErrorEval.VALUE_INVALID;}ValueEval result = OperandResolver.getSingleValue(args[ix], srcRowIndex, srcColumnIndex);if (result == MissingArgEval.instance) {return BlankEval.instance;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}
public DatRecord clone() {return copy();}
public GlobalReplicationGroup createGlobalReplicationGroup(CreateGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeCreateGlobalReplicationGroup(request);}
public String getText(Interval interval) {if (interval.a < 0 || interval.b < interval.a - 1) {throw new IllegalArgumentException("invalid interval");}int bufferStartIndex = getBufferStartIndex();if (n > 0 && data[n - 1] == Character.MAX_VALUE) {if (interval.a + interval.length() > bufferStartIndex + n) {throw new IllegalArgumentException("the interval extends past the end of the stream");}}if (interval.a < bufferStartIndex || interval.b >= bufferStartIndex + n) {throw new UnsupportedOperationException("interval "+interval+" outside buffer: "+bufferStartIndex+".."+(bufferStartIndex+n-1));}int i = interval.a - bufferStartIndex;return new String(data, i, interval.length());}
public void addClass(String chargroup) {if (chargroup.length() > 0) {char equivChar = chargroup.charAt(0);char[] key = new char[2];key[1] = 0;for (int i = 0; i < chargroup.length(); i++) {key[0] = chargroup.charAt(i);classmap.insert(key, 0, equivChar);}}}
public MultiPhraseQuery build() {int[] positionsArray = new int[this.positions.size()];for (int i = 0; i < this.positions.size(); ++i) {positionsArray[i] = this.positions.get(i);}Term[][] termArraysArray = termArrays.toArray(new Term[termArrays.size()][]);return new MultiPhraseQuery(field, termArraysArray, positionsArray, slop);}
public DFRSimilarity(BasicModel basicModel,AfterEffect afterEffect,Normalization normalization) {if (basicModel == null || afterEffect == null || normalization == null) {throw new NullPointerException("null parameters not allowed.");}this.basicModel = basicModel;this.afterEffect = afterEffect;this.normalization = normalization;}
public ResetSnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute) {setSnapshotId(snapshotId);setAttribute(attribute.toString());}
public V get(CharSequence cs) {if(cs == null)throw new NullPointerException();return null;}
public String getScheme() {return scheme;}
public void seekExact(long ord) {throw new UnsupportedOperationException();}
public XPathElement(String nodeName) {this.nodeName = nodeName;}
public DeleteAccountResult deleteAccount(DeleteAccountRequest request) {request = beforeClientExecution(request);return executeDeleteAccount(request);}
public boolean matches(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return mismatchedNode == null;}
public PredictionContext get(PredictionContext ctx) {return cache.get(ctx);}
public SpotPlacement(String availabilityZone) {setAvailabilityZone(availabilityZone);}
public DescribeFleetInstancesResult describeFleetInstances(DescribeFleetInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeFleetInstances(request);}
public void setWorkingTreeIterator(WorkingTreeIterator workingTreeIterator) {this.workingTreeIterator = workingTreeIterator;}
public static long pop_array(long[] arr, int wordOffset, int numWords) {long popCount = 0;for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {popCount += Long.bitCount(arr[i]);}return popCount;}
public static FileKey lenient(File directory, FS fs) {final File gitdir = resolve(directory, fs);return new FileKey(gitdir != null ? gitdir : directory, fs);}
public ObjectWalk(ObjectReader or, int depth) {super(or);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag("UNSHALLOW"); this.REINTERESTING = newFlag("REINTERESTING"); this.DEEPEN_NOT = newFlag("DEEPEN_NOT"); }
public RegisterImageRequest(String imageLocation) {setImageLocation(imageLocation);}
public void write(String s) {reserve(s.length());s.getChars(0,s.length(),buf, len);len +=s.length();}
public RefCountedRevision(Revision revision) {this.revision = revision;}
public ListTagsForResourcesResult listTagsForResources(ListTagsForResourcesRequest request) {request = beforeClientExecution(request);return executeListTagsForResources(request);}
public byte readByte() {return bytes[pos++];}
public GlobalReplicationGroup deleteGlobalReplicationGroup(DeleteGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteGlobalReplicationGroup(request);}
public IntBuffer asReadOnlyBuffer() {return duplicate();}
public DescribeFileSystemPolicyResult describeFileSystemPolicy(DescribeFileSystemPolicyRequest request) {request = beforeClientExecution(request);return executeDescribeFileSystemPolicy(request);}
public ListAttributesResult listAttributes(ListAttributesRequest request) {request = beforeClientExecution(request);return executeListAttributes(request);}
public ModifyStrategyTargetRequest() {super("aegis", "2016-11-11", "ModifyStrategyTarget", "vipaegis");setMethod(MethodType.POST);}
public void removeFontRecord(FontRecord rec) {records.remove(rec); numfonts--;}
public static Class<? extends TokenFilterFactory> lookupClass(String name) {return loader.lookupClass(name);}
public void reset(TermsEnum terms, BytesRef term) {this.terms = terms;current = term;}
public LinkedDataRecord getDataValues(){return dataValues;}
public synchronized static DefaultProfile getProfile(String regionId, ICredentialProvider icredential) {profile = new DefaultProfile(regionId, icredential);return profile;}
public ListFieldLevelEncryptionProfilesResult listFieldLevelEncryptionProfiles(ListFieldLevelEncryptionProfilesRequest request) {request = beforeClientExecution(request);return executeListFieldLevelEncryptionProfiles(request);}
public RegisterTaskDefinitionResult registerTaskDefinition(RegisterTaskDefinitionRequest request) {request = beforeClientExecution(request);return executeRegisterTaskDefinition(request);}
public String toString() {return String.format("type(%d)", type);}
public DisableEnhancedMonitoringResult disableEnhancedMonitoring(DisableEnhancedMonitoringRequest request) {request = beforeClientExecution(request);return executeDisableEnhancedMonitoring(request);}
public NodeHash(FST<T> fst, FST.BytesReader in) {table = new PagedGrowableWriter(16, 1<<27, 8, PackedInts.COMPACT);mask = 15;this.fst = fst;this.in = in;}
public static final String toString(ObjectId i) {return i != null ? i.name() : ZEROID_STR;}
public LittleEndianOutput createDelayedOutput(int size) {return this;}
public String toFormulaString(FormulaRenderingWorkbook book) {return book.getNameText(this);}
public String toString() {return "<boost value='" + getValueString() + "'>" + "\n"+ getChild().toString() + "\n</boost>";}
public ListTagsResult listTags(ListTagsRequest request) {request = beforeClientExecution(request);return executeListTags(request);}
public ListTypeVersionsResult listTypeVersions(ListTypeVersionsRequest request) {request = beforeClientExecution(request);return executeListTypeVersions(request);}
public ObjectLinkRecord(RecordInputStream in) {field_1_anchorId = in.readShort();field_2_link1 = in.readShort();field_3_link2 = in.readShort();}
public String getPromptText() {return promptText;}
public static String toLowerCase(String in) {final StringBuilder r = new StringBuilder(in.length());for (int i = 0; i < in.length(); i++)r.append(toLowerCase(in.charAt(i)));return r.toString();}
public static boolean isBeginRecord(int sid) {return sid == UserSViewBegin.sid;}
public GetInstanceMetricDataResult getInstanceMetricData(GetInstanceMetricDataRequest request) {request = beforeClientExecution(request);return executeGetInstanceMetricData(request);}
public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}
public NGramDistance(int size) {this.n = size;}
public AllocateConnectionOnInterconnectResult allocateConnectionOnInterconnect(AllocateConnectionOnInterconnectRequest request) {request = beforeClientExecution(request);return executeAllocateConnectionOnInterconnect(request);}
public StandardSyntaxParser(CharStream stream) {token_source = new StandardSyntaxParserTokenManager(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 25; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public void serialize(LittleEndianOutput out) {_range.serialize(out);serializeExtraData(out);}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {return isDefaultField(field)? "/"+text+"/": field + ":/" + text + "/";}
public static boolean isRowBlockRecord(int sid) {switch (sid) {case RowRecord.sid:case BlankRecord.sid:case BoolErrRecord.sid:case FormulaRecord.sid:case LabelRecord.sid:case LabelSSTRecord.sid:case NumberRecord.sid:case RKRecord.sid:case ArrayRecord.sid:case SharedFormulaRecord.sid:case TableRecord.sid:return true;}return false;}
public static final int endOfParagraph(byte[] b, int start) {int ptr = start;final int sz = b.length;while (ptr < sz && (b[ptr] != '\n' && b[ptr] != '\r'))ptr = nextLF(b, ptr);if (ptr > start && b[ptr - 1] == '\n')ptr--;if (ptr > start && b[ptr - 1] == '\r')ptr--;return ptr;}
public VerifyDomainDkimResult verifyDomainDkim(VerifyDomainDkimRequest request) {request = beforeClientExecution(request);return executeVerifyDomainDkim(request);}
public boolean equals(Object o) {if (o instanceof HSSFRichTextString) {return _string.equals(((HSSFRichTextString)o)._string);}return false;}
public boolean equals(Object obj) {if (!(obj instanceof RowColKey)) {return false;}RowColKey other = (RowColKey) obj;return _rowIndex == other._rowIndex && _columnIndex == other._columnIndex;}
public GetIdentityPoolConfigurationResult getIdentityPoolConfiguration(GetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeGetIdentityPoolConfiguration(request);}
public DeleteTrafficMirrorFilterResult deleteTrafficMirrorFilter(DeleteTrafficMirrorFilterRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficMirrorFilter(request);}
public Bits readLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) throws IOException {assert info.hasDeletions();BytesRefBuilder scratch = new BytesRefBuilder();CharsRefBuilder scratchUTF16 = new CharsRefBuilder();String fileName = IndexFileNames.fileNameFromGeneration(info.info.name, LIVEDOCS_EXTENSION, info.getDelGen());ChecksumIndexInput in = null;boolean success = false;try {in = dir.openChecksumInput(fileName, context);SimpleTextUtil.readLine(in, scratch);assert StringHelper.startsWith(scratch.get(), SIZE);int size = parseIntAt(scratch.get(), SIZE.length, scratchUTF16);BitSet bits = new BitSet(size);SimpleTextUtil.readLine(in, scratch);while (!scratch.get().equals(END)) {assert StringHelper.startsWith(scratch.get(), DOC);int docid = parseIntAt(scratch.get(), DOC.length, scratchUTF16);bits.set(docid);SimpleTextUtil.readLine(in, scratch);}SimpleTextUtil.checkFooter(in);success = true;return new SimpleTextBits(bits, size);} finally {if (success) {IOUtils.close(in);} else {IOUtils.closeWhileHandlingException(in);}}}
public CreateConferenceProviderResult createConferenceProvider(CreateConferenceProviderRequest request) {request = beforeClientExecution(request);return executeCreateConferenceProvider(request);}
public SimpleQQParser(String qqNames[], String indexField) {this.qqNames = qqNames;this.indexField = indexField;}
public boolean isCaseSensitive() {return false;}
public TokenFilter create(TokenStream input) {return new HyphenationCompoundWordTokenFilter(input, hyphenator, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);}
public TokenStream create(TokenStream input) {return new JapaneseBaseFormFilter(input);}
public OrderedATNConfigSet() {this.configLookup = new LexerConfigHashSet();}
public static ValueEval dereferenceResult(ValueEval evaluationResult, int srcRowNum, int srcColNum) {ValueEval value;try {value = OperandResolver.getSingleValue(evaluationResult, srcRowNum, srcColNum);} catch (EvaluationException e) {return e.getErrorEval();}if (value == BlankEval.instance) {return NumberEval.ZERO;}return value;}
public GetGroupRequest(String groupName) {setGroupName(groupName);}
public void narrowSearch(int midIx, boolean isLessThan) {if(isLessThan) {_highIx = midIx;} else {_lowIx = midIx;}}
public void set(int index, long value) {final int o = index >>> 1;final int b = index & 1;final int shift = b << 5;blocks[o] = (blocks[o] & ~(4294967295L << shift)) | (value << shift);}
public String toString() {return cfAggregate.toString();}
public void setConfig(Config config) {super.setConfig(config);random = new Random(config.get("rand.seed", 13));maxDocFacets = config.get("max.doc.facets", 10);maxDims = config.get("max.doc.facets.dims", 5);maxFacetDepth = config.get("max.facet.depth", 3);if (maxFacetDepth < 2) {throw new IllegalArgumentException("max.facet.depth must be at least 2; got: " + maxFacetDepth);}maxValue = maxDocFacets * maxFacetDepth;}
public interface Experiments extends SupportsCreating<Experiment.DefinitionStages.Blank>, HasInner<ExperimentsInner> {Observable<Experiment> getAsync(String resourceGroupName, String workspaceName, String experimentName);Observable<Experiment> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName);Completable deleteAsync(String resourceGroupName, String workspaceName, String experimentName);}
public Builder add(long l) {if (pending == null) {throw new IllegalStateException("Cannot be reused after build()");}if (pendingOff == pending.length) {if (values.length == valuesOff) {final int newLength = ArrayUtil.oversize(valuesOff + 1, 8);grow(newLength);}pack();}pending[pendingOff++] = l;size += 1;return this;}
public static boolean isBuiltInFunctionName(String name) {short ix = FunctionMetadataRegistry.lookupIndexByName(name.toUpperCase(Locale.ROOT));return ix >= 0;}
public void readBytes(byte[] b, int offset, int len) {while(len > 0) {final int numLeft = limit-upto;if (numLeft < len) {System.arraycopy(buffer, upto, b, offset, numLeft);offset += numLeft;len -= numLeft;nextSlice();} else {System.arraycopy(buffer, upto, b, offset, len);upto += len;break;}}}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(CONCAT);buffer.append(operands[ 1 ]);return buffer.toString();}
public ListResolverRuleAssociationsResult listResolverRuleAssociations(ListResolverRuleAssociationsRequest request) {request = beforeClientExecution(request);return executeListResolverRuleAssociations(request);}
public TokenStream create(TokenStream input) {return new ApostropheFilter(input);}
public static String getExtension(String name) {int i = name.lastIndexOf('.');if (i == -1) {return "";}String ext = name.substring(i + 1);if (ext.equals("tmp")) {Matcher matcher = EXT_PATTERN.matcher(name.substring(0, i + 1));if (matcher.find()) {return matcher.group(1);}}return ext;}
public static int getBuiltinFormat(String pFmt) {String fmt = "TEXT".equalsIgnoreCase(pFmt) ? "@" : pFmt;int i = -1;for (String f : _formats) {i++;if (f.equals(fmt)) {return i;}}return -1;}
@Override public int indexOf(Object object) {return list.indexOf(object);}
public void trimToSize() {balance();redimNodeArrays(freenode);CharVector kx = new CharVector();kx.alloc(1);TernaryTree map = new TernaryTree();compact(kx, map, root);kv = kx;kv.trimToSize();}
public GetRepoSyncTaskRequest() {super("cr", "2016-06-07", "GetRepoSyncTask", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/syncTasks/[SyncTaskId]");setMethod(MethodType.GET);}
public ChangeMessageVisibilityRequest(String queueUrl, String receiptHandle, Integer visibilityTimeout) {setQueueUrl(queueUrl);setReceiptHandle(receiptHandle);setVisibilityTimeout(visibilityTimeout);}
public String toString() {return "[SAVERECALC]\n" +"    .recalc         = " + getRecalc() +"\n" +"[/SAVERECALC]\n";}
public Status getStatus() {return status;}
public StartRepoBuildByRuleRequest() {super("cr", "2016-06-07", "StartRepoBuildByRule", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]/build");setMethod(MethodType.PUT);}
public ModifyAvailabilityZoneGroupResult modifyAvailabilityZoneGroup(ModifyAvailabilityZoneGroupRequest request) {request = beforeClientExecution(request);return executeModifyAvailabilityZoneGroup(request);}
public int compareSameType(Object other) {assert exists || 0 == value.length();MutableValueStr b = (MutableValueStr)other;int c = value.get().compareTo(b.value.get());if (c != 0) return c;if (exists == b.exists) return 0;return exists ? 1 : -1;}
public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChildren() == null || getChildren().size() == 0)return "";StringBuilder sb = new StringBuilder();String filler = "";for (QueryNode child : getChildren()) {sb.append(filler).append(child.toQueryString(escapeSyntaxParser));filler = ",";}return "[TP[" + sb.toString() + "]]";}
public DescribeChangeSetResult describeChangeSet(DescribeChangeSetRequest request) {request = beforeClientExecution(request);return executeDescribeChangeSet(request);}
public static int initialize(int seed) {return seed;}
public File getIdentityFile() {return identityFile;}
public String toString() {String n = getClass().getName();int lastDot = n.lastIndexOf('.');if (lastDot >= 0) {n = n.substring(lastDot + 1);}return n.replace('$', '.');}
public DeleteVoiceConnectorProxyResult deleteVoiceConnectorProxy(DeleteVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorProxy(request);}
public ByteArrayDataInput(byte[] bytes) {reset(bytes);}
public CreateLocalGatewayRouteResult createLocalGatewayRoute(CreateLocalGatewayRouteRequest request) {request = beforeClientExecution(request);return executeCreateLocalGatewayRoute(request);}
public static int strlen(char[] a, int start) {int len = 0;for (int i = start; i < a.length && a[i] != 0; i++) {len++;}return len;}
public AttachPolicyResult attachPolicy(AttachPolicyRequest request) {request = beforeClientExecution(request);return executeAttachPolicy(request);}
public void print(double dnum) {print(String.valueOf(dnum));}
public static BreakIterator getCharacterInstance() {return getCharacterInstance(Locale.getDefault());}
public boolean add(E object) {throw new UnsupportedOperationException();}
public SendMessageRequest(String queueUrl, String messageBody) {setQueueUrl(queueUrl);setMessageBody(messageBody);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);return resolveRange(reA, reB);} catch (EvaluationException e) {return e.getErrorEval();}}
public CharBuffer put(char[] src, int srcOffset, int charCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, charCount);if (charCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + charCount; ++i) {put(src[i]);}return this;}
public void writeByte(byte b) {assert slice != null;if (slice[upto] != 0) {upto = pool.allocSlice(slice, upto);slice = pool.buffer;offset0 = pool.byteOffset;assert slice != null;}slice[upto++] = b;assert upto != slice.length;}
public static double atanh(double a) {final double mult;if (Double.doubleToRawLongBits(a) < 0) {a = Math.abs(a);mult = -0.5d;} else {mult = 0.5d;}return mult * Math.log((1.0d + a) / (1.0d - a));}
public static double asinh(double a) {final double sign;if (Double.doubleToRawLongBits(a) < 0) {a = Math.abs(a);sign = -1.0d;} else {sign = 1.0d;}return sign * Math.log(Math.sqrt(a * a + 1.0d) + a);}
public FuzzyLikeThisQuery(int maxNumTerms, Analyzer analyzer){this.analyzer=analyzer;this.maxNumTerms = maxNumTerms;}
public boolean precpred(RuleContext localctx, int precedence) {return precedence >= _precedenceStack.peek();}
public UpdateStackResult updateStack(UpdateStackRequest request) {request = beforeClientExecution(request);return executeUpdateStack(request);}
public StartJumpserverRequest() {super("HPC", "2016-06-03", "StartJumpserver", "hpc");setMethod(MethodType.POST);}
public List<FastIgnoreRule> getRules() {return Collections.unmodifiableList(rules);}
public RefMap() {prefix = ""; packed = RefList.emptyList();loose = RefList.emptyList();resolved = RefList.emptyList();}
public Collection<ObjectId> getCandidates() {return candidates;}
public int get(Object key) {int index = findIndex(key, keys);if (keys[index] == key) {return values[index];}return -1;}
public String toStringEscaped(char[] enabledChars) {StringBuilder result = new StringBuilder();for (int i = 0; i < this.length(); i++) {if (this.chars[i] == '\\') {result.append('\\');} else {for (char character : enabledChars) {if (this.chars[i] == character && this.wasEscaped[i]) {result.append('\\');break;}}}result.append(this.chars[i]);}return result.toString();}
public DiffCommand setCached(boolean cached) {this.cached = cached;return this;}
public RevertCommand revert() {return new RevertCommand(repo);}
@Override public void clear() {if (size != 0) {Arrays.fill(table, null);entryForNullKey = null;modCount++;size = 0;}}
public static double log2(double x) {return Math.log(x) / LOG_2;}
public boolean isHorizontalBorder(){return horizontalBorder.isSet(field_1_options);}
public void validate() throws IllegalArgumentException {if (distErr != null && distErrPct != null)throw new IllegalArgumentException("Only distErr or distErrPct can be specified.");}
public DeleteConfigurationSetResult deleteConfigurationSet(DeleteConfigurationSetRequest request) {request = beforeClientExecution(request);return executeDeleteConfigurationSet(request);}
public boolean incrementToken() {if (used) {return false;}clearAttributes();termAttribute.append(value);offsetAttribute.setOffset(0, value.length());used = true;return true;}
public static DoubleBuffer wrap(double[] array, int start, int doubleCount) {Arrays.checkOffsetAndCount(array.length, start, doubleCount);DoubleBuffer buf = new ReadWriteDoubleArrayBuffer(array);buf.position = start;buf.limit = start + doubleCount;return buf;}
public DescribeSpotInstanceRequestsResult describeSpotInstanceRequests(DescribeSpotInstanceRequestsRequest request) {request = beforeClientExecution(request);return executeDescribeSpotInstanceRequests(request);}
public UpdateFieldLevelEncryptionConfigResult updateFieldLevelEncryptionConfig(UpdateFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeUpdateFieldLevelEncryptionConfig(request);}
public void setCachedResultTypeString() {specialCachedValue = FormulaSpecialCachedValue.createForString();}
public SpanNearBuilder(SpanQueryBuilder factory) {this.factory = factory;}
public long ramBytesUsed() {long sizeInBytes = 0;for(Map.Entry<String,DirectField> entry: fields.entrySet()) {sizeInBytes += entry.getKey().length() * Character.BYTES;sizeInBytes += entry.getValue().ramBytesUsed();}return sizeInBytes;}
public GlobalCluster deleteGlobalCluster(DeleteGlobalClusterRequest request) {request = beforeClientExecution(request);return executeDeleteGlobalCluster(request);}
public String toString() {return type.getSimpleName() + "[" + listener + "]";}
public void parseLine(DocData docData, String line) {int k1 = 0;int k2 = line.indexOf(WriteLineDocTask.SEP, k1);if (k2<0) {throw new RuntimeException("line: [" + line + "] is in an invalid format (missing: separator title::date)!");}docData.setTitle(line.substring(k1,k2));k1 = k2+1;k2 = line.indexOf(WriteLineDocTask.SEP, k1);if (k2<0) {throw new RuntimeException("line: [" + line + "] is in an invalid format (missing: separator date::body)!");}docData.setDate(line.substring(k1,k2));k1 = k2+1;k2 = line.indexOf(WriteLineDocTask.SEP, k1);if (k2>=0) {throw new RuntimeException("line: [" + line + "] is in an invalid format (too many separators)!");}docData.setBody(line.substring(k1));}
public boolean isLarge() {return false;}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("TrackingRefUpdate[");sb.append(remoteName);sb.append(" -> ");sb.append(localName);if (forceUpdate)sb.append(" (forced)");sb.append(" ");sb.append(oldObjectId == null ? "" : oldObjectId.abbreviate(7).name());sb.append("..");sb.append(newObjectId == null ? "" : newObjectId.abbreviate(7).name());sb.append("]");return sb.toString();}
public DescribeTerminationPolicyTypesResult describeTerminationPolicyTypes() {return describeTerminationPolicyTypes(new DescribeTerminationPolicyTypesRequest());}
public DeleteTagsRequest() {super("Ots", "2016-06-20", "DeleteTags", "ots");setMethod(MethodType.POST);}
public ChartFormatRecord(RecordInputStream in) {field1_x_position = in.readInt();field2_y_position = in.readInt();field3_width = in.readInt();field4_height = in.readInt();field5_grbit = in.readUShort();field6_unknown = in.readUShort();}
public void dispatch(IndexChangedListener listener) {listener.onIndexChanged(this);}
public NameRecord cloneFilter(int filterDbNameIndex, int newSheetIndex){NameRecord origNameRecord = getNameRecord(filterDbNameIndex);int newExtSheetIx = checkExternSheet(newSheetIndex);Ptg[] ptgs = origNameRecord.getNameDefinition();for (int i=0; i< ptgs.length; i++) {Ptg ptg = ptgs[i];if (ptg instanceof Area3DPtg) {Area3DPtg a3p = (Area3DPtg) ((OperandPtg) ptg).copy();a3p.setExternSheetIndex(newExtSheetIx);ptgs[i] = a3p;} else if (ptg instanceof Ref3DPtg) {Ref3DPtg r3p = (Ref3DPtg) ((OperandPtg) ptg).copy();r3p.setExternSheetIndex(newExtSheetIx);ptgs[i] = r3p;}}NameRecord newNameRecord = createBuiltInName(NameRecord.BUILTIN_FILTER_DB, newSheetIndex+1);newNameRecord.setNameDefinition(ptgs);newNameRecord.setHidden(true);return newNameRecord;}
public int read(byte[] b) throws IOException {int n = in.read(b);if (n == -1) {close();}return n;}
public void serializeArrayConstantData(LittleEndianOutput out) {int len = _byteEncoding.length-_encodedTokenLen;out.write(_byteEncoding, _encodedTokenLen, len);}
public GetGcmChannelResult getGcmChannel(GetGcmChannelRequest request) {request = beforeClientExecution(request);return executeGetGcmChannel(request);}
public long ramBytesUsed() {return indexReader.ramBytesUsed();}
public short getCalcMode(){return field_1_calcmode;}
public DeleteStreamResult deleteStream(DeleteStreamRequest request) {request = beforeClientExecution(request);return executeDeleteStream(request);}
public DoubleBuffer put(double[] src, int srcOffset, int doubleCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, doubleCount);if (doubleCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + doubleCount; ++i) {put(src[i]);}return this;}
public RevokeSecurityGroupEgressResult revokeSecurityGroupEgress(RevokeSecurityGroupEgressRequest request) {request = beforeClientExecution(request);return executeRevokeSecurityGroupEgress(request);}
public CreateRepoWebhookRequest() {super("cr", "2016-06-07", "CreateRepoWebhook", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks");setMethod(MethodType.PUT);}
public int getCnt(Character way) {Cell c = at(way);return (c == null) ? -1 : c.cnt;}
public SortField[] getSort() {return fields;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[BOF RECORD]\n");buffer.append("    .version  = ").append(HexDump.shortToHex(getVersion())).append("\n");buffer.append("    .type     = ").append(HexDump.shortToHex(getType()));buffer.append(" (").append(getTypeName()).append(")").append("\n");buffer.append("    .build    = ").append(HexDump.shortToHex(getBuild())).append("\n");buffer.append("    .buildyear= ").append(getBuildYear()).append("\n");buffer.append("    .history  = ").append(HexDump.intToHex(getHistoryBitMask())).append("\n");buffer.append("    .reqver   = ").append(HexDump.intToHex(getRequiredVersion())).append("\n");buffer.append("[/BOF RECORD]\n");return buffer.toString();}
public DBInstance createDBInstance(CreateDBInstanceRequest request) {request = beforeClientExecution(request);return executeCreateDBInstance(request);}
public CreateStackInstancesResult createStackInstances(CreateStackInstancesRequest request) {request = beforeClientExecution(request);return executeCreateStackInstances(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort(data, offset, getOptions());LittleEndian.putShort(data, offset+2, getRecordId());int remainingBytes = 0;for (EscherRecord r : this) {remainingBytes += r.getRecordSize();}remainingBytes += _remainingLength;LittleEndian.putInt(data, offset+4, remainingBytes);int pos = offset+8;for (EscherRecord r : this) {pos += r.serialize(pos, data, listener );}listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public String toString() {return "SnapshotDeletionPolicy.SnapshotCommitPoint(" + cp + ")";}
public MissingRecordAwareHSSFListener(HSSFListener listener) {resetCounts();childListener = listener;}
public int clear(final int holder){return holder & ~_mask;}
public void serialize(LittleEndianOutput out) {out.writeInt(field_13_border_styles1);out.writeInt(field_14_border_styles2);}
public void setParams(String params) {super.setParams(params);traversalSize = (int)Float.parseFloat(params);}
public String toStringTree(List<String> ruleNames) {return Trees.toStringTree(this, ruleNames);}
public HSSFTextbox createTextbox(HSSFClientAnchor anchor) {HSSFTextbox shape = new HSSFTextbox(null, anchor);addShape(shape);onCreate(shape);return shape;}
public UpdateDevicePolicyConfigurationResult updateDevicePolicyConfiguration(UpdateDevicePolicyConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateDevicePolicyConfiguration(request);}
public float norm(int passageStart) {return 1 + 1 / (float) Math.log(pivot + passageStart);}
public Record nextRecord() {Record r;r = getNextUnreadRecord();if (r != null) {return r;}while (true) {if (!_recStream.hasNextRecord()) {return null;}if (_lastRecordWasEOFLevelZero) {if (_recStream.getNextSid() != BOFRecord.sid) {return null;}}_recStream.nextRecord();r = readNextRecord();if (r == null) {continue;}return r;}}
public final FileDescriptor getFD() throws IOException {return fd;}
public MoveAlbumPhotosRequest() {super("CloudPhoto", "2017-07-11", "MoveAlbumPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public UpdateStackSetResult updateStackSet(UpdateStackSetRequest request) {request = beforeClientExecution(request);return executeUpdateStackSet(request);}
public static double acosh(double d) {return Math.log(Math.sqrt(Math.pow(d, 2) - 1) + d);}
public int stem(char s[], int len) {for (int i = 0; i < len; i++)switch(s[i]) {case 'ä':case 'à':case 'á':case 'â': s[i] = 'a'; break;case 'ö':case 'ò':case 'ó':case 'ô': s[i] = 'o'; break;case 'ï':case 'ì':case 'í':case 'î': s[i] = 'i'; break;case 'ü':case 'ù':case 'ú':case 'û': s[i] = 'u'; break;}len = step1(s, len);return step2(s, len);}
public CreateProposalResult createProposal(CreateProposalRequest request) {request = beforeClientExecution(request);return executeCreateProposal(request);}
public boolean didFetchIncludeTags() {return false;}
public RevCommit peek() {return head != null ? head.commit : null;}
public HSSFBorderFormatting getBorderFormatting() {return getBorderFormatting(false);}
public DeletedArea3DPtg(int externSheetIndex) {field_1_index_extern_sheet = externSheetIndex;unused1 = 0;unused2 = 0;}
public SheetRecordCollector() {_totalSize = 0;_list = new ArrayList<>(128);}
public RemovePermissionResult removePermission(RemovePermissionRequest request) {request = beforeClientExecution(request);return executeRemovePermission(request);}
public Cluster modifyClusterIamRoles(ModifyClusterIamRolesRequest request) {request = beforeClientExecution(request);return executeModifyClusterIamRoles(request);}
public AreaFormatRecord(RecordInputStream in) {field_1_foregroundColor        = in.readInt();field_2_backgroundColor        = in.readInt();field_3_pattern                = in.readShort();field_4_formatFlags            = in.readShort();field_5_forecolorIndex         = in.readShort();field_6_backcolorIndex         = in.readShort();}
public int available() {return _lei.available();}
public final String toString() {return toString("");}
public short setShort(final short holder){return ( short ) set(holder);}
public synchronized void setFlushPending(ThreadState perThread) {assert !perThread.flushPending;if (perThread.dwpt.getNumDocsInRAM() > 0) {perThread.flushPending = true; final long bytes = perThread.bytesUsed;flushBytes += bytes;activeBytes -= bytes;numPending++; assert assertMemory();} }
public StringBuilder insert(int offset, char[] ch) {insert0(offset, ch);return this;}
public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}
public String getName() {return String.format(Locale.ROOT, "Jelinek-Mercer(%f)", getLambda());}
public ReleaseAddressRequest(String publicIp) {setPublicIp(publicIp);}
public DeleteKeyPairResult deleteKeyPair(DeleteKeyPairRequest request) {request = beforeClientExecution(request);return executeDeleteKeyPair(request);}
public byte[] getColor(int byteIndex) {int i = byteIndex - FIRST_COLOR_INDEX;if (i < 0 || i >= _colors.size()) {return null;}return _colors.get(i).getTriplet();}
public int indexOfValue(E value) {if (mGarbage) {gc();}for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public URIish setScheme(String n) {final URIish r = new URIish(this);r.scheme = n;return r;}
public void print(char[] charArray) {print(new String(charArray, 0, charArray.length));}
public CommonToken(int type, String text) {this.type = type;this.channel = DEFAULT_CHANNEL;this.text = text;this.source = EMPTY_SOURCE;}
public final String toString() { return field + ":" + text(); }
public LongBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public ATNSimulator(ATN atn,PredictionContextCache sharedContextCache){this.atn = atn;this.sharedContextCache = sharedContextCache;}
public CachedOrdinalsReader(OrdinalsReader source) {this.source = source;}
public static CompareResult valueOf(boolean matches) {if(matches) {return EQUAL ;}return LESS_THAN;}
public void serialize(LittleEndianOutput out) {out.writeShort(getVersion());out.writeShort(getType());out.writeShort(getBuild());out.writeShort(getBuildYear());out.writeInt(getHistoryBitMask());out.writeInt(getRequiredVersion());}
public File getAbsoluteFile() {return new File(getAbsolutePath());}
public DescribeTemplatePermissionsResult describeTemplatePermissions(DescribeTemplatePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeTemplatePermissions(request);}
public WorkflowExecutionCount countOpenWorkflowExecutions(CountOpenWorkflowExecutionsRequest request) {request = beforeClientExecution(request);return executeCountOpenWorkflowExecutions(request);}
public DescribeAccountLimitsResult describeAccountLimits() {return describeAccountLimits(new DescribeAccountLimitsRequest());}
public Object get(CharSequence key) {if (fst == null) {return null;}Arc<Long> arc = new Arc<>();Long result = null;try {result = lookupPrefix(new BytesRef(key), arc);} catch (IOException bogus) { throw new RuntimeException(bogus); }if (result == null || !arc.isFinal()) {return null;} else {return Integer.valueOf(decodeWeight(result + arc.nextFinalOutput()));}}
public CreateGameServerGroupResult createGameServerGroup(CreateGameServerGroupRequest request) {request = beforeClientExecution(request);return executeCreateGameServerGroup(request);}
public static boolean isInternalDateFormat(int format) {switch(format) {case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x2d:case 0x2e:case 0x2f:return true;}return false;}
public PackFile getPackFile() {return newPack;}
public CreateInternetGatewayResult createInternetGateway() {return createInternetGateway(new CreateInternetGatewayRequest());}
public void drawPolyline(int[] xPoints, int[] yPoints,int nPoints){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"drawPolyline not supported");}
public void close() {unpackedObjectCache.clear();final PackList packs = packList.get();if (packs != NO_PACKS && packList.compareAndSet(packs, NO_PACKS)) {for (PackFile p : packs.packs)p.close();}AlternateHandle[] alt = alternates.get();if (alt != null && alternates.compareAndSet(alt, null)) {for(AlternateHandle od : alt)od.close();}}
public List<Token> getHiddenTokensToRight(int tokenIndex, int channel) {lazyInit();if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {throw new IndexOutOfBoundsException(tokenIndex+" not in 0.."+(tokens.size()-1));}int nextOnChannel =nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);int to;int from = tokenIndex+1;if ( nextOnChannel == -1 ) to = size()-1;else to = nextOnChannel;return filterForChannel(from, to, channel);}
public int size() {return Hashtable.this.size();}
public CustomAvailabilityZone deleteCustomAvailabilityZone(DeleteCustomAvailabilityZoneRequest request) {request = beforeClientExecution(request);return executeDeleteCustomAvailabilityZone(request);}
public BatchUnsuspendUserResult batchUnsuspendUser(BatchUnsuspendUserRequest request) {request = beforeClientExecution(request);return executeBatchUnsuspendUser(request);}
public DeleteAccountSettingResult deleteAccountSetting(DeleteAccountSettingRequest request) {request = beforeClientExecution(request);return executeDeleteAccountSetting(request);}
public static SemanticContext or(SemanticContext a, SemanticContext b) {if ( a == null ) return b;if ( b == null ) return a;if ( a == NONE || b == NONE ) return NONE;OR result = new OR(a, b);if (result.opnds.length == 1) {return result.opnds[0];}return result;}
public ListHumanLoopsResult listHumanLoops(ListHumanLoopsRequest request) {request = beforeClientExecution(request);return executeListHumanLoops(request);}
public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {int maxN = args.length;if(maxN < 1) {return ErrorEval.VALUE_INVALID;}ValueEval firstArg = args[0];try {if(firstArg instanceof NumericValueEval) {return evaluateSingleProduct(args);}if(firstArg instanceof RefEval) {return evaluateSingleProduct(args);}if (firstArg instanceof TwoDEval) {TwoDEval ae = (TwoDEval) firstArg;if(ae.isRow() && ae.isColumn()) {return evaluateSingleProduct(args);}return evaluateAreaSumProduct(args);}} catch (EvaluationException e) {return e.getErrorEval();}throw new RuntimeException("Invalid arg type for SUMPRODUCT: ("+ firstArg.getClass().getName() + ")");}
public DescribeParameterGroupsResult describeParameterGroups(DescribeParameterGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeParameterGroups(request);}
public static char[] grow(char[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Character.BYTES));} elsereturn array;}
public double readDouble() throws IOException {return primitiveTypes.readDouble();}
public void setTokenSource(TokenSource tokenSource) {this.tokenSource = tokenSource;tokens.clear();p = -1;fetchedEOF = false;}
public void reset(Parser recognizer) {endErrorCondition(recognizer);}
public DescribeVpcPeeringAuthorizationsResult describeVpcPeeringAuthorizations(DescribeVpcPeeringAuthorizationsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcPeeringAuthorizations(request);}
public CreateDocumentationVersionResult createDocumentationVersion(CreateDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeCreateDocumentationVersion(request);}
public CreateClusterResult createCluster(CreateClusterRequest request) {request = beforeClientExecution(request);return executeCreateCluster(request);}
public DoubleBuffer compact() {if (byteBuffer.isReadOnly()) {throw new ReadOnlyBufferException();}byteBuffer.limit(limit * SizeOf.DOUBLE);byteBuffer.position(position * SizeOf.DOUBLE);byteBuffer.compact();byteBuffer.clear();position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public int[] grow() {final int[] ord = super.grow();boost = ArrayUtil.grow(boost, ord.length);if (termState.length < ord.length) {TermStates[] tmpTermState = new TermStates[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(termState, 0, tmpTermState, 0, termState.length);termState = tmpTermState;}assert termState.length >= ord.length && boost.length >= ord.length;return ord;}
public DefaultColWidthRecord(RecordInputStream in){field_1_col_width = in.readUShort();}
public GetAttributesResult getAttributes(GetAttributesRequest request) {request = beforeClientExecution(request);return executeGetAttributes(request);}
public GetSubUserListRequest() {super("cr", "2016-06-07", "GetSubUserList", "cr");setUriPattern("/users/subAccount");setMethod(MethodType.GET);}
public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler) {this.queryConfigHandler = queryConfigHandler;}
public WindowCacheConfig() {packedGitOpenFiles = 128;packedGitLimit = 10 * MB;useStrongRefs = false;packedGitWindowSize = 8 * KB;packedGitMMAP = false;deltaBaseCacheLimit = 10 * MB;streamFileThreshold = PackConfig.DEFAULT_BIG_FILE_THRESHOLD;}
public MutableFPNumber copy() {return new MutableFPNumber(_significand, _binaryExponent);}
public ShortBuffer asReadOnlyBuffer() {ShortToByteBufferAdapter buf = new ShortToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public DescribeReservedCacheNodesResult describeReservedCacheNodes(DescribeReservedCacheNodesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedCacheNodes(request);}
public ListOperationsResult listOperations(ListOperationsRequest request) {request = beforeClientExecution(request);return executeListOperations(request);}
public SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredentialRequest() {super("Domain-intl", "2017-12-18", "SaveTaskForSubmittingDomainRealNameVerificationByIdentityCredential", "domain");setMethod(MethodType.POST);}
public BatchReadResult batchRead(BatchReadRequest request) {request = beforeClientExecution(request);return executeBatchRead(request);}
public InstanceProfileCredentials fetch(int retryTimes) throws ClientException {for (int i = 0; i <= retryTimes; i++) {try {return fetch();} catch (ClientException e) {if (i == retryTimes) {throw e;}}}throw new ClientException("Failed to connect ECS Metadata Service: Max retry times exceeded.");}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex) {Date now = new Date(System.currentTimeMillis());return new NumberEval(DateUtil.getExcelDate(now));}
public static int idealIntArraySize(int need) {return idealByteArraySize(need * 4) / 4;}
public long record(IndexSearcher searcher) throws IOException {ensureOpen();final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();SearcherTracker tracker = searchers.get(version);if (tracker == null) {tracker = new SearcherTracker(searcher);if (searchers.putIfAbsent(version, tracker) != null) {tracker.close();}} else if (tracker.searcher != searcher) {throw new IllegalArgumentException("the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=" + searcher + " vs old=" + tracker.searcher);}return version;}
public ClassifyDocumentResult classifyDocument(ClassifyDocumentRequest request) {request = beforeClientExecution(request);return executeClassifyDocument(request);}
public GetIdentityPoolRolesResult getIdentityPoolRoles(GetIdentityPoolRolesRequest request) {request = beforeClientExecution(request);return executeGetIdentityPoolRoles(request);}
public CharSequence subSequence(int start, int end) {int newLength = end - start;return new UnescapedCharSequence(this.chars, this.wasEscaped, start,newLength);}
public CreateDeploymentGroupResult createDeploymentGroup(CreateDeploymentGroupRequest request) {request = beforeClientExecution(request);return executeCreateDeploymentGroup(request);}
public String toString() {StringBuilder r = new StringBuilder();r.append("Tag");r.append("={\n");r.append("object ");r.append(object != null ? object.name() : "NOT_SET");r.append("\n");r.append("type ");r.append(object != null ? Constants.typeString(type) : "NOT_SET");r.append("\n");r.append("tag ");r.append(tag != null ? tag : "NOT_SET");r.append("\n");if (tagger != null) {r.append("tagger ");r.append(tagger);r.append("\n");}r.append("\n");r.append(message != null ? message : "");r.append("}");return r.toString();}
public ET next() {if (expectedModCount == list.modCount) {if (hasNext()) {link = link.previous;canRemove = true;return link.data;}throw new NoSuchElementException();}throw new ConcurrentModificationException();}
public boolean contains(Object needle) {if (needle instanceof String) {String n = (String) needle;return names.containsKey(n)|| names.containsKey(StringUtils.toLowerCase(n));}return false;}
public int set(final int holder){return holder | _mask;}
public void setContext(int lineCount) {if (lineCount < 0)throw new IllegalArgumentException(JGitText.get().contextMustBeNonNegative);context = lineCount;}
public String getPath(Side side) {return side == Side.OLD ? getOldPath() : getNewPath();}
public DescribeAccessPointsResult describeAccessPoints(DescribeAccessPointsRequest request) {request = beforeClientExecution(request);return executeDescribeAccessPoints(request);}
public StringBuilder deleteCharAt(int index) {deleteCharAt0(index);return this;}
public int addSSTString(UnicodeString string) {LOG.log(DEBUG, "insert to sst string='", string);if (sst == null) {insertSST();}return sst.addString(string);}
public String outputToString(TermData data) {return data.toString();}
public List<HSSFObjectData> getAllEmbeddedObjects(){List<HSSFObjectData> objects = new ArrayList<>();for (HSSFSheet sheet : _sheets){getAllEmbeddedObjects(sheet, objects);}return Collections.unmodifiableList(objects);}
public DisableDirectoryResult disableDirectory(DisableDirectoryRequest request) {request = beforeClientExecution(request);return executeDisableDirectory(request);}
public UpdateApiMappingResult updateApiMapping(UpdateApiMappingRequest request) {request = beforeClientExecution(request);return executeUpdateApiMapping(request);}
public StringBuffer insert(int index, boolean b) {return insert(index, b ? "true" : "false");}
public UpdateConfigurationResult updateConfiguration(UpdateConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateConfiguration(request);}
public synchronized StringBuffer replace(int start, int end, String string) {replace0(start, end, string);return this;}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 60; shift >= 0; shift -= 4) {values[valuesOffset++] = (int) ((block >>> shift) & 15);}}}
public synchronized void print(String str) {if (out == null) {setError();return;}if (str == null) {print("null");return;}try {if (encoding == null) {write(str.getBytes());} else {write(str.getBytes(encoding));}} catch (IOException e) {setError();}}
@Override public E set(int index, E object) {synchronized (CopyOnWriteArrayList.this) {slice.checkElementIndex(index);slice.checkConcurrentModification(elements);E result = CopyOnWriteArrayList.this.set(index + slice.from, object);slice = new Slice(elements, slice.from, slice.to);return result;}}
public static void fill(Object[] array, int start, int end, Object value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public short checkExternSheet(int firstSheetNumber, int lastSheetNumber){return (short)getOrCreateLinkTable().checkExternSheet(firstSheetNumber, lastSheetNumber);}
public DeleteClusterParameterGroupResult deleteClusterParameterGroup(DeleteClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterParameterGroup(request);}
public GetTemplateResult getTemplate(GetTemplateRequest request) {request = beforeClientExecution(request);return executeGetTemplate(request);}
public ByteBuffer put(byte[] src, int srcOffset, int byteCount) {throw new ReadOnlyBufferException();}
public Note call() throws GitAPIException {checkCallable();NoteMap map = NoteMap.newEmptyMap();RevCommit notesCommit = null;try (RevWalk walk = new RevWalk(repo);ObjectInserter inserter = repo.newObjectInserter()) {Ref ref = repo.findRef(notesRef);if (ref != null) {notesCommit = walk.parseCommit(ref.getObjectId());map = NoteMap.read(walk.getObjectReader(), notesCommit);}map.set(id, message, inserter);commitNoteMap(repo, notesRef, walk, map, notesCommit, inserter,"Notes added by 'git notes add'"); return map.getNote(id);} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}}
public DeleteNodegroupResult deleteNodegroup(DeleteNodegroupRequest request) {request = beforeClientExecution(request);return executeDeleteNodegroup(request);}
public final boolean hasRemaining() {return position < limit;}
public final int compareTo(AnyObjectId other) {if (this == other)return 0;int cmp;cmp = NB.compareUInt32(w1, other.w1);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, other.w2);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, other.w3);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, other.w4);if (cmp != 0)return cmp;return NB.compareUInt32(w5, other.w5);}
public static IntBuffer wrap(int[] array) {return wrap(array, 0, array.length);}
public ObjectId getNewId() {return newId;}
public DescribeBrokerInstanceOptionsResult describeBrokerInstanceOptions(DescribeBrokerInstanceOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeBrokerInstanceOptions(request);}
public GetDASHStreamingSessionURLResult getDASHStreamingSessionURL(GetDASHStreamingSessionURLRequest request) {request = beforeClientExecution(request);return executeGetDASHStreamingSessionURL(request);}
public CancelJobResult cancelJob(CancelJobRequest request) {request = beforeClientExecution(request);return executeCancelJob(request);}
public ListExperimentsResult listExperiments(ListExperimentsRequest request) {request = beforeClientExecution(request);return executeListExperiments(request);}
public CreateSubnetGroupResult createSubnetGroup(CreateSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateSubnetGroup(request);}
public String toString() { return "scorer(" + weight + ")[" + super.toString() + "]"; }
public Executor getExecutor() {return executor;}
public void write(LittleEndianOutput out) {throw invalid();}
public StandardQueryParser(Analyzer analyzer) {this();this.setAnalyzer(analyzer);}
public IndexedUDFFinder(UDFFinder... usedToolPacks) {super(usedToolPacks);_funcMap = new HashMap<>();}
public static int countMatchingCellsInRef(RefEval refEval, I_MatchPredicate criteriaPredicate) {int result = 0;final int firstSheetIndex = refEval.getFirstSheetIndex();final int lastSheetIndex = refEval.getLastSheetIndex();for (int sIx = firstSheetIndex; sIx <= lastSheetIndex; sIx++) {ValueEval ve = refEval.getInnerValueEval(sIx);if(criteriaPredicate.matches(ve)) {result++;}}return result;}
public NameXPxg(int externalWorkbookNumber, String sheetName, String nameName) {this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;this.nameName = nameName;}
public MergeInfo(int totalMaxDoc, long estimatedMergeBytes, boolean isExternal, int mergeMaxNumSegments) {this.totalMaxDoc = totalMaxDoc;this.estimatedMergeBytes = estimatedMergeBytes;this.isExternal = isExternal;this.mergeMaxNumSegments = mergeMaxNumSegments;}
public HsmClientCertificate createHsmClientCertificate(CreateHsmClientCertificateRequest request) {request = beforeClientExecution(request);return executeCreateHsmClientCertificate(request);}
public Token consume() {Token o = getCurrentToken();if (o.getType() != EOF) {getInputStream().consume();}boolean hasListener = _parseListeners != null && !_parseListeners.isEmpty();if (_buildParseTrees || hasListener) {if ( _errHandler.inErrorRecoveryMode(this) ) {ErrorNode node = _ctx.addErrorNode(createErrorNode(_ctx,o));if (_parseListeners != null) {for (ParseTreeListener listener : _parseListeners) {listener.visitErrorNode(node);}}}else {TerminalNode node = _ctx.addChild(createTerminalNode(_ctx,o));if (_parseListeners != null) {for (ParseTreeListener listener : _parseListeners) {listener.visitTerminal(node);}}}}return o;}
public boolean seekExact(BytesRef term) {final int ord = findTerm(term);if (ord >= 0) {termOrd = ord;setTerm();return true;} else {return false;}}
public DescribeEgressOnlyInternetGatewaysResult describeEgressOnlyInternetGateways(DescribeEgressOnlyInternetGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeEgressOnlyInternetGateways(request);}
public Ref getLeaf() {Ref dst = getTarget();while (dst.isSymbolic())dst = dst.getTarget();return dst;}
public void ReInit(QueryParserTokenManager tm) {token_source = tm;token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public ListStacksResult listStacks() {return listStacks(new ListStacksRequest());}
public PutInstancePublicPortsResult putInstancePublicPorts(PutInstancePublicPortsRequest request) {request = beforeClientExecution(request);return executePutInstancePublicPorts(request);}
public GetConfigurationSetResult getConfigurationSet(GetConfigurationSetRequest request) {request = beforeClientExecution(request);return executeGetConfigurationSet(request);}
public static Element getFirstChildOrFail(Element e) throws ParserException {Element kid = getFirstChildElement(e);if (null == kid) {throw new ParserException(e.getTagName()+ " does not contain a child element");}return kid;}
public String toString() {return "Cell(readerIndex=" + readerIndex + " nodeID=" + index.getNodeID()+ " isLeaf=" + index.isLeafNode() + " distanceSquared=" + distanceSquared + ")";}
public static long getBaseSize(byte[] delta) {int p = 0;long baseLen = 0;int c, shift = 0;do {c = delta[p++] & 0xff;baseLen |= ((long) (c & 0x7f)) << shift;shift += 7;} while ((c & 0x80) != 0);return baseLen;}
public VerifyEmailIdentityResult verifyEmailIdentity(VerifyEmailIdentityRequest request) {request = beforeClientExecution(request);return executeVerifyEmailIdentity(request);}
public CreateInvalidationResult createInvalidation(CreateInvalidationRequest request) {request = beforeClientExecution(request);return executeCreateInvalidation(request);}
public ListGroupsForUserRequest(String userName) {setUserName(userName);}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_stream_pos);out.writeShort(field_2_bucket_sst_offset);out.writeShort(field_3_zero);}
public boolean equals(Object o) {if (QueryValueSource.class != o.getClass()) return false;QueryValueSource other = (QueryValueSource)o;return this.q.equals(other.q) && this.defVal==other.defVal;}
public boolean add(E object) {add(size(), object);return true;}
public synchronized SessionToken checkForUpdate(String currentVersion) {ensureOpen();if (currentRevision == null) { return null;}if (currentVersion != null && currentRevision.revision.compareTo(currentVersion) <= 0) {return null;}currentRevision.incRef();final String sessionID = Integer.toString(sessionToken.incrementAndGet());final SessionToken sessionToken = new SessionToken(sessionID, currentRevision.revision);final ReplicationSession timedSessionToken = new ReplicationSession(sessionToken, currentRevision);sessions.put(sessionID, timedSessionToken);return sessionToken;}
public void setCommitNames(String[] commitNames) {this.commitNames = commitNames;}
public FormulaRecordAggregate createFormula(int row, int col) {FormulaRecord fr = new FormulaRecord();fr.setRow(row);fr.setColumn((short) col);return new FormulaRecordAggregate(fr, null, _sharedValueManager);}
public DetectSyntaxResult detectSyntax(DetectSyntaxRequest request) {request = beforeClientExecution(request);return executeDetectSyntax(request);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) { if (args.length < 2 || args.length > 3) {return ErrorEval.VALUE_INVALID;}int srcCellRow = ec.getRowIndex();int srcCellCol = ec.getColumnIndex();double start, end;double[] holidays;try {start = this.evaluator.evaluateDateArg(args[0], srcCellRow, srcCellCol);end = this.evaluator.evaluateDateArg(args[1], srcCellRow, srcCellCol);if (start > end) {return ErrorEval.NAME_INVALID;}ValueEval holidaysCell = args.length == 3 ? args[2] : null;holidays = this.evaluator.evaluateDatesArg(holidaysCell, srcCellRow, srcCellCol);return new NumberEval(WorkdayCalculator.instance.calculateWorkdays(start, end, holidays));} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}}
public HSSFDataValidationHelper(HSSFSheet sheet) {super();}
public SyncFacePicturesRequest() {super("LinkFace", "2018-07-20", "SyncFacePictures");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public static String shortToHex(int value) {StringBuilder sb = new StringBuilder(6);writeHex(sb, value & 0xFFFFL, 4, "0x");return sb.toString();}
public String toString() {switch (state) {case SET:return key;case UNSET:return "-" + key; case UNSPECIFIED:return "!" + key; case CUSTOM:default:return key + "=" + value; }}
public void seek(int index) {lazyInit();p = adjustSeekIndex(index);}
public CreateTransitGatewayPeeringAttachmentResult createTransitGatewayPeeringAttachment(CreateTransitGatewayPeeringAttachmentRequest request) {request = beforeClientExecution(request);return executeCreateTransitGatewayPeeringAttachment(request);}
public static BytesRef deepCopyOf(BytesRef other) {return new BytesRef(ArrayUtil.copyOfSubArray(other.bytes, other.offset, other.offset + other.length), 0, other.length);}
public TokenCollector(int tokenCount) {_ptgs = new Ptg[tokenCount];_offset = 0;}
public static String[] tokenize( String format ) {List<String> result = new ArrayList<>();DateFormatTokenizer tokenizer = new DateFormatTokenizer(format);String token;while( ( token = tokenizer.getNextToken() ) != null ) {result.add(token);}return result.toArray(new String[0]);}
public DescribeNatGatewaysResult describeNatGateways(DescribeNatGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeNatGateways(request);}
public ResetImageAttributeResult resetImageAttribute(ResetImageAttributeRequest request) {request = beforeClientExecution(request);return executeResetImageAttribute(request);}
public void setHorizontalBorder(boolean value){field_1_options = horizontalBorder.setShortBoolean(field_1_options, value);}
public ReplicationGroup modifyReplicationGroup(ModifyReplicationGroupRequest request) {request = beforeClientExecution(request);return executeModifyReplicationGroup(request);}
public boolean containsKey(CharSequence cs) {if(cs == null)throw new NullPointerException();return false;}
public GetIntegrationsResult getIntegrations(GetIntegrationsRequest request) {request = beforeClientExecution(request);return executeGetIntegrations(request);}
public LabelRecord(RecordInputStream in) {field_1_row          = in.readUShort();field_2_column       = in.readShort();field_3_xf_index     = in.readShort();field_4_string_len   = in.readShort();field_5_unicode_flag = in.readByte();if (field_4_string_len > 0) {if (isUnCompressedUnicode()) {field_6_value = in.readUnicodeLEString(field_4_string_len);} else {field_6_value = in.readCompressedUnicode(field_4_string_len);}} else {field_6_value = "";}if (in.remaining() > 0) {logger.log(POILogger.INFO,"LabelRecord data remains: " + in.remaining() +" : " + HexDump.toHex(in.readRemainder()));}}
public SubmoduleAddCommand setProgressMonitor(ProgressMonitor monitor) {this.monitor = monitor;return this;}
public byte readByte() {if (currentBlockUpto == blockSize) {nextBlock();}return currentBlock[currentBlockUpto++];}
public TestAlarmResult testAlarm(TestAlarmRequest request) {request = beforeClientExecution(request);return executeTestAlarm(request);}
public void clear() {HashMap.this.clear();}
public void visitContainedRecords(RecordVisitor rv) {int nRegions = _mergedRegions.size();if (nRegions < 1) {return;}int nFullMergedCellsRecords = nRegions / MAX_MERGED_REGIONS;int nLeftoverMergedRegions = nRegions % MAX_MERGED_REGIONS;CellRangeAddress[] cras = new CellRangeAddress[nRegions];_mergedRegions.toArray(cras);for (int i = 0; i < nFullMergedCellsRecords; i++) {int startIx = i * MAX_MERGED_REGIONS;rv.visitRecord(new MergeCellsRecord(cras, startIx, MAX_MERGED_REGIONS));}if (nLeftoverMergedRegions > 0) {int startIx = nFullMergedCellsRecords * MAX_MERGED_REGIONS;rv.visitRecord(new MergeCellsRecord(cras, startIx, nLeftoverMergedRegions));}}
public CharArrayWriter() {buf = new char[32];lock = buf;}
public SendEmailRequest(String source, Destination destination, Message message) {setSource(source);setDestination(destination);setMessage(message);}
public DescribeReservedNodesResult describeReservedNodes() {return describeReservedNodes(new DescribeReservedNodesRequest());}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PROTECT]\n");buffer.append("    .options = ").append(HexDump.shortToHex(_options)).append("\n");buffer.append("[/PROTECT]\n");return buffer.toString();}
public String getSignerType() {return "PRIVATEKEY";}
public StopProjectVersionResult stopProjectVersion(StopProjectVersionRequest request) {request = beforeClientExecution(request);return executeStopProjectVersion(request);}
public CacheCluster createCacheCluster(CreateCacheClusterRequest request) {request = beforeClientExecution(request);return executeCreateCacheCluster(request);}
public boolean equals(Object _other) {if ((_other instanceof LabelAndValue) == false) {return false;}LabelAndValue other = (LabelAndValue) _other;return label.equals(other.label) && value.equals(other.value);}
public JobFlowInstancesDetail(String masterInstanceType, String slaveInstanceType, Integer instanceCount) {setMasterInstanceType(masterInstanceType);setSlaveInstanceType(slaveInstanceType);setInstanceCount(instanceCount);}
public boolean stem() {r_mark_regions();limit_backward = cursor;cursor = limit;int v_2 = limit - cursor;r_attached_pronoun();cursor = limit - v_2;int v_3 = limit - cursor;lab0: {lab1: {int v_4 = limit - cursor;lab2: {if (!r_standard_suffix()){break lab2;}break lab1;}cursor = limit - v_4;if (!r_verb_suffix()){break lab0;}}}cursor = limit - v_3;int v_5 = limit - cursor;r_residual_suffix();cursor = limit - v_5;cursor = limit_backward;int v_6 = cursor;r_cleaning();cursor = v_6;return true;}
public HSSFPictureData( EscherBlipRecord blip ){this.blip = blip;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PALETTE]\n");buffer.append("  numcolors     = ").append(_colors.size()).append('\n');for (int i = 0; i < _colors.size(); i++) {PColor c = _colors.get(i);buffer.append("* colornum      = ").append(i).append('\n');buffer.append(c);buffer.append("
public String[] list(FilenameFilter filter) {String[] filenames = list();if (filter == null || filenames == null) {return filenames;}List<String> result = new ArrayList<String>(filenames.length);for (String filename : filenames) {if (filter.accept(this, filename)) {result.add(filename);}}return result.toArray(new String[result.size()]);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {String arg;int index;try {arg = evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);index = evaluateIntArg(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}if(index < 0) {return ErrorEval.VALUE_INVALID;}String result;if (_isLeft) {result = arg.substring(0, Math.min(arg.length(), index));} else {result = arg.substring(Math.max(0, arg.length()-index));}return new StringEval(result);}
public void serialize(LittleEndianOutput out) {out.writeShort(sid);out.writeShort(reserved.length);out.write(reserved);}
public HadoopJarStepConfig(String jar) {setJar(jar);}
public CharArrayWriter append(char c) {write(c);return this;}
public GetChannelsResult getChannels(GetChannelsRequest request) {request = beforeClientExecution(request);return executeGetChannels(request);}
public File getParentFile() {String tempParent = getParent();if (tempParent == null) {return null;}return new File(tempParent);}
public URI resolve(String relative) {return resolve(create(relative));}
public static IntervalSet of(int a, int b) {IntervalSet s = new IntervalSet();s.add(a,b);return s;}
public void setCompressionLevel(int level) {compressionLevel = level;}
public void reset() {offset = 0;length = 0;lastTrailingHighSurrogate = 0;}
public AttributeValue(String s) {setS(s);}
public Token(int kind, String image){this.kind = kind;this.image = image;}
public XmlSerializer newSerializer() throws XmlPullParserException {if (serializerClasses == null) {throw new XmlPullParserException("Factory initialization incomplete - has not tried "+classNamesLocation);}if(serializerClasses.size() == 0) {throw new XmlPullParserException("No valid serializer classes found in "+classNamesLocation);}final StringBuilder issues = new StringBuilder ();for (int i = 0; i < serializerClasses.size (); i++) {final Class ppClass = (Class) serializerClasses.get(i);try {final XmlSerializer ser = (XmlSerializer) ppClass.newInstance();return ser;} catch(Exception ex) {issues.append (ppClass.getName () + ": "+ ex.toString ()+"; ");}}throw new XmlPullParserException ("could not create serializer: "+issues);}
public UpdateDomainContactPrivacyResult updateDomainContactPrivacy(UpdateDomainContactPrivacyRequest request) {request = beforeClientExecution(request);return executeUpdateDomainContactPrivacy(request);}
public String toString(String enc) throws UnsupportedEncodingException {return new String(buf, 0, count, enc);}
public DescribeStaleSecurityGroupsResult describeStaleSecurityGroups(DescribeStaleSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeStaleSecurityGroups(request);}
public DisassociateWebsiteCertificateAuthorityResult disassociateWebsiteCertificateAuthority(DisassociateWebsiteCertificateAuthorityRequest request) {request = beforeClientExecution(request);return executeDisassociateWebsiteCertificateAuthority(request);}
public DeleteTransitGatewayVpcAttachmentResult deleteTransitGatewayVpcAttachment(DeleteTransitGatewayVpcAttachmentRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGatewayVpcAttachment(request);}
public ObjectId idFor(TreeFormatter formatter) {return formatter.computeId(this);}
public static boolean startsWith(char s[], int len, String prefix) {final int prefixLen = prefix.length();if (prefixLen > len)return false;for (int i = 0; i < prefixLen; i++)if (s[i] != prefix.charAt(i))return false;return true;}
public UpdateBatchPredictionResult updateBatchPrediction(UpdateBatchPredictionRequest request) {request = beforeClientExecution(request);return executeUpdateBatchPrediction(request);}
public final void remove(RevFlag flag) {flags &= ~flag.mask;}
public void SwitchTo(int lexState){if (lexState >= 2 || lexState < 0)throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);elsecurLexState = lexState;}
public String toString() {StringBuilder sb = new StringBuilder("[ArrayPtg]\n");sb.append("nRows = ").append(getRowCount()).append("\n");sb.append("nCols = ").append(getColumnCount()).append("\n");if (_arrayValues == null) {sb.append("  #values#uninitialised#\n");} else {sb.append("  ").append(toFormulaString());}return sb.toString();}
public ObjectId getHeadId() {return headId;}
public GetAssociatedIpv6PoolCidrsResult getAssociatedIpv6PoolCidrs(GetAssociatedIpv6PoolCidrsRequest request) {request = beforeClientExecution(request);return executeGetAssociatedIpv6PoolCidrs(request);}
public void copyValue(Cell destCell) {switch (_cellType) {case BLANK:   destCell.setBlank();                           return;case NUMERIC: destCell.setCellValue(_numberValue);           return;case BOOLEAN: destCell.setCellValue(_booleanValue);          return;case STRING:  destCell.setCellValue(_stringValue);           return;case ERROR:   destCell.setCellErrorValue((byte)_errorValue); return;default: throw new IllegalStateException("Unexpected data type (" + _cellType + ")");}}
public DescribeLaunchTemplateVersionsResult describeLaunchTemplateVersions(DescribeLaunchTemplateVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeLaunchTemplateVersions(request);}
public static DVConstraint createCustomFormulaConstraint(String formula) {if (formula == null) {throw new IllegalArgumentException("formula must be supplied");}return new DVConstraint(ValidationType.FORMULA, OperatorType.IGNORED, formula, null, null, null, null);}
public DeleteProjectVersionResult deleteProjectVersion(DeleteProjectVersionRequest request) {request = beforeClientExecution(request);return executeDeleteProjectVersion(request);}
public String toStringUnquoted() {return getTermText();}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[RECALCID]\n");buffer.append("    .reserved = ").append(HexDump.shortToHex(_reserved0)).append("\n");buffer.append("    .engineId = ").append(HexDump.intToHex(_engineId)).append("\n");buffer.append("[/RECALCID]\n");return buffer.toString();}
public String toString() {return "RandomAccessInput(" + IndexInput.this.toString() + ")";}
public static int countArg(ValueEval eval, I_MatchPredicate criteriaPredicate) {if (eval == null) {throw new IllegalArgumentException("eval must not be null");}if (eval instanceof ThreeDEval) {return countMatchingCellsInArea((ThreeDEval) eval, criteriaPredicate);}if (eval instanceof TwoDEval) {throw new IllegalArgumentException("Count requires 3D Evals, 2D ones aren't supported");}if (eval instanceof RefEval) {return CountUtils.countMatchingCellsInRef((RefEval) eval, criteriaPredicate);}return criteriaPredicate.matches(eval) ? 1 : 0;}
public void parse(byte[] buf, int ptr, int end) {while (ptr < end)ptr = parseFile(buf, ptr, end);}
public ListQueuesResult listQueues(String queueNamePrefix) {return listQueues(new ListQueuesRequest().withQueueNamePrefix(queueNamePrefix));}
public DescribeVolumeAttributeResult describeVolumeAttribute(DescribeVolumeAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeVolumeAttribute(request);}
public Trie optimize(Trie orig) {List<CharSequence> cmds = orig.cmds;List<Row> rows = new ArrayList<>();List<Row> orows = orig.rows;int remap[] = new int[orows.size()];for (int j = orows.size() - 1; j >= 0; j--) {liftUp(orows.get(j), orows);}Arrays.fill(remap, -1);rows = removeGaps(orig.root, orows, new ArrayList<Row>(), remap);return new Trie(orig.forward, remap[orig.root], cmds, rows);}
public WorkingTreeOptions getOptions() {return state.options;}
public SendInvitationResult sendInvitation(SendInvitationRequest request) {request = beforeClientExecution(request);return executeSendInvitation(request);}
public DeleteAlarmsResult deleteAlarms(DeleteAlarmsRequest request) {request = beforeClientExecution(request);return executeDeleteAlarms(request);}
public static void main(String[] args) throws Exception {FSDirectory dir = null;String inputStr = null;String field = null;if (args.length == 3) {dir = FSDirectory.open(Paths.get(args[0]));field = args[1];inputStr = args[2];} else {usage();System.exit(1);}getTermInfo(dir,new Term(field, inputStr));}
public DBSnapshotAttributesResult modifyDBSnapshotAttribute(ModifyDBSnapshotAttributeRequest request) {request = beforeClientExecution(request);return executeModifyDBSnapshotAttribute(request);}
public static final String readUTF(DataInput in) throws IOException {return decodeUTF(in.readUnsignedShort(), in);}
public synchronized E remove(int index) {@SuppressWarnings("unchecked")E removed = (E) elements[index];removeRange(index, index + 1);return removed;}
public byte[] getElement(int index) {int actualSize = getActualSizeOfElements(getSizeOfElements());byte[] result = IOUtils.safelyAllocate(actualSize, MAX_RECORD_LENGTH);System.arraycopy(getComplexData(), FIXED_SIZE + index * actualSize, result, 0, result.length );return result;}
public String signString(String stringToSign, AlibabaCloudCredentials credentials) {return null;}
public void writeData(final ByteBuffer block) {block.put( serialize() );}
public void setSshSessionFactory(SshSessionFactory factory) {if (factory == null)throw new NullPointerException(JGitText.get().theFactoryMustNotBeNull);if (sock != null)throw new IllegalStateException(JGitText.get().anSSHSessionHasBeenAlreadyCreated);sch = factory;}
public PipedReader(PipedWriter out) throws IOException {connect(out);}
public RawText getSourceContents() {return outCandidate.sourceText;}
public static <T> T[] copyOfRange(T[] original, int start, int end) {int originalLength = original.length; if (start > end) {throw new IllegalArgumentException();}if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);T[] result = (T[]) Array.newInstance(original.getClass().getComponentType(), resultLength);System.arraycopy(original, start, result, 0, copyLength);return result;}
public boolean isPeeled() {return false;}
public ProgressMonitor getProgressMonitor() {return monitor;}
public Content(String data) {setData(data);}
public boolean add(Object o) {return map.put(o, PLACEHOLDER) == null;}
public String getLockMessage() {return lockMessage;}
public E previous() {if (index > from) {return (E) snapshot[--index];} else {throw new NoSuchElementException();}}
public InviteUsersResult inviteUsers(InviteUsersRequest request) {request = beforeClientExecution(request);return executeInviteUsers(request);}
public boolean lessThan(ShardRef first, ShardRef second) {assert first != second;ScoreDoc firstScoreDoc = shardHits[first.shardIndex][first.hitIndex];ScoreDoc secondScoreDoc = shardHits[second.shardIndex][second.hitIndex];if (firstScoreDoc.score < secondScoreDoc.score) {return false;} else if (firstScoreDoc.score > secondScoreDoc.score) {return true;} else {return tieBreakLessThan(first, firstScoreDoc, second, secondScoreDoc, tieBreakerComparator);}}
public ListSubscriptionsRequest(String nextToken) {setNextToken(nextToken);}
public RemoveTagsFromResourceResult removeTagsFromResource(RemoveTagsFromResourceRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromResource(request);}
public ListHostedZonesResult listHostedZones() {return listHostedZones(new ListHostedZonesRequest());}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [");if(isSemiVolatile()) {sb.append("volatile ");}if(isSpace()) {sb.append("space count=").append((_data >> 8) & 0x00FF);sb.append(" type=").append(_data & 0x00FF).append(" ");}if(isOptimizedIf()) {sb.append("if dist=").append(_data);} else if(isOptimizedChoose()) {sb.append("choose nCases=").append(_data);} else if(isSkip()) {sb.append("skip dist=").append(_data);} else if(isSum()) {sb.append("sum ");} else if(isBaxcel()) {sb.append("assign ");}sb.append("]");return sb.toString();}
public static double stdev(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = Math.sqrt( devsq(v) / (v.length - 1) );}return r;}
public GetVoiceConnectorLoggingConfigurationResult getVoiceConnectorLoggingConfiguration(GetVoiceConnectorLoggingConfigurationRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorLoggingConfiguration(request);}
public GetQueueUrlResult getQueueUrl(GetQueueUrlRequest request) {request = beforeClientExecution(request);return executeGetQueueUrl(request);}
public TblPtg(LittleEndianInput in)  {field_1_first_row = in.readUShort();field_2_first_col = in.readUShort();}
public long ramBytesUsed() {long size = 0;for (PackedInts.Reader reader : subReaders) {size += reader.ramBytesUsed();}return size;}
public CreateInternetGatewayResult createInternetGateway(CreateInternetGatewayRequest request) {request = beforeClientExecution(request);return executeCreateInternetGateway(request);}
public void setInputStream(IntStream input) {this._input = null;this._tokenFactorySourcePair = new Pair<TokenSource, CharStream>(this, _input);reset();this._input = (CharStream)input;this._tokenFactorySourcePair = new Pair<TokenSource, CharStream>(this, _input);}
public ExpPtg(int firstRow, int firstCol) {this.field_1_first_row = firstRow;this.field_2_first_col = firstCol;}
public int refCount() {final int rc = refCount.get();assert rc >= 0;return rc;}
public Object[] toArray() {int size = size(), index = 0;Iterator<?> it = iterator();Object[] array = new Object[size];while (index < size) {array[index++] = it.next();}return array;}
public String toString() {return Utils.join(Arrays.asList(opnds).iterator(), "||");}
public boolean anyDeletions() {return deleteQueue.anyChanges();}
public DoubleBuffer asReadOnlyBuffer() {DoubleToByteBufferAdapter buf = new DoubleToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public GetTelemetryMetadataResult getTelemetryMetadata(GetTelemetryMetadataRequest request) {request = beforeClientExecution(request);return executeGetTelemetryMetadata(request);}
public ExternalBookBlock(RecordStream rs) {_externalBookRecord = (SupBookRecord) rs.getNext();List<Object> temp = new ArrayList<>();while (rs.peekNextClass() == ExternalNameRecord.class) {temp.add(rs.getNext());}_externalNameRecords = new ExternalNameRecord[temp.size()];temp.toArray(_externalNameRecords);temp.clear();while (rs.peekNextClass() == CRNCountRecord.class) {temp.add(new CRNBlock(rs));}_crnBlocks = new CRNBlock[temp.size()];temp.toArray(_crnBlocks);}
public StartDeliveryStreamEncryptionResult startDeliveryStreamEncryption(StartDeliveryStreamEncryptionRequest request) {request = beforeClientExecution(request);return executeStartDeliveryStreamEncryption(request);}
public static double getExcelDate(LocalDateTime date, boolean use1904windowing) {int year = date.getYear();int dayOfYear = date.getDayOfYear();int hour = date.getHour();int minute = date.getMinute();int second = date.getSecond();int milliSecond = date.getNano()/1_000_000;return internalGetExcelDate(year, dayOfYear, hour, minute, second, milliSecond, use1904windowing);}
public UpdateFleetAttributesResult updateFleetAttributes(UpdateFleetAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateFleetAttributes(request);}
public Explanation idfExplain(CollectionStatistics collectionStats, TermStatistics termStats) {final long df = termStats.docFreq();final long docCount = collectionStats.docCount();final float idf = idf(df, docCount);return Explanation.match(idf, "idf(docFreq, docCount)",Explanation.match(df, "docFreq, number of documents containing term"),Explanation.match(docCount, "docCount, total number of documents with field"));}
public CreateGroupMembershipResult createGroupMembership(CreateGroupMembershipRequest request) {request = beforeClientExecution(request);return executeCreateGroupMembership(request);}
public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {this.acceptableOverheadRatio = acceptableOverheadRatio;current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);currentMask = mask(current.getBitsPerValue());}
public AddJobFlowStepsResult addJobFlowSteps(AddJobFlowStepsRequest request) {request = beforeClientExecution(request);return executeAddJobFlowSteps(request);}
public RecalcIdRecord() {_reserved0 = 0;_engineId = 0;}
public boolean matches() {matchFound = matchesImpl(address, input, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}
public FieldMaskingSpanQuery(SpanQuery maskedQuery, String maskedField) {this.maskedQuery = Objects.requireNonNull(maskedQuery);this.field = Objects.requireNonNull(maskedField);}
public void print(float fnum) {print(String.valueOf(fnum));}
public int addBSERecord(EscherBSERecord e) {createDrawingGroup();escherBSERecords.add( e );int dgLoc = findFirstRecordLocBySid(DrawingGroupRecord.sid);DrawingGroupRecord drawingGroup = (DrawingGroupRecord) getRecords().get( dgLoc );EscherContainerRecord dggContainer = (EscherContainerRecord) drawingGroup.getEscherRecord( 0 );EscherContainerRecord bstoreContainer;if (dggContainer.getChild( 1 ).getRecordId() == EscherContainerRecord.BSTORE_CONTAINER ){bstoreContainer = (EscherContainerRecord) dggContainer.getChild( 1 );} else {bstoreContainer = new EscherContainerRecord();bstoreContainer.setRecordId( EscherContainerRecord.BSTORE_CONTAINER );List<EscherRecord> childRecords = dggContainer.getChildRecords();childRecords.add(1, bstoreContainer);dggContainer.setChildRecords(childRecords);}bstoreContainer.setOptions( (short) ( (escherBSERecords.size() << 4) | 0xF ) );bstoreContainer.addChildRecord( e );return escherBSERecords.size();}
public CreateLoadBalancerListenersRequest(String loadBalancerName, java.util.List<Listener> listeners) {setLoadBalancerName(loadBalancerName);setListeners(listeners);}
public DeleteDBClusterEndpointResult deleteDBClusterEndpoint(DeleteDBClusterEndpointRequest request) {request = beforeClientExecution(request);return executeDeleteDBClusterEndpoint(request);}
public DescribeIngestionResult describeIngestion(DescribeIngestionRequest request) {request = beforeClientExecution(request);return executeDescribeIngestion(request);}
public PutCompositeAlarmResult putCompositeAlarm(PutCompositeAlarmRequest request) {request = beforeClientExecution(request);return executePutCompositeAlarm(request);}
public Collection<ParseTree> evaluate(ParseTree t) {List<ParseTree> nodes = new ArrayList<ParseTree>();for (Tree c : Trees.getChildren(t)) {if ( c instanceof ParserRuleContext ) {ParserRuleContext ctx = (ParserRuleContext)c;if ( (ctx.getRuleIndex() == ruleIndex && !invert) ||(ctx.getRuleIndex() != ruleIndex && invert) ){nodes.add(ctx);}}}return nodes;}
public CreateKeyPairResult createKeyPair(CreateKeyPairRequest request) {request = beforeClientExecution(request);return executeCreateKeyPair(request);}
public DiffCommand setOldTree(AbstractTreeIterator oldTree) {this.oldTree = oldTree;return this;}
public GetDeploymentConfigResult getDeploymentConfig(GetDeploymentConfigRequest request) {request = beforeClientExecution(request);return executeGetDeploymentConfig(request);}
public static void addNewSheetRecord(List<RecordBase> sheetRecords, RecordBase newRecord) {int index = findSheetInsertPos(sheetRecords, newRecord.getClass());sheetRecords.add(index, newRecord);}
public final void restoreState(State state) {if (state == null)  return;do {AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());if (targetImpl == null) {throw new IllegalArgumentException("State contains AttributeImpl of type " +state.attribute.getClass().getName() + " that is not in in this AttributeSource");}state.attribute.copyTo(targetImpl);state = state.next;} while (state != null);}
public SendVoiceMessageResult sendVoiceMessage(SendVoiceMessageRequest request) {request = beforeClientExecution(request);return executeSendVoiceMessage(request);}
public DescribeLoadBalancersResult describeLoadBalancers() {return describeLoadBalancers(new DescribeLoadBalancersRequest());}
public DisassociateTransitGatewayRouteTableResult disassociateTransitGatewayRouteTable(DisassociateTransitGatewayRouteTableRequest request) {request = beforeClientExecution(request);return executeDisassociateTransitGatewayRouteTable(request);}
public String segString(Directory dir) {StringBuilder b = new StringBuilder();b.append("MergeSpec:\n");final int count = merges.size();for(int i=0;i<count;i++) {b.append("  ").append(1 + i).append(": ").append(merges.get(i).segString());}return b.toString();}
public DetachNetworkInterfaceResult detachNetworkInterface(DetachNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeDetachNetworkInterface(request);}
public ObjectInserter newObjectInserter() {return getObjectDatabase().newInserter();}
public Class<? extends Record> getRecordClass() {return _c.getDeclaringClass();}
public StringBufferInputStream(String str) {if (str == null) {throw new NullPointerException();}buffer = str;count = str.length();}
public DeletedRef3DPtg(LittleEndianInput in)  {field_1_index_extern_sheet = in.readUShort();unused1 = in.readInt();}
public CellRangeAddress get(int index) {checkIndex(index);return _mergedRegions.get(index);}
public boolean removePushRefSpec(RefSpec s) {return push.remove(s);}
public CreateJobResult createJob(CreateJobRequest request) {request = beforeClientExecution(request);return executeCreateJob(request);}
public CreateResourceResult createResource(CreateResourceRequest request) {request = beforeClientExecution(request);return executeCreateResource(request);}
public String log() {return " (TERM = " + TERM + ")" +" (CT = " + CT +")" +" (RV = " + RV +")" +" (R1 = " + R1 +")" +" (R2 = " + R2 +")" ;}
public VerifyDomainIdentityResult verifyDomainIdentity(VerifyDomainIdentityRequest request) {request = beforeClientExecution(request);return executeVerifyDomainIdentity(request);}
public void remove(int index) {checkIndex(index);_mergedRegions.remove(index);}
public static org.apache.poi.hssf.record.Record [] createRecord(RecordInputStream in) {Record record = createSingleRecord(in);if (record instanceof DBCellRecord) {return new Record[] { null, };}if (record instanceof RKRecord) {return new Record[] { convertToNumberRecord((RKRecord) record), };}if (record instanceof MulRKRecord) {return convertRKRecords((MulRKRecord)record);}return new Record[] { record, };}
public DeleteIpGroupResult deleteIpGroup(DeleteIpGroupRequest request) {request = beforeClientExecution(request);return executeDeleteIpGroup(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double d;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);d = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}if (d == 0.0) { return NumberEval.ZERO;}return new NumberEval(-d);}
public String toString() {return "action_"+ruleIndex+":"+actionIndex;}
public StopFleetResult stopFleet(StopFleetRequest request) {request = beforeClientExecution(request);return executeStopFleet(request);}
public String toString() {return("TermStats: term=" + termtext.utf8ToString() + " docFreq=" + docFreq + " totalTermFreq=" + totalTermFreq);}
final public Token getNextToken() {if (token.next != null) token = token.next;else token = token.next = token_source.getNextToken();jj_ntk = -1;jj_gen++;return token;}
public GetLabelDetectionResult getLabelDetection(GetLabelDetectionRequest request) {request = beforeClientExecution(request);return executeGetLabelDetection(request);}
public synchronized IndexCommit getIndexCommit(long gen) {return indexCommits.get(gen);}
public ListMetricsResult listMetrics(ListMetricsRequest request) {request = beforeClientExecution(request);return executeListMetrics(request);}
public void delete() {throw new UnsupportedOperationException("This IndexCommit does not support deletions");}
public ByteBuffer putChar(int index, char value) {checkIndex(index, SizeOf.CHAR);Memory.pokeShort(backingArray, offset + index, (short) value, order);return this;}
public CreateBasePathMappingResult createBasePathMapping(CreateBasePathMappingRequest request) {request = beforeClientExecution(request);return executeCreateBasePathMapping(request);}
public synchronized StringBuffer insert(int index, CharSequence s) {insert0(index, s == null ? "null" : s.toString());return this;}
public DescribeDBInstancesResult describeDBInstances(DescribeDBInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeDBInstances(request);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 2:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1]);case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}
@Override public boolean add(E object) {throw new UnsupportedOperationException();}
public Collection<TrackingRefUpdate> getTrackingRefUpdates() {return Collections.unmodifiableCollection(updates.values());}
public ConfirmProductInstanceRequest(String productCode, String instanceId) {setProductCode(productCode);setInstanceId(instanceId);}
public AnalyzerFactory(List<CharFilterFactory> charFilterFactories,TokenizerFactory tokenizerFactory,List<TokenFilterFactory> tokenFilterFactories) {this.charFilterFactories = charFilterFactories;assert null != tokenizerFactory;this.tokenizerFactory = tokenizerFactory;this.tokenFilterFactories = tokenFilterFactories;}
public DeleteRestApiResult deleteRestApi(DeleteRestApiRequest request) {request = beforeClientExecution(request);return executeDeleteRestApi(request);}
public final ByteBuffer put(byte[] src) {return put(src, 0, src.length);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[PROT4REV]\n");buffer.append("    .options = ").append(HexDump.shortToHex(_options)).append("\n");buffer.append("[/PROT4REV]\n");return buffer.toString();}
public void setTokenSeparator(String tokenSeparator) {this.tokenSeparator = null == tokenSeparator ? "" : tokenSeparator;}
@Override public ListIterator<E> listIterator() {synchronized (mutex) {return list.listIterator();}}
public FileOutputStream(File file) throws FileNotFoundException {this(file, false);}
public SetInstanceHealthResult setInstanceHealth(SetInstanceHealthRequest request) {request = beforeClientExecution(request);return executeSetInstanceHealth(request);}
public boolean isUnderflow() {return this.type == TYPE_UNDERFLOW;}
public PutRecordsResult putRecords(PutRecordsRequest request) {request = beforeClientExecution(request);return executePutRecords(request);}
public synchronized boolean isIndeterminate() {return mIndeterminate;}
public NavigableMap<K, V> headMap(K toExclusive) {return subMap(null, NO_BOUND, toExclusive, EXCLUSIVE);}
public final boolean updateValue(ValueEval value) {if (value == null) {throw new IllegalArgumentException("Did not expect to update to null");}boolean result = !areValuesEqual(_value, value);_value = value;return result;}
public ListTablesResult listTables() {return listTables(new ListTablesRequest());}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length != 1) {return ErrorEval.VALUE_INVALID;}int val;try {val = evaluateArgParity(args[0], ec.getRowIndex(), ec.getColumnIndex());} catch (EvaluationException e) {return e.getErrorEval();}return BoolEval.valueOf(val == _desiredParity);}
public char charAt(int index) {return (char) (buffer[startPtr + index] & 0xff);}
public CFHeaderRecord(CellRangeAddress[] regions, int nRules) {super(regions, nRules);}
public LayoutParams(int width, int height) {super(width, height);}
public String toString() {return "FormatAndBits(format=" + format + " bitsPerValue=" + bitsPerValue + ")";}
final public SrndQuery TopSrndQuery() throws ParseException {SrndQuery q;q = FieldsQuery();jj_consume_token(0);{if (true) return q;}throw new Error("Missing return statement in function");}
public final ObjectId copy() {if (getClass() == ObjectId.class)return (ObjectId) this;return new ObjectId(this);}
public DescribeReservedCacheNodesResult describeReservedCacheNodes() {return describeReservedCacheNodes(new DescribeReservedCacheNodesRequest());}
public StringBuilder append(char[] chars) {append0(chars);return this;}
public final boolean matches(char c) {return start <= c && c <= end;}
public DetachVolumeRequest(String volumeId) {setVolumeId(volumeId);}
public final PersonIdent getCommitterIdent() {final byte[] raw = buffer;final int nameB = RawParseUtils.committer(raw, 0);if (nameB < 0)return null;return RawParseUtils.parsePersonIdent(raw, nameB);}
public SnowballPorterFilterFactory(Map<String,String> args) {super(args);language = get(args, "language", "English");wordFiles = get(args, PROTECTED_TOKENS);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("=");buffer.append(operands[ 1 ]);return buffer.toString();}
public String getType(int script, int ruleStatus) {switch (ruleStatus) {case RuleBasedBreakIterator.WORD_IDEO:return WORD_IDEO;case RuleBasedBreakIterator.WORD_KANA:return script == UScript.HIRAGANA ? WORD_HIRAGANA : WORD_KATAKANA;case RuleBasedBreakIterator.WORD_LETTER:return script == UScript.HANGUL ? WORD_HANGUL : WORD_LETTER;case RuleBasedBreakIterator.WORD_NUMBER:return WORD_NUMBER;case EMOJI_SEQUENCE_STATUS:return WORD_EMOJI;default: return "<OTHER>";}}
public static TopDocs merge(int start, int topN, TopDocs[] shardHits) {return mergeAux(null, start, topN, shardHits, DEFAULT_TIE_BREAKER);}
public EnableDomainTransferLockResult enableDomainTransferLock(EnableDomainTransferLockRequest request) {request = beforeClientExecution(request);return executeEnableDomainTransferLock(request);}
public DeleteConfigurationProfileResult deleteConfigurationProfile(DeleteConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeDeleteConfigurationProfile(request);}
public DescribeExpressionsResult describeExpressions(DescribeExpressionsRequest request) {request = beforeClientExecution(request);return executeDescribeExpressions(request);}
public Ptg[] getResult() {return _ptgs;}
public GetDistributionConfigResult getDistributionConfig(GetDistributionConfigRequest request) {request = beforeClientExecution(request);return executeGetDistributionConfig(request);}
public ShortBuffer get(short[] dst) {return get(dst, 0, dst.length);}
public GetMetricWidgetImageResult getMetricWidgetImage(GetMetricWidgetImageRequest request) {request = beforeClientExecution(request);return executeGetMetricWidgetImage(request);}
public UpdateVoiceConnectorGroupResult updateVoiceConnectorGroup(UpdateVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeUpdateVoiceConnectorGroup(request);}
public void add(SortField sortField) {map.put(sortField.getField(), sortField);}
public Daemon getDaemon() {return daemon;}
public CreateVpcPeeringConnectionResult createVpcPeeringConnection(CreateVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpcPeeringConnection(request);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("*");buffer.append(operands[ 1 ]);return buffer.toString();}
public DescribeExclusionsResult describeExclusions(DescribeExclusionsRequest request) {request = beforeClientExecution(request);return executeDescribeExclusions(request);}
public SearchNetworkProfilesResult searchNetworkProfiles(SearchNetworkProfilesRequest request) {request = beforeClientExecution(request);return executeSearchNetworkProfiles(request);}
public LooseRef peel(ObjectIdRef newLeaf) {throw new UnsupportedOperationException();}
public void println(float f) {println(String.valueOf(f));}
public PurchaseReservedInstancesOfferingRequest(String reservedInstancesOfferingId, Integer instanceCount) {setReservedInstancesOfferingId(reservedInstancesOfferingId);setInstanceCount(instanceCount);}
public Set<String> getUntracked() {return Collections.unmodifiableSet(diff.getUntracked());}
public String getTag() {return tag;}
public void buildFieldConfig(FieldConfig fieldConfig) {DateTools.Resolution dateRes = null;Map<CharSequence, DateTools.Resolution> dateResMap = this.config.get(ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP);if (dateResMap != null) {dateRes = dateResMap.get(fieldConfig.getField());}if (dateRes == null) {dateRes = this.config.get(ConfigurationKeys.DATE_RESOLUTION);}if (dateRes != null) {fieldConfig.set(ConfigurationKeys.DATE_RESOLUTION, dateRes);}}
public String toFormulaString() {return String.valueOf(getValue());}
public Bits getAllGroupHeads() {return matchingGroupHeads;}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ) {listener.beforeRecordSerialize( offset, getRecordId(), this );int pos = offset;LittleEndian.putShort( data, pos, getOptions() );     pos += 2;LittleEndian.putShort( data, pos, getRecordId() );    pos += 2;int remainingBytes =  getRecordSize() - 8;LittleEndian.putInt( data, pos, remainingBytes );          pos += 4;LittleEndian.putInt( data, pos, field_1_color1 );          pos += 4;LittleEndian.putInt( data, pos, field_2_color2 );          pos += 4;LittleEndian.putInt( data, pos, field_3_color3 );          pos += 4;LittleEndian.putInt( data, pos, field_4_color4 );          pos += 4;listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return getRecordSize();}
public boolean add(E object) {return backingMap.put(object, Boolean.TRUE) == null;}
public void setBinaryFileThreshold(int threshold) {this.binaryFileThreshold = threshold;}
public void setParams(String params) {super.setParams(params);pauseMSec = (long) (1000.0*Float.parseFloat(params));}
public PerfTask(PerfRunData runData) {this();this.runData = runData;Config config = runData.getConfig();this.maxDepthLogStart = config.get("task.max.depth.log",0);String logStepAtt = "log.step";String taskLogStepAtt = "log.step." + name;if (config.get(taskLogStepAtt, null) != null) {logStepAtt = taskLogStepAtt;}logStep = config.get(logStepAtt, DEFAULT_LOG_STEP);if (logStep <= 0) {logStep = Integer.MAX_VALUE;}}
public void setMBPerSec(double mbPerSec) {this.mbPerSec = mbPerSec;minPauseCheckBytes = (long) ((MIN_PAUSE_CHECK_MSEC / 1000.0) * mbPerSec * 1024 * 1024);}
public ConfirmSubscriptionRequest(String topicArn, String token, String authenticateOnUnsubscribe) {setTopicArn(topicArn);setToken(token);setAuthenticateOnUnsubscribe(authenticateOnUnsubscribe);}
public String getHostName() {return hostName;}
public StartMonitoringMemberResult startMonitoringMember(StartMonitoringMemberRequest request) {request = beforeClientExecution(request);return executeStartMonitoringMember(request);}
public <T extends EscherProperty> T lookup( int propId ) {return (T)properties.stream().filter(p -> p.getPropertyNumber() == propId).findFirst().orElse(null);}
public boolean isExpectingOldObjectId() {return expectedOldObjectId != null;}
public int compareTo(ScoreTerm other) {if (term.bytesEquals(other.term))return 0; if (this.boost == other.boost)return other.term.compareTo(this.term);elsereturn Float.compare(this.boost, other.boost);}
public LazyAreaEval getColumn(int columnIndex) {if (columnIndex >= getWidth()) {throw new IllegalArgumentException("Invalid columnIndex " + columnIndex+ ".  Allowable range is (0.." + getWidth() + ").");}int absColIx = getFirstColumn() + columnIndex;return new LazyAreaEval(getFirstRow(), absColIx, getLastRow(), absColIx, _evaluator);}
public BytesRef next() throws IOException {if (done) {return null;}boolean success = false;BytesRef result;try {String line;if ((line = in.readLine()) != null) {spare.copyChars(line);result = spare.get();} else {done = true;IOUtils.close(in);result = null;}success = true;} finally {if (!success) {IOUtils.closeWhileHandlingException(in);}}return result;}
public boolean shouldBeRecursive() {return path.shouldBeRecursive();}
public String toString() {return getClass().getSimpleName() + "(compressionMode=" + compressionMode+ ", chunkSize=" + chunkSize + ", blockSize=" + blockSize + ")";}
public ResourcePendingMaintenanceActions applyPendingMaintenanceAction(ApplyPendingMaintenanceActionRequest request) {request = beforeClientExecution(request);return executeApplyPendingMaintenanceAction(request);}
public boolean startsWith(AbbreviatedObjectId abbr) {return abbr.prefixCompare(this) == 0;}
public SerializingRecordVisitor(byte[] data, int startOffset) {_data = data;_startOffset = startOffset;_countBytesWritten = 0;}
public static TreeFilter createFromStrings(Collection<String> paths) {if (paths.isEmpty())throw new IllegalArgumentException(JGitText.get().atLeastOnePathIsRequired);final PathFilter[] p = new PathFilter[paths.size()];int i = 0;for (String s : paths)p[i++] = PathFilter.create(s);return create(p);}
public void serialize(LittleEndianOutput out) {out.writeShort(getDefaultCountry());out.writeShort(getCurrentCountry());}
@Override public boolean equals(Object object) {synchronized (mutex) {return list.equals(object);}}
public CellFormatter(String format) {this(LocaleUtil.getUserLocale(), format);}
public ObjectId getResultTreeId() {return resultTree;}
public DrillDownQuery clone() {return new DrillDownQuery(config, baseQuery, dimQueries, drillDownDims);}
public final ShortBuffer put(short[] src, int srcOffset, int shortCount) {throw new ReadOnlyBufferException();}
public final void writeLong(long val) throws IOException {Memory.pokeLong(scratch, 0, val, ByteOrder.BIG_ENDIAN);write(scratch, 0, SizeOf.LONG);}
public AuthorizeSecurityGroupEgressResult authorizeSecurityGroupEgress(AuthorizeSecurityGroupEgressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupEgress(request);}
public void add(E object) {throw new UnsupportedOperationException();}
public static String getPOSTranslation(String s) {return posTranslations.get(s);}
public AnalyticsTagPredicate(Tag tag) {this.tag = tag;}
public String toInfoString(Parser recognizer) {List<String> rules = recognizer.getRuleInvocationStack(this);Collections.reverse(rules);return "ParserRuleContext"+rules+"{" +"start=" + start +", stop=" + stop +'}';}
public CharBuffer put(int index, char c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public CreateComponentResult createComponent(CreateComponentRequest request) {request = beforeClientExecution(request);return executeCreateComponent(request);}
public RuleWithSuffixExceptions(String suffix, int min, String replacement,String[] exceptions) {super(suffix, min, replacement);for (int i = 0; i < exceptions.length; i++) {if (!exceptions[i].endsWith(suffix))throw new RuntimeException("warning: useless exception '" + exceptions[i] + "' does not end with '" + suffix + "'");}this.exceptions = new char[exceptions.length][];for (int i = 0; i < exceptions.length; i++)this.exceptions[i] = exceptions[i].toCharArray();}
public DescribeVpnGatewaysResult describeVpnGateways(DescribeVpnGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeVpnGateways(request);}
public HSSFClientAnchor(EscherClientAnchorRecord escherClientAnchorRecord) {this._escherClientAnchor = escherClientAnchorRecord;}
public void stopNow() {stopNow = true;}
public String toString() {return "FooterKey[" + name + "]";}
public GetRelationalDatabasesResult getRelationalDatabases(GetRelationalDatabasesRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabases(request);}
public int compareTo(Revision o) {IndexRevision other = (IndexRevision) o;return commit.compareTo(other.commit);}
public PredPrediction(SemanticContext pred, int alt) {this.alt = alt;this.pred = pred;}
public ListMeetingTagsResult listMeetingTags(ListMeetingTagsRequest request) {request = beforeClientExecution(request);return executeListMeetingTags(request);}
public TokenStream create(TokenStream input) {return new NorwegianMinimalStemFilter(input, flags);}
public ImportInstanceResult importInstance(ImportInstanceRequest request) {request = beforeClientExecution(request);return executeImportInstance(request);}
public void setCodePage(CodepageRecord codepage) {this.codepage = codepage;}
@Override public Collection<V> values() {Collection<V> vs = values;return (vs != null) ? vs : (values = new Values());}
public UpdateRulesOfIpGroupResult updateRulesOfIpGroup(UpdateRulesOfIpGroupRequest request) {request = beforeClientExecution(request);return executeUpdateRulesOfIpGroup(request);}
public String toString() {return "OneOrMoreOutputs(" + outputs + ")";}
public static TreeFilter create(TreeFilter a, TreeFilter b) {if (a == ALL || b == ALL)return ALL;return new Binary(a, b);}
public UntagQueueResult untagQueue(UntagQueueRequest request) {request = beforeClientExecution(request);return executeUntagQueue(request);}
public final double getDouble(int index) {return Double.longBitsToDouble(getLong(index));}
public V next() {return entryIterator.next().getValue();}
public IntervalSet(int... els) {if ( els==null ) {intervals = new ArrayList<Interval>(2); }else {intervals = new ArrayList<Interval>(els.length);for (int e : els) add(e);}}
public void dumpDeadEndConfigs(NoViableAltException nvae) {System.err.println("dead end configs: ");for (ATNConfig c : nvae.getDeadEndConfigs()) {String trans = "no edges";if ( c.state.getNumberOfTransitions()>0 ) {Transition t = c.state.transition(0);if ( t instanceof AtomTransition) {AtomTransition at = (AtomTransition)t;trans = "Atom "+getTokenName(at.label);}else if ( t instanceof SetTransition ) {SetTransition st = (SetTransition)t;boolean not = st instanceof NotSetTransition;trans = (not?"~":"")+"Set "+st.set.toString();}}System.err.println(c.toString(parser, true)+":"+trans);}}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[SUPBOOK ");if(isExternalReferences()) {sb.append("External References]\n");sb.append(" .url     = ").append(getURL()).append("\n");sb.append(" .nSheets = ").append(field_1_number_of_sheets).append("\n");for (String sheetname : field_3_sheet_names) {sb.append("    .name = ").append(sheetname).append("\n");}sb.append("[/SUPBOOK");} else if(_isAddInFunctions) {sb.append("Add-In Functions");} else {sb.append("Internal References");sb.append(" nSheets=").append(field_1_number_of_sheets);}sb.append("]");return sb.toString();}
public String toString() {StringBuilder sb = new StringBuilder(256);sb.append("[ftLbsData]\n");sb.append("    .unknownShort1 =").append(HexDump.shortToHex(_cbFContinued)).append("\n");sb.append("    .formula        = ").append('\n');if(_linkPtg != null) {sb.append(_linkPtg).append(_linkPtg.getRVAType()).append('\n');}sb.append("    .nEntryCount   =").append(HexDump.shortToHex(_cLines)).append("\n");sb.append("    .selEntryIx    =").append(HexDump.shortToHex(_iSel)).append("\n");sb.append("    .style         =").append(HexDump.shortToHex(_flags)).append("\n");sb.append("    .unknownShort10=").append(HexDump.shortToHex(_idEdit)).append("\n");if(_dropData != null) {sb.append('\n').append(_dropData);}sb.append("[/ftLbsData]\n");return sb.toString();}
public static QualityStats average(QualityStats[] stats) {QualityStats avg = new QualityStats(0,0);if (stats.length==0) {return avg;}int m = 0; for (int i=0; i<stats.length; i++) {avg.searchTime += stats[i].searchTime;avg.docNamesExtractTime += stats[i].docNamesExtractTime;if (stats[i].maxGoodPoints>0) {m++;avg.numGoodPoints += stats[i].numGoodPoints;avg.numPoints += stats[i].numPoints;avg.pReleventSum += stats[i].getAvp();avg.recall += stats[i].recall;avg.mrr += stats[i].getMRR();avg.maxGoodPoints += stats[i].maxGoodPoints;for (int j=1; j<avg.pAt.length; j++) {avg.pAt[j] += stats[i].getPrecisionAt(j);}}}assert m>0 : "Fishy: no \"good\" queries!";avg.searchTime /= stats.length;avg.docNamesExtractTime /= stats.length;avg.numGoodPoints /= m;avg.numPoints /= m;avg.recall /= m;avg.mrr /= m;avg.maxGoodPoints /= m;for (int j=1; j<avg.pAt.length; j++) {avg.pAt[j] /= m;}avg.pReleventSum /= m;                 avg.pReleventSum *= avg.maxGoodPoints; return avg;}
public String getUser() {return Host.this.getUser();}
public int[] clear() {boost = null;termState = null;return super.clear();}
public DescribeApplicationSnapshotResult describeApplicationSnapshot(DescribeApplicationSnapshotRequest request) {request = beforeClientExecution(request);return executeDescribeApplicationSnapshot(request);}
public FormatAndBits(Format format, int bitsPerValue) {this.format = format;this.bitsPerValue = bitsPerValue;}
public HSSFName getNameAt(int nameIndex) {int nNames = names.size();if (nNames < 1) {throw new IllegalStateException("There are no defined names in this workbook");}if (nameIndex < 0 || nameIndex > nNames) {throw new IllegalArgumentException("Specified name index " + nameIndex+ " is outside the allowable range (0.." + (nNames-1) + ").");}return names.get(nameIndex);}
public void fromString(String str) {if (str.length() != Constants.OBJECT_ID_STRING_LENGTH)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidId, str));fromHexString(Constants.encodeASCII(str), 0);}
public DescribeTableRestoreStatusResult describeTableRestoreStatus(DescribeTableRestoreStatusRequest request) {request = beforeClientExecution(request);return executeDescribeTableRestoreStatus(request);}
public Edit(int as, int ae, int bs, int be) {beginA = as;endA = ae;beginB = bs;endB = be;}
public UpdateDomainEndpointOptionsResult updateDomainEndpointOptions(UpdateDomainEndpointOptionsRequest request) {request = beforeClientExecution(request);return executeUpdateDomainEndpointOptions(request);}
@Override public boolean contains(Object o) {return Impl.this.containsKey(o);}
public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex,Lexer lexer){ParseTreePatternMatcher m = new ParseTreePatternMatcher(lexer, this);return m.compile(pattern, patternRuleIndex);}
public MalformedInputException(int length) {this.inputLength = length;}
public void reset() {upto = 0;in.reset();}
public String toString() {return name;}
public DeletePhotoStoreRequest() {super("CloudPhoto", "2017-07-11", "DeletePhotoStore", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public GlobalCluster createGlobalCluster(CreateGlobalClusterRequest request) {request = beforeClientExecution(request);return executeCreateGlobalCluster(request);}
public SimpleImmutableEntry(K theKey, V theValue) {key = theKey;value = theValue;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SeriesToChartGroup]\n");buffer.append("    .chartGroupIndex      = ").append("0x").append(HexDump.toHex(  getChartGroupIndex ())).append(" (").append( getChartGroupIndex() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/SeriesToChartGroup]\n");return buffer.toString();}
public String toString() {return "FAST_" + path.toString(); }
public OpenNLPLemmatizerFilterFactory(Map<String,String> args) {super(args);dictionaryFile = get(args, DICTIONARY);lemmatizerModelFile = get(args, LEMMATIZER_MODEL);if (dictionaryFile == null && lemmatizerModelFile == null) {throw new IllegalArgumentException("Configuration Error: missing parameter: at least one of '"+ DICTIONARY + "' and '" + LEMMATIZER_MODEL + "' must be provided.");}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public Long contentLength() {return this.contentLength;}
public void addError(FormatError err) {errors.add(err);}
public UpdateUserResult updateUser(UpdateUserRequest request) {request = beforeClientExecution(request);return executeUpdateUser(request);}
public DeletePartnerEventSourceResult deletePartnerEventSource(DeletePartnerEventSourceRequest request) {request = beforeClientExecution(request);return executeDeletePartnerEventSource(request);}
public WorkflowExecutionInfos listClosedWorkflowExecutions(ListClosedWorkflowExecutionsRequest request) {request = beforeClientExecution(request);return executeListClosedWorkflowExecutions(request);}
public HSSFFontFormatting createFontFormatting() {return getFontFormatting(true);}
public SimpleFragmenter(int fragmentSize) {this.fragmentSize = fragmentSize;}
public DeleteEmailIdentityResult deleteEmailIdentity(DeleteEmailIdentityRequest request) {request = beforeClientExecution(request);return executeDeleteEmailIdentity(request);}
public ListScriptsResult listScripts(ListScriptsRequest request) {request = beforeClientExecution(request);return executeListScripts(request);}
public SnowballFilter(TokenStream input, SnowballStemmer stemmer) {super(input);this.stemmer = stemmer;}
public DeleteFlowLogsResult deleteFlowLogs(DeleteFlowLogsRequest request) {request = beforeClientExecution(request);return executeDeleteFlowLogs(request);}
public CreateIdentityPoolResult createIdentityPool(CreateIdentityPoolRequest request) {request = beforeClientExecution(request);return executeCreateIdentityPool(request);}
public String distanceSubQueryNotAllowed() {Iterator<?> sqi = getSubQueriesIterator();while (sqi.hasNext()) {Object leq = sqi.next();if (leq instanceof DistanceSubQuery) {DistanceSubQuery dsq = (DistanceSubQuery) leq;String m = dsq.distanceSubQueryNotAllowed();if (m != null) {return m;}} else {return "Operator " + getOperatorName() + " does not allow subquery " + leq.toString();}}return null; }
public static String getNodeText(Tree t, List<String> ruleNames) {if ( ruleNames!=null ) {if ( t instanceof RuleContext ) {int ruleIndex = ((RuleContext)t).getRuleContext().getRuleIndex();String ruleName = ruleNames.get(ruleIndex);int altNumber = ((RuleContext) t).getAltNumber();if ( altNumber!=ATN.INVALID_ALT_NUMBER ) {return ruleName+":"+altNumber;}return ruleName;}else if ( t instanceof ErrorNode) {return t.toString();}else if ( t instanceof TerminalNode) {Token symbol = ((TerminalNode)t).getSymbol();if (symbol != null) {String s = symbol.getText();return s;}}}Object payload = t.getPayload();if ( payload instanceof Token ) {return ((Token)payload).getText();}return t.getPayload().toString();}
public int last() {if (sentenceStarts.length > 0) {currentSentence = sentenceStarts.length - 1;text.setIndex(text.getEndIndex());} else { currentSentence = 0;text.setIndex(text.getBeginIndex());}return current();}
public HSSFRichTextString createRichTextString(String text) {return new HSSFRichTextString(text);}
public PushbackReader(Reader in) {super(in);buf = new char[1];pos = 1;}
public List<ParseTree> getAll(String label) {List<ParseTree> nodes = labels.get(label);if ( nodes==null ) {return Collections.emptyList();}return nodes;}
public InternalWorkbook getStubWorkbook() {return createStubWorkbook(getExternSheetRecords(), getBoundSheetRecords(),getSSTRecord());}
public ReactivatePhotosRequest() {super("CloudPhoto", "2017-07-11", "ReactivatePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DecisionTask pollForDecisionTask(PollForDecisionTaskRequest request) {request = beforeClientExecution(request);return executePollForDecisionTask(request);}
public void write(LittleEndianOutput out) {out.writeByte(getSid() + getPtgClass());writeCoordinates(out);}
public Ref getTarget() {return target;}
public CreateTagsResult createTags(CreateTagsRequest request) {request = beforeClientExecution(request);return executeCreateTags(request);}
public UpdateUserPhoneConfigResult updateUserPhoneConfig(UpdateUserPhoneConfigRequest request) {request = beforeClientExecution(request);return executeUpdateUserPhoneConfig(request);}
public PersonIdent getSourceAuthor(int idx) {return sourceAuthors[idx];}
public void setLength(long sz) {setLength((int) sz);}
public GetServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}
public CreateStreamingDistributionWithTagsResult createStreamingDistributionWithTags(CreateStreamingDistributionWithTagsRequest request) {request = beforeClientExecution(request);return executeCreateStreamingDistributionWithTags(request);}
public DescribeNotificationSubscriptionsResult describeNotificationSubscriptions(DescribeNotificationSubscriptionsRequest request) {request = beforeClientExecution(request);return executeDescribeNotificationSubscriptions(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CHARTFRTINFO]\n");buffer.append("    .rt           =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt     =").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .verOriginator=").append(HexDump.byteToHex(verOriginator)).append('\n');buffer.append("    .verWriter    =").append(HexDump.byteToHex(verOriginator)).append('\n');buffer.append("    .nCFRTIDs     =").append(HexDump.shortToHex(rgCFRTID.length)).append('\n');buffer.append("[/CHARTFRTINFO]\n");return buffer.toString();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double result;if (arg0 instanceof RefEval) {result = CountUtils.countMatchingCellsInRef((RefEval) arg0, predicate);} else if (arg0 instanceof ThreeDEval) {result = CountUtils.countMatchingCellsInArea((ThreeDEval) arg0, predicate);} else {throw new IllegalArgumentException("Bad range arg type (" + arg0.getClass().getName() + ")");}return new NumberEval(result);}
public UpdateRestApiResult updateRestApi(UpdateRestApiRequest request) {request = beforeClientExecution(request);return executeUpdateRestApi(request);}
public int size() {return ConcurrentHashMap.this.size();}
public EscherSimpleProperty( short propertyNumber, boolean isComplex, boolean isBlipId, int propertyValue ) {super( propertyNumber, isComplex, isBlipId );this.propertyValue = propertyValue;}
public static boolean isEndOfRowBlock(int sid) {switch(sid) {case ViewDefinitionRecord.sid:case DrawingRecord.sid:case DrawingSelectionRecord.sid:case ObjRecord.sid:case TextObjectRecord.sid:case ColumnInfoRecord.sid: case GutsRecord.sid:   case WindowOneRecord.sid:case WindowTwoRecord.sid:return true;case DVALRecord.sid:return true;case EOFRecord.sid:throw new RuntimeException("Found EOFRecord before WindowTwoRecord was encountered");}return PageSettingsBlock.isComponentRecord(sid);}
public RegistrantProfileRealNameVerificationRequest() {super("Domain-intl", "2017-12-18", "RegistrantProfileRealNameVerification", "domain");setMethod(MethodType.POST);}
public CreateProfileResult createProfile(CreateProfileRequest request) {request = beforeClientExecution(request);return executeCreateProfile(request);}
public ObjectId idFor(int type, byte[] data, int off, int len) {SHA1 md = SHA1.newInstance();md.update(Constants.encodedTypeString(type));md.update((byte) ' ');md.update(Constants.encodeASCII(len));md.update((byte) 0);md.update(data, off, len);return md.toObjectId();}
public EndSubRecord clone() {return copy();}
public SearchRepoRequest() {super("cr", "2016-06-07", "SearchRepo", "cr");setUriPattern("/search");setMethod(MethodType.GET);}
public InputIterator getEntryIterator() {try {return new FileIterator();} catch (IOException e) {throw new RuntimeException(e);}}
public final long get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}
public void setThumbOffset(int thumbOffset) {mThumbOffset = thumbOffset;invalidate();}
public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = BytesRef.deepCopyOf(target);seekPending = true;}}
public GetFilterResult getFilter(GetFilterRequest request) {request = beforeClientExecution(request);return executeGetFilter(request);}
public static FontDetails create( String fontName, Properties fontMetricsProps ){String heightStr = fontMetricsProps.getProperty( buildFontHeightProperty(fontName) );String widthsStr = fontMetricsProps.getProperty( buildFontWidthsProperty(fontName) );String charactersStr = fontMetricsProps.getProperty( buildFontCharactersProperty(fontName) );if(heightStr == null || widthsStr == null || charactersStr == null) {throw new IllegalArgumentException("The supplied FontMetrics doesn't know about the font '" + fontName + "', so we can't use it. Please add it to your font metrics file (see StaticFontMetrics.getFontDetails");}int height = Integer.parseInt(heightStr);FontDetails d = new FontDetails(fontName, height);String[] charactersStrArray = split(charactersStr, ",", -1);String[] widthsStrArray = split(widthsStr, ",", -1);if (charactersStrArray.length != widthsStrArray.length)throw new RuntimeException("Number of characters does not number of widths for font " + fontName);for ( int i = 0; i < widthsStrArray.length; i++ ){if (charactersStrArray[i].length() != 0)d.addChar(charactersStrArray[i].charAt(0), Integer.parseInt(widthsStrArray[i]));}return d;}
public static void registerFunction(String name, Function func){FunctionMetadata metaData = FunctionMetadataRegistry.getFunctionByName(name);if(metaData == null) {if(AnalysisToolPak.isATPFunction(name)) {throw new IllegalArgumentException(name + " is a function from the Excel Analysis Toolpack. " +"Use AnalysisToolpack.registerFunction(String name, FreeRefFunction func) instead.");}throw new IllegalArgumentException("Unknown function: " + name);}int idx = metaData.getIndex();if(functions[idx] instanceof NotImplementedFunction) {functions[idx] = func;} else {throw new IllegalArgumentException("POI already implememts " + name +". You cannot override POI's implementations of Excel functions");}}
public SortedSetDocValuesField(String name, BytesRef bytes) {super(name, TYPE);fieldsData = bytes;}
public static TreeFilter create(TreeFilter[] list) {if (list.length == 2)return create(list[0], list[1]);if (list.length < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final TreeFilter[] subfilters = new TreeFilter[list.length];System.arraycopy(list, 0, subfilters, 0, list.length);return new List(subfilters);}
public V get(Object key) {if (key == null) {HashMapEntry<K, V> e = entryForNullKey;return e == null ? null : e.value;}int hash = key.hashCode();hash ^= (hash >>> 20) ^ (hash >>> 12);hash ^= (hash >>> 7) ^ (hash >>> 4);HashMapEntry<K, V>[] tab = table;for (HashMapEntry<K, V> e = tab[hash & (tab.length - 1)];e != null; e = e.next) {K eKey = e.key;if (eKey == key || (e.hash == hash && key.equals(eKey))) {return e.value;}}return null;}
public boolean hasSourceData(int idx) {return sourceLines[idx] != 0;}
public CreateBotResult createBot(CreateBotRequest request) {request = beforeClientExecution(request);return executeCreateBot(request);}
public UpdateMethodResponseResult updateMethodResponse(UpdateMethodResponseRequest request) {request = beforeClientExecution(request);return executeUpdateMethodResponse(request);}
public boolean add(char[] text) {return map.put(text, PLACEHOLDER) == null;}
public String toString(Vocabulary vocabulary) {if (s0 == null) {return "";}DFASerializer serializer = new DFASerializer(this, vocabulary);return serializer.toString();}
public CreateApiKeyResult createApiKey(CreateApiKeyRequest request) {request = beforeClientExecution(request);return executeCreateApiKey(request);}
public DetachTypedLinkResult detachTypedLink(DetachTypedLinkRequest request) {request = beforeClientExecution(request);return executeDetachTypedLink(request);}
public ExternSheetRecord[] getExternSheetRecords() {return externSheetRecords.toArray(new ExternSheetRecord[0]);}
public DescribeNetworkInterfaceAttributeResult describeNetworkInterfaceAttribute(DescribeNetworkInterfaceAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfaceAttribute(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[TABID]\n");buffer.append("    .elements        = ").append(_tabids.length).append("\n");for (int i = 0; i < _tabids.length; i++) {buffer.append("    .element_").append(i).append(" = ").append(_tabids[i]).append("\n");}buffer.append("[/TABID]\n");return buffer.toString();}
public long ramBytesUsed() {long ramBytesUsed = BASE_RAM_BYTES_USED;ramBytesUsed += (postingsReader!=null) ? postingsReader.ramBytesUsed() : 0;ramBytesUsed += (indexReader!=null) ? indexReader.ramBytesUsed() : 0;ramBytesUsed += fields.size() * 2L * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for (FieldReader reader : fields.values()) {ramBytesUsed += reader.ramBytesUsed();}return ramBytesUsed;}
public ByteBuffer put(ByteBuffer buf) {throw new ReadOnlyBufferException();}
public RecognizePetRequest() {super("visionai-poc", "2020-04-08", "RecognizePet");setMethod(MethodType.POST);}
public ImportRestApiResult importRestApi(ImportRestApiRequest request) {request = beforeClientExecution(request);return executeImportRestApi(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_anchorId);out.writeShort(field_2_link1);out.writeShort(field_3_link2);}
public DescribeSnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute) {setSnapshotId(snapshotId);setAttribute(attribute.toString());}
public Token recoverInline(Parser recognizer)throws RecognitionException{Token matchedSymbol = singleTokenDeletion(recognizer);if ( matchedSymbol!=null ) {recognizer.consume();return matchedSymbol;}if ( singleTokenInsertion(recognizer) ) {return getMissingSymbol(recognizer);}InputMismatchException e;if (nextTokensContext == null) {e = new InputMismatchException(recognizer);} else {e = new InputMismatchException(recognizer, nextTokensState, nextTokensContext);}throw e;}
public MultiCategoryListsFacetsExample() {config.setIndexFieldName("Author", "author");config.setIndexFieldName("Publish Date", "pubdate");config.setHierarchical("Publish Date", true);}
public GetAddressBookResult getAddressBook(GetAddressBookRequest request) {request = beforeClientExecution(request);return executeGetAddressBook(request);}
public PatternFormatting() {field_15_pattern_style = 0;field_16_pattern_color_indexes = 0;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg1, ValueEval arg2) {try {Double number1 = evaluateValue(arg1, srcRowIndex, srcColumnIndex);if (number1 == null) {return ErrorEval.VALUE_INVALID;}Double number2 = evaluateValue(arg2, srcRowIndex, srcColumnIndex);if (number2 == null) {return ErrorEval.VALUE_INVALID;}return (number1.compareTo(number2) == 0) ? ONE : ZERO;} catch (EvaluationException e) {return e.getErrorEval();}}
public final double getDouble() {return Double.longBitsToDouble(getLong());}
public Principal(String provider, String id, boolean stripHyphen) {this.provider = provider;this.id = stripHyphen ?id.replace("-", "") : id;}
public ListJobsResult listJobs() {return listJobs(new ListJobsRequest());}
public CharBuffer slice() {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());CharBuffer result = new CharToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public static final int tagMessage(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 48; while (ptr < sz && b[ptr] != '\n')ptr = nextLF(b, ptr);if (ptr < sz && b[ptr] == '\n')return ptr + 1;return -1;}
public RebootBrokerResult rebootBroker(RebootBrokerRequest request) {request = beforeClientExecution(request);return executeRebootBroker(request);}
public int getLastInternalSheetIndexForExtIndex(int extRefIndex) {if (extRefIndex >= _externSheetRecord.getNumOfRefs() || extRefIndex < 0) {return -1;}return _externSheetRecord.getLastSheetIndexFromRefIndex(extRefIndex);}
public RemoveTagsFromOnPremisesInstancesResult removeTagsFromOnPremisesInstances(RemoveTagsFromOnPremisesInstancesRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromOnPremisesInstances(request);}
public static final int nextLF(byte[] b, int ptr) {return next(b, ptr, '\n');}
public boolean equals(Object other) {return sameClassAs(other) &&equalsTo(getClass().cast(other));}
public void setResult(ReceiveCommand.Result status) {result = decode(status);super.setResult(status);}
public UpdateIAMPolicyAssignmentResult updateIAMPolicyAssignment(UpdateIAMPolicyAssignmentRequest request) {request = beforeClientExecution(request);return executeUpdateIAMPolicyAssignment(request);}
public ExportImageResult exportImage(ExportImageRequest request) {request = beforeClientExecution(request);return executeExportImage(request);}
public ListTopicsDetectionJobsResult listTopicsDetectionJobs(ListTopicsDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListTopicsDetectionJobs(request);}
public static IntBuffer wrap(int[] array, int start, int intCount) {Arrays.checkOffsetAndCount(array.length, start, intCount);IntBuffer buf = new ReadWriteIntArrayBuffer(array);buf.position = start;buf.limit = start + intCount;return buf;}
public ListDeploymentTargetsResult listDeploymentTargets(ListDeploymentTargetsRequest request) {request = beforeClientExecution(request);return executeListDeploymentTargets(request);}
public HSSFTextbox createTextbox(HSSFChildAnchor anchor) {HSSFTextbox shape = new HSSFTextbox(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public CreateStreamProcessorResult createStreamProcessor(CreateStreamProcessorRequest request) {request = beforeClientExecution(request);return executeCreateStreamProcessor(request);}
public boolean matches(char s[], int len) {return (len - suffix.length >= min && endsWith(s, len, suffix));}
public void setFontStyle(boolean italic, boolean bold){boolean modified = italic || bold;fontFormatting.setItalic(italic);fontFormatting.setBold(bold);fontFormatting.setFontStyleModified(modified);fontFormatting.setFontWieghtModified(modified);}
public void writeShort(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeShort(value);}
public CreateEntityRecognizerResult createEntityRecognizer(CreateEntityRecognizerRequest request) {request = beforeClientExecution(request);return executeCreateEntityRecognizer(request);}
public DescribeContributorInsightsResult describeContributorInsights(DescribeContributorInsightsRequest request) {request = beforeClientExecution(request);return executeDescribeContributorInsights(request);}
public CreateLaunchConfigurationResult createLaunchConfiguration(CreateLaunchConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateLaunchConfiguration(request);}
public int read() throws IOException {checkReadPrimitiveTypes();return primitiveData.read();}
public TokenStream create(TokenStream input) {return new LimitTokenCountFilter(input, maxTokenCount, consumeAllTokens);}
public CharBuffer asReadOnlyBuffer() {return duplicate();}
public GetConsoleScreenshotResult getConsoleScreenshot(GetConsoleScreenshotRequest request) {request = beforeClientExecution(request);return executeGetConsoleScreenshot(request);}
public DrawingRecordForBiffViewer(DrawingRecord r){super(convertToInputStream(r));convertRawBytesToEscherRecords();}
public boolean hasPrevious() {return pos >= 0;}
public NotImplemented(String functionName) {_functionName = functionName;}
public UpdateDirectoryConfigResult updateDirectoryConfig(UpdateDirectoryConfigRequest request) {request = beforeClientExecution(request);return executeUpdateDirectoryConfig(request);}
public DeleteQualificationTypeResult deleteQualificationType(DeleteQualificationTypeRequest request) {request = beforeClientExecution(request);return executeDeleteQualificationType(request);}
@Override public void clear() {throw new UnsupportedOperationException();}
public int startNewSlice() {return offset = pool.newSlice(FIRST_LEVEL_SIZE) + pool.intOffset;}
public void postInvalidate() {if (!mNoInvalidate) {super.postInvalidate();}}
public List<FacetEntry> getFacetEntries(int offset, int limit) {List<FacetEntry> entries = new LinkedList<>();int skipped = 0;int included = 0;for (FacetEntry facetEntry : facetEntries) {if (skipped < offset) {skipped++;continue;}if (included++ >= limit) {break;}entries.add(facetEntry);}return entries;}
public static synchronized CoderResult unmappableForLength(int length)throws IllegalArgumentException {if (length > 0) {Integer key = Integer.valueOf(length);synchronized (_unmappableErrors) {CoderResult r = _unmappableErrors.get(key);if (r == null) {r = new CoderResult(TYPE_UNMAPPABLE_CHAR, length);_unmappableErrors.put(key, r);}return r;}}throw new IllegalArgumentException("Length must be greater than 0; was " + length);}
public UpdateDetectorVersionStatusResult updateDetectorVersionStatus(UpdateDetectorVersionStatusRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersionStatus(request);}
public void remove() {iterator.remove();subList.sizeChanged(false);end--;}
public void setRef(Character way, int ref) {Cell c = at(way);if (c == null) {c = new Cell();c.ref = ref;cells.put(way, c);} else {c.ref = ref;}}
public QueryNodeProcessorPipeline(QueryConfigHandler queryConfigHandler) {this.queryConfig = queryConfigHandler;}
public IllegalFormatPrecisionException(int p) {this.p = p;}
@Override public final boolean equals(Object o) {if (!(o instanceof Entry)) {return false;}Entry<?, ?> e = (Entry<?, ?>) o;return Objects.equal(e.getKey(), key)&& Objects.equal(e.getValue(), value);}
public ObjectId getOldObjectId() {return oldValue;}
public AuthorizeIpRulesResult authorizeIpRules(AuthorizeIpRulesRequest request) {request = beforeClientExecution(request);return executeAuthorizeIpRules(request);}
public GetPrivateAccessUrlsRequest() {super("CloudPhoto", "2017-07-11", "GetPrivateAccessUrls", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean remove(Object o) {int oldSize = size;HashMap.this.remove(o);return size != oldSize;}
@Override public int size() {return filteredEntrySet.size();}
public PutConfigurationSetTrackingOptionsResult putConfigurationSetTrackingOptions(PutConfigurationSetTrackingOptionsRequest request) {request = beforeClientExecution(request);return executePutConfigurationSetTrackingOptions(request);}
public static final ObjectId fromString(byte[] buf, int offset) {return fromHexString(buf, offset);}
public GetRelationalDatabaseResult getRelationalDatabase(GetRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabase(request);}
public JschSession(Session session, URIish uri) {sock = session;this.uri = uri;}
public SetCognitoEventsResult setCognitoEvents(SetCognitoEventsRequest request) {request = beforeClientExecution(request);return executeSetCognitoEvents(request);}
public BatchDetectEntitiesResult batchDetectEntities(BatchDetectEntitiesRequest request) {request = beforeClientExecution(request);return executeBatchDetectEntities(request);}
public synchronized int codePointCount(int beginIndex, int endIndex) {return super.codePointCount(beginIndex, endIndex);}
public GenerateClientCertificateResult generateClientCertificate(GenerateClientCertificateRequest request) {request = beforeClientExecution(request);return executeGenerateClientCertificate(request);}
public final void writeDouble(double val) throws IOException {writeLong(Double.doubleToLongBits(val));}
public static void fill(int[] array, int start, int end, int value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public final char yycharat(int pos) {return zzBuffer[zzStartRead+pos];}
public void pushMode(int m) {if ( LexerATNSimulator.debug ) System.out.println("pushMode "+m);_modeStack.push(_mode);mode(m);}
public Set<String> getCapabilities() {return command.getCapabilities();}
public DescribeReservedInstancesListingsResult describeReservedInstancesListings() {return describeReservedInstancesListings(new DescribeReservedInstancesListingsRequest());}
public RegisterInstanceEventNotificationAttributesResult registerInstanceEventNotificationAttributes(RegisterInstanceEventNotificationAttributesRequest request) {request = beforeClientExecution(request);return executeRegisterInstanceEventNotificationAttributes(request);}
public PutRuleResult putRule(PutRuleRequest request) {request = beforeClientExecution(request);return executePutRule(request);}
public static char[] grow(char[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Character.BYTES));} elsereturn array;}
public CleanCommand setPaths(Set<String> paths) {this.paths = paths;return this;}
public int getLevelForDistance(double dist) {if (dist == 0)return maxLevels;final int level = GeohashUtils.lookupHashLenForWidthHeight(dist, dist);return Math.max(Math.min(level, maxLevels), 1);}
public StartDocumentTextDetectionResult startDocumentTextDetection(StartDocumentTextDetectionRequest request) {request = beforeClientExecution(request);return executeStartDocumentTextDetection(request);}
public String getLine() {return firstWant.getLine();}
public ValueEval getItem(int index) {if(index > _size) {throw new ArrayIndexOutOfBoundsException("Specified index (" + index+ ") is outside the allowed range (0.." + (_size-1) + ")");}return _tableArray.getValue(_rowIndex, index);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[IFMT]\n");buffer.append("    .formatIndex          = ").append("0x").append(HexDump.toHex(  getFormatIndex ())).append(" (").append( getFormatIndex() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/IFMT]\n");return buffer.toString();}
public SubmoduleSyncCommand(Repository repo) {super(repo);paths = new ArrayList<>();}
public void registerWorkflowType(RegisterWorkflowTypeRequest request) {request = beforeClientExecution(request);executeRegisterWorkflowType(request);}
public UnescapedCharSequence(char[] chars, boolean[] wasEscaped, int offset,int length) {this.chars = new char[length];this.wasEscaped = new boolean[length];System.arraycopy(chars, offset, this.chars, 0, length);System.arraycopy(wasEscaped, offset, this.wasEscaped, 0, length);}
public CreateDatasetGroupResult createDatasetGroup(CreateDatasetGroupRequest request) {request = beforeClientExecution(request);return executeCreateDatasetGroup(request);}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;FieldVals other = (FieldVals) obj;if (fieldName == null) {if (other.fieldName != null)return false;} else if (!fieldName.equals(other.fieldName))return false;if (maxEdits != other.maxEdits) {return false;}if (prefixLength != other.prefixLength)return false;if (queryString == null) {if (other.queryString != null)return false;} else if (!queryString.equals(other.queryString))return false;return true;}
public BuildSuggestersResult buildSuggesters(BuildSuggestersRequest request) {request = beforeClientExecution(request);return executeBuildSuggesters(request);}
public GetRelationalDatabaseBundlesResult getRelationalDatabaseBundles(GetRelationalDatabaseBundlesRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseBundles(request);}
public String getMessages() {return messageBuffer != null ? messageBuffer.toString() : ""; }
public DelimitedPayloadTokenFilter(TokenStream input, char delimiter, PayloadEncoder encoder) {super(input);this.delimiter = delimiter;this.encoder = encoder;}
public void setPrintArea(int sheetIndex, int startColumn, int endColumn,int startRow, int endRow) {CellReference cell = new CellReference(startRow, startColumn, true, true);String reference = cell.formatAsString();cell = new CellReference(endRow, endColumn, true, true);reference = reference+":"+cell.formatAsString();setPrintArea(sheetIndex, reference);}
public void normalise64bit() {int oldBitLen = _significand.bitLength();int sc = oldBitLen - C_64;if (sc == 0) {return;}if (sc < 0) {throw new IllegalStateException("Not enough precision");}_binaryExponent += sc;if (sc > 32) {int highShift = (sc-1) & 0xFFFFE0;_significand = _significand.shiftRight(highShift);sc -= highShift;oldBitLen -= highShift;}if (sc < 1) {throw new IllegalStateException();}_significand = Rounder.round(_significand, sc);if (_significand.bitLength() > oldBitLen) {sc++;_binaryExponent++;}_significand = _significand.shiftRight(sc);}
public ObjRecord(RecordInputStream in) {byte[] subRecordData = in.readRemainder();if (LittleEndian.getUShort(subRecordData, 0) != CommonObjectDataSubRecord.sid) {_uninterpretedData = subRecordData;return;}LittleEndianByteArrayInputStream subRecStream = new LittleEndianByteArrayInputStream(subRecordData);CommonObjectDataSubRecord cmo = (CommonObjectDataSubRecord)SubRecord.createSubRecord(subRecStream, 0);subrecords.add(cmo);while (true) {SubRecord subRecord = SubRecord.createSubRecord(subRecStream, cmo.getObjectType());subrecords.add(subRecord);if (subRecord.isTerminating()) {break;}}final int nRemainingBytes = subRecordData.length-subRecStream.getReadIndex();if (nRemainingBytes > 0) {_isPaddedToQuadByteMultiple = subRecordData.length % MAX_PAD_ALIGNMENT == 0;if (nRemainingBytes >= (_isPaddedToQuadByteMultiple ? MAX_PAD_ALIGNMENT : NORMAL_PAD_ALIGNMENT)) {if (!canPaddingBeDiscarded(subRecordData, nRemainingBytes)) {String msg = "Leftover " + nRemainingBytes+ " bytes in subrecord data " + HexDump.toHex(subRecordData);throw new RecordFormatException(msg);}_isPaddedToQuadByteMultiple = false;}} else {_isPaddedToQuadByteMultiple = false;}_uninterpretedData = null;}
public FrenchLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
@Override public int size() {Slice slice = this.slice;return slice.to - slice.from;}
public boolean equals(Object other) {if (!(other instanceof IntBuffer)) {return false;}IntBuffer otherBuffer = (IntBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}
public static void fill(char[] array, int start, int end, char value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[CALCMODE]\n");buffer.append("    .calcmode       = ").append(Integer.toHexString(getCalcMode())).append("\n");buffer.append("[/CALCMODE]\n");return buffer.toString();}
public void setCurrent(String value){current = value.toCharArray();cursor = 0;limit = value.length();limit_backward = 0;bra = cursor;ket = limit;}
public ShortBuffer put(int index, short c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public EventSubscription deleteEventSubscription(DeleteEventSubscriptionRequest request) {request = beforeClientExecution(request);return executeDeleteEventSubscription(request);}
public void setTokenType(String tokenType) {this.tokenType = tokenType;}
public NumericDocValuesField(String name, long value) {this(name, Long.valueOf(value));}
public AddTagsRequest(String resourceId) {setResourceId(resourceId);}
public ValueEval getRefEval(int rowIndex, int columnIndex) {SheetRangeEvaluator sre = getRefEvaluatorForCurrentSheet();return new LazyRefEval(rowIndex, columnIndex, sre);}
public DescribeTaskDefinitionResult describeTaskDefinition(DescribeTaskDefinitionRequest request) {request = beforeClientExecution(request);return executeDescribeTaskDefinition(request);}
public void sort() {if (count > 1) ArrayUtil.timSort(points, 0, count);}
public static final RevFilter before(long ts) {return new Before(ts);}
public void set(E object) {throw new UnsupportedOperationException();}
public EscherDggRecord getDgg() {return dgg;}
public ListenerHandle addConfigChangedListener(ConfigChangedListener listener) {return addListener(ConfigChangedListener.class, listener);}
public DetectSentimentResult detectSentiment(DetectSentimentRequest request) {request = beforeClientExecution(request);return executeDetectSentiment(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 6) & 3;values[valuesOffset++] = (block >>> 4) & 3;values[valuesOffset++] = (block >>> 2) & 3;values[valuesOffset++] = block & 3;}}
public HeaderRecord clone() {return copy();}
public CreateEndpointConfigResult createEndpointConfig(CreateEndpointConfigRequest request) {request = beforeClientExecution(request);return executeCreateEndpointConfig(request);}
public Interpolator getInterpolator() {return mInterpolator;}
public GetSolutionMetricsResult getSolutionMetrics(GetSolutionMetricsRequest request) {request = beforeClientExecution(request);return executeGetSolutionMetrics(request);}
public StopActivityStreamResult stopActivityStream(StopActivityStreamRequest request) {request = beforeClientExecution(request);return executeStopActivityStream(request);}
public ListTypedLinkFacetAttributesResult listTypedLinkFacetAttributes(ListTypedLinkFacetAttributesRequest request) {request = beforeClientExecution(request);return executeListTypedLinkFacetAttributes(request);}
public ListSentimentDetectionJobsResult listSentimentDetectionJobs(ListSentimentDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListSentimentDetectionJobs(request);}
public GetAccountSendingEnabledResult getAccountSendingEnabled(GetAccountSendingEnabledRequest request) {request = beforeClientExecution(request);return executeGetAccountSendingEnabled(request);}
public static int getBuiltinFormat(String pFmt) {String fmt = "TEXT".equalsIgnoreCase(pFmt) ? "@" : pFmt;int i = -1;for (String f : _formats) {i++;if (f.equals(fmt)) {return i;}}return -1;}
public void simpleValue(StringBuffer toAppendTo, Object value) {formatValue(toAppendTo, value);}
public BatchCheckLayerAvailabilityResult batchCheckLayerAvailability(BatchCheckLayerAvailabilityRequest request) {request = beforeClientExecution(request);return executeBatchCheckLayerAvailability(request);}
public void clearSubRecords() {subrecords.clear();}
public List<Ref> call() throws GitAPIException {checkCallable();List<Ref> tags = new ArrayList<>();try (RevWalk revWalk = new RevWalk(repo)) {List<Ref> refList = repo.getRefDatabase().getRefsByPrefix(Constants.R_TAGS);for (Ref ref : refList) {tags.add(ref);}} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}Collections.sort(tags,(Ref o1, Ref o2) -> o1.getName().compareTo(o2.getName()));setCallable(false);return tags;}
public synchronized void clear() {cache.clear();}
public int indexOf(E object, int from) {Object[] snapshot = elements;return indexOf(object, snapshot, from, snapshot.length);}
public String highlightTerm(String originalText, TokenGroup tokenGroup) {if (tokenGroup.getTotalScore() == 0)return originalText;float score = tokenGroup.getTotalScore();if (score == 0) {return originalText;}StringBuilder sb = new StringBuilder(originalText.length() + EXTRA);sb.append("<span style=\"");if (highlightForeground) {sb.append("color: ");sb.append(getForegroundColorString(score));sb.append("; ");}if (highlightBackground) {sb.append("background: ");sb.append(getBackgroundColorString(score));sb.append("; ");}sb.append("\">");sb.append(originalText);sb.append("</span>");return sb.toString();}
public PasswordRecord getPasswordRecord() {return _passwordRecord;}
public SlicedIndexInput clone() {SlicedIndexInput clone = (SlicedIndexInput)super.clone();clone.base = base.clone();clone.fileOffset = fileOffset;clone.length = length;return clone;}
public int getSourceLine(int idx) {return sourceLines[idx] - 1;}
public DeleteResolverRuleResult deleteResolverRule(DeleteResolverRuleRequest request) {request = beforeClientExecution(request);return executeDeleteResolverRule(request);}
static public double ppmt(double r, int per, int nper, double pv, double fv, int type) {return pmt(r, nper, pv, fv, type) - ipmt(r, per, nper, pv, fv, type);}
@Override public Set<K> keySet() {return navigableKeySet();}
public boolean stem() {if (!r_more_than_one_syllable_word()){return false;}limit_backward = cursor;cursor = limit;int v_1 = limit - cursor;r_stem_nominal_verb_suffixes();cursor = limit - v_1;if (!(B_continue_stemming_noun_suffixes)){return false;}int v_2 = limit - cursor;r_stem_noun_suffixes();cursor = limit - v_2;cursor = limit_backward;if (!r_postlude()){return false;}return true;}
public ListShardsResult listShards(ListShardsRequest request) {request = beforeClientExecution(request);return executeListShards(request);}
public SearcherAndTaxonomy(IndexSearcher searcher, DirectoryTaxonomyReader taxonomyReader) {this.searcher = searcher;this.taxonomyReader = taxonomyReader;}
public TreeFilter clone() {return this;}
public void set(int index, long value) {final int o = index / 6;final int b = index % 6;final int shift = b * 10;blocks[o] = (blocks[o] & ~(1023L << shift)) | (value << shift);}
public boolean add(String text) {return map.put(text, PLACEHOLDER) == null;}
public Position get(int pos) {while(pos >= nextPos) {if (count == positions.length) {Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);for(int i=positions.length;i<newPositions.length;i++) {newPositions[i] = new Position();}nextWrite = positions.length;positions = newPositions;}if (nextWrite == positions.length) {nextWrite = 0;}assert positions[nextWrite].count == 0;positions[nextWrite++].pos = nextPos++;count++;}assert inBounds(pos);final int index = getIndex(pos);assert positions[index].pos == pos;return positions[index];}
public synchronized void reset() {pos = 0;}
public void configure(FacetsConfig config) {for(int i=0;i<maxDims;i++) {config.setHierarchical(Integer.toString(i), true);config.setMultiValued(Integer.toString(i), true);}}
public boolean equals(Object obj) {if (obj == null)return false;if (obj == this)return true;if (obj.getClass() != getClass())return false;HSSFClientAnchor anchor = (HSSFClientAnchor) obj;return anchor.getCol1() == getCol1() && anchor.getCol2() == getCol2() && anchor.getDx1() == getDx1()&& anchor.getDx2() == getDx2() && anchor.getDy1() == getDy1() && anchor.getDy2() == getDy2()&& anchor.getRow1() == getRow1() && anchor.getRow2() == getRow2() && anchor.getAnchorType() == getAnchorType();}
public Set<String> getMissing() {return Collections.unmodifiableSet(diff.getMissing());}
public static IndexWriterConfig createWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) {IndexWriterConfig iwConf = new IndexWriterConfig(runData.getAnalyzer());iwConf.setOpenMode(mode);IndexDeletionPolicy indexDeletionPolicy = getIndexDeletionPolicy(config);iwConf.setIndexDeletionPolicy(indexDeletionPolicy);if (commit != null) {iwConf.setIndexCommit(commit);}final String mergeScheduler = config.get("merge.scheduler","org.apache.lucene.index.ConcurrentMergeScheduler");if (mergeScheduler.equals(NoMergeScheduler.class.getName())) {iwConf.setMergeScheduler(NoMergeScheduler.INSTANCE);} else {try {iwConf.setMergeScheduler(Class.forName(mergeScheduler).asSubclass(MergeScheduler.class).getConstructor().newInstance());} catch (Exception e) {
public GetCapacityReservationUsageResult getCapacityReservationUsage(GetCapacityReservationUsageRequest request) {request = beforeClientExecution(request);return executeGetCapacityReservationUsage(request);}
public void addRule(HSSFConditionalFormattingRule cfRule) {cfAggregate.addRule(cfRule.getCfRuleRecord());}
public DocState(boolean reuseFields, FieldType ft, FieldType bodyFt) {this.reuseFields = reuseFields;if (reuseFields) {fields =  new HashMap<>();numericFields = new HashMap<>();fields.put(BODY_FIELD, new Field(BODY_FIELD, "", bodyFt));fields.put(TITLE_FIELD, new Field(TITLE_FIELD, "", ft));fields.put(DATE_FIELD, new Field(DATE_FIELD, "", ft));fields.put(ID_FIELD, new StringField(ID_FIELD, "", Field.Store.YES));fields.put(NAME_FIELD, new Field(NAME_FIELD, "", ft));numericFields.put(DATE_MSEC_FIELD, new LongPoint(DATE_MSEC_FIELD, 0L));numericFields.put(TIME_SEC_FIELD, new IntPoint(TIME_SEC_FIELD, 0));doc = new Document();} else {numericFields = null;fields = null;doc = null;}}
public char[] getValue() {return value;}
public void updateNameCommentRecordCache(final NameCommentRecord commentRecord) {if(commentRecords.containsValue(commentRecord)) {for(Entry<String,NameCommentRecord> entry : commentRecords.entrySet()) {if(entry.getValue().equals(commentRecord)) {commentRecords.remove(entry.getKey());break;}}}commentRecords.put(commentRecord.getNameText(), commentRecord);}
public CompleteMultipartUploadRequest(String vaultName, String uploadId, String archiveSize, String checksum) {setVaultName(vaultName);setUploadId(uploadId);setArchiveSize(archiveSize);setChecksum(checksum);}
public Query getQuery(Element n) throws ParserException {QueryBuilder builder = builders.get(n.getNodeName());if (builder == null) {throw new ParserException("No QueryObjectBuilder defined for node " + n.getNodeName());}return builder.getQuery(n);}
public static double nper(double r, double y, double p, double f, boolean t) {double retval = 0;if (r == 0) {retval = -1 * (f + p) / y;} else {double r1 = r + 1;double ryr = (t ? r1 : 1) * y / r;double a1 = ((ryr - f) < 0)? Math.log(f - ryr): Math.log(ryr - f);double a2 = ((ryr - f) < 0)? Math.log(-p - ryr): Math.log(p + ryr);double a3 = Math.log(r1);retval = (a1 - a2) / a3;}return retval;}
public AndQueryNode(List<QueryNode> clauses) {super(clauses);if ((clauses == null) || (clauses.size() == 0)) {throw new IllegalArgumentException("AND query must have at least one clause");}}
public SeriesListRecord(short[] seriesNumbers) {field_1_seriesNumbers = (seriesNumbers == null) ? null : seriesNumbers.clone();}
public String toString() {return value + ", " + begin + ", " + end;}
public String toString() {return "<StandardQueryParser config=\"" + this.getQueryConfigHandler()+ "\"/>";}
public DescribeActivitiesResult describeActivities(DescribeActivitiesRequest request) {request = beforeClientExecution(request);return executeDescribeActivities(request);}
public int writeTokenValueBytes(LittleEndianOutput out) {out.writeByte(_nColumns-1);out.writeShort(_nRows-1);ConstantValueParser.encode(out, _arrayValues);return 3 + ConstantValueParser.getEncodedSize(_arrayValues);}
public DescribeFleetMetadataResult describeFleetMetadata(DescribeFleetMetadataRequest request) {request = beforeClientExecution(request);return executeDescribeFleetMetadata(request);}
public GlobalCluster modifyGlobalCluster(ModifyGlobalClusterRequest request) {request = beforeClientExecution(request);return executeModifyGlobalCluster(request);}
public DescribeIdentityIdFormatResult describeIdentityIdFormat(DescribeIdentityIdFormatRequest request) {request = beforeClientExecution(request);return executeDescribeIdentityIdFormat(request);}
public ListUserGroupsResult listUserGroups(ListUserGroupsRequest request) {request = beforeClientExecution(request);return executeListUserGroups(request);}
public RevertCommand include(String name, AnyObjectId commit) {return include(new ObjectIdRef.Unpeeled(Storage.LOOSE, name,commit.copy()));}
public BeiderMorseFilter(TokenStream input, PhoneticEngine engine, LanguageSet languages) {super(input);this.engine = engine;this.languages = languages;}
public ListUsersResult listUsers(ListUsersRequest request) {request = beforeClientExecution(request);return executeListUsers(request);}
public PutUserPolicyRequest(String userName, String policyName, String policyDocument) {setUserName(userName);setPolicyName(policyName);setPolicyDocument(policyDocument);}
public synchronized void trimToSize() {super.trimToSize();}
public void serialize(LittleEndianOutput out) {out.writeShort(getWindowing());}
public AreaValueArray(TwoDEval ae) {super(ae.getWidth() * ae.getHeight());_ae = ae;_width = ae.getWidth();}
public RegisterOnPremisesInstanceResult registerOnPremisesInstance(RegisterOnPremisesInstanceRequest request) {request = beforeClientExecution(request);return executeRegisterOnPremisesInstance(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[DATALABEXT]\n");buffer.append("    .rt      =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt=").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .unused  =").append(HexDump.toHex(unused)).append('\n');buffer.append("[/DATALABEXT]\n");return buffer.toString();}
public LsRemoteCommand lsRemote() {return new LsRemoteCommand(repo);}
public boolean isMerged() {return getStage() == STAGE_0;}
public StopEntitiesDetectionJobResult stopEntitiesDetectionJob(StopEntitiesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopEntitiesDetectionJob(request);}
public final int arrayOffset() {return protectedArrayOffset();}
public SetVaultNotificationsRequest(String accountId, String vaultName, VaultNotificationConfig vaultNotificationConfig) {setAccountId(accountId);setVaultName(vaultName);setVaultNotificationConfig(vaultNotificationConfig);}
public int addConditionalFormatting( ConditionalFormatting cf ) {return addConditionalFormatting((HSSFConditionalFormatting)cf);}
public MemAreaPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();field_2_subex_len = in.readShort();}
public DescribeScalingActivitiesResult describeScalingActivities() {return describeScalingActivities(new DescribeScalingActivitiesRequest());}
public StopApplicationResult stopApplication(StopApplicationRequest request) {request = beforeClientExecution(request);return executeStopApplication(request);}
public void seekExact(long ord) throws IOException {throw new UnsupportedOperationException();}
public DescribeLocalGatewayRouteTableVpcAssociationsResult describeLocalGatewayRouteTableVpcAssociations(DescribeLocalGatewayRouteTableVpcAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayRouteTableVpcAssociations(request);}
public ErrorEval getErrorEval() {return _errorEval;}
public DeleteNetworkInterfaceResult deleteNetworkInterface(DeleteNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkInterface(request);}
public Group(String path, String groupName, String groupId, String arn, java.util.Date createDate) {setPath(path);setGroupName(groupName);setGroupId(groupId);setArn(arn);setCreateDate(createDate);}
public void removeName(int nameIndex){if (linkTable.getNumNames() > nameIndex) {int idx = findFirstRecordLocBySid(NameRecord.sid);records.remove(idx + nameIndex);linkTable.removeName(nameIndex);}}
public BaseFragListBuilder( int margin ){if( margin < 0 )throw new IllegalArgumentException( "margin(" + margin + ") is too small. It must be 0 or higher." );this.margin = margin;this.minFragCharSize = Math.max( 1, margin * MIN_FRAG_CHAR_SIZE_FACTOR );}
public Reader create(Reader input) {return new PatternReplaceCharFilter(pattern, replacement, input);}
@Override public Iterator<K> iterator() {final Iterator<Entry<K, V>> iterator = delegate.entrySet().iterator();return new Iterator<K>() {Entry<K, V> entry;
public CreatePushTemplateResult createPushTemplate(CreatePushTemplateRequest request) {request = beforeClientExecution(request);return executeCreatePushTemplate(request);}
public void removeEditTime() {remove1stProperty(PropertyIDMap.PID_EDITTIME);}
public ListReusableDelegationSetsResult listReusableDelegationSets() {return listReusableDelegationSets(new ListReusableDelegationSetsRequest());}
public boolean equals(Object obj) {if (obj == this) {return true;}if (obj instanceof AttributeSource) {AttributeSource other = (AttributeSource) obj;if (hasAttributes()) {if (!other.hasAttributes()) {return false;}if (this.attributeImpls.size() != other.attributeImpls.size()) {return false;}State thisState = this.getCurrentState();State otherState = other.getCurrentState();while (thisState != null && otherState != null) {if (otherState.attribute.getClass() != thisState.attribute.getClass() || !otherState.attribute.equals(thisState.attribute)) {return false;}thisState = thisState.next;otherState = otherState.next;}return true;} else {return !other.hasAttributes();}} elsereturn false;}
public static String toText(double value) {return rawDoubleBitsToText(Double.doubleToLongBits(value));}
public void notifySetFormula(Cell cell) {_bookEvaluator.notifyUpdateCell(new HSSFEvaluationCell((HSSFCell)cell));}
public Ref getRef() {return ref;}
public String toString() {StringBuilder sb = new StringBuilder();for (Block b : blocks) {sb.append(b.chars, 0, b.length);}return sb.toString();}
public QueryNodeError(Message message) {super(message.getKey());this.message = message;}
public GetRelationalDatabaseMasterUserPasswordResult getRelationalDatabaseMasterUserPassword(GetRelationalDatabaseMasterUserPasswordRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseMasterUserPassword(request);}
public LuceneDictionary(IndexReader reader, String field) {this.reader = reader;this.field = field;}
public CreateRuleResult createRule(CreateRuleRequest request) {request = beforeClientExecution(request);return executeCreateRule(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(errorCheck);}
public DescribeAlarmHistoryResult describeAlarmHistory() {return describeAlarmHistory(new DescribeAlarmHistoryRequest());}
public DescribeVpcClassicLinkDnsSupportResult describeVpcClassicLinkDnsSupport(DescribeVpcClassicLinkDnsSupportRequest request) {request = beforeClientExecution(request);return executeDescribeVpcClassicLinkDnsSupport(request);}
public static char toLowerCase(char c) {return c <= 'Z' ? LC[c] : c;}
public String[] split(CharSequence input) {return split(input, 0);}
public synchronized void  execute() throws Exception {if (executed) {throw new IllegalStateException("Benchmark was already executed");}executed = true;runData.setStartTimeMillis();algorithm.execute();}
public final V get() {return value;}
public VCenterRecord clone() {return copy();}
public void publish(Revision revision) throws IOException {throw new UnsupportedOperationException("this replicator implementation does not support remote publishing of revisions");}
public boolean shouldBeRecursive() {return a.shouldBeRecursive() || b.shouldBeRecursive();}
public boolean equals(Object obj) {if (!(obj instanceof URIish))return false;final URIish b = (URIish) obj;if (!eq(getScheme(), b.getScheme()))return false;if (!eq(getUser(), b.getUser()))return false;if (!eq(getPass(), b.getPass()))return false;if (!eq(getHost(), b.getHost()))return false;if (getPort() != b.getPort())return false;if (!eq(getPath(), b.getPath()))return false;return true;}
public TokenStream create(TokenStream input) {return new LowerCaseFilter(input);}
public String toString() {return "IndexRevision version=" + version + " files=" + sourceFiles;}
public static double coerceValueToDouble(ValueEval ev) throws EvaluationException {if (ev == BlankEval.instance) {return 0.0;}if (ev instanceof NumericValueEval) {return ((NumericValueEval)ev).getNumberValue();}if (ev instanceof StringEval) {String sval = ((StringEval) ev).getStringValue();Double dd = parseDouble(sval);if(dd == null) dd = parseDateTime(sval);if (dd == null) {throw EvaluationException.invalidValue();}return dd.doubleValue();}throw new RuntimeException("Unexpected arg eval type (" + ev.getClass().getName() + ")");}
public SetQueueAttributesResult setQueueAttributes(SetQueueAttributesRequest request) {request = beforeClientExecution(request);return executeSetQueueAttributes(request);}
public E getLast() {Link<E> last = voidLink.previous;if (last != voidLink) {return last.data;}throw new NoSuchElementException();}
public boolean contains(Object o) {return ConcurrentHashMap.this.containsKey(o);}
public CreateLoadBalancerListenersResult createLoadBalancerListeners(CreateLoadBalancerListenersRequest request) {request = beforeClientExecution(request);return executeCreateLoadBalancerListeners(request);}
public RebootWorkspacesResult rebootWorkspaces(RebootWorkspacesRequest request) {request = beforeClientExecution(request);return executeRebootWorkspaces(request);}
@Override public final boolean equals(Object o) {if (!(o instanceof Entry)) {return false;}Entry<?, ?> e = (Entry<?, ?>) o;return key.equals(e.getKey()) && value.equals(e.getValue());}
public DeleteCustomerGatewayRequest(String customerGatewayId) {setCustomerGatewayId(customerGatewayId);}
public String toString() {return getFileMode() + " " + getLength() + " "+ getLastModifiedInstant()+ " " + getObjectId() + " " + getStage() + " "+ getPathString() + "\n";}
public StartDocumentAnalysisResult startDocumentAnalysis(StartDocumentAnalysisRequest request) {request = beforeClientExecution(request);return executeStartDocumentAnalysis(request);}
public UpdatePhoneNumberSettingsResult updatePhoneNumberSettings(UpdatePhoneNumberSettingsRequest request) {request = beforeClientExecution(request);return executeUpdatePhoneNumberSettings(request);}
public BatchStopUpdateActionResult batchStopUpdateAction(BatchStopUpdateActionRequest request) {request = beforeClientExecution(request);return executeBatchStopUpdateAction(request);}
public void setText(final char array[], int start, int length) {this.array = array;this.start = start;this.index = start;this.length = length;this.limit = start + length;}
public CreateHyperParameterTuningJobResult createHyperParameterTuningJob(CreateHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeCreateHyperParameterTuningJob(request);}
public TermsEnumIndex(TermsEnum termsEnum, int subIndex) {this.termsEnum = termsEnum;this.subIndex = subIndex;}
public UnarchiveFindingsResult unarchiveFindings(UnarchiveFindingsRequest request) {request = beforeClientExecution(request);return executeUnarchiveFindings(request);}
public void setSort(SortField field) {this.fields = new SortField[] { field };}
public CreateBusinessReportScheduleResult createBusinessReportSchedule(CreateBusinessReportScheduleRequest request) {request = beforeClientExecution(request);return executeCreateBusinessReportSchedule(request);}
public GetIPSetResult getIPSet(GetIPSetRequest request) {request = beforeClientExecution(request);return executeGetIPSet(request);}
public int serialize( int offset, byte[] data,EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, getPropertiesSize() );int pos = offset + 8;for ( EscherProperty property : properties ){pos += property.serializeSimplePart( data, pos );}for ( EscherProperty property : properties ){pos += property.serializeComplexPart( data, pos );}listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public ListTagsForVaultResult listTagsForVault(ListTagsForVaultRequest request) {request = beforeClientExecution(request);return executeListTagsForVault(request);}
public long getDeltaCacheSize() {return deltaCacheSize;}
public final int remaining() {return limit - position;}
public DescribeReservedInstancesResult describeReservedInstances(DescribeReservedInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstances(request);}
public PostRealTimeDeviceDataRequest() {super("industry-brain", "2018-07-12", "PostRealTimeDeviceData");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ScandinavianFoldingFilter(TokenStream input) {super(input);}
public SetLoadBalancerPoliciesForBackendServerResult setLoadBalancerPoliciesForBackendServer(SetLoadBalancerPoliciesForBackendServerRequest request) {request = beforeClientExecution(request);return executeSetLoadBalancerPoliciesForBackendServer(request);}
public ImportSnapshotResult importSnapshot(ImportSnapshotRequest request) {request = beforeClientExecution(request);return executeImportSnapshot(request);}
public void addCellRangeAddress(CellRangeAddress cra) {_list.add(cra);}
public IntBuffer put(int[] src, int srcOffset, int intCount) {byteBuffer.limit(limit * SizeOf.INT);byteBuffer.position(position * SizeOf.INT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, intCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, intCount);}this.position += intCount;return this;}
public DeleteInsightRulesResult deleteInsightRules(DeleteInsightRulesRequest request) {request = beforeClientExecution(request);return executeDeleteInsightRules(request);}
public void setStorageId(int storageId) {field_5_stream_id = storageId;}
public StartVpcEndpointServicePrivateDnsVerificationResult startVpcEndpointServicePrivateDnsVerification(StartVpcEndpointServicePrivateDnsVerificationRequest request) {request = beforeClientExecution(request);return executeStartVpcEndpointServicePrivateDnsVerification(request);}
public SSTRecord() {field_1_num_strings = 0;field_2_num_unique_strings = 0;field_3_strings = new IntMapper<>();deserializer = new SSTDeserializer(field_3_strings);}
public void clearData() {points.clear();}
public void visitContainedRecords(RecordVisitor rv) {PositionTrackingVisitor stv = new PositionTrackingVisitor(rv, 0);final int blockCount = getRowBlockCount();for (int blockIndex = 0; blockIndex < blockCount; blockIndex++) {int pos=0;final int rowBlockSize = visitRowRecordsForBlock(blockIndex, rv);pos += rowBlockSize;final int startRowNumber = getStartRowNumberForBlock(blockIndex);final int endRowNumber = getEndRowNumberForBlock(blockIndex);final List<Short> cellOffsets = new ArrayList<>();int cellRefOffset = (rowBlockSize - RowRecord.ENCODED_SIZE);for (int row = startRowNumber; row <= endRowNumber; row++) {if (_valuesAgg.rowHasCells(row)) {stv.setPosition(0);_valuesAgg.visitCellsForRow(row, stv);int rowCellSize = stv.getPosition();pos += rowCellSize;cellOffsets.add((short)cellRefOffset);cellRefOffset = rowCellSize;}}rv.visitRecord(new DBCellRecord(pos, shortListToArray(cellOffsets)));}_unknownRecords.forEach(rv::visitRecord);}
public ListDatasetsResult listDatasets(ListDatasetsRequest request) {request = beforeClientExecution(request);return executeListDatasets(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {return evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}
public int size() {return a.length;}
public HSSFCell getCell(int cellnum) {return getCell(cellnum, book.getMissingCellPolicy());}
public String toFormulaString(FormulaRenderingWorkbook book) {return ExternSheetNameResolver.prependSheetName(book, field_1_index_extern_sheet, FormulaError.REF.getString());}
public int getBucket(CharSequence key) {return getExactMatchStartingFromRootArc(0, new BytesRef(key));}
public DeleteAuthorizerResult deleteAuthorizer(DeleteAuthorizerRequest request) {request = beforeClientExecution(request);return executeDeleteAuthorizer(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {String octal = OperandResolver.coerceValueToString(numberVE);try {return new NumberEval(BaseNumberUtils.convertToDecimal(octal, OCTAL_BASE, MAX_NUMBER_OF_PLACES));}  catch (IllegalArgumentException e) {return ErrorEval.NUM_ERROR;}}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_hcenter);}
public EnableEnhancedMonitoringResult enableEnhancedMonitoring(EnableEnhancedMonitoringRequest request) {request = beforeClientExecution(request);return executeEnableEnhancedMonitoring(request);}
public ListDeliveryStreamsResult listDeliveryStreams(ListDeliveryStreamsRequest request) {request = beforeClientExecution(request);return executeListDeliveryStreams(request);}
public DetachVolumeResult detachVolume(DetachVolumeRequest request) {request = beforeClientExecution(request);return executeDetachVolume(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_15_pattern_style);out.writeShort(field_16_pattern_color_indexes);}
public void setShowSeriesKey(boolean value){field_1_options = showSeriesKey.setShortBoolean(field_1_options, value);}
public GermanNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static boolean allSubsetsEqual(Collection<BitSet> altsets) {Iterator<BitSet> it = altsets.iterator();BitSet first = it.next();while ( it.hasNext() ) {BitSet next = it.next();if ( !next.equals(first) ) return false;}return true;}
public CellRangeAddressList(RecordInputStream in) {this();int nItems = in.readUShort();for (int k = 0; k < nItems; k++) {_list.add(new CellRangeAddress(in));}}
public boolean markSupported() {return in.markSupported();}
public DBInstance restoreDBInstanceFromS3(RestoreDBInstanceFromS3Request request) {request = beforeClientExecution(request);return executeRestoreDBInstanceFromS3(request);}
public boolean equals(Object other) {if (!(other instanceof FloatBuffer)) {return false;}FloatBuffer otherBuffer = (FloatBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {float a = get(myPosition++);float b = otherBuffer.get(otherPosition++);equalSoFar = a == b || (a != a && b != b);}return equalSoFar;}
public static void fill(float[] array, int start, int end, float value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public DescribeReceiptRuleResult describeReceiptRule(DescribeReceiptRuleRequest request) {request = beforeClientExecution(request);return executeDescribeReceiptRule(request);}
public String toString() {return super.toString()+" "+prefix;}
public float tf(int freq, int passageLen) {float norm = k1 * ((1 - b) + b * (passageLen / pivot));return freq / (freq + norm);}
public DescribeModelResult describeModel(DescribeModelRequest request) {request = beforeClientExecution(request);return executeDescribeModel(request);}
public boolean markSupported() {return true;}
public ListEndpointConfigsResult listEndpointConfigs(ListEndpointConfigsRequest request) {request = beforeClientExecution(request);return executeListEndpointConfigs(request);}
public DescribeDBProxyTargetGroupsResult describeDBProxyTargetGroups(DescribeDBProxyTargetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxyTargetGroups(request);}
public long size(DiffEntry.Side side, DiffEntry ent) throws IOException {switch (side) {case OLD:return oldSource.size(ent.oldPath, ent.oldId.toObjectId());case NEW:return newSource.size(ent.newPath, ent.newId.toObjectId());default:throw new IllegalArgumentException();}}
public GlobalReplicationGroup disassociateGlobalReplicationGroup(DisassociateGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDisassociateGlobalReplicationGroup(request);}
public static void writeHeader(DataOutput out, String codec, int version) throws IOException {BytesRef bytes = new BytesRef(codec);if (bytes.length != codec.length() || bytes.length >= 128) {throw new IllegalArgumentException("codec must be simple ASCII, less than 128 characters in length [got " + codec + "]");}out.writeInt(CODEC_MAGIC);out.writeString(codec);out.writeInt(version);}
public PagedList<DedicatedCapacityInner> listByResourceGroup(String resourceGroupName) {PageImpl<DedicatedCapacityInner> page = new PageImpl<>();page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());page.setNextPageLink(null);return new PagedList<DedicatedCapacityInner>(page) {@Overridepublic Page<DedicatedCapacityInner> nextPage(String nextPageLink) {return null;}};}
public DescribeIpGroupsResult describeIpGroups(DescribeIpGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeIpGroups(request);}
public final CoderResult flush(ByteBuffer out) {if (status != END && status != READY) {throw new IllegalStateException();}CoderResult result = implFlush(out);if (result == CoderResult.UNDERFLOW) {status = FLUSH;}return result;}
public final Type getType() {if (beginA < endA) {if (beginB < endB) {return Type.REPLACE;}return Type.DELETE;}if (beginB < endB) {return Type.INSERT;}return Type.EMPTY;}
public Builder() {this(false);}
public DescribeHsmConfigurationsResult describeHsmConfigurations(DescribeHsmConfigurationsRequest request) {request = beforeClientExecution(request);return executeDescribeHsmConfigurations(request);}
public boolean equals(Object other) {if (!(other instanceof DoubleBuffer)) {return false;}DoubleBuffer otherBuffer = (DoubleBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {double a = get(myPosition++);double b = otherBuffer.get(otherPosition++);equalSoFar = a == b || (a != a && b != b);}return equalSoFar;}
public int getSize() {return length;}
public FeatProtection() {securityDescriptor = new byte[0];}
public DeleteNotificationConfigurationResult deleteNotificationConfiguration(DeleteNotificationConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteNotificationConfiguration(request);}
public int get(int key) {return get(key, 0);}
public HSSFAnchor(int dx1, int dy1, int dx2, int dy2) {createEscherAnchor();setDx1(dx1);setDy1(dy1);setDx2(dx2);setDy2(dy2);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], DEFAULT_ARG3, DEFAULT_ARG4);case 4: {ValueEval arg3 = args[3];if(arg3 == MissingArgEval.instance) {arg3 = DEFAULT_ARG3;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], arg3, DEFAULT_ARG4);}case 5: {ValueEval arg3 = args[3];if(arg3 == MissingArgEval.instance) {arg3 = DEFAULT_ARG3;}ValueEval arg4 = args[4];if(arg4 == MissingArgEval.instance) {arg4 = DEFAULT_ARG4;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], arg3, arg4);}default:return ErrorEval.VALUE_INVALID;}}
public Toffs( int startOffset, int endOffset ){this.startOffset = startOffset;this.endOffset = endOffset;}
public GetDocumentationVersionResult getDocumentationVersion(GetDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeGetDocumentationVersion(request);}
public static <T> T[] grow(T[] array, int minSize) {assert minSize >= 0 : "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {final int newLength = oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);return growExact(array, newLength);} elsereturn array;}
public PurchaseProvisionedCapacityResult purchaseProvisionedCapacity(PurchaseProvisionedCapacityRequest request) {request = beforeClientExecution(request);return executePurchaseProvisionedCapacity(request);}
public ListenerHandle addRefsChangedListener(RefsChangedListener listener) {return addListener(RefsChangedListener.class, listener);}
public void drawRect(int x, int y, int width, int height){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"drawRect not supported");}
public DeleteGcmChannelResult deleteGcmChannel(DeleteGcmChannelRequest request) {request = beforeClientExecution(request);return executeDeleteGcmChannel(request);}
public String toString() {return "del=" + item;}
public int read(byte[] b, int off, int len) {if (ptr == data.length)return -1;int n = Math.min(available(), len);System.arraycopy(data, ptr, b, off, n);ptr += n;return n;}
public static String toHex(int value) {StringBuilder sb = new StringBuilder(8);writeHex(sb, value & 0xFFFFFFFFL, 8, "");return sb.toString();}
public DeleteFieldLevelEncryptionConfigResult deleteFieldLevelEncryptionConfig(DeleteFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeDeleteFieldLevelEncryptionConfig(request);}
public AmazonS3EncryptionClient(AWSCredentials credentials,EncryptionMaterials encryptionMaterials) {this(credentials, new StaticEncryptionMaterialsProvider(encryptionMaterials));}
public FontDetails( String fontName, int height ){_fontName = fontName;_height = height;}
public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(LESSTHAN);buffer.append(operands[ 1 ]);return buffer.toString();}
public String toString() {return new String(this.buffer, 0, this.len);}
public WriteRequest(PutRequest putRequest) {setPutRequest(putRequest);}
public static String toHex(byte value) {StringBuilder sb = new StringBuilder(2);writeHex(sb, value & 0xFF, 2, "");return sb.toString();}
public int stem(char s[], int len) {return pluralStep.apply(s, len);}
public void write(byte[] b, int off, int len) {try {super.write(b, off, len);} catch (IOException e) {throw new RuntimeException(e);}}
public Set<Long> idSet() {return Collections.unmodifiableSet(dictionary.keySet());}
public BatchGetDeploymentsResult batchGetDeployments(BatchGetDeploymentsRequest request) {request = beforeClientExecution(request);return executeBatchGetDeployments(request);}
public QueryScorer(Query query, String field, String defaultField) {this.defaultField = defaultField;init(query, field, null, true);}
public long next() throws IOException {current = fstEnum.next();if (current == null) {return -1;} else {return current.output;}}
public GetApplicationDateRangeKpiResult getApplicationDateRangeKpi(GetApplicationDateRangeKpiRequest request) {request = beforeClientExecution(request);return executeGetApplicationDateRangeKpi(request);}
public TokenStream create(TokenStream input) {return new GalicianStemFilter(input);}
public ListHostedZonesResult listHostedZones(ListHostedZonesRequest request) {request = beforeClientExecution(request);return executeListHostedZones(request);}
public int getDepth() {return depth;}
public WindowTwoRecord(RecordInputStream in) {int size = in.remaining();field_1_options      = in.readShort();field_2_top_row      = in.readShort();field_3_left_col     = in.readShort();field_4_header_color = in.readInt();if (size > 10){field_5_page_break_zoom = in.readShort();field_6_normal_zoom     = in.readShort();}if (size > 14){   field_7_reserved = in.readInt();}}
public GetUsageResult getUsage(GetUsageRequest request) {request = beforeClientExecution(request);return executeGetUsage(request);}
public void setConfig(Config config) {super.setConfig(config);keepImages = config.get("keep.image.only.docs", true);String fileName = config.get("docs.file", null);if (fileName != null) {file = Paths.get(fileName).toAbsolutePath();}}
public ListSubscriptionsByTopicRequest(String topicArn) {setTopicArn(topicArn);}
public ListTablesRequest(String exclusiveStartTableName, Integer limit) {setExclusiveStartTableName(exclusiveStartTableName);setLimit(limit);}
public String toString() {return start + " to " + end;}
public final float get(int index) {checkIndex(index);return backingArray[offset + index];}
public LongBuffer duplicate() {return copy(this, mark);}
public ListManagedSchemaArnsResult listManagedSchemaArns(ListManagedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListManagedSchemaArns(request);}
public DescribeSpotPriceHistoryResult describeSpotPriceHistory(DescribeSpotPriceHistoryRequest request) {request = beforeClientExecution(request);return executeDescribeSpotPriceHistory(request);}
public ListDevelopmentSchemaArnsResult listDevelopmentSchemaArns(ListDevelopmentSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListDevelopmentSchemaArns(request);}
public boolean equals(Object o) {if (!(o instanceof ATNConfig)) {return false;}return this.equals((ATNConfig)o);}
public DeleteEventsConfigurationResult deleteEventsConfiguration(DeleteEventsConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteEventsConfiguration(request);}
public static short sign(double d) {return (short) ((d == 0)? 0: (d < 0)? -1: 1);}
public void setFillerToken(String fillerToken) {this.fillerToken = null == fillerToken ? new char[0] : fillerToken.toCharArray();}
public UpdateDestinationResult updateDestination(UpdateDestinationRequest request) {request = beforeClientExecution(request);return executeUpdateDestination(request);}
public CreateEmailIdentityResult createEmailIdentity(CreateEmailIdentityRequest request) {request = beforeClientExecution(request);return executeCreateEmailIdentity(request);}
public PersonIdent getSourceAuthor() {return outCandidate.getAuthor();}
public StartMonitoringMembersResult startMonitoringMembers(StartMonitoringMembersRequest request) {request = beforeClientExecution(request);return executeStartMonitoringMembers(request);}
public void setLocalPatternChars(String data) {if (data == null) {throw new NullPointerException();}localPatternChars = data;}
public PersianNormalizationFilter(TokenStream input) {super(input);}
public void liftUp(Row in, List<Row> nodes) {Iterator<Cell> i = in.cells.values().iterator();for (; i.hasNext();) {Cell c = i.next();if (c.ref >= 0) {Row to = nodes.get(c.ref);int sum = to.uniformCmd(changeSkip);if (sum >= 0) {if (sum == c.cmd) {if (changeSkip) {if (c.skip != to.uniformSkip + 1) {continue;}c.skip = to.uniformSkip + 1;} else {c.skip = 0;}c.cnt += to.uniformCnt;c.ref = -1;} else if (c.cmd < 0) {c.cnt = to.uniformCnt;c.cmd = sum;c.ref = -1;if (changeSkip) {c.skip = to.uniformSkip + 1;} else {c.skip = 0;}}}}}}
public String toString() {StringBuilder r = new StringBuilder();r.append("SymbolicRef[");Ref cur = this;while (cur.isSymbolic()) {r.append(cur.getName());r.append(" -> ");cur = cur.getTarget();}r.append(cur.getName());r.append('=');r.append(ObjectId.toString(cur.getObjectId()));r.append("(");r.append(updateIndex); r.append(")]");return r.toString();}
public RemoveAllResourcePermissionsResult removeAllResourcePermissions(RemoveAllResourcePermissionsRequest request) {request = beforeClientExecution(request);return executeRemoveAllResourcePermissions(request);}
public DescribeResourceGroupsResult describeResourceGroups(DescribeResourceGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeResourceGroups(request);}
public SpatialArgs parse(String v, SpatialContext ctx) throws ParseException, InvalidShapeException {int idx = v.indexOf('(');int edx = v.lastIndexOf(')');if (idx < 0 || idx > edx) {throw new ParseException("missing parens: " + v, -1);}SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());String body = v.substring(idx + 1, edx).trim();if (body.length() < 1) {throw new ParseException("missing body : " + v, idx + 1);}Shape shape = parseShape(body, ctx);SpatialArgs args = newSpatialArgs(op, shape);if (v.length() > (edx + 1)) {body = v.substring(edx + 1).trim();if (body.length() > 0) {Map<String, String> aa = parseMap(body);readNameValuePairs(args, aa);if (!aa.isEmpty()) {throw new IllegalArgumentException("unused parameters: " + aa);}}}args.validate();return args;}
public boolean wasDeltaAttempted() {int fmt = getFormat();return fmt == PACK_DELTA || fmt == PACK_WHOLE;}
public PutModelResult putModel(PutModelRequest request) {request = beforeClientExecution(request);return executePutModel(request);}
public String toString() {return String.valueOf(stateNumber);}
public CreatePlayerSessionResult createPlayerSession(CreatePlayerSessionRequest request) {request = beforeClientExecution(request);return executeCreatePlayerSession(request);}
public void serialize(LittleEndianOutput out) {out.writeByte(field_1_majorTickType);out.writeByte(field_2_minorTickType);out.writeByte(field_3_labelPosition);out.writeByte(field_4_background);out.writeInt(field_5_labelColorRgb);out.writeInt(field_6_zero1);out.writeInt(field_7_zero2);out.writeInt(field_8_zero3);out.writeInt(field_9_zero4);out.writeShort(field_10_options);out.writeShort(field_11_tickColor);out.writeShort(field_12_zero5);}
public ModifyVpcTenancyResult modifyVpcTenancy(ModifyVpcTenancyRequest request) {request = beforeClientExecution(request);return executeModifyVpcTenancy(request);}
public GetBasePathMappingsResult getBasePathMappings(GetBasePathMappingsRequest request) {request = beforeClientExecution(request);return executeGetBasePathMappings(request);}
public void add(BytesRef utf8) {if (closed) throw new IllegalStateException();buffer.append(utf8);}
public void notifyUpdateCell(HSSFCell cell) {_bookEvaluator.notifyUpdateCell(new HSSFEvaluationCell(cell));}
public AddApplicationReferenceDataSourceResult addApplicationReferenceDataSource(AddApplicationReferenceDataSourceRequest request) {request = beforeClientExecution(request);return executeAddApplicationReferenceDataSource(request);}
public NIOFSIndexInput(String resourceDesc, FileChannel fc, long off, long length, int bufferSize) {super(resourceDesc, bufferSize);this.channel = fc;this.off = off;this.end = off + length;this.isClone = true;}
@Override public Iterator<K> iterator() {final Iterator<Entry<K, V>> iterator = filteredEntrySet.iterator();return new UnmodifiableIterator<K>() {
public TokenStream create(TokenStream input) {return new IndonesianStemFilter(input, stemDerivational);}
public SubmoduleStatusCommand addPath(String path) {paths.add(path);return this;}
public PutInsightRuleResult putInsightRule(PutInsightRuleRequest request) {request = beforeClientExecution(request);return executePutInsightRule(request);}
public JapaneseReadingFormFilterFactory(Map<String,String> args) {super(args);useRomaji = getBoolean(args, ROMAJI_PARAM, false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public GetVpcLinkResult getVpcLink(GetVpcLinkRequest request) {request = beforeClientExecution(request);return executeGetVpcLink(request);}
public boolean evaluate(boolean cmpResult) {switch (_code) {case NONE:case EQ:return cmpResult;case NE:return !cmpResult;}throw new RuntimeException("Cannot call boolean evaluate on non-equality operator '"+ _representation + "'");}
public int getEnd() {return end;}
@Override public String toString() {if (string != null) {return string;}StringBuilder result = new StringBuilder();if (scheme != null) {result.append(scheme);result.append(':');}if (opaque) {result.append(schemeSpecificPart);} else {if (authority != null) {result.append("result.append(authority);}if (path != null) {result.append(path);}if (query != null) {result.append('?');result.append(query);}}if (fragment != null) {result.append('#');result.append(fragment);}string = result.toString();return string;}
public static final ObjectId fromRaw(byte[] bs, int p) {final int a = NB.decodeInt32(bs, p);final int b = NB.decodeInt32(bs, p + 4);final int c = NB.decodeInt32(bs, p + 8);final int d = NB.decodeInt32(bs, p + 12);final int e = NB.decodeInt32(bs, p + 16);return new ObjectId(a, b, c, d, e);}
public int maxRecall(QualityQuery query) {QRelJudgement qrj = judgements.get(query.getQueryID());if (qrj!=null) {return qrj.maxRecall();}return 0;}
public static HashFunction hashFunctionForVersion(int version) {if (version < VERSION_START) {throw new IllegalArgumentException("Version " + version + " is too old, expected at least " + VERSION_START);} else if (version > VERSION_CURRENT) {throw new IllegalArgumentException("Version " + version + " is too new, expected at most " + VERSION_CURRENT);}return MurmurHash2.INSTANCE;}
public void removeCell(Cell cell) {if(cell == null) {throw new IllegalArgumentException("cell must not be null");}removeCell((HSSFCell)cell, true);}
public CreatePlacementGroupRequest(String groupName, PlacementStrategy strategy) {setGroupName(groupName);setStrategy(strategy.toString());}
public PutManagedScalingPolicyResult putManagedScalingPolicy(PutManagedScalingPolicyRequest request) {request = beforeClientExecution(request);return executePutManagedScalingPolicy(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXVS]\n");buffer.append("    .vs      =").append(HexDump.shortToHex(vs)).append('\n');buffer.append("[/SXVS]\n");return buffer.toString();}
public Trie reduce(Reduce by) {return by.optimize(this);}
public AbstractEscherHolderRecord clone() {return copy();}
public void setParams(String params) {super.setParams(params);commitUserData = new HashMap<>();commitUserData.put(OpenReaderTask.USER_DATA, params);}
public String getSrcRef() {return srcRef;}
public final String getShortMessage() {byte[] raw = buffer;int msgB = RawParseUtils.commitMessage(raw, 0);if (msgB < 0) {return ""; }int msgE = RawParseUtils.endOfParagraph(raw, msgB);String str = RawParseUtils.decode(guessEncoding(), raw, msgB, msgE);if (hasLF(raw, msgB, msgE)) {str = StringUtils.replaceLineBreaksWithSpace(str);}return str;}
public static Boolean coerceValueToBoolean(ValueEval ve, boolean stringsAreBlanks) throws EvaluationException {if (ve == null || ve == BlankEval.instance) {return null;}if (ve instanceof BoolEval) {return Boolean.valueOf(((BoolEval) ve).getBooleanValue());}if (ve instanceof StringEval) {if (stringsAreBlanks) {return null;}String str = ((StringEval) ve).getStringValue();if (str.equalsIgnoreCase("true")) {return Boolean.TRUE;}if (str.equalsIgnoreCase("false")) {return Boolean.FALSE;}throw new EvaluationException(ErrorEval.VALUE_INVALID);}if (ve instanceof NumericValueEval) {NumericValueEval ne = (NumericValueEval) ve;double d = ne.getNumberValue();if (Double.isNaN(d)) {throw new EvaluationException(ErrorEval.VALUE_INVALID);}return Boolean.valueOf(d != 0);}if (ve instanceof ErrorEval) {throw new EvaluationException((ErrorEval) ve);}throw new RuntimeException("Unexpected eval (" + ve.getClass().getName() + ")");}
public synchronized List<IndexCommit> getSnapshots() {return new ArrayList<>(indexCommits.values());}
public static int subIndex(int n, int[] docStarts) { int size = docStarts.length;int lo = 0; int hi = size - 1; while (hi >= lo) {int mid = (lo + hi) >>> 1;int midValue = docStarts[mid];if (n < midValue)hi = mid - 1;else if (n > midValue)lo = mid + 1;else { while (mid + 1 < size && docStarts[mid + 1] == midValue) {mid++; }return mid;}}return hi;}
public static Date getJavaDate(double date, boolean use1904windowing) {return getJavaDate(date, use1904windowing, null, false);}
public CharSequence getLastOnPath(CharSequence key) {Row now = getRow(root);int w;CharSequence last = null;StrEnum e = new StrEnum(key, forward);for (int i = 0; i < key.length() - 1; i++) {Character ch = e.next();w = now.getCmd(ch);if (w >= 0) {last = cmds.get(w);}w = now.getRef(ch);if (w >= 0) {now = getRow(w);} else {return last;}}w = now.getCmd(e.next());return (w >= 0) ? cmds.get(w) : last;}
public Hashtable(int capacity) {if (capacity < 0) {throw new IllegalArgumentException("Capacity: " + capacity);}if (capacity == 0) {@SuppressWarnings("unchecked")HashtableEntry<K, V>[] tab = (HashtableEntry<K, V>[]) EMPTY_TABLE;table = tab;threshold = -1; return;}if (capacity < MINIMUM_CAPACITY) {capacity = MINIMUM_CAPACITY;} else if (capacity > MAXIMUM_CAPACITY) {capacity = MAXIMUM_CAPACITY;} else {capacity = roundUpToPowerOfTwo(capacity);}makeTable(capacity);}
public void reset() {heads.clear();heads.addAll(headsStartValue);}
public CreatePlacementGroupResult createPlacementGroup(CreatePlacementGroupRequest request) {request = beforeClientExecution(request);return executeCreatePlacementGroup(request);}
public final float maxCharsPerByte() {return maxCharsPerByte;}
public static String getRFC2616Date(Date date) {SimpleDateFormat df = new SimpleDateFormat(FORMAT_RFC2616, Locale.ENGLISH);df.setTimeZone(new SimpleTimeZone(0, TIME_ZONE));return df.format(date);}
public ListContributorInsightsResult listContributorInsights(ListContributorInsightsRequest request) {request = beforeClientExecution(request);return executeListContributorInsights(request);}
public void setPackedGitOpenFiles(int fdLimit) {packedGitOpenFiles = fdLimit;}
public DBCluster failoverDBCluster(FailoverDBClusterRequest request) {request = beforeClientExecution(request);return executeFailoverDBCluster(request);}
public StringBuilder insert(int offset, double d) {insert0(offset, Double.toString(d));return this;}
public void serialize(LittleEndianOutput out) {futureHeader.serialize(out);out.writeShort(isf_sharedFeatureType);out.writeByte(reserved1);out.writeInt((int)reserved2);out.writeShort(cellRefs.length);out.writeInt((int)cbFeatData);out.writeShort(reserved3);for(int i=0; i<cellRefs.length; i++) {cellRefs[i].serialize(out);}sharedFeature.serialize(out);}
public void writeDouble(double value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeDouble(value);}
public DisassociateWebsiteAuthorizationProviderResult disassociateWebsiteAuthorizationProvider(DisassociateWebsiteAuthorizationProviderRequest request) {request = beforeClientExecution(request);return executeDisassociateWebsiteAuthorizationProvider(request);}
public final byte[] serialize() {byte[] retval = new byte[ getRecordSize() ];serialize(0, retval);return retval;}
public Cell next() {if (!hasNext()) {throw new NoSuchElementException("At last element");}HSSFCell cell = cells[nextId];thisId = nextId;findNext();return cell;}
public static double[] grow(double[] array) {return grow(array, 1 + array.length);}
public synchronized StringBuffer insert(int index, String string) {insert0(index, string);return this;}
public DomainDetail describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}
public void reset() {this.reset(true, true);}
public void serialize(LittleEndianOutput out) {out.writeShort(_reserved);}
public int getStartOffset() {return startOffset;}
public synchronized String[] listAll() throws IOException {final Set<String> files = new HashSet<>();for (String f : cacheDirectory.listAll()) {files.add(f);}for (String f : in.listAll()) {files.add(f);}String[] result = files.toArray(new String[files.size()]);Arrays.sort(result);return result;}
public byte clearByte(final byte holder){return ( byte ) clear(holder);}
public ScenarioProtectRecord getHCenter() {return _scenarioProtectRecord;}
public HSSFRow createRow(int rownum) {HSSFRow row = new HSSFRow(_workbook, this, rownum);row.setHeight(getDefaultRowHeight());row.getRowRecord().setBadFontHeight(false);addRow(row, true);return row;}
public ListQueryExecutionsResult listQueryExecutions(ListQueryExecutionsRequest request) {request = beforeClientExecution(request);return executeListQueryExecutions(request);}
public DeleteSuppressedDestinationResult deleteSuppressedDestination(DeleteSuppressedDestinationRequest request) {request = beforeClientExecution(request);return executeDeleteSuppressedDestination(request);}
public CharsRef subtract(CharsRef output, CharsRef inc) {assert output != null;assert inc != null;if (inc == NO_OUTPUT) {return output;} else if (inc.length == output.length) {return NO_OUTPUT;} else {assert inc.length < output.length: "inc.length=" + inc.length + " vs output.length=" + output.length;assert inc.length > 0;return new CharsRef(output.chars, output.offset + inc.length, output.length-inc.length);}}
public void requestCancelWorkflowExecution(RequestCancelWorkflowExecutionRequest request) {request = beforeClientExecution(request);executeRequestCancelWorkflowExecution(request);}
public boolean equals(Object o) {if (this == o) {return true;}if (o == null || getClass() != o.getClass()) {return false;}Arn arn = (Arn) o;if (!partition.equals(arn.partition)) {return false;}if (!service.equals(arn.service)) {return false;}if (region != null ? !region.equals(arn.region) : arn.region != null) {return false;}if (accountId != null ? !accountId.equals(arn.accountId) : arn.accountId != null) {return false;}return resource.equals(arn.resource);}
public UpdateDataSetPermissionsResult updateDataSetPermissions(UpdateDataSetPermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSetPermissions(request);}
public DeleteCloudFrontOriginAccessIdentityResult deleteCloudFrontOriginAccessIdentity(DeleteCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeDeleteCloudFrontOriginAccessIdentity(request);}
public TokenStream create(TokenStream input) {return new PortugueseMinimalStemFilter(input);}
public PutDashboardResult putDashboard(PutDashboardRequest request) {request = beforeClientExecution(request);return executePutDashboard(request);}
public void addChar( char c, int width ){charWidths.put(Character.valueOf(c), Integer.valueOf(width));}
public DeleteRoomSkillParameterResult deleteRoomSkillParameter(DeleteRoomSkillParameterRequest request) {request = beforeClientExecution(request);return executeDeleteRoomSkillParameter(request);}
public String get(String name, String dflt) {String vals[] = (String[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, dflt);if (sval == null) {return null;}if (sval.indexOf(":") < 0) {return sval;} else if (sval.indexOf(":\\") >= 0 || sval.indexOf(":/") >= 0) {return sval;}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToStringArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public DBClusterSnapshotAttributesResult describeDBClusterSnapshotAttributes(DescribeDBClusterSnapshotAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterSnapshotAttributes(request);}
public void addFile(FileHeader fh) {files.add(fh);}
public TokenStream create(TokenStream input) {return new ItalianLightStemFilter(input);}
public LinkedHashMap() {init();accessOrder = false;}
public DeleteStackInstancesResult deleteStackInstances(DeleteStackInstancesRequest request) {request = beforeClientExecution(request);return executeDeleteStackInstances(request);}
public String toString() {return "(" + a.toString() + " AND " + b.toString() + ")"; }
public StringWriter() {buf = new StringBuffer(16);lock = buf;}
public List<MatchingDocs> getOriginalMatchingDocs() {return super.getMatchingDocs();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {double result;try {double d0 = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);result =  evaluate(d0, d1);checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public String toString() {return "[HCENTER]\n" +"    .hcenter        = " + getHCenter() +"\n" +"[/HCENTER]\n";}
public GetEbsEncryptionByDefaultResult getEbsEncryptionByDefault(GetEbsEncryptionByDefaultRequest request) {request = beforeClientExecution(request);return executeGetEbsEncryptionByDefault(request);}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[34];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 34; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public int getCharWidth( char c ){Integer widthInteger = charWidths.get(Character.valueOf(c));if (widthInteger == null) {return 'W' == c ? 0 : getCharWidth('W');}return widthInteger;}
public DescribeSecurityGroupReferencesResult describeSecurityGroupReferences(DescribeSecurityGroupReferencesRequest request) {request = beforeClientExecution(request);return executeDescribeSecurityGroupReferences(request);}
public final V getValue() {return value;}
public EscherContainerRecord getEscherContainer() {for (EscherRecord er : escherRecords) {if(er instanceof EscherContainerRecord) {return (EscherContainerRecord)er;}}return null;}
public boolean removeShape(HSSFShape shape) {boolean  isRemoved = getEscherContainer().removeChildRecord(shape.getEscherContainer());if (isRemoved){shape.afterRemove(this.getPatriarch());shapes.remove(shape);}return isRemoved;}
public boolean changeExternalReference(String oldUrl, String newUrl) {return linkTable.changeExternalReference(oldUrl, newUrl);}
public String toString() {return "BLOCK: " + brToString(prefix);}
public static String pathToString(String[] path) {return pathToString(path, path.length);}
public final boolean isInRange(int rowIx, int colIx) {CellRangeAddress8Bit r = _range;return r.getFirstRow() <= rowIx&& r.getLastRow() >= rowIx&& r.getFirstColumn() <= colIx&& r.getLastColumn() >= colIx;}
public RmCommand rm() {return new RmCommand(repo);}
public static String[] parse(String line) {boolean insideQuote = false;ArrayList<String> result = new ArrayList<>();int quoteCount = 0;StringBuilder sb = new StringBuilder();for(int i = 0; i < line.length(); i++) {char c = line.charAt(i);if(c == QUOTE) {insideQuote = !insideQuote;quoteCount++;}if(c == COMMA && !insideQuote) {String value = sb.toString();value = unQuoteUnEscape(value);result.add(value);sb.setLength(0);continue;}sb.append(c);}result.add(sb.toString());if(quoteCount % 2 != 0) {return new String[0];}return result.toArray(new String[0]);}
public long get(int index) {final int o = index / 3;final int b = index % 3;final int shift = b * 21;return (blocks[o] >>> shift) & 2097151L;}
public void connect(PipedOutputStream src) throws IOException {src.connect(this);}
public WeightedPhraseInfo( Collection< WeightedPhraseInfo > toMerge ) {Iterator< WeightedPhraseInfo > toMergeItr = toMerge.iterator();if ( !toMergeItr.hasNext() ) {throw new IllegalArgumentException( "toMerge must contain at least one WeightedPhraseInfo." );}WeightedPhraseInfo first = toMergeItr.next();@SuppressWarnings( { "rawtypes", "unchecked" } )Iterator< Toffs >[] allToffs = new Iterator[ toMerge.size() ];termsInfos = new ArrayList<>();seqnum = first.seqnum;boost = first.boost;allToffs[ 0 ] = first.termsOffsets.iterator();int index = 1;while ( toMergeItr.hasNext() ) {WeightedPhraseInfo info = toMergeItr.next();boost += info.boost;termsInfos.addAll( info.termsInfos );allToffs[ index++ ] = info.termsOffsets.iterator();}MergedIterator< Toffs > itr = new MergedIterator<>( false, allToffs );termsOffsets = new ArrayList<>();if ( !itr.hasNext() ) {return;}Toffs work = itr.next();while ( itr.hasNext() ) {Toffs current = itr.next();if ( current.startOffset <= work.endOffset ) {work.endOffset = Math.max( work.endOffset, current.endOffset );} else {termsOffsets.add( work );work = current;}}termsOffsets.add( work );}
public DescribeLoadBalancerPolicyTypesResult describeLoadBalancerPolicyTypes(DescribeLoadBalancerPolicyTypesRequest request) {request = beforeClientExecution(request);return executeDescribeLoadBalancerPolicyTypes(request);}
public Entry<K, V> next() {return nextEntry();}
public int getCmd(Character way) {Cell c = at(way);return (c == null) ? -1 : c.cmd;}
public int readInt(){int ch1 = _in.readUByte();int ch2 = _in.readUByte();int ch3 = _in.readUByte();int ch4 = _in.readUByte();return (ch4 << 24) + (ch3 << 16) + (ch2 << 8) + (ch1 << 0);}
public String toString() {return "Reverse" + super.toString(); }
public Explanation explain(Explanation freq, long norm) {return SimilarityBase.this.explain(stats, freq, getLengthValue(norm));}
public static ListenerList getGlobalListenerList() {return globalListeners;}
public GetInvitationsCountResult getInvitationsCount(GetInvitationsCountRequest request) {request = beforeClientExecution(request);return executeGetInvitationsCount(request);}
public static boolean equals(float[] array1, float[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (Float.floatToIntBits(array1[i]) != Float.floatToIntBits(array2[i])) {return false;}}return true;}
public final V setValue(V value) {if (value == null) {throw new NullPointerException();}V oldValue = this.value;this.value = value;return oldValue;}
@Override public boolean isEmpty() {return Impl.this.isEmpty();}
public void setCategoryLabelsCellRange(CellRangeAddressBase range) {Integer count = setVerticalCellRange(dataCategoryLabels, range);if (count == null){return;}series.setNumCategories((short)(int)count);}
final public SrndQuery OrQuery() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries = null;Token oprt = null;q = AndQuery();label_2:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case OR:;break;default:jj_la1[0] = jj_gen;break label_2;}oprt = jj_consume_token(OR);if (queries == null) {queries = new ArrayList<SrndQuery>();queries.add(q);}q = AndQuery();queries.add(q);}{if (true) return (queries == null) ? q : getOrQuery(queries, true , oprt);}throw new Error("Missing return statement in function");}
public DeleteScheduledActionResult deleteScheduledAction(DeleteScheduledActionRequest request) {request = beforeClientExecution(request);return executeDeleteScheduledAction(request);}
public CharBuffer put(String str, int start, int end) {if (start < 0 || end < start || end > str.length()) {throw new IndexOutOfBoundsException("str.length()=" + str.length() +", start=" + start + ", end=" + end);}if (end - start > remaining()) {throw new BufferOverflowException();}for (int i = start; i < end; i++) {put(str.charAt(i));}return this;}
public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(iObjectKind);out.write(unused);}
public ChangeInfo(String id, ChangeStatus status, java.util.Date submittedAt) {setId(id);setStatus(status.toString());setSubmittedAt(submittedAt);}
public SwedishLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ErrorMatcher(int errorCode, CmpOp operator) {super(operator);_value = errorCode;}
public static Console getConsole() {return console;}
public UpdateTrialComponentResult updateTrialComponent(UpdateTrialComponentRequest request) {request = beforeClientExecution(request);return executeUpdateTrialComponent(request);}
public AddCommand setWorkingTreeIterator(WorkingTreeIterator f) {workingTreeIterator = f;return this;}
public RefWriter(Map<String, Ref> refs) {if (refs instanceof RefMap)this.refs = refs.values();elsethis.refs = RefComparator.sort(refs.values());}
public LazyAreaEval(int firstRowIndex, int firstColumnIndex, int lastRowIndex,int lastColumnIndex, SheetRangeEvaluator evaluator) {super(evaluator, firstRowIndex, firstColumnIndex, lastRowIndex, lastColumnIndex);_evaluator = evaluator;}
public BatchSuspendUserResult batchSuspendUser(BatchSuspendUserRequest request) {request = beforeClientExecution(request);return executeBatchSuspendUser(request);}
public CreateVpnGatewayRequest(GatewayType type) {setType(type.toString());}
public BundleInstanceResult bundleInstance(BundleInstanceRequest request) {request = beforeClientExecution(request);return executeBundleInstance(request);}
public ListDeploymentsResult listDeployments(ListDeploymentsRequest request) {request = beforeClientExecution(request);return executeListDeployments(request);}
public String toString() {return "(FOLLOW(" + path.toString() + ")" + " AND " + ANY_DIFF.toString() + ")";}
public DetectFacesResult detectFaces(DetectFacesRequest request) {request = beforeClientExecution(request);return executeDetectFaces(request);}
public GetRegionsResult getRegions(GetRegionsRequest request) {request = beforeClientExecution(request);return executeGetRegions(request);}
public WikipediaTokenizerFactory(Map<String,String> args) {super(args);tokenOutput = getInt(args, TOKEN_OUTPUT, WikipediaTokenizer.TOKENS_ONLY);untokenizedTypes = getSet(args, UNTOKENIZED_TYPES);if (untokenizedTypes == null) {untokenizedTypes = Collections.emptySet();}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int getSheetIndex(String name) {int retval = -1;final int size = boundsheets.size();for (int k = 0; k < size; k++) {String sheet = getSheetName(k);if (sheet.equalsIgnoreCase(name)) {retval = k;break;}}return retval;}
public PagedBytesDataInput getDataInput() {if (!frozen) {throw new IllegalStateException("must call freeze() before getDataInput");}return new PagedBytesDataInput();}
public AddTagsToResourceResult addTagsToResource(AddTagsToResourceRequest request) {request = beforeClientExecution(request);return executeAddTagsToResource(request);}
public static int oversize(int minTargetSize, int bytesPerElement) {if (minTargetSize < 0) {throw new IllegalArgumentException("invalid array size " + minTargetSize);}if (minTargetSize == 0) {return 0;}if (minTargetSize > MAX_ARRAY_LENGTH) {throw new IllegalArgumentException("requested array size " + minTargetSize + " exceeds maximum array in java (" + MAX_ARRAY_LENGTH + ")");}int extra = minTargetSize >> 3;if (extra < 3) {extra = 3;}int newSize = minTargetSize + extra;if (newSize+7 < 0 || newSize+7 > MAX_ARRAY_LENGTH) {return MAX_ARRAY_LENGTH;}if (Constants.JRE_IS_64BIT) {switch(bytesPerElement) {case 4:return (newSize + 1) & 0x7ffffffe;case 2:return (newSize + 3) & 0x7ffffffc;case 1:return (newSize + 7) & 0x7ffffff8;case 8:default:return newSize;}} else {switch(bytesPerElement) {case 2:return (newSize + 1) & 0x7ffffffe;case 1:return (newSize + 3) & 0x7ffffffc;case 4:case 8:default:return newSize;}}}
public IntervalSet complement(IntSet vocabulary) {if ( vocabulary==null || vocabulary.isNil() ) {return null; }IntervalSet vocabularyIS;if (vocabulary instanceof IntervalSet) {vocabularyIS = (IntervalSet)vocabulary;}else {vocabularyIS = new IntervalSet();vocabularyIS.addAll(vocabulary);}return vocabularyIS.subtract(this);}
public BatchRefUpdate setRefLogMessage(String msg, boolean appendStatus) {if (msg == null && !appendStatus)disableRefLog();else if (msg == null && appendStatus) {refLogMessage = ""; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}return this;}
public GetApnsVoipSandboxChannelResult getApnsVoipSandboxChannel(GetApnsVoipSandboxChannelRequest request) {request = beforeClientExecution(request);return executeGetApnsVoipSandboxChannel(request);}
public TokenStream create(TokenStream input) {return new ArabicNormalizationFilter(input);}
@Override public boolean contains(Object o) {return Impl.this.containsValue(o);}
@Override public boolean isEmpty() {synchronized (mutex) {return c.isEmpty();}}
public long get(int index) {return 0;}
public DescribeSecurityGroupsResult describeSecurityGroups() {return describeSecurityGroups(new DescribeSecurityGroupsRequest());}
public ListPartsRequest(String accountId, String vaultName, String uploadId) {setAccountId(accountId);setVaultName(vaultName);setUploadId(uploadId);}
public GetCloudFrontOriginAccessIdentityRequest(String id) {setId(id);}
public DescribeAlarmHistoryResult describeAlarmHistory(DescribeAlarmHistoryRequest request) {request = beforeClientExecution(request);return executeDescribeAlarmHistory(request);}
public DescribeJobRequest(String accountId, String vaultName, String jobId) {setAccountId(accountId);setVaultName(vaultName);setJobId(jobId);}
public DeleteTagCommand setTags(String... tags) {checkCallable();this.tags.clear();this.tags.addAll(Arrays.asList(tags));return this;}
public ListVoiceConnectorGroupsResult listVoiceConnectorGroups(ListVoiceConnectorGroupsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorGroups(request);}
public Intercept() {func = new LinearRegressionFunction(FUNCTION.INTERCEPT);}
public ProvisionByoipCidrResult provisionByoipCidr(ProvisionByoipCidrRequest request) {request = beforeClientExecution(request);return executeProvisionByoipCidr(request);}
public BatchGetApplicationRevisionsResult batchGetApplicationRevisions(BatchGetApplicationRevisionsRequest request) {request = beforeClientExecution(request);return executeBatchGetApplicationRevisions(request);}
public void expandRow(int rowNumber) {if (rowNumber == -1)return;if (!isRowGroupCollapsed(rowNumber)) {return;}int startIdx = findStartOfRowOutlineGroup(rowNumber);RowRecord row = getRow(startIdx);int endIdx = findEndOfRowOutlineGroup(rowNumber);if (!isRowGroupHiddenByParent(rowNumber)) {for (int i = startIdx; i <= endIdx; i++) {RowRecord otherRow = getRow(i);if (row.getOutlineLevel() == otherRow.getOutlineLevel() || !isRowGroupCollapsed(i)) {otherRow.setZeroHeight(false);}}}getRow(endIdx + 1).setColapsed(false);}
public GetSendQuotaResult getSendQuota(GetSendQuotaRequest request) {request = beforeClientExecution(request);return executeGetSendQuota(request);}
public FeatFormulaErr2(RecordInputStream in) {errorCheck = in.readInt();}
public DefineAnalysisSchemeResult defineAnalysisScheme(DefineAnalysisSchemeRequest request) {request = beforeClientExecution(request);return executeDefineAnalysisScheme(request);}
public boolean equals( Object o ) {return o instanceof IrishStemmer;}
public UTF8Sequence() {bytes = new UTF8Byte[4];for(int i=0;i<4;i++) {bytes[i] = new UTF8Byte();}}
public ListPhotosRequest() {super("CloudPhoto", "2017-07-11", "ListPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public RegisterStreamConsumerResult registerStreamConsumer(RegisterStreamConsumerRequest request) {request = beforeClientExecution(request);return executeRegisterStreamConsumer(request);}
public Formula copy() {return this;}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;MergeInfo other = (MergeInfo) obj;if (estimatedMergeBytes != other.estimatedMergeBytes)return false;if (isExternal != other.isExternal)return false;if (mergeMaxNumSegments != other.mergeMaxNumSegments)return false;if (totalMaxDoc != other.totalMaxDoc)return false;return true;}
public float score(float freq, long norm) {float sum = 0.0f;for (SimScorer subScorer : subScorers) {sum += subScorer.score(freq, norm);}return sum;}
public AddTagsRequest(String resourceId, java.util.List<Tag> tags) {setResourceId(resourceId);setTags(tags);}
public DescribeEC2InstanceLimitsResult describeEC2InstanceLimits(DescribeEC2InstanceLimitsRequest request) {request = beforeClientExecution(request);return executeDescribeEC2InstanceLimits(request);}
public BlameGenerator setFollowFileRenames(boolean follow) {if (follow)renameDetector = new RenameDetector(getRepository());elserenameDetector = null;return this;}
public GetStagesResult getStages(GetStagesRequest request) {request = beforeClientExecution(request);return executeGetStages(request);}
public void setParsedExpression(Ptg[] ptgs) {field_5_name_definition = Formula.create(ptgs);}
public int getRightId(int wordId) {return rightIds[wordId];}
public GetChangeRequest(String id) {setId(id);}
public RegisterPhotoRequest() {super("CloudPhoto", "2017-07-11", "RegisterPhoto", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public void more() {_type = MORE;}
public final Buffer position(int newPosition) {positionImpl(newPosition);return this;}
public ScenarioProtectRecord(RecordInputStream in) {field_1_protect = in.readShort();}
public static TopFieldDocs merge(Sort sort, int topN, TopFieldDocs[] shardHits) {return merge(sort, 0, topN, shardHits);}
public LexerModeAction(int mode) {this.mode = mode;}
public boolean canExecute(File f) {return false;}
public int preceding(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException("offset out of bounds");} else if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());currentSentence = 0;return DONE;} else if (pos < sentenceStarts[0]) {text.setIndex(text.getBeginIndex());currentSentence = 0;return DONE;} else {currentSentence = sentenceStarts.length / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 1);if (0 == currentSentence) {text.setIndex(text.getBeginIndex());return DONE;} else {text.setIndex(sentenceStarts[--currentSentence]);return current();}}}
public int serialize(int offset, byte[] data) {throw new RecordFormatException("Cannot serialize a dummy record");}
public DetachObjectResult detachObject(DetachObjectRequest request) {request = beforeClientExecution(request);return executeDetachObject(request);}
public WorkflowTypeDetail describeWorkflowType(DescribeWorkflowTypeRequest request) {request = beforeClientExecution(request);return executeDescribeWorkflowType(request);}
public static void clearModels() {sentenceModels.clear();tokenizerModels.clear();posTaggerModels.clear();chunkerModels.clear();nerModels.clear();lemmaDictionaries.clear();}
public static String refLockFor(String name) {return name + LOCK_SUFFIX;}
public DeleteComponentResult deleteComponent(DeleteComponentRequest request) {request = beforeClientExecution(request);return executeDeleteComponent(request);}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[STYLE]\n");sb.append("    .xf_index_raw =").append(HexDump.shortToHex(field_1_xf_index)).append("\n");sb.append("        .type     =").append(isBuiltin() ? "built-in" : "user-defined").append("\n");sb.append("        .xf_index =").append(HexDump.shortToHex(getXFIndex())).append("\n");if (isBuiltin()){sb.append("    .builtin_style=").append(HexDump.byteToHex(field_2_builtin_style)).append("\n");sb.append("    .outline_level=").append(HexDump.byteToHex(field_3_outline_style_level)).append("\n");} else {sb.append("    .name        =").append(getName()).append("\n");}sb.append("[/STYLE]\n");return sb.toString();}
public DescribeAuditStreamConfigurationResult describeAuditStreamConfiguration(DescribeAuditStreamConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeAuditStreamConfiguration(request);}
public String toString() {if (getChildren() == null || getChildren().size() == 0)return "<any field='" + this.field + "'  matchelements="+ this.minimumMatchingmElements + "/>";StringBuilder sb = new StringBuilder();sb.append("<any field='").append(this.field).append("'  matchelements=").append(this.minimumMatchingmElements).append('>');for (QueryNode clause : getChildren()) {sb.append("\n");sb.append(clause.toString());}sb.append("\n</any>");return sb.toString();}
public AssociateSkillWithSkillGroupResult associateSkillWithSkillGroup(AssociateSkillWithSkillGroupRequest request) {request = beforeClientExecution(request);return executeAssociateSkillWithSkillGroup(request);}
public String getFetchedFrom() {return this.fetchedFrom;}
public static Counter newCounter(boolean threadSafe) {return threadSafe ? new AtomicCounter() : new SerialCounter();}
public FloatBuffer slice() {return new ReadWriteFloatArrayBuffer(remaining(), backingArray, offset + position);}
public ListProcessingJobsResult listProcessingJobs(ListProcessingJobsRequest request) {request = beforeClientExecution(request);return executeListProcessingJobs(request);}
public void recover(RecognitionException re) {_input.consume();}
public CreateTemplateAliasResult createTemplateAlias(CreateTemplateAliasRequest request) {request = beforeClientExecution(request);return executeCreateTemplateAlias(request);}
public final Buffer reset() {if (mark == UNSET_MARK) {throw new InvalidMarkException("Mark not set");}position = mark;return this;}
@Override public synchronized boolean equals(Object object) {return (object instanceof Map) &&entrySet().equals(((Map<?, ?>)object).entrySet());}
public void tagResource(TagResourceRequest request) {request = beforeClientExecution(request);executeTagResource(request);}
public BytesRef common(BytesRef output1, BytesRef output2) {assert output1 != null;assert output2 != null;int pos1 = output1.offset;int pos2 = output2.offset;int stopAt1 = pos1 + Math.min(output1.length, output2.length);while(pos1 < stopAt1) {if (output1.bytes[pos1] != output2.bytes[pos2]) {break;}pos1++;pos2++;}if (pos1 == output1.offset) {return NO_OUTPUT;} else if (pos1 == output1.offset + output1.length) {return output1;} else if (pos2 == output2.offset + output2.length) {return output2;} else {return new BytesRef(output1.bytes, output1.offset, pos1-output1.offset);}}
public E getFirst() {return getFirstImpl();}
public ObjectId computeId(ObjectInserter ins) {if (buf != null)return ins.idFor(OBJ_TREE, buf, 0, ptr);final long len = overflowBuffer.length();try {return ins.idFor(OBJ_TREE, len, overflowBuffer.openInputStream());} catch (IOException e) {throw new RuntimeException(e);}}
public TransferDomainResult transferDomain(TransferDomainRequest request) {request = beforeClientExecution(request);return executeTransferDomain(request);}
public String toString() {synchronized (lock) {return new String(buf, 0, count);}}
public DescribeReservedNodeOfferingsResult describeReservedNodeOfferings(DescribeReservedNodeOfferingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedNodeOfferings(request);}
public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!term.field().equals(field)) {buffer.append(term.field());buffer.append(":");}buffer.append(term.text());return buffer.toString();}
public IntBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());IntToByteBufferAdapter buf = new IntToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SERTOCRT]\n");buffer.append("    .chartGroupIndex      = ").append("0x").append(HexDump.toHex(  getChartGroupIndex ())).append(" (").append( getChartGroupIndex() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/SERTOCRT]\n");return buffer.toString();}
public boolean canHandle(URIish uri) {return canHandle(uri, null, null);}
public GetImportJobResult getImportJob(GetImportJobRequest request) {request = beforeClientExecution(request);return executeGetImportJob(request);}
public LookupDeveloperIdentityResult lookupDeveloperIdentity(LookupDeveloperIdentityRequest request) {request = beforeClientExecution(request);return executeLookupDeveloperIdentity(request);}
public FloatBuffer put(float c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public RefModeRecord(RecordInputStream in) {field_1_mode = in.readShort();}
public BulkOperationPackedSingleBlock(int bitsPerValue) {this.bitsPerValue = bitsPerValue;this.valueCount = 64 / bitsPerValue;this.mask = (1L << bitsPerValue) - 1;}
public static String dateToString(Date date, Resolution resolution) {return timeToString(date.getTime(), resolution);}
public DescribeUserHierarchyStructureResult describeUserHierarchyStructure(DescribeUserHierarchyStructureRequest request) {request = beforeClientExecution(request);return executeDescribeUserHierarchyStructure(request);}
public GetDomainsResult getDomains(GetDomainsRequest request) {request = beforeClientExecution(request);return executeGetDomains(request);}
public int getStreamFileThreshold() {return streamFileThreshold;}
public BatchGetDeploymentInstancesResult batchGetDeploymentInstances(BatchGetDeploymentInstancesRequest request) {request = beforeClientExecution(request);return executeBatchGetDeploymentInstances(request);}
public GetIdentityVerificationAttributesResult getIdentityVerificationAttributes(GetIdentityVerificationAttributesRequest request) {request = beforeClientExecution(request);return executeGetIdentityVerificationAttributes(request);}
public LittleEndianOutputStream(OutputStream out) {super(out);}
public GetDeploymentGroupResult getDeploymentGroup(GetDeploymentGroupRequest request) {request = beforeClientExecution(request);return executeGetDeploymentGroup(request);}
public boolean containsKey(char[] text, int off, int len) {if(text == null)throw new NullPointerException();return false;}
public void inform(ResourceLoader loader) throws IOException {clazz = registry.get(name.toUpperCase(Locale.ROOT));if( clazz == null ) {clazz = resolveEncoder(name, loader);}if (maxCodeLength != null) {try {setMaxCodeLenMethod = clazz.getMethod("setMaxCodeLen", int.class);} catch (Exception e) {throw new IllegalArgumentException("Encoder " + name + " / " + clazz + " does not support " + MAX_CODE_LENGTH, e);}}getEncoder();}
public DescribeOrganizationConfigurationResult describeOrganizationConfiguration(DescribeOrganizationConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeOrganizationConfiguration(request);}
public AbbreviatedObjectId getOldId() {return getOldId(0);}
public UpdateRuleMetadataResult updateRuleMetadata(UpdateRuleMetadataRequest request) {request = beforeClientExecution(request);return executeUpdateRuleMetadata(request);}
public K lowerKey(K key) {Entry<K, V> entry = findBounded(key, LOWER);return entry != null ? entry.getKey() : null;}
public FtCfSubRecord clone() {return copy();}
public HCenterRecord clone() {return copy();}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_foregroundColor);out.writeInt(field_2_backgroundColor);out.writeShort(field_3_pattern);out.writeShort(field_4_formatFlags);out.writeShort(field_5_forecolorIndex);out.writeShort(field_6_backcolorIndex);}
public GetDashboardEmbedUrlResult getDashboardEmbedUrl(GetDashboardEmbedUrlRequest request) {request = beforeClientExecution(request);return executeGetDashboardEmbedUrl(request);}
public BinaryDocValues getBinaryDocValues(String field) {return getSortedDocValues(field, DocValuesType.BINARY);}
public TreeFilter clone() {final TreeFilter[] s = new TreeFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public DeleteApnsVoipSandboxChannelResult deleteApnsVoipSandboxChannel(DeleteApnsVoipSandboxChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsVoipSandboxChannel(request);}
public FreeRefFunction findFunction(String name) {return _functionsByName.get(name.toUpperCase(Locale.ROOT));}
public Credentials(String accessKeyId, String secretAccessKey, String sessionToken, java.util.Date expiration) {setAccessKeyId(accessKeyId);setSecretAccessKey(secretAccessKey);setSessionToken(sessionToken);setExpiration(expiration);}
public ReadTask(PerfRunData runData) {super(runData);if (withSearch()) {queryMaker = getQueryMaker();} else {queryMaker = null;}}
public int getPositionIncrementGap(String fieldName) {return 0;}
public void serialize(LittleEndianOutput out) {out.writeInt(_option_flags);serializeUnicodeString(_promptTitle, out);serializeUnicodeString(_errorTitle, out);serializeUnicodeString(_promptText, out);serializeUnicodeString(_errorText, out);out.writeShort(_formula1.getEncodedTokenSize());out.writeShort(_not_used_1);_formula1.serializeTokens(out);out.writeShort(_formula2.getEncodedTokenSize());out.writeShort(_not_used_2);_formula2.serializeTokens(out);_regions.serialize(out);}
public String toString() {return "[PRINTHEADERS]\n" +"    .printheaders   = " + getPrintHeaders() +"\n" +"[/PRINTHEADERS]\n";}
public GetConferencePreferenceResult getConferencePreference(GetConferencePreferenceRequest request) {request = beforeClientExecution(request);return executeGetConferencePreference(request);}
public static BitSet getAlts(Collection<BitSet> altsets) {BitSet all = new BitSet();for (BitSet alts : altsets) {all.or(alts);}return all;}
public ListTrafficPolicyInstancesResult listTrafficPolicyInstances(ListTrafficPolicyInstancesRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyInstances(request);}
public void init(Repository src) {repository = src;}
public StandardSyntaxParser(StandardSyntaxParserTokenManager tm) {token_source = tm;token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 25; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public ModifyDBClusterEndpointResult modifyDBClusterEndpoint(ModifyDBClusterEndpointRequest request) {request = beforeClientExecution(request);return executeModifyDBClusterEndpoint(request);}
public DescribeTransitGatewaysResult describeTransitGateways(DescribeTransitGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGateways(request);}
public GetSimilarPhotosRequest() {super("CloudPhoto", "2017-07-11", "GetSimilarPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public GetProposalResult getProposal(GetProposalRequest request) {request = beforeClientExecution(request);return executeGetProposal(request);}
public AddJobFlowStepsRequest(String jobFlowId) {setJobFlowId(jobFlowId);}
public StartInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public GetRawMessageContentResult getRawMessageContent(GetRawMessageContentRequest request) {request = beforeClientExecution(request);return executeGetRawMessageContent(request);}
public RevObject next() {return objItr.hasNext() ? objItr.next() : null;}
final public List<SrndQuery> FieldsQueryList() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries = new ArrayList<SrndQuery>();jj_consume_token(LPAREN);q = FieldsQuery();queries.add(q);label_7:while (true) {jj_consume_token(COMMA);q = FieldsQuery();queries.add(q);switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case COMMA:;break;default:jj_la1[7] = jj_gen;break label_7;}}jj_consume_token(RPAREN);{if (true) return queries;}throw new Error("Missing return statement in function");}
public boolean contains(long value) {for (int i = 0; i < count; i++)if (entries[i] == value)return true;return false;}
public static boolean matchesExtension(String filename, String ext) {return filename.endsWith("." + ext);}
public ObjectId idFor(int type, byte[] data, int off, int len) {return delegate().idFor(type, data, off, len);}
public void remove() {parent.remove(this);}
public DisassociateDeviceFromRoomResult disassociateDeviceFromRoom(DisassociateDeviceFromRoomRequest request) {request = beforeClientExecution(request);return executeDisassociateDeviceFromRoom(request);}
final public ModifierQueryNode.Modifier Modifiers() throws ParseException {ModifierQueryNode.Modifier ret = ModifierQueryNode.Modifier.MOD_NONE;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case NOT:case PLUS:case MINUS:switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case PLUS:jj_consume_token(PLUS);ret = ModifierQueryNode.Modifier.MOD_REQ;break;case MINUS:jj_consume_token(MINUS);ret = ModifierQueryNode.Modifier.MOD_NOT;break;case NOT:jj_consume_token(NOT);ret = ModifierQueryNode.Modifier.MOD_NOT;break;default:jj_la1[0] = jj_gen;jj_consume_token(-1);throw new ParseException();}break;default:jj_la1[1] = jj_gen;;}{if (true) return ret;}throw new Error("Missing return statement in function");}
public final RevCommit getParent(int nth) {return parents[nth];}
public boolean hasPrevious() {return iterator.previousIndex() >= start;}
public TerminateWorkspacesResult terminateWorkspaces(TerminateWorkspacesRequest request) {request = beforeClientExecution(request);return executeTerminateWorkspaces(request);}
public long getEntryLastModified() {return current().getLastModified();}
public CancelConversionTaskResult cancelConversionTask(CancelConversionTaskRequest request) {request = beforeClientExecution(request);return executeCancelConversionTask(request);}
public InfoSubRecord(int streamPos, int bucketSstOffset) {field_1_stream_pos        = streamPos;field_2_bucket_sst_offset = bucketSstOffset;}
public boolean contains(Object o) {return map.containsKey(o);}
public String toString() {return "'" + ch + "' @ " + pos;}
public Step(String name, Rule rules[], int min, String suffixes[]) {this.name = name;this.rules = rules;if (min == 0) {min = Integer.MAX_VALUE;for (Rule r : rules)min = Math.min(min, r.min + r.suffix.length);}this.min = min;if (suffixes == null || suffixes.length == 0) {this.suffixes = null;} else {this.suffixes = new char[suffixes.length][];for (int i = 0; i < suffixes.length; i++)this.suffixes[i] = suffixes[i].toCharArray();}}
public E get(int key, E valueIfKeyNotFound) {int i = binarySearch(mKeys, 0, mSize, key);if (i < 0 || mValues[i] == DELETED) {return valueIfKeyNotFound;} else {return (E) mValues[i];}}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 0) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex);}
public void enterRecursionRule(ParserRuleContext localctx, int state, int ruleIndex, int precedence) {setState(state);_precedenceStack.push(precedence);_ctx = localctx;_ctx.start = _input.LT(1);if (_parseListeners != null) {triggerEnterRuleEvent(); }}
public GlobalReplicationGroup increaseNodeGroupsInGlobalReplicationGroup(IncreaseNodeGroupsInGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeIncreaseNodeGroupsInGlobalReplicationGroup(request);}
public static String format(String rawSheetName) {StringBuilder sb = new StringBuilder((rawSheetName == null ? 0 : rawSheetName.length()) + 2);appendFormat(sb, rawSheetName);return sb.toString();}
public DescribeTerminationPolicyTypesResult describeTerminationPolicyTypes(DescribeTerminationPolicyTypesRequest request) {request = beforeClientExecution(request);return executeDescribeTerminationPolicyTypes(request);}
public DescribeScheduledActionsResult describeScheduledActions() {return describeScheduledActions(new DescribeScheduledActionsRequest());}
public boolean hasSourceData(int start, int end) {for (; start < end; start++)if (sourceLines[start] == 0)return false;return true;}
public ListImportsResult listImports(ListImportsRequest request) {request = beforeClientExecution(request);return executeListImports(request);}
public DescribeInterconnectsResult describeInterconnects() {return describeInterconnects(new DescribeInterconnectsRequest());}
public DeleteEventSubscriptionResult deleteEventSubscription(DeleteEventSubscriptionRequest request) {request = beforeClientExecution(request);return executeDeleteEventSubscription(request);}
public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort(data, offset, getOptions());LittleEndian.putShort(data, offset+2, getRecordId());int remainingBytes = thedata.length;LittleEndian.putInt(data, offset+4, remainingBytes);System.arraycopy(thedata, 0, data, offset+8, thedata.length);int pos = offset+8+thedata.length;listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );int size = pos - offset;if (size != getRecordSize()) {throw new RecordFormatException(size + " bytes written but getRecordSize() reports " + getRecordSize());}return size;}
public void write(int oneChar) {synchronized (lock) {expand(1);buf[count++] = (char) oneChar;}}
public DeletedRef3DPtg(int externSheetIndex) {field_1_index_extern_sheet = externSheetIndex;unused1 = 0;}
public IndexUpgrader(Directory dir, IndexWriterConfig iwc, boolean deletePriorCommits) {this.dir = dir;this.iwc = iwc;this.deletePriorCommits = deletePriorCommits;}
public DetachVpnGatewayRequest(String vpnGatewayId, String vpcId) {setVpnGatewayId(vpnGatewayId);setVpcId(vpcId);}
public RebootInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public E remove(int index) {synchronized (mutex) {return delegate().remove(index);}}
public DescribeInstanceAttributeResult describeInstanceAttribute(DescribeInstanceAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceAttribute(request);}
public void cloneStyleFrom(CellStyle source) {if(source instanceof HSSFCellStyle) {this.cloneStyleFrom((HSSFCellStyle)source);} else {throw new IllegalArgumentException("Can only clone from one HSSFCellStyle to another, not between HSSFCellStyle and XSSFCellStyle");}}
public final String readUTF() throws IOException {return decodeUTF(readUnsignedShort());}
public GetDataEndpointResult getDataEndpoint(GetDataEndpointRequest request) {request = beforeClientExecution(request);return executeGetDataEndpoint(request);}
public AddApplicationOutputResult addApplicationOutput(AddApplicationOutputRequest request) {request = beforeClientExecution(request);return executeAddApplicationOutput(request);}
public LargeObjectException(AnyObjectId id) {setObjectId(id);}
public void trimToSize() {if (n < array.length) {char[] aux = new char[n];System.arraycopy(array, 0, aux, 0, n);array = aux;}}
public UpdateFacetResult updateFacet(UpdateFacetRequest request) {request = beforeClientExecution(request);return executeUpdateFacet(request);}
public DeleteDomainRequest(String domainName) {setDomainName(domainName);}
public String getReading() {return dictionary.getReading(wordId, surfaceForm, offset, length);}
public FloatBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public String toString() {return super.toString();}
public void set(int index, long value) {ensureCapacity(value);current.set(index, value);}
public void serialize(LittleEndianOutput out) {String username = getUsername();boolean is16bit = StringUtil.hasMultibyte(username);out.writeShort(username.length());out.writeByte(is16bit ? 0x01 : 0x00);if (is16bit) {StringUtil.putUnicodeLE(username, out);} else {StringUtil.putCompressedUnicode(username, out);}int encodedByteCount = 3 + username.length() * (is16bit ? 2 : 1);int paddingSize = DATA_SIZE - encodedByteCount;out.write(PADDING, 0, paddingSize);}
public boolean isExpired() {return false;}
public ListJobsRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public SheetRefEvaluator getSheetEvaluator(int sheetIndex) {if (sheetIndex < _firstSheetIndex || sheetIndex > _lastSheetIndex) {throw new IllegalArgumentException("Invalid SheetIndex: " + sheetIndex +" - Outside range " + _firstSheetIndex + " : " + _lastSheetIndex);}return _sheetEvaluators[sheetIndex-_firstSheetIndex];}
public static String[] stringToPath(String s) {List<String> parts = new ArrayList<>();int length = s.length();if (length == 0) {return new String[0];}char[] buffer = new char[length];int upto = 0;boolean lastEscape = false;for(int i=0;i<length;i++) {char ch = s.charAt(i);if (lastEscape) {buffer[upto++] = ch;lastEscape = false;} else if (ch == ESCAPE_CHAR) {lastEscape = true;} else if (ch == DELIM_CHAR) {parts.add(new String(buffer, 0, upto));upto = 0;} else {buffer[upto++] = ch;}}parts.add(new String(buffer, 0, upto));assert !lastEscape;return parts.toArray(new String[parts.size()]);}
public CreateDirectConnectGatewayResult createDirectConnectGateway(CreateDirectConnectGatewayRequest request) {request = beforeClientExecution(request);return executeCreateDirectConnectGateway(request);}
public GetMLModelResult getMLModel(GetMLModelRequest request) {request = beforeClientExecution(request);return executeGetMLModel(request);}
public boolean isValid() {if (bytes == null) {throw new IllegalStateException("bytes is null");}if (length < 0) {throw new IllegalStateException("length is negative: " + length);}if (length > bytes.length) {throw new IllegalStateException("length is out of bounds: " + length + ",bytes.length=" + bytes.length);}if (offset < 0) {throw new IllegalStateException("offset is negative: " + offset);}if (offset > bytes.length) {throw new IllegalStateException("offset out of bounds: " + offset + ",bytes.length=" + bytes.length);}if (offset + length < 0) {throw new IllegalStateException("offset+length is negative: offset=" + offset + ",length=" + length);}if (offset + length > bytes.length) {throw new IllegalStateException("offset+length out of bounds: offset=" + offset + ",length=" + length + ",bytes.length=" + bytes.length);}return true;}
public String toString() {return getName();}
public DescribeIAMPolicyAssignmentResult describeIAMPolicyAssignment(DescribeIAMPolicyAssignmentRequest request) {request = beforeClientExecution(request);return executeDescribeIAMPolicyAssignment(request);}
public boolean isRefLogIncludingResult() {return refLogIncludeResult;}
public DeleteStreamingDistributionResult deleteStreamingDistribution(DeleteStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeDeleteStreamingDistribution(request);}
public RawSubStringPattern(String patternText) {if (patternText.length() == 0)throw new IllegalArgumentException(JGitText.get().cannotMatchOnEmptyString);needleString = patternText;final byte[] b = Constants.encode(patternText);needle = new byte[b.length];for (int i = 0; i < b.length; i++)needle[i] = lc(b[i]);}
public ListRulesResult listRules(ListRulesRequest request) {request = beforeClientExecution(request);return executeListRules(request);}
@Override public Iterator<Entry<K, V>> iterator() {final Iterator<Entry<K, V>> iterator = esDelegate.iterator();return new Iterator<Entry<K, V>>() {Entry<K, V> entry;
public SendMessageResult sendMessage(String queueUrl, String messageBody) {return sendMessage(new SendMessageRequest().withQueueUrl(queueUrl).withMessageBody(messageBody));}
public static double getExcelDate(Date date) {return getExcelDate(date, false);}
public String toString() {return markedUpText.subSequence(textStartPos, textEndPos).toString();}
public ModifyInstancePlacementResult modifyInstancePlacement(ModifyInstancePlacementRequest request) {request = beforeClientExecution(request);return executeModifyInstancePlacement(request);}
public static String replaceOccupiedParameters(String url, Map<String, String> paths) {String result = url;for (Map.Entry<String, String> entry : paths.entrySet()) {String key = entry.getKey();String value = entry.getValue();String target = "[" + key + "]";result = result.replace(target, value);}return result;}
public String toString() {return "<matchAllDocs field='*' term='*'/>";}
public DeleteMetricFilterRequest(String logGroupName, String filterName) {setLogGroupName(logGroupName);setFilterName(filterName);}
public char readChar() throws IOException {return primitiveTypes.readChar();}
public DescribeInstanceStatusResult describeInstanceStatus(DescribeInstanceStatusRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceStatus(request);}
public BatchDeleteAttributesResult batchDeleteAttributes(BatchDeleteAttributesRequest request) {request = beforeClientExecution(request);return executeBatchDeleteAttributes(request);}
public String toString() {return "<fieldconfig name=\"" + this.fieldName + "\" configurations=\""+ super.toString() + "\"/>";}
public ListDeploymentGroupsResult listDeploymentGroups(ListDeploymentGroupsRequest request) {request = beforeClientExecution(request);return executeListDeploymentGroups(request);}
public CellGeneralFormatter() {this(LocaleUtil.getUserLocale());}
public BloomFilteredTerms(Terms terms, FuzzySet filter) {this.delegateTerms = terms;this.filter = filter;}
public int numBits(int idx) {return bytes[idx].bits;}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerChannelAction)) {return false;}return channel == ((LexerChannelAction)obj).channel;}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(getValue());}
public ExecuteChangeSetResult executeChangeSet(ExecuteChangeSetRequest request) {request = beforeClientExecution(request);return executeExecuteChangeSet(request);}
public StartInstanceResult startInstance(StartInstanceRequest request) {request = beforeClientExecution(request);return executeStartInstance(request);}
public CapitalizationFilterFactory(Map<String, String> args) {super(args);boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);Set<String> k = getSet(args, KEEP);if (k != null) {keep = new CharArraySet(10, ignoreCase);keep.addAll(k);}k = getSet(args, OK_PREFIX);if (k != null) {okPrefix = new ArrayList<>();for (String item : k) {okPrefix.add(item.toCharArray());}}minWordLength = getInt(args, MIN_WORD_LENGTH, 0);maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public static long[] copyOf(long[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public String toString() {return ref.toString();}
public ListNetworksResult listNetworks(ListNetworksRequest request) {request = beforeClientExecution(request);return executeListNetworks(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {ValueEval arg = arg0;if (arg instanceof RefEval) {RefEval re = (RefEval)arg;arg = re.getInnerValueEval(re.getFirstSheetIndex());} else if (arg instanceof AreaEval) {arg = ((AreaEval) arg).getRelativeValue(0, 0);}if (arg instanceof StringEval) {return arg;}if (arg instanceof ErrorEval) {return arg;}return StringEval.EMPTY_INSTANCE;}
public StopNotebookInstanceResult stopNotebookInstance(StopNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeStopNotebookInstance(request);}
public void applyFont(int startIndex, int endIndex, short fontIndex) {if (startIndex > endIndex)throw new IllegalArgumentException("Start index must be less than end index.");if (startIndex < 0 || endIndex > length())throw new IllegalArgumentException("Start and end index not in range.");if (startIndex == endIndex)return;short currentFont = NO_FONT;if (endIndex != length()) {currentFont = this.getFontAtIndex(endIndex);}_string = cloneStringIfRequired();Iterator<FormatRun> formatting = _string.formatIterator();if (formatting != null) {while (formatting.hasNext()) {FormatRun r = formatting.next();if ((r.getCharacterPos() >= startIndex) && (r.getCharacterPos() < endIndex))formatting.remove();}}_string.addFormatRun(new FormatRun((short)startIndex, fontIndex));if (endIndex != length())_string.addFormatRun(new FormatRun((short)endIndex, currentFont));addToSSTIfRequired();}
public int readInt() throws IOException {return primitiveTypes.readInt();}
public Iterable<RevCommit> call() throws GitAPIException, NoHeadException {checkCallable();List<TreeFilter> filters = new ArrayList<>();if (!pathFilters.isEmpty()) {filters.add(AndTreeFilter.create(PathFilterGroup.create(pathFilters), TreeFilter.ANY_DIFF));}if (!excludeTreeFilters.isEmpty()) {for (TreeFilter f : excludeTreeFilters) {filters.add(AndTreeFilter.create(f, TreeFilter.ANY_DIFF));}}if (!filters.isEmpty()) {if (filters.size() == 1) {filters.add(TreeFilter.ANY_DIFF);}walk.setTreeFilter(AndTreeFilter.create(filters));}if (skip > -1 && maxCount > -1)walk.setRevFilter(AndRevFilter.create(SkipRevFilter.create(skip),MaxCountRevFilter.create(maxCount)));else if (skip > -1)walk.setRevFilter(SkipRevFilter.create(skip));else if (maxCount > -1)walk.setRevFilter(MaxCountRevFilter.create(maxCount));if (!startSpecified) {try {ObjectId headId = repo.resolve(Constants.HEAD);if (headId == null)throw new NoHeadException(JGitText.get().noHEADExistsAndNoExplicitStartingRevisionWasSpecified);add(headId);} catch (IOException e) {throw new JGitInternalException(JGitText.get().anExceptionOccurredWhileTryingToAddTheIdOfHEAD,e);}}if (this.revFilter != null) {walk.setRevFilter(this.revFilter);}setCallable(false);return walk;}
public HyphenationCompoundWordTokenFilterFactory(Map<String, String> args) {super(args);dictFile = get(args, "dictionary");encoding = get(args, "encoding");hypFile = require(args, "hyphenator");minWordSize = getInt(args, "minWordSize", CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);minSubwordSize = getInt(args, "minSubwordSize", CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);maxSubwordSize = getInt(args, "maxSubwordSize", CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);onlyLongestMatch = getBoolean(args, "onlyLongestMatch", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DeleteTerminologyResult deleteTerminology(DeleteTerminologyRequest request) {request = beforeClientExecution(request);return executeDeleteTerminology(request);}
public boolean remove(Object o) {if (!(o instanceof Entry))return false;Entry<?, ?> e = (Entry<?, ?>)o;return removeMapping(e.getKey(), e.getValue());}
public GetObjectAttributesResult getObjectAttributes(GetObjectAttributesRequest request) {request = beforeClientExecution(request);return executeGetObjectAttributes(request);}
public RevWalk getRevWalk() {throw new UnsupportedOperationException(MessageFormat.format(JGitText.get().isAStaticFlagAndHasNorevWalkInstance, toString()));}
public DescribeKeyPairsResult describeKeyPairs(DescribeKeyPairsRequest request) {request = beforeClientExecution(request);return executeDescribeKeyPairs(request);}
public byte[] toByteArray() {return build();}
public void setIndexVersion(int version) {indexVersion = version;}
public IgnoreNode() {rules = new ArrayList<>();}
public TreeFilter negate() {return NotTreeFilter.create(this);}
public long ramBytesUsed() {return docs.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 2 + Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}
public String toString() {return exists() ? toObject().toString() : "(null)";}
public int available() throws IOException {checkReadPrimitiveTypes();return primitiveData.available();}
public UnicodeMapping(String pEntityName, String pResolvedValue) {entityName = "&" + pEntityName + ";";resolvedValue = pResolvedValue;}
public final void removeBreak(int main) {Integer rowKey = Integer.valueOf(main);Break region = _breakMap.get(rowKey);_breaks.remove(region);_breakMap.remove(rowKey);}
public void sort(int from, int to) {checkRange(from, to);if (to - from <= 1) {return;}reset(from, to);do {ensureInvariants();pushRunLen(nextRun());} while (runEnd(0) < to);exhaustStack();assert runEnd(0) == to;}
public File getDirectory() {return directory;}
public PositionTrackingVisitor(RecordVisitor rv, int initialPosition) {_rv = rv;_position = initialPosition;}
public T top() {return top;}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");if (externalWorkbookNumber >= 0) {sb.append(" [");sb.append("workbook=").append(getExternalWorkbookNumber());sb.append("] ");}sb.append("sheet=").append(getSheetName());if (lastSheetName != null) {sb.append(" : ");sb.append("sheet=").append(lastSheetName);}sb.append(" ! ");sb.append(formatReferenceAsString());sb.append("]");return sb.toString();}
public SubmoduleSyncCommand addPath(String path) {paths.add(path);return this;}
@Override public int size() {return map.size();}
public DeleteNamespaceRequest() {super("cr", "2016-06-07", "DeleteNamespace", "cr");setUriPattern("/namespace/[Namespace]");setMethod(MethodType.DELETE);}
public GeoRestriction(GeoRestrictionType restrictionType) {setRestrictionType(restrictionType.toString());}
public RecognizeEntityRequest() {super("visionai-poc", "2020-04-08", "RecognizeEntity");setMethod(MethodType.POST);}
public final int compareTo(byte[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, NB.decodeInt32(bs, p));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, NB.decodeInt32(bs, p + 4));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, NB.decodeInt32(bs, p + 8));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, NB.decodeInt32(bs, p + 12));if (cmp != 0)return cmp;return NB.compareUInt32(w5, NB.decodeInt32(bs, p + 16));}
public SendMessageRequest() {super("OnsMqtt", "2019-12-11", "SendMessage", "onsmqtt");setMethod(MethodType.POST);}
public SelectRequest(String selectExpression) {setSelectExpression(selectExpression);}
public TopMarginRecord clone() {return copy();}
public GetStaticIpsResult getStaticIps(GetStaticIpsRequest request) {request = beforeClientExecution(request);return executeGetStaticIps(request);}
public String toString() {final StringBuilder b = new StringBuilder();final int sectionCount = getSectionCount();b.append(getClass().getName());b.append('[');b.append("byteOrder: ");b.append(getByteOrder());b.append(", classID: ");b.append(getClassID());b.append(", format: ");b.append(getFormat());b.append(", OSVersion: ");b.append(getOSVersion());b.append(", sectionCount: ");b.append(sectionCount);b.append(", sections: [\n");for (Section section: getSections()) {b.append(section.toString(getPropertySetIDMap()));}b.append(']');b.append(']');return b.toString();}
public int stem(char s[], int len) {if (len < 4) return len;final int origLen = len;len = rule0(s, len);len = rule1(s, len);len = rule2(s, len);len = rule3(s, len);len = rule4(s, len);len = rule5(s, len);len = rule6(s, len);len = rule7(s, len);len = rule8(s, len);len = rule9(s, len);len = rule10(s, len);len = rule11(s, len);len = rule12(s, len);len = rule13(s, len);len = rule14(s, len);len = rule15(s, len);len = rule16(s, len);len = rule17(s, len);len = rule18(s, len);len = rule19(s, len);len = rule20(s, len);if (len == origLen)len = rule21(s, len);return rule22(s, len);}
public CreateStreamingURLResult createStreamingURL(CreateStreamingURLRequest request) {request = beforeClientExecution(request);return executeCreateStreamingURL(request);}
public IBSimilarity(Distribution distribution,Lambda lambda,Normalization normalization) {this.distribution = distribution;this.lambda = lambda;this.normalization = normalization;}
public GetBatchPredictionResult getBatchPrediction(GetBatchPredictionRequest request) {request = beforeClientExecution(request);return executeGetBatchPrediction(request);}
public StartInstancesResult startInstances(StartInstancesRequest request) {request = beforeClientExecution(request);return executeStartInstances(request);}
public DescribeLoadBalancerAttributesResult describeLoadBalancerAttributes(DescribeLoadBalancerAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeLoadBalancerAttributes(request);}
public Filter(int type, long size, InputStream in) {this.type = type;this.size = size;this.in = in;}
public String getBaseForm() {return dictionary.getBaseForm(wordId, surfaceForm, offset, length);}
public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {if (fieldNames.size() == 1) { return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);} else { List<SrndQuery> queries = new ArrayList<>();Iterator<String> fni = getFieldNames().listIterator();SrndQuery qc;while (fni.hasNext()) {qc = q.clone();queries.add( new FieldsQuery( qc, fni.next(), fieldOp));}OrQuery oq = new OrQuery(queries,true ,OR_OPERATOR_NAME);return oq.makeLuceneQueryField(null, qf);}}
public SetVisibleToAllUsersResult setVisibleToAllUsers(SetVisibleToAllUsersRequest request) {request = beforeClientExecution(request);return executeSetVisibleToAllUsers(request);}
public GetBotResult getBot(GetBotRequest request) {request = beforeClientExecution(request);return executeGetBot(request);}
public UpdateApnsSandboxChannelResult updateApnsSandboxChannel(UpdateApnsSandboxChannelRequest request) {request = beforeClientExecution(request);return executeUpdateApnsSandboxChannel(request);}
public CreateRouteResult createRoute(CreateRouteRequest request) {request = beforeClientExecution(request);return executeCreateRoute(request);}
public FreeRefFunction findFunction(String name) {FreeRefFunction func = super.findFunction(name);if (func != null) {int idx = getFunctionIndex(name);_funcMap.put(idx, name);}return func;}
public boolean atMinValue() {return value == minValue;}
public TerminateInstanceInAutoScalingGroupResult terminateInstanceInAutoScalingGroup(TerminateInstanceInAutoScalingGroupRequest request) {request = beforeClientExecution(request);return executeTerminateInstanceInAutoScalingGroup(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[DVAL]\n");buffer.append("    .options      = ").append(getOptions()).append('\n');buffer.append("    .horizPos     = ").append(getHorizontalPos()).append('\n');buffer.append("    .vertPos      = ").append(getVerticalPos()).append('\n');buffer.append("    .comboObjectID   = ").append(Integer.toHexString(getObjectID())).append("\n");buffer.append("    .DVRecordsNumber = ").append(Integer.toHexString(getDVRecNo())).append("\n");buffer.append("[/DVAL]\n");return buffer.toString();}
public static Token newToken(int ofKind, String image){switch(ofKind){default : return new Token(ofKind, image);}}
public ATNConfig(ATNState state,int alt,PredictionContext context,SemanticContext semanticContext){this.state = state;this.alt = alt;this.context = context;this.semanticContext = semanticContext;}
public DataValidationConstraint createFormulaListConstraint(String listFormula) {return DVConstraint.createFormulaListConstraint(listFormula);}
public GlobalReplicationGroup failoverGlobalReplicationGroup(FailoverGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeFailoverGlobalReplicationGroup(request);}
public BatchPutAttributesResult batchPutAttributes(BatchPutAttributesRequest request) {request = beforeClientExecution(request);return executeBatchPutAttributes(request);}
public long get(int index) {final int o = index >>> 1;final int b = index & 1;final int shift = b << 5;return (blocks[o] >>> shift) & 4294967295L;}
public int execute(StringBuilder buf) {return index;}
public int remove(Object key) {boolean hashedOk;int index, next, hash;int result;Object object;index = next = findIndex(key, keys);if (keys[index] != key) {return -1;}result = values[index];int length = keys.length;while (true) {next = (next + 2) % length;object = keys[next];if (object == null) {break;}hash = getModuloHash(object, length);hashedOk = hash > index;if (next < index) {hashedOk = hashedOk || (hash <= next);} else {hashedOk = hashedOk && (hash <= next);}if (!hashedOk) {keys[index] = object;values[index] = values[next];index = next;}}size--;keys[index] = null;values[index] = -1;return result;}
public synchronized void setMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) {if (maxMergeCount == AUTO_DETECT_MERGES_AND_THREADS && maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {this.maxMergeCount = AUTO_DETECT_MERGES_AND_THREADS;this.maxThreadCount = AUTO_DETECT_MERGES_AND_THREADS;} else if (maxMergeCount == AUTO_DETECT_MERGES_AND_THREADS) {throw new IllegalArgumentException("both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS");} else if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {throw new IllegalArgumentException("both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS");} else {if (maxThreadCount < 1) {throw new IllegalArgumentException("maxThreadCount should be at least 1");}if (maxMergeCount < 1) {throw new IllegalArgumentException("maxMergeCount should be at least 1");}if (maxThreadCount > maxMergeCount) {throw new IllegalArgumentException("maxThreadCount should be <= maxMergeCount (= " + maxMergeCount + ")");}this.maxThreadCount = maxThreadCount;this.maxMergeCount = maxMergeCount;}}
public final DoubleBuffer put(double[] src) {return put(src, 0, src.length);}
public final Collection<Ref> getRefs() {return advertisedRefs.values();}
public DocFreqValueSource(String field, String val, String indexedField, BytesRef indexedBytes) {this.field = field;this.val = val;this.indexedField = indexedField;this.indexedBytes = indexedBytes;}
public String getSegmentsFileName() {return IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,"",lastGeneration);}
public Listener(String protocol, Integer loadBalancerPort, Integer instancePort) {setProtocol(protocol);setLoadBalancerPort(loadBalancerPort);setInstancePort(instancePort);}
public GetCurrentUserResult getCurrentUser(GetCurrentUserRequest request) {request = beforeClientExecution(request);return executeGetCurrentUser(request);}
public String toString() {return "ObjectDirectory[" + getDirectory() + "]"; }
public IllegalFormatWidthException(int w) {this.w = w;}
public String toToken() {return this.token;}
public UpdatePhoneNumberResult updatePhoneNumber(UpdatePhoneNumberRequest request) {request = beforeClientExecution(request);return executeUpdatePhoneNumber(request);}
public final IndexableField getField(String name) {for (IndexableField field : fields) {if (field.name().equals(name)) {return field;}}return null;}
public DisableDomainTransferLockResult disableDomainTransferLock(DisableDomainTransferLockRequest request) {request = beforeClientExecution(request);return executeDisableDomainTransferLock(request);}
public PrintHeadersRecord clone() {return copy();}
public UpdateDataSourceResult updateDataSource(UpdateDataSourceRequest request) {request = beforeClientExecution(request);return executeUpdateDataSource(request);}
public int popMode() {if ( _modeStack.isEmpty() ) throw new EmptyStackException();if ( LexerATNSimulator.debug ) System.out.println("popMode back to "+ _modeStack.peek());mode( _modeStack.pop() );return _mode;}
public ExternalSheet getExternalSheet(int externSheetIndex) {ExternalSheet sheet = _iBook.getExternalSheet(externSheetIndex);if (sheet == null) {int localSheetIndex = convertFromExternSheetIndex(externSheetIndex);if (localSheetIndex == -1) {return null;}if (localSheetIndex == -2) {return null;}String sheetName = getSheetName(localSheetIndex);int lastLocalSheetIndex = _iBook.getLastSheetIndexFromExternSheetIndex(externSheetIndex);if (lastLocalSheetIndex == localSheetIndex) {sheet = new ExternalSheet(null, sheetName);} else {String lastSheetName = getSheetName(lastLocalSheetIndex);sheet = new ExternalSheetRange(null, sheetName, lastSheetName);}}return sheet;}
public static NoteMap newEmptyMap() {NoteMap r = new NoteMap(null );r.root = new LeafBucket(0);return r;}
@Override public java.lang.Object[] toArray() {synchronized (mutex) {return c.toArray();}}
public TagCommand setObjectId(RevObject id) {this.id = id;return this;}
public static void clear() {cache.clearAll();}
public final int prefixCompare(int[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, mask(1, bs[p]));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, mask(2, bs[p + 1]));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, mask(3, bs[p + 2]));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, mask(4, bs[p + 3]));if (cmp != 0)return cmp;return NB.compareUInt32(w5, mask(5, bs[p + 4]));}
public LongBuffer put(long[] src, int srcOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, longCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, longCount);}this.position += longCount;return this;}
public MoPenDeleteGroupRequest() {super("MoPen", "2018-02-11", "MoPenDeleteGroup", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public ApplyResult addUpdatedFile(File f) {updatedFiles.add(f);return this;}
public T insertWithOverflow(T element) {if (size < maxSize) {add(element);return null;} else if (size > 0 && !lessThan(element, heap[1])) {T ret = heap[1];heap[1] = element;updateTop();return ret;} else {return element;}}
public boolean contains(Object object) {Iterator<E> it = iterator();if (object != null) {while (it.hasNext()) {if (object.equals(it.next())) {return true;}}} else {while (it.hasNext()) {if (it.next() == null) {return true;}}}return false;}
public UploadDocumentsResult uploadDocuments(UploadDocumentsRequest request) {request = beforeClientExecution(request);return executeUploadDocuments(request);}
public String getAccessKeyId() {return legacyCredential.getAccessKeyId();}
public static String toHex(String value) {return (value == null || value.length() == 0)? "[]": toHex(value.getBytes(LocaleUtil.CHARSET_1252));}
public String getText(Token start, Token stop) {if ( start!=null && stop!=null ) {return getText(Interval.of(start.getTokenIndex(), stop.getTokenIndex()));}return "";}
public static ValueVector createColumnVector(TwoDEval tableArray, int relativeColumnIndex) {return new ColumnVector(tableArray, relativeColumnIndex);}
public AcceptDomainTransferFromAnotherAwsAccountResult acceptDomainTransferFromAnotherAwsAccount(AcceptDomainTransferFromAnotherAwsAccountRequest request) {request = beforeClientExecution(request);return executeAcceptDomainTransferFromAnotherAwsAccount(request);}
public StartDeviceSyncResult startDeviceSync(StartDeviceSyncRequest request) {request = beforeClientExecution(request);return executeStartDeviceSync(request);}
@Override public boolean containsKey(Object key) {return isInBounds(key) && TreeMap.this.containsKey(key);}
public static int idealObjectArraySize(int need) {return idealByteArraySize(need * 4) / 4;}
public DescribeWorkspacesResult describeWorkspaces() {return describeWorkspaces(new DescribeWorkspacesRequest());}
@Override public Iterator<Entry<K, V>> iterator() {return new EntryIterator();}
public GlobalCluster removeFromGlobalCluster(RemoveFromGlobalClusterRequest request) {request = beforeClientExecution(request);return executeRemoveFromGlobalCluster(request);}
public Map<String, MergeResult<? extends Sequence>> getMergeResults() {return mergeResults;}
public static final int parseTimeZoneOffset(byte[] b, int ptr) {return parseTimeZoneOffset(b, ptr, null);}
public String toString() {synchronized (Hashtable.this) {return super.toString();}}
public void reset() throws IOException {in.reset();lineNumber = markedLineNumber;lastChar = markedLastChar;}
public FS newInstance() {return new FS_Win32(this);}
public byte[] toByteArray() {if (buf != null) {byte[] r = new byte[ptr];System.arraycopy(buf, 0, r, 0, ptr);return r;}try {return overflowBuffer.toByteArray();} catch (IOException err) {throw new RuntimeException(err);}}
public AreaEval offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) {AreaI area = new OffsetArea(getFirstRow(), getFirstColumn(),relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);return new LazyAreaEval(area, _evaluator);}
public TerminateJobFlowsResult terminateJobFlows(TerminateJobFlowsRequest request) {request = beforeClientExecution(request);return executeTerminateJobFlows(request);}
public CreateTopicRequest(String name) {setName(name);}
public void freeBefore(int pos) {final int toFree = count - (nextPos - pos);assert toFree >= 0;assert toFree <= count;int index = nextWrite - count;if (index < 0) {index += positions.length;}for(int i=0;i<toFree;i++) {if (index == positions.length) {index = 0;}positions[index].reset();index++;}count -= toFree;}
public LengthFilter create(TokenStream input) {final LengthFilter filter = new LengthFilter(input,min,max);return filter;}
public StandardQueryParser() {super(new StandardQueryConfigHandler(), new StandardSyntaxParser(),new StandardQueryNodeProcessorPipeline(null),new StandardQueryTreeBuilder());setEnablePositionIncrements(true);}
public GetUserSourceRepoRefListRequest() {super("cr", "2016-06-07", "GetUserSourceRepoRefList", "cr");setUriPattern("/users/sourceAccount/[SourceAccountId]/repos/[SourceRepoNamespace]/[SourceRepoName]/refs");setMethod(MethodType.GET);}
public static LongBuffer wrap(long[] array, int start, int longCount) {Arrays.checkOffsetAndCount(array.length, start, longCount);LongBuffer buf = new ReadWriteLongArrayBuffer(array);buf.position = start;buf.limit = start + longCount;return buf;}
public UpperCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ListNotesCommand notesList() {return new ListNotesCommand(repo);}
public boolean isMissingNewlineAtEnd() {final int end = lines.get(lines.size() - 1);if (end == 0)return true;return content[end - 1] != '\n';}
public CreateDashboardResult createDashboard(CreateDashboardRequest request) {request = beforeClientExecution(request);return executeCreateDashboard(request);}
public void write(String str, int offset, int count) {write(str.substring(offset, offset + count).toCharArray());}
public UpdateNamespaceAuthorizationRequest() {super("cr", "2016-06-07", "UpdateNamespaceAuthorization", "cr");setUriPattern("/namespace/[Namespace]/authorizations/[AuthorizeId]");setMethod(MethodType.POST);}
public DescribeStreamResult describeStream(DescribeStreamRequest request) {request = beforeClientExecution(request);return executeDescribeStream(request);}
public void mark(int markLimit) throws IOException {if (markLimit < 0) {throw new IllegalArgumentException();}synchronized (lock) {checkNotClosed();this.markLimit = markLimit;mark = pos;}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 16) | (byte1 << 8) | byte2;}}
public String toString() {return String.format("channel(%d)", channel);}
public String getName() {int separatorIndex = path.lastIndexOf(separator);return (separatorIndex < 0) ? path : path.substring(separatorIndex + 1, path.length());}
public TestInvokeMethodResult testInvokeMethod(TestInvokeMethodRequest request) {request = beforeClientExecution(request);return executeTestInvokeMethod(request);}
public final void clearAttributes() {for (State state = getCurrentState(); state != null; state = state.next) {state.attribute.clear();}}
public ListRecipesResult listRecipes(ListRecipesRequest request) {request = beforeClientExecution(request);return executeListRecipes(request);}
public void setText(CharacterIterator newText) {text = newText;text.setIndex(text.getBeginIndex());currentSentence = 0;Span[] spans = sentenceOp.splitSentences(characterIteratorToString());sentenceStarts = new int[spans.length];for (int i = 0; i < spans.length; ++i) {sentenceStarts[i] = spans[i].getStart() + text.getBeginIndex();}}
public String formatWithConflicts(String message,List<String> conflictingPaths) {StringBuilder sb = new StringBuilder();String[] lines = message.split("\n"); int firstFooterLine = ChangeIdUtil.indexOfFirstFooterLine(lines);for (int i = 0; i < firstFooterLine; i++)sb.append(lines[i]).append('\n');if (firstFooterLine == lines.length && message.length() != 0)sb.append('\n');addConflictsMessage(conflictingPaths, sb);if (firstFooterLine < lines.length)sb.append('\n');for (int i = firstFooterLine; i < lines.length; i++)sb.append(lines[i]).append('\n');return sb.toString();}
public boolean get(int index) {return bits.get(index);}
public DescribeTaskSetsResult describeTaskSets(DescribeTaskSetsRequest request) {request = beforeClientExecution(request);return executeDescribeTaskSets(request);}
public void add(FormulaRecordAggregate agg) {if (_numberOfFormulas == 0) {if (_firstCell.getRow() != agg.getRow() || _firstCell.getCol() != agg.getColumn()) {throw new IllegalStateException("shared formula coding error: "+_firstCell.getCol()+'/'+_firstCell.getRow()+" != "+agg.getColumn()+'/'+agg.getRow());}}if (_numberOfFormulas >= _frAggs.length) {throw new RuntimeException("Too many formula records for shared formula group");}_frAggs[_numberOfFormulas++] = agg;}
public PacketLineOutRefAdvertiser(PacketLineOut out) {pckOut = out;}
public UpdateDataSetResult updateDataSet(UpdateDataSetRequest request) {request = beforeClientExecution(request);return executeUpdateDataSet(request);}
public ListKeyPhrasesDetectionJobsResult listKeyPhrasesDetectionJobs(ListKeyPhrasesDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListKeyPhrasesDetectionJobs(request);}
@Override public void clear() {Impl.this.clear();}
public VaultNotificationConfig(String sNSTopic, java.util.List<String> events) {setSNSTopic(sNSTopic);setEvents(events);}
public String[] lemmatize(String[] words, String[] postags) {String[] lemmas = null;String[] maxEntLemmas = null;if (dictionaryLemmatizer != null) {lemmas = dictionaryLemmatizer.lemmatize(words, postags);for (int i = 0; i < lemmas.length; ++i) {if (lemmas[i].equals("O")) {   if (lemmatizerME != null) {  if (maxEntLemmas == null) {maxEntLemmas = lemmatizerME.lemmatize(words, postags);}if ("_".equals(maxEntLemmas[i])) {lemmas[i] = words[i];    } else {lemmas[i] = maxEntLemmas[i];}} else {                     lemmas[i] = words[i];      }}}} else {                           maxEntLemmas = lemmatizerME.lemmatize(words, postags);for (int i = 0 ; i < maxEntLemmas.length ; ++i) {if ("_".equals(maxEntLemmas[i])) {maxEntLemmas[i] = words[i];  }}lemmas = maxEntLemmas;}return lemmas;}
public PaletteRecord(RecordInputStream in) {int field_1_numcolors = in.readShort();_colors.ensureCapacity(field_1_numcolors);for (int k = 0; k < field_1_numcolors; k++) {_colors.add(new PColor(in));}}
public GetJobOutputRequest(String accountId, String vaultName, String jobId, String range) {setAccountId(accountId);setVaultName(vaultName);setJobId(jobId);setRange(range);}
public ISigner getSigner() {return null;}
public static int codePointCount(BytesRef utf8) {int pos = utf8.offset;final int limit = pos + utf8.length;final byte[] bytes = utf8.bytes;int codePointCount = 0;for (; pos < limit; codePointCount++) {int v = bytes[pos] & 0xFF;if (v <    0x80) { pos += 1; continue; }if (v >=   0xc0) {if (v <  0xe0) { pos += 2; continue; }if (v <  0xf0) { pos += 3; continue; }if (v <  0xf8) { pos += 4; continue; }}throw new IllegalArgumentException();}if (pos > limit) throw new IllegalArgumentException();return codePointCount;}
public static Class<? extends Record> getRecordClass(int sid) {I_RecordCreator rc = _recordCreatorsById.get(Integer.valueOf(sid));if (rc == null) {return null;}return rc.getRecordClass();}
public WriteAccessRecord(RecordInputStream in) {if (in.remaining() > DATA_SIZE) {throw new RecordFormatException("Expected data size (" + DATA_SIZE + ") but got ("+ in.remaining() + ")");}int nChars = in.readUShort();int is16BitFlag = in.readUByte();if (nChars > DATA_SIZE || (is16BitFlag & 0xFE) != 0) {byte[] data = new byte[3 + in.remaining()];LittleEndian.putUShort(data, 0, nChars);LittleEndian.putByte(data, 2, is16BitFlag);in.readFully(data, 3, data.length-3);String rawValue = new String(data, StringUtil.UTF8);setUsername(rawValue.trim());return;}String rawText;if ((is16BitFlag & 0x01) == 0x00) {rawText = StringUtil.readCompressedUnicode(in, nChars);} else {rawText = StringUtil.readUnicodeLE(in, nChars);}field_1_username = rawText.trim();int padSize = in.remaining();while (padSize > 0) {in.readUByte();padSize--;}}
public FontBasisRecord(RecordInputStream in){field_1_xBasis                 = in.readShort();field_2_yBasis                 = in.readShort();field_3_heightBasis            = in.readShort();field_4_scale                  = in.readShort();field_5_indexToFontTable       = in.readShort();}
public String encodeText(String originalText) {return originalText;}
public PathEdit(String entryPath) {path = Constants.encode(entryPath);}
public boolean add(char[] text) {return map.put(text, PLACEHOLDER) == null;}
public ResolveAliasResult resolveAlias(ResolveAliasRequest request) {request = beforeClientExecution(request);return executeResolveAlias(request);}
public TokenStream create(TokenStream input) {return new GreekStemFilter(input);}
public DescribeCacheSecurityGroupsRequest(String cacheSecurityGroupName) {setCacheSecurityGroupName(cacheSecurityGroupName);}
public void readFully(byte[] buf, int off, int len) {if (shouldSkipEncryptionOnCurrentRecord) {readPlain(buf, off, buf.length);} else {ccis.readFully(buf, off, len);}}
public static byte[] copyOf(byte[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public DeleteDomainNameResult deleteDomainName(DeleteDomainNameRequest request) {request = beforeClientExecution(request);return executeDeleteDomainName(request);}
public GlobalReplicationGroup decreaseNodeGroupsInGlobalReplicationGroup(DecreaseNodeGroupsInGlobalReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDecreaseNodeGroupsInGlobalReplicationGroup(request);}
public SelectRequest(String selectExpression, Boolean consistentRead) {setSelectExpression(selectExpression);setConsistentRead(consistentRead);}
public SubmoduleAddCommand setURI(String uri) {this.uri = uri;return this;}
public PutRestApiResult putRestApi(PutRestApiRequest request) {request = beforeClientExecution(request);return executePutRestApi(request);}
public Ptg get3DReferencePtg(AreaReference areaRef, SheetIdentifier sheet) {int extIx = getSheetExtIx(sheet);return new Area3DPtg(areaRef, extIx);}
public CreateRequestValidatorResult createRequestValidator(CreateRequestValidatorRequest request) {request = beforeClientExecution(request);return executeCreateRequestValidator(request);}
public ByteBuffer duplicate() {return copy(this, mark);}
public void setPackedGitWindowSize(int newSize) {packedGitWindowSize = newSize;}
public DisassociateMembershipResult disassociateMembership(DisassociateMembershipRequest request) {request = beforeClientExecution(request);return executeDisassociateMembership(request);}
public void parse(Reader in) throws IOException, ParseException {LineNumberReader br = new LineNumberReader(in);try {String line = null;String lastSynSetID = "";CharsRef synset[] = new CharsRef[8];int synsetSize = 0;while ((line = br.readLine()) != null) {String synSetID = line.substring(2, 11);if (!synSetID.equals(lastSynSetID)) {addInternal(synset, synsetSize);synsetSize = 0;}synset = ArrayUtil.grow(synset, synsetSize + 1);synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());synsetSize++;lastSynSetID = synSetID;}addInternal(synset, synsetSize);} catch (IllegalArgumentException e) {ParseException ex = new ParseException("Invalid synonym rule at line " + br.getLineNumber(), 0);ex.initCause(e);throw ex;} finally {br.close();}}
public String[] list() {return listImpl(path);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[ENDOBJECT]\n");buffer.append("    .rt         =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt   =").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .iObjectKind=").append(HexDump.shortToHex(iObjectKind)).append('\n');buffer.append("    .reserved   =").append(HexDump.toHex(reserved)).append('\n');buffer.append("[/ENDOBJECT]\n");return buffer.toString();}
public static final RevFilter after(Date ts) {return after(ts.getTime());}
public static Element getFirstChildElement(Element element) {for (Node kid = element.getFirstChild(); kid != null; kid = kid.getNextSibling()) {if (kid.getNodeType() == Node.ELEMENT_NODE) {return (Element) kid;}}return null;}
@Override public boolean add(E object) {synchronized (mutex) {return c.add(object);}}
public LongMap() {table = createArray(64);growAt = (int) (table.length * LOAD_FACTOR);}
public ClaimGameServerResult claimGameServer(ClaimGameServerRequest request) {request = beforeClientExecution(request);return executeClaimGameServer(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval venumerator, ValueEval vedenominator) {double enumerator = 0;try {enumerator = OperandResolver.coerceValueToDouble(venumerator);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}double denominator = 0;try {denominator = OperandResolver.coerceValueToDouble(vedenominator);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}if (denominator == 0) {return ErrorEval.DIV_ZERO;}return new NumberEval((int)(enumerator / denominator));}
public synchronized V put(K key, V value) {if (value == null) {throw new NullPointerException();}int hash = secondaryHash(key.hashCode());HashtableEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);HashtableEntry<K, V> first = tab[index];for (HashtableEntry<K, V> e = first; e != null; e = e.next) {if (e.hash == hash && key.equals(e.key)) {V oldValue = e.value;e.value = value;return oldValue;}}modCount++;if (size++ > threshold) {rehash();  tab = doubleCapacity();index = hash & (tab.length - 1);first = tab[index];}tab[index] = new HashtableEntry<K, V>(key, value, hash, first);return null;}
public DescribeAutoScalingNotificationTypesResult describeAutoScalingNotificationTypes(DescribeAutoScalingNotificationTypesRequest request) {request = beforeClientExecution(request);return executeDescribeAutoScalingNotificationTypes(request);}
public ScandinavianFoldingFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ContentHandler getContentHandler () {return (theContentHandler == this) ? null : theContentHandler;}
public String toString() {return "$";}
public ListAssessmentRunsResult listAssessmentRuns(ListAssessmentRunsRequest request) {request = beforeClientExecution(request);return executeListAssessmentRuns(request);}
public ShortBuffer compact() {throw new ReadOnlyBufferException();}
public DeleteAssessmentRunResult deleteAssessmentRun(DeleteAssessmentRunRequest request) {request = beforeClientExecution(request);return executeDeleteAssessmentRun(request);}
public GetAppsResult getApps(GetAppsRequest request) {request = beforeClientExecution(request);return executeGetApps(request);}
public String highlightTerm(String originalText, TokenGroup tokenGroup){if (tokenGroup.getTotalScore() == 0)return originalText;float score = tokenGroup.getTotalScore();if (score == 0){return originalText;}StringBuilder sb = new StringBuilder();sb.append("<font ");if (highlightForeground){sb.append("color=\"");sb.append(getForegroundColorString(score));sb.append("\" ");}if (highlightBackground){sb.append("bgcolor=\"");sb.append(getBackgroundColorString(score));sb.append("\" ");}sb.append(">");sb.append(originalText);sb.append("</font>");return sb.toString();}
public PendingTerm(BytesRef term, BlockTermState state) {super(true);this.termBytes = new byte[term.length];System.arraycopy(term.bytes, term.offset, termBytes, 0, term.length);this.state = state;}
public IntBuffer asReadOnlyBuffer() {IntToByteBufferAdapter buf = new IntToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public final void addParents(RevCommit c, RevFlag queueControl) {final RevCommit[] pList = c.parents;if (pList == null) {return;}for (int i = 0; i < pList.length; i++) {if (firstParent && i > 0) {break;}add(pList[i], queueControl);}}
public IndicNormalizationFilter(TokenStream input) {super(input);}
public ListTasksResult listTasks(ListTasksRequest request) {request = beforeClientExecution(request);return executeListTasks(request);}
public ListTemplateAliasesResult listTemplateAliases(ListTemplateAliasesRequest request) {request = beforeClientExecution(request);return executeListTemplateAliases(request);}
public DescribeEventCategoriesResult describeEventCategories() {return describeEventCategories(new DescribeEventCategoriesRequest());}
public static File createTempFile(String prefix, String suffix) throws IOException {return createTempFile(prefix, suffix, null);}
public LabelAndValue(String label, Number value) {this.label = label;this.value = value;}
public String getReading(int wordId, char surface[], int off, int len) {return getFeature(wordId, 0);}
public CodepointCountFilter create(TokenStream input) {return new CodepointCountFilter(input, min, max);}
public String toString() {StringBuilder res = new StringBuilder(task.getName());res.append(" ");res.append(count);res.append(" ");res.append(elapsed);return res.toString();}
public void build(InputIterator iterator) throws IOException {if (iterator.hasPayloads()) {throw new IllegalArgumentException("this suggester doesn't support payloads");}if (iterator.hasContexts()) {throw new IllegalArgumentException("this suggester doesn't support contexts");}root = new TernaryTreeNode();iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, utf8SortedAsUTF16SortOrder);count = 0;ArrayList<String> tokens = new ArrayList<>();ArrayList<Number> vals = new ArrayList<>();BytesRef spare;CharsRefBuilder charsSpare = new CharsRefBuilder();while ((spare = iterator.next()) != null) {charsSpare.copyUTF8Bytes(spare);tokens.add(charsSpare.toString());vals.add(Long.valueOf(iterator.weight()));count++;}autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);}
public void setAllowThin(boolean allow) {allowThin = allow;}
public PhRun(int phoneticTextFirstCharacterOffset,int realTextFirstCharacterOffset, int realTextLength) {this.phoneticTextFirstCharacterOffset = phoneticTextFirstCharacterOffset;this.realTextFirstCharacterOffset = realTextFirstCharacterOffset;this.realTextLength = realTextLength;}
public void append(String name, RevBlob blob) {append(name, REGULAR_FILE, blob);}
public CreateHostedZoneResult createHostedZone(CreateHostedZoneRequest request) {request = beforeClientExecution(request);return executeCreateHostedZone(request);}
public ListFacetAttributesResult listFacetAttributes(ListFacetAttributesRequest request) {request = beforeClientExecution(request);return executeListFacetAttributes(request);}
public GetTrafficPolicyInstanceCountResult getTrafficPolicyInstanceCount(GetTrafficPolicyInstanceCountRequest request) {request = beforeClientExecution(request);return executeGetTrafficPolicyInstanceCount(request);}
public ModifyTrafficMirrorSessionResult modifyTrafficMirrorSession(ModifyTrafficMirrorSessionRequest request) {request = beforeClientExecution(request);return executeModifyTrafficMirrorSession(request);}
public DefaultClusterParameters describeDefaultClusterParameters(DescribeDefaultClusterParametersRequest request) {request = beforeClientExecution(request);return executeDescribeDefaultClusterParameters(request);}
public ConsoleWriter(OutputStream out) {super(out, true);lock = CONSOLE_LOCK;}
public MutableValue duplicate() {MutableValueBool v = new MutableValueBool();v.value = this.value;v.exists = this.exists;return v;}
public PatternTokenizerFactory(Map<String,String> args) {super(args);pattern = getPattern(args, PATTERN);group = getInt(args, GROUP, -1);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int addConditionalFormatting(CellRangeAddress[] regions,ConditionalFormattingRule rule1,ConditionalFormattingRule rule2) {return addConditionalFormatting(regions,(HSSFConditionalFormattingRule)rule1,(HSSFConditionalFormattingRule)rule2);}
public Credential(String keyId, String secret, String securityToken) {this.accessKeyId = keyId;this.accessSecret = secret;this.securityToken = securityToken;this.refreshDate = new Date();}
public void reset(int point) {this.point = point;ends.next = 0;starts.next = 0;}
public BottomMarginRecord( RecordInputStream in ) {field_1_margin = in.readDouble();}
public final void removeFields(String name) {Iterator<IndexableField> it = fields.iterator();while (it.hasNext()) {IndexableField field = it.next();if (field.name().equals(name)) {it.remove();}}}
public Token LT(int k) {lazyInit();if ( k == 0 ) return null;if ( k < 0 ) return LB(-k);int i = p;int n = 1; while ( n<k ) {if (sync(i + 1)) {i = nextTokenOnChannel(i + 1, channel);}n++;}return tokens.get(i);}
public FloatBuffer put(float c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putFloat(position++ * SizeOf.FLOAT, c);return this;}
public ExternalNameEval(EvaluationName name) {_name = name;}
public GetLoadBalancerMetricDataResult getLoadBalancerMetricData(GetLoadBalancerMetricDataRequest request) {request = beforeClientExecution(request);return executeGetLoadBalancerMetricData(request);}
public String getResultPath() {return resultPath.getPath();}
public RefWriter(RefList<Ref> refs) {this.refs = refs.asList();}
public HSSFWorkbook getStubHSSFWorkbook() {HSSFWorkbook wb = HSSFWorkbook.create(getStubWorkbook());for (BoundSheetRecord bsr : boundSheetRecords) {wb.createSheet(bsr.getSheetname());}return wb;}
public static SupBookRecord createExternalReferences(String url, String[] sheetNames) {return new SupBookRecord(url, sheetNames);}
public int getLevelForDistance(double dist) {if (dist == 0)return maxLevels;final int level = GeohashUtils.lookupHashLenForWidthHeight(dist, dist);return Math.max(Math.min(level, maxLevels), 1);}
public MissingCellDummyRecord(int row, int column) {this.row = row;this.column = column;}
public static TokenizerFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}
public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException {if (in.remaining() == 0) {return ByteBuffer.allocate(0);}reset();int length = (int) (in.remaining() * averageBytesPerChar);ByteBuffer output = ByteBuffer.allocate(length);CoderResult result = null;while (true) {result = encode(in, output, false);if (result==CoderResult.UNDERFLOW) {break;} else if (result==CoderResult.OVERFLOW) {output = allocateMore(output);continue;}checkCoderResult(result);}result = encode(in, output, true);checkCoderResult(result);while (true) {result = flush(output);if (result==CoderResult.UNDERFLOW) {output.flip();break;} else if (result==CoderResult.OVERFLOW) {output = allocateMore(output);continue;}checkCoderResult(result);output.flip();if (result.isMalformed()) {throw new MalformedInputException(result.length());} else if (result.isUnmappable()) {throw new UnmappableCharacterException(result.length());}break;}status = READY;finished = true;return output;}
public TextProgressMonitor(Writer out) {this.out = out;this.write = true;}
public double get(String name, double dflt) {double vals[] = (double[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Double.parseDouble(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToDoubleArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public LooseRef peel(ObjectIdRef newLeaf) {ObjectId peeledObjectId = newLeaf.getPeeledObjectId();ObjectId objectId = getObjectId();if (peeledObjectId != null) {return new LoosePeeledTag(snapShot, getName(),objectId, peeledObjectId);}return new LooseNonTag(snapShot, getName(), objectId);}
public List<Ref> call() throws GitAPIException {checkCallable();List<Ref> resultRefs;try {Collection<Ref> refs = new ArrayList<>();Ref head = repo.exactRef(HEAD);if (head != null && head.getLeaf().getName().equals(HEAD)) {refs.add(head);}if (listMode == null) {refs.addAll(repo.getRefDatabase().getRefsByPrefix(R_HEADS));} else if (listMode == ListMode.REMOTE) {refs.addAll(repo.getRefDatabase().getRefsByPrefix(R_REMOTES));} else {refs.addAll(repo.getRefDatabase().getRefsByPrefix(R_HEADS,R_REMOTES));}resultRefs = new ArrayList<>(filterRefs(refs));} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}Collections.sort(resultRefs,(Ref o1, Ref o2) -> o1.getName().compareTo(o2.getName()));setCallable(false);return resultRefs;}
public void writeLong(long v) {writeContinueIfRequired(8);_ulrOutput.writeLong(v);}
public UpdateSmsTemplateResult updateSmsTemplate(UpdateSmsTemplateRequest request) {request = beforeClientExecution(request);return executeUpdateSmsTemplate(request);}
public DeletePlacementGroupResult deletePlacementGroup(DeletePlacementGroupRequest request) {request = beforeClientExecution(request);return executeDeletePlacementGroup(request);}
public StartApplicationResult startApplication(StartApplicationRequest request) {request = beforeClientExecution(request);return executeStartApplication(request);}
public void mark(int readlimit) throws IOException {synchronized (lock) {super.mark(readlimit);markedLineNumber = lineNumber;markedLastWasCR = lastWasCR;}}
public int getPort() {return port;}
public int get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getInt(position++ * SizeOf.INT);}
public Entry<K, V> pollLastEntry() {Node<K, V> result = endpoint(false);if (result != null) {removeInternal(result);}return immutableCopy(result);}
public RebootRelationalDatabaseResult rebootRelationalDatabase(RebootRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeRebootRelationalDatabase(request);}
public String toString() {return getClass().getName() + " [" + asFormulaString() + "]";}
public BulkPublishResult bulkPublish(BulkPublishRequest request) {request = beforeClientExecution(request);return executeBulkPublish(request);}
public static String getNewRoleSessionName() {return "aliyun-java-sdk-" + System.currentTimeMillis();}
public CompleteLifecycleActionResult completeLifecycleAction(CompleteLifecycleActionRequest request) {request = beforeClientExecution(request);return executeCompleteLifecycleAction(request);}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[34];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 25; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}if ((jj_la1_1[i] & (1<<j)) != 0) {la1tokens[32+j] = true;}}}}for (int i = 0; i < 34; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public final ObjectToPack getDeltaBase() {if (deltaBase instanceof ObjectToPack)return (ObjectToPack) deltaBase;return null;}
public GetQueryExecutionResult getQueryExecution(GetQueryExecutionRequest request) {request = beforeClientExecution(request);return executeGetQueryExecution(request);}
public int getFontIndex(FontRecord font) {for(int i=0; i<=numfonts; i++) {FontRecord thisFont =( FontRecord ) records.get((records.getFontpos() - (numfonts - 1)) + i);if(thisFont == font) {return (i > 3) ? i+1 : i;}}throw new IllegalArgumentException("Could not find that font!");}
public FieldInfo add(FieldInfo fi) {return add(fi, -1);}
public DescribeDominantLanguageDetectionJobResult describeDominantLanguageDetectionJob(DescribeDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeDominantLanguageDetectionJob(request);}
public DescribeReservedInstancesModificationsResult describeReservedInstancesModifications() {return describeReservedInstancesModifications(new DescribeReservedInstancesModificationsRequest());}
public DiffCommand setOutputStream(OutputStream out) {this.out = out;return this;}
public ObjectId toObjectId() {return new ObjectId(this);}
public static short[] getAllKnownRecordSIDs() {if (_allKnownRecordSIDs == null) {short[] results = new short[ _recordCreatorsById.size() ];int i = 0;for (Integer sid : _recordCreatorsById.keySet()) {results[i++] = sid.shortValue();}Arrays.sort(results);_allKnownRecordSIDs = results;}return _allKnownRecordSIDs.clone();}
public PredictionContext getCachedContext(PredictionContext context) {if ( sharedContextCache==null ) return context;synchronized (sharedContextCache) {IdentityHashMap<PredictionContext, PredictionContext> visited =new IdentityHashMap<PredictionContext, PredictionContext>();return PredictionContext.getCachedContext(context,sharedContextCache,visited);}}
public CreateStageResult createStage(CreateStageRequest request) {request = beforeClientExecution(request);return executeCreateStage(request);}
public static EditList singleton(Edit edit) {EditList res = new EditList(1);res.add(edit);return res;}
public ModifySnapshotScheduleResult modifySnapshotSchedule(ModifySnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeModifySnapshotSchedule(request);}
public boolean isEmpty() {return elements.length == 0;}
public void copy(BytesRef bytes, BytesRef out) {int left = blockSize - upto;if (bytes.length > left || currentBlock==null) {if (currentBlock != null) {addBlock(currentBlock);didSkipBytes = true;}currentBlock = new byte[blockSize];upto = 0;left = blockSize;assert bytes.length <= blockSize;}out.bytes = currentBlock;out.offset = upto;out.length = bytes.length;System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);upto += bytes.length;}
public void add(int location, E object) {listIterator(location).add(object);}
public CreateKeyPairRequest(String keyName) {setKeyName(keyName);}
public boolean removeLastOccurrence(Object o) {Iterator<E> iter = new ReverseLinkIterator<E>(this);return removeOneOccurrence(o, iter);}
public int keyAt(int index) {return mKeys[index];}
public synchronized void setHierarchical(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.hierarchical = v;}
public ObjectId getOldObjectId() {return oldObjectId;}
public static String toStringTree(final Tree t, final List<String> ruleNames) {String s = Utils.escapeWhitespace(getNodeText(t, ruleNames), false);if ( t.getChildCount()==0 ) return s;StringBuilder buf = new StringBuilder();buf.append("(");s = Utils.escapeWhitespace(getNodeText(t, ruleNames), false);buf.append(s);buf.append(' ');for (int i = 0; i<t.getChildCount(); i++) {if ( i>0 ) buf.append(' ');buf.append(toStringTree(t.getChild(i), ruleNames));}buf.append(")");return buf.toString();}
public NavigableSet<E> headSet(E end, boolean endInclusive) {Comparator<? super E> c = backingMap.comparator();if (c == null) {((Comparable<E>) end).compareTo(end);} else {c.compare(end, end);}return new TreeSet<E>(backingMap.headMap(end, endInclusive));}
public static ContentSource create(ObjectReader reader) {return new ObjectReaderSource(reader);}
public void setReuseDeltas(boolean reuseDeltas) {this.reuseDeltas = reuseDeltas;}
public ListSkillsStoreSkillsByCategoryResult listSkillsStoreSkillsByCategory(ListSkillsStoreSkillsByCategoryRequest request) {request = beforeClientExecution(request);return executeListSkillsStoreSkillsByCategory(request);}
public final Ref getRef(String name) {return advertisedRefs.get(name);}
public ModifyInstanceGroupsResult modifyInstanceGroups(ModifyInstanceGroupsRequest request) {request = beforeClientExecution(request);return executeModifyInstanceGroups(request);}
public Object toObject() {return exists ? new Date(value) : null;}
public DescribeDBInstanceAutomatedBackupsResult describeDBInstanceAutomatedBackups(DescribeDBInstanceAutomatedBackupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBInstanceAutomatedBackups(request);}
public PreviewAgentsResult previewAgents(PreviewAgentsRequest request) {request = beforeClientExecution(request);return executePreviewAgents(request);}
public QueryGroupUsersRequest() {super("LinkFace", "2018-07-20", "QueryGroupUsers");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public DescribeOptionGroupsResult describeOptionGroups(DescribeOptionGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeOptionGroups(request);}
public UpdateGroupResult updateGroup(UpdateGroupRequest request) {request = beforeClientExecution(request);return executeUpdateGroup(request);}
public UpdateSigningCertificateRequest(String certificateId, StatusType status) {setCertificateId(certificateId);setStatus(status.toString());}
public CreateInstancesResult createInstances(CreateInstancesRequest request) {request = beforeClientExecution(request);return executeCreateInstances(request);}
public static int getRecordSizeForBlockCount(int blockCount) {return 20 + 4 * blockCount;}
public StopStreamEncryptionResult stopStreamEncryption(StopStreamEncryptionRequest request) {request = beforeClientExecution(request);return executeStopStreamEncryption(request);}
public GetPredictionResult getPrediction(GetPredictionRequest request) {request = beforeClientExecution(request);return executeGetPrediction(request);}
public ModifyWorkspacePropertiesResult modifyWorkspaceProperties(ModifyWorkspacePropertiesRequest request) {request = beforeClientExecution(request);return executeModifyWorkspaceProperties(request);}
public void copyFrom(TermState _other) {assert _other instanceof BlockTermState : "can not copy from " + _other.getClass().getName();BlockTermState other = (BlockTermState) _other;super.copyFrom(_other);docFreq = other.docFreq;totalTermFreq = other.totalTermFreq;termBlockOrd = other.termBlockOrd;blockFilePointer = other.blockFilePointer;}
public String getLine() {return command.getLine();}
public static void release(Inflater i) {if (i != null) {i.reset();if (releaseImpl(i))i.end();}}
public EnumSet<RevSort> getRevSort() {return sorting.clone();}
public boolean removeFetchRefSpec(RefSpec s) {return fetch.remove(s);}
public CharBuffer put(char c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public int getRate() {return (perMin ? rate : 60*rate);}
public DescribeDBParametersRequest(String dBParameterGroupName) {setDBParameterGroupName(dBParameterGroupName);}
public DeleteNodeResult deleteNode(DeleteNodeRequest request) {request = beforeClientExecution(request);return executeDeleteNode(request);}
@Override public List<E> subList(int from, int to) {Slice slice = this.slice;if (from < 0 || from > to || to > size()) {throw new IndexOutOfBoundsException("from=" + from + ", to=" + to +", list size=" + size());}return new CowSubList(slice.expectedElements, slice.from + from, slice.from + to);}
public CompositeReaderContext build() {return (CompositeReaderContext) build(null, reader, 0, 0);}
public Cluster rebootCluster(RebootClusterRequest request) {request = beforeClientExecution(request);return executeRebootCluster(request);}
public void setBorder(boolean value){field_1_options = border.setShortBoolean(field_1_options, value);}
public DescribeExportTasksResult describeExportTasks(DescribeExportTasksRequest request) {request = beforeClientExecution(request);return executeDescribeExportTasks(request);}
public SeriesLabelsRecord clone() {return copy();}
public final String getShortMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return ""; }int msgE = RawParseUtils.endOfParagraph(raw, msgB);String str = RawParseUtils.decode(guessEncoding(), raw, msgB, msgE);if (RevCommit.hasLF(raw, msgB, msgE)) {str = StringUtils.replaceLineBreaksWithSpace(str);}return str;}
public String toString() {StringBuilder r = new StringBuilder();if (isOperatorInfix()) {infixToString(r);} else {prefixToString(r);}weightToString(r);return r.toString();}
public String getPreferredAuthentications() {return preferredAuthentications;}
public int size() {return elements.length;}
public ListPartnerEventSourcesResult listPartnerEventSources(ListPartnerEventSourcesRequest request) {request = beforeClientExecution(request);return executeListPartnerEventSources(request);}
public void write(byte[] buffer, int offset, int length) {Arrays.checkOffsetAndCount(buffer.length, offset, length);synchronized (this) {if (out == null) {setError();return;}try {out.write(buffer, offset, length);if (autoFlush) {flush();}} catch (IOException e) {setError();}}}
public ListRegisteredTagsRequest() {super("CloudPhoto", "2017-07-11", "ListRegisteredTags", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DeleteDBSubnetGroupResult deleteDBSubnetGroup(DeleteDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteDBSubnetGroup(request);}
public PacketLineOut(OutputStream outputStream) {out = outputStream;lenbuffer = new byte[5];flushOnEnd = true;}
public void appendDebugInfo(StringBuilder sb) {sb.append('(');sb.append( "isxvi=").append(HexDump.shortToHex(_isxvi));sb.append(" isxvd=").append(HexDump.shortToHex(_isxvd));sb.append(" idObj=").append(HexDump.shortToHex(_idObj));sb.append(')');}
public InterfaceHdrRecord(RecordInputStream in) {_codepage = in.readShort();}
public DescribeVaultRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public void add(String match, String replacement) {if (match.length() == 0 ){throw new IllegalArgumentException("cannot match the empty string");}if (pendingPairs.containsKey(match)) {throw new IllegalArgumentException("match \"" + match + "\" was already added");}pendingPairs.put(match, replacement);}
public boolean equals(Object o) {if (this == o) {return true;}else if ( !(o instanceof ArrayPredictionContext) ) {return false;}if ( this.hashCode() != o.hashCode() ) {return false; }ArrayPredictionContext a = (ArrayPredictionContext)o;return Arrays.equals(returnStates, a.returnStates) &&Arrays.equals(parents, a.parents);}
public byte[] toArray() {if (arrays.isEmpty()) {return null;} else if (arrays.size() > 1) {int totalLength = 0;for (byte[] array : arrays) {totalLength += array.length;}byte[] concatenated = new byte[totalLength];int destPos = 0;for (byte[] array : arrays) {System.arraycopy(array, 0, concatenated, destPos, array.length);destPos += array.length;}arrays.clear();arrays.add(concatenated);}return arrays.get(0);}
public void serialize(LittleEndianOutput out) {int nItems = field_1_seriesNumbers.length;out.writeShort(nItems);for (int i = 0; i < nItems; i++) {out.writeShort(field_1_seriesNumbers[i]);}}
public boolean removePushURI(URIish toRemove) {return pushURIs.remove(toRemove);}
public StringBuilder append(String str) {append0(str);return this;}
public synchronized void close() {flush();if (out != null) {try {out.close();out = null;} catch (IOException e) {setError();}}}
public final BytesRef[] getBinaryValues(String name) {final List<BytesRef> result = new ArrayList<>();for (IndexableField field : fields) {if (field.name().equals(name)) {final BytesRef bytes = field.binaryValue();if (bytes != null) {result.add(bytes);}}}return result.toArray(new BytesRef[result.size()]);}
public final void backup(int amount) {bufferPosition -= amount;}
public void addChildRecord(EscherRecord childRecord) {getChildRecords().add( childRecord );}
public DeleteExpressionResult deleteExpression(DeleteExpressionRequest request) {request = beforeClientExecution(request);return executeDeleteExpression(request);}
public ReorderReceiptRuleSetResult reorderReceiptRuleSet(ReorderReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeReorderReceiptRuleSet(request);}
public FtrHeader(RecordInputStream in) {recordType = in.readShort();grbitFrt   = in.readShort();associatedRange = new CellRangeAddress(in);}
public PutVoiceConnectorProxyResult putVoiceConnectorProxy(PutVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorProxy(request);}
public DescribeDataSourcePermissionsResult describeDataSourcePermissions(DescribeDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDataSourcePermissions(request);}
public final char get(int index) {checkIndex(index);return backingArray[offset + index];}
public final void writeByte(int val) throws IOException {out.write(val);written++;}
public ListTablesResult listTables(String exclusiveStartTableName) {return listTables(new ListTablesRequest().withExclusiveStartTableName(exclusiveStartTableName));}
public String toString() {return "Cell(readerIndex=" + readerIndex + " nodeID=" + index.getNodeID()+ " isLeaf=" + index.isLeafNode() + " distanceSquared=" + distanceSquared + ")";}
public Result getResult() {return status;}
public int addConditionalFormatting(CellRangeAddress[] regions,HSSFConditionalFormattingRule rule1,HSSFConditionalFormattingRule rule2) {return addConditionalFormatting(regions,new HSSFConditionalFormattingRule[] { rule1, rule2 });}
public DescribeImageBuildersResult describeImageBuilders(DescribeImageBuildersRequest request) {request = beforeClientExecution(request);return executeDescribeImageBuilders(request);}
public DescribeMountTargetsResult describeMountTargets(DescribeMountTargetsRequest request) {request = beforeClientExecution(request);return executeDescribeMountTargets(request);}
public UpdateClientCertificateResult updateClientCertificate(UpdateClientCertificateRequest request) {request = beforeClientExecution(request);return executeUpdateClientCertificate(request);}
public String getFormatString(CellValueRecordInterface cell) {int formatIndex = getFormatIndex(cell);if (formatIndex == -1) {return null;}return getFormatString(formatIndex);}
public void clear() {w1 = 0;w2 = 0;w3 = 0;w4 = 0;w5 = 0;}
public boolean equals( Object o ) {return o instanceof TurkishStemmer;}
public void disableRefLog() {customRefLog = true;refLogMessage = null;refLogIncludeResult = false;}
public ListPublicKeysResult listPublicKeys(ListPublicKeysRequest request) {request = beforeClientExecution(request);return executeListPublicKeys(request);}
public CreateDhcpOptionsResult createDhcpOptions(CreateDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeCreateDhcpOptions(request);}
public TokenStream create(TokenStream input) {return new ASCIIFoldingFilter(input, preserveOriginal);}
public BlockList(int capacity) {int dirSize = toDirectoryIndex(capacity);if ((capacity & BLOCK_MASK) != 0 || dirSize == 0)dirSize++;directory = BlockList.<T> newDirectory(dirSize);directory[0] = BlockList.<T> newBlock();tailBlock = directory[0];}
@Override public int size() {return Impl.this.size();}
public void addCellRangeAddress(int firstRow, int firstCol, int lastRow, int lastCol) {CellRangeAddress region = new CellRangeAddress(firstRow, lastRow, firstCol, lastCol);addCellRangeAddress(region);}
public DescribeCacheEngineVersionsResult describeCacheEngineVersions() {return describeCacheEngineVersions(new DescribeCacheEngineVersionsRequest());}
public DeleteEndpointConfigResult deleteEndpointConfig(DeleteEndpointConfigRequest request) {request = beforeClientExecution(request);return executeDeleteEndpointConfig(request);}
public String findSheetFirstNameFromExternSheet(int externSheetIndex){int indexToSheet = linkTable.getFirstInternalSheetIndexForExtIndex(externSheetIndex);return findSheetNameFromIndex(indexToSheet);}
public void copy(MutableValue source) {MutableValueBool s = (MutableValueBool) source;value = s.value;exists = s.exists;}
public void setChild(QueryNode child) {List<QueryNode> list = new ArrayList<>();list.add(child);this.set(list);}
public void setDateResolution(DateTools.Resolution dateResolution) {getQueryConfigHandler().set(ConfigurationKeys.DATE_RESOLUTION, dateResolution);}
public static <T> boolean contains(T[] array, T value) {for (T element : array) {if (element == null) {if (value == null) return true;} else {if (value != null && element.equals(value)) return true;}}return false;}
public ListLogPatternsResult listLogPatterns(ListLogPatternsRequest request) {request = beforeClientExecution(request);return executeListLogPatterns(request);}
public BatchDeleteImageResult batchDeleteImage(BatchDeleteImageRequest request) {request = beforeClientExecution(request);return executeBatchDeleteImage(request);}
public void seekExact(long ord) {throw new UnsupportedOperationException();}
public RightMarginRecord( RecordInputStream in ) {field_1_margin = in.readDouble();}
public boolean isAutoDetecting() {return false;}
public RestorePhoneNumberResult restorePhoneNumber(RestorePhoneNumberRequest request) {request = beforeClientExecution(request);return executeRestorePhoneNumber(request);}
public TestRenderTemplateResult testRenderTemplate(TestRenderTemplateRequest request) {request = beforeClientExecution(request);return executeTestRenderTemplate(request);}
public RevTag lookupTag(AnyObjectId id) {RevTag c = (RevTag) objects.get(id);if (c == null) {c = new RevTag(id);objects.add(c);}return c;}
public Query getQuery(Element e) throws ParserException {String text = DOMUtils.getText(e);try {Query q = null;if (unSafeParser != null) {synchronized (unSafeParser) {q = unSafeParser.parse(text);}} else {String fieldName = DOMUtils.getAttribute(e, "fieldName", defaultField);QueryParser parser = createQueryParser(fieldName, analyzer);q = parser.parse(text);}float boost = DOMUtils.getAttribute(e, "boost", 1.0f);return new BoostQuery(q, boost);} catch (ParseException e1) {throw new ParserException(e1.getMessage());}}
public CreateNetworkAclResult createNetworkAcl(CreateNetworkAclRequest request) {request = beforeClientExecution(request);return executeCreateNetworkAcl(request);}
public ThreeWayMerger newMerger(Repository db, boolean inCore) {return newMerger(db);}
public BufferedWriter(Writer out, int size) {super(out);if (size <= 0) {throw new IllegalArgumentException("size <= 0");}this.out = out;this.buf = new char[size];}
public ListConfigurationHistoryResult listConfigurationHistory(ListConfigurationHistoryRequest request) {request = beforeClientExecution(request);return executeListConfigurationHistory(request);}
public Request<GetChangeRequest> marshall(GetChangeRequest getChangeRequest) {if (getChangeRequest == null) {throw new SdkClientException("Invalid argument passed to marshall(...)");}Request<GetChangeRequest> request = new DefaultRequest<GetChangeRequest>(getChangeRequest, "AmazonRoute53");request.setHttpMethod(HttpMethodName.GET);String uriResourcePath = "/2013-04-01/change/{Id}";uriResourcePath = com.amazonaws.transform.PathMarshallers.NON_GREEDY.marshall(uriResourcePath, "Id", getChangeRequest.getId());request.setResourcePath(uriResourcePath);return request;}
public byte[] getCachedBytes() throws LargeObjectException {throw new LargeObjectException(id);}
public ModifyInstanceCreditSpecificationResult modifyInstanceCreditSpecification(ModifyInstanceCreditSpecificationRequest request) {request = beforeClientExecution(request);return executeModifyInstanceCreditSpecification(request);}
public void add(RevCommit c) {Block b = head;if (b == null || !b.canUnpop()) {b = free.newBlock();b.resetToEnd();b.next = head;head = b;}b.unpop(c);}
public SpanTermQuery newSpanTermQuery(Term term) throws TooManyBasicQueries {checkMax();return new SpanTermQuery(term);}
public StringWriter(int initialSize) {if (initialSize < 0) {throw new IllegalArgumentException();}buf = new StringBuffer(initialSize);lock = buf;}
public String toString() {return super.toString() + "(\"" + patternText + "\")";}
public ATNConfig precedenceTransition(ATNConfig config,PrecedencePredicateTransition pt,boolean collectPredicates,boolean inContext,boolean fullCtx){if ( debug ) {System.out.println("PRED (collectPredicates="+collectPredicates+") "+pt.precedence+">=_p"+", ctx dependent=true");if ( parser != null ) {System.out.println("context surrounding pred is "+parser.getRuleInvocationStack());}}ATNConfig c = null;if (collectPredicates && inContext) {if ( fullCtx ) {int currentPosition = _input.index();_input.seek(_startIndex);boolean predSucceeds = evalSemanticContext(pt.getPredicate(), _outerContext, config.alt, fullCtx);_input.seek(currentPosition);if ( predSucceeds ) {c = new ATNConfig(config, pt.target); }}else {SemanticContext newSemCtx =SemanticContext.and(config.semanticContext, pt.getPredicate());c = new ATNConfig(config, pt.target, newSemCtx);}}else {c = new ATNConfig(config, pt.target);}if ( debug ) System.out.println("config from pred transition="+c);return c;}
public GetDomainStatisticsReportResult getDomainStatisticsReport(GetDomainStatisticsReportRequest request) {request = beforeClientExecution(request);return executeGetDomainStatisticsReport(request);}
public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;TermRangeQuery other = (TermRangeQuery) obj;if (includeLower != other.includeLower)return false;if (includeUpper != other.includeUpper)return false;if (lowerTerm == null) {if (other.lowerTerm != null)return false;} else if (!lowerTerm.equals(other.lowerTerm))return false;if (upperTerm == null) {if (other.upperTerm != null)return false;} else if (!upperTerm.equals(other.upperTerm))return false;return true;}
public DescribeTransitGatewayRouteTablesResult describeTransitGatewayRouteTables(DescribeTransitGatewayRouteTablesRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayRouteTables(request);}
public BootstrapActionConfig build() {if (replace) {args.add("--replace");}return new BootstrapActionConfig().withName("Configure Daemons").withScriptBootstrapAction(new ScriptBootstrapActionConfig().withPath("s3:.withArgs(args));}
public boolean isLegalReplacement(byte[] replacement) {if (decoder == null) {decoder = cs.newDecoder();decoder.onMalformedInput(CodingErrorAction.REPORT);decoder.onUnmappableCharacter(CodingErrorAction.REPORT);}ByteBuffer in = ByteBuffer.wrap(replacement);CharBuffer out = CharBuffer.allocate((int) (replacement.length * decoder.maxCharsPerByte()));CoderResult result = decoder.decode(in, out, true);return !result.isError();}
public UpdatePipelineResult updatePipeline(UpdatePipelineRequest request) {request = beforeClientExecution(request);return executeUpdatePipeline(request);}
public boolean isAboveMinRep() {int sc = _significand.bitLength() - C_64;return _significand.compareTo(BI_MIN_BASE.shiftLeft(sc)) > 0;}
public AssociateContactWithAddressBookResult associateContactWithAddressBook(AssociateContactWithAddressBookRequest request) {request = beforeClientExecution(request);return executeAssociateContactWithAddressBook(request);}
public DeleteFolderResult deleteFolder(DeleteFolderRequest request) {request = beforeClientExecution(request);return executeDeleteFolder(request);}
public PhraseWildcardQuery build() {return new PhraseWildcardQuery(field, phraseTerms, slop, maxMultiTermExpansions, segmentOptimizationEnabled);}
public DescribeJobFlowsResult describeJobFlows() {return describeJobFlows(new DescribeJobFlowsRequest());}
public float tf(float freq) {return baselineTf(freq);}
public DescribePublishingDestinationResult describePublishingDestination(DescribePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeDescribePublishingDestination(request);}
public int getLeftId(int wordId) {return LEFT_ID;}
public static NormalisedDecimal create(BigInteger frac, int binaryExponent) {int pow10;if (binaryExponent > 49 || binaryExponent < 46) {int x = (29 << 19) - binaryExponent * LOG_BASE_10_OF_2_TIMES_2_POW_20;x += C_2_POW_19; pow10 = -(x >> 20);} else {pow10 = 0;}MutableFPNumber cc = new MutableFPNumber(frac, binaryExponent);if (pow10 != 0) {cc.multiplyByPowerOfTen(-pow10);}switch (cc.get64BitNormalisedExponent()) {case 46:if (cc.isAboveMinRep()) {break;}case 44:case 45:cc.multiplyByPowerOfTen(1);pow10--;break;case 47:case 48:break;case 49:if (cc.isBelowMaxRep()) {break;}case 50:cc.multiplyByPowerOfTen(-1);pow10++;break;default:throw new IllegalStateException("Bad binary exp " + cc.get64BitNormalisedExponent() + ".");}cc.normalise64bit();return cc.createNormalisedDecimal(pow10);}
public String toString() {return "DoubleRange(" + label + ": " + min + " to " + max + ")";}
public void setRefLogIdent(PersonIdent pi) {destination.setRefLogIdent(pi);}
public final void yybegin(int newState) {zzLexicalState = newState;}
public Trie(boolean forward) {rows.add(new Row());root = 0;this.forward = forward;}
public DeleteTagsRequest(java.util.List<String> resources) {setResources(resources);}
public ObjectProtectRecord clone() {return copy();}
public static FuncVarPtg create(String pName, int numArgs) {return create(numArgs, lookupIndex(pName));}
public void clear() {this.processors.clear();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeDouble(getValue());}
public NullReader(int valueCount) {this.valueCount = valueCount;}
public CreateVaultResult createVault(CreateVaultRequest request) {request = beforeClientExecution(request);return executeCreateVault(request);}
@Override public void add(int index, E object) {Object[] a = array;int s = size;if (index > s || index < 0) {throwIndexOutOfBoundsException(index, s);}if (s < a.length) {System.arraycopy(a, index, a, index + 1, s - index);} else {Object[] newArray = new Object[newCapacity(s)];System.arraycopy(a, 0, newArray, 0, index);System.arraycopy(a, index, newArray, index + 1, s - index);array = a = newArray;}a[index] = object;size = s + 1;modCount++;}
public int read(char[] c, int off, int len) {if (left > len) {s.getChars(upto, upto+len, c, off);upto += len;left -= len;return len;} else if (0 == left) {return -1;} else {s.getChars(upto, upto+left, c, off);int r = left;left = 0;upto = s.length();return r;}}
public DeleteDeploymentResult deleteDeployment(DeleteDeploymentRequest request) {request = beforeClientExecution(request);return executeDeleteDeployment(request);}
public String toString() {return getClass().getSimpleName() + "(bitsPerValue=" + bitsPerValue+ ",size=" + size() + ",blocks=" + blocks.length + ")";}
public VectorValueSource(List<ValueSource> sources) {this.sources = sources;}
public HSSFShape(HSSFShape parent, HSSFAnchor anchor) {this.parent = parent;this.anchor = anchor;this._escherContainer = createSpContainer();_optRecord = _escherContainer.getChildById(EscherOptRecord.RECORD_ID);_objRecord = createObjRecord();}
public GalicianMinimalStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DescribeFpgaImageAttributeResult describeFpgaImageAttribute(DescribeFpgaImageAttributeRequest request) {request = beforeClientExecution(request);return executeDescribeFpgaImageAttribute(request);}
public ValueFiller getValueFiller() {return new ValueFiller() {private final MutableValueBool mval = new MutableValueBool();@Override
public static int update(int hash, Object value) {return update(hash, value != null ? value.hashCode() : 0);}
public DescribeModelVersionsResult describeModelVersions(DescribeModelVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeModelVersions(request);}
public static IndexCommit findIndexCommit(Directory dir, String userData) throws IOException {Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);for (final IndexCommit ic : commits) {Map<String,String> map = ic.getUserData();String ud = null;if (map != null) {ud = map.get(USER_DATA);}if (ud != null && ud.equals(userData)) {return ic;}}throw new IOException("index does not contain commit with userData: " + userData);}
public IndexEnum(FST<Long> fst) {fstEnum = new BytesRefFSTEnum<>(fst);}
public HSSFEvaluationSheet(HSSFSheet hs) {_hs = hs;}
public void update(int b) {if (upto == buffer.length) {flush();}buffer[upto++] = (byte) b;}
public PutPartnerEventsResult putPartnerEvents(PutPartnerEventsRequest request) {request = beforeClientExecution(request);return executePutPartnerEvents(request);}
public boolean isThin() {return thin;}
public String toStringTree() {return toString();}
public PackConfig(Repository db) {fromConfig(db.getConfig());}
public void setDeltaCompress(boolean deltaCompress) {this.deltaCompress = deltaCompress;}
public ListTrafficPolicyInstancesByHostedZoneResult listTrafficPolicyInstancesByHostedZone(ListTrafficPolicyInstancesByHostedZoneRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyInstancesByHostedZone(request);}
public EscherRecord findFirstWithId(short id) {return findFirstWithId(id, getEscherRecords());}
public byte[] getEntryPathBuffer() {return path;}
public void setFont(Font f){font = f;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public boolean hasAnchoringBounds() {return anchoringBounds;}
public void drawPolygon(int[] xPoints, int[] yPoints,int nPoints){int right  = findBiggest(xPoints);int bottom = findBiggest(yPoints);int left   = findSmallest(xPoints);int top    = findSmallest(yPoints);HSSFPolygon shape = escherGroup.createPolygon(new HSSFChildAnchor(left,top,right,bottom) );shape.setPolygonDrawArea(right - left, bottom - top);shape.setPoints(addToAll(xPoints, -left), addToAll(yPoints, -top));shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setLineWidth(0);shape.setNoFill(true);}
public String getAccessKeyId() {return getCredentials().getAccessKeyId();}
public PutDedicatedIpWarmupAttributesResult putDedicatedIpWarmupAttributes(PutDedicatedIpWarmupAttributesRequest request) {request = beforeClientExecution(request);return executePutDedicatedIpWarmupAttributes(request);}
public void print(char ch) {print(String.valueOf(ch));}
public String buildExtensionField(String extensionKey) {return buildExtensionField(extensionKey, "");}
public CompareFacesResult compareFaces(CompareFacesRequest request) {request = beforeClientExecution(request);return executeCompareFaces(request);}
public PatchFormatException(List<FormatError> errors) {super(MessageFormat.format(JGitText.get().patchFormatException, errors));this.errors = errors;}
public String finish() {sb.append(formatTrailer());return sb.toString();}
public int getLevelForDistance(double dist) {if (dist == 0)return maxLevels;for (int i = 0; i < maxLevels-1; i++) {if(dist > levelW[i] && dist > levelH[i]) {return i+1;}}return maxLevels;}
public int[] init() {final int[] ord = super.init();boost = new float[ArrayUtil.oversize(ord.length, Float.BYTES)];termState = new TermStates[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];assert termState.length >= ord.length && boost.length >= ord.length;return ord;}
public final void yyreset(java.io.Reader reader) {zzReader = reader;zzAtBOL  = true;zzAtEOF  = false;zzEOFDone = false;zzEndRead = zzStartRead = 0;zzCurrentPos = zzMarkedPos = 0;zzFinalHighSurrogate = 0;yyline = yychar = yycolumn = 0;zzLexicalState = YYINITIAL;if (zzBuffer.length > ZZ_BUFFERSIZE)zzBuffer = new char[ZZ_BUFFERSIZE];}
public void deleteFile(String name) {throw new UnsupportedOperationException();}
public StopTrainingDocumentClassifierResult stopTrainingDocumentClassifier(StopTrainingDocumentClassifierRequest request) {request = beforeClientExecution(request);return executeStopTrainingDocumentClassifier(request);}
public TermStats(int docFreq, long totalTermFreq) {this.docFreq = docFreq;this.totalTermFreq = totalTermFreq;}
public GetAuthorizersResult getAuthorizers(GetAuthorizersRequest request) {request = beforeClientExecution(request);return executeGetAuthorizers(request);}
public void dispatch(RepositoryEvent event) {List<ListenerHandle> list = lists.get(event.getListenerType());if (list != null) {for (ListenerHandle handle : list)event.dispatch(handle.listener);}}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("spanNot(");buffer.append(include.toString(field));buffer.append(", ");buffer.append(exclude.toString(field));buffer.append(", ");buffer.append(Integer.toString(pre));buffer.append(", ");buffer.append(Integer.toString(post));buffer.append(")");return buffer.toString();}
public SearchGameSessionsResult searchGameSessions(SearchGameSessionsRequest request) {request = beforeClientExecution(request);return executeSearchGameSessions(request);}
public int stem(char s[], int len) {if (len < 4)return len;for (int i = 0; i < len; i++)switch(s[i]) {case 'ä':case 'å': s[i] = 'a'; break;case 'ö': s[i] = 'o'; break;}len = step1(s, len);len = step2(s, len);len = step3(s, len);len = norm1(s, len);len = norm2(s, len);return len;}
public PutConfigurationSetReputationOptionsResult putConfigurationSetReputationOptions(PutConfigurationSetReputationOptionsRequest request) {request = beforeClientExecution(request);return executePutConfigurationSetReputationOptions(request);}
public ListAttendeeTagsResult listAttendeeTags(ListAttendeeTagsRequest request) {request = beforeClientExecution(request);return executeListAttendeeTags(request);}
public static void validateSheetName(String sheetName) {if (sheetName == null) {throw new IllegalArgumentException("sheetName must not be null");}int len = sheetName.length();if (len < 1 || len > 31) {throw new IllegalArgumentException("sheetName '" + sheetName+ "' is invalid - character count MUST be greater than or equal to 1 and less than or equal to 31");}for (int i=0; i<len; i++) {char ch = sheetName.charAt(i);switch (ch) {case '/':case '\\':case '?':case '*':case ']':case '[':case ':':break;default:continue;}throw new IllegalArgumentException("Invalid char (" + ch+ ") found at index (" + i + ") in sheet name '" + sheetName + "'");}if (sheetName.charAt(0) == '\'' || sheetName.charAt(len-1) == '\'') {throw new IllegalArgumentException("Invalid sheet name '" + sheetName+ "'. Sheet names must not begin or end with (').");}}
public long getPosition() {return getPointer();}
public void reset(DataOutput out) {assert out != null;this.out = out;off = 0;ord = 0L;finished = false;}
public String toString(String field) {final StringBuilder buffer = new StringBuilder();if (!term.field().equals(field)) {buffer.append(term.field());buffer.append(":");}buffer.append(term.text());buffer.append('~');buffer.append(maxEdits);return buffer.toString();}
public RevFilter clone() {return new MaxCountRevFilter(maxCount);}
public DisableUserResult disableUser(DisableUserRequest request) {request = beforeClientExecution(request);return executeDisableUser(request);}
public void append(String stringToMatch) {for (int i = 0; i < stringToMatch.length(); i++) {final char c = stringToMatch.charAt(i);if (!extendStringToMatchByOneCharacter(c))break;}}
public StopTrainingJobResult stopTrainingJob(StopTrainingJobRequest request) {request = beforeClientExecution(request);return executeStopTrainingJob(request);}
public IndexInput openInput(String name, IOContext context) throws IOException {ensureOpen();final String id = IndexFileNames.stripSegmentName(name);final FileEntry entry = entries.get(id);if (entry == null) {String datFileName = IndexFileNames.segmentFileName(segmentName, "", Lucene50CompoundFormat.DATA_EXTENSION);throw new FileNotFoundException("No sub-file with id " + id + " found in compound file \"" + datFileName + "\" (fileName=" + name + " files: " + entries.keySet() + ")");}return handle.slice(name, entry.offset, entry.length);}
public GetSnowballUsageResult getSnowballUsage(GetSnowballUsageRequest request) {request = beforeClientExecution(request);return executeGetSnowballUsage(request);}
public DeleteUserProfileResult deleteUserProfile(DeleteUserProfileRequest request) {request = beforeClientExecution(request);return executeDeleteUserProfile(request);}
public int compare(ConfigLine a, ConfigLine b) {return compare2(a.section, a.subsection, a.name,b.section, b.subsection, b.name);}
public LongBuffer asReadOnlyBuffer() {return duplicate();}
public HSSFComment createCellComment(ClientAnchor anchor) {return createComment((HSSFAnchor) anchor);}
public CollatedTermAttributeImpl(Collator collator) {this.collator = (Collator) collator.clone();}
public UpdatePipelineStatusResult updatePipelineStatus(UpdatePipelineStatusRequest request) {request = beforeClientExecution(request);return executeUpdatePipelineStatus(request);}
public void copyTo(char[] tmp, StringBuilder w) {toHexCharArray(tmp);w.append(tmp, 0, Constants.OBJECT_ID_STRING_LENGTH);}
public BytesReader getBytesReader() {if (fst == null) {return null;} else {return fst.getBytesReader();}}
public CreateRouteTableResult createRouteTable(CreateRouteTableRequest request) {request = beforeClientExecution(request);return executeCreateRouteTable(request);}
public String toString(String field) {return "ToParentBlockJoinQuery ("+childQuery.toString()+")";}
public DisassociateClientVpnTargetNetworkResult disassociateClientVpnTargetNetwork(DisassociateClientVpnTargetNetworkRequest request) {request = beforeClientExecution(request);return executeDisassociateClientVpnTargetNetwork(request);}
public String toString() {return "<slop value='" + getValueString() + "'>" + "\n"+ getChild().toString() + "\n</slop>";}
public GetExportJobsResult getExportJobs(GetExportJobsRequest request) {request = beforeClientExecution(request);return executeGetExportJobs(request);}
public UpdateBaiduChannelResult updateBaiduChannel(UpdateBaiduChannelRequest request) {request = beforeClientExecution(request);return executeUpdateBaiduChannel(request);}
public ImportApiResult importApi(ImportApiRequest request) {request = beforeClientExecution(request);return executeImportApi(request);}
public synchronized int read() {return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}
public GetUserResult getUser(GetUserRequest request) {request = beforeClientExecution(request);return executeGetUser(request);}
public GetHealthCheckLastFailureReasonResult getHealthCheckLastFailureReason(GetHealthCheckLastFailureReasonRequest request) {request = beforeClientExecution(request);return executeGetHealthCheckLastFailureReason(request);}
public String getRawQuery() {return query;}
public static void fill(long[] array, int start, int end, long value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public boolean equals(Object obj) {if (obj instanceof StatePair) {StatePair p = (StatePair) obj;return p.s1 == s1 && p.s2 == s2;} else return false;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[OLD STRING]\n");buffer.append("    .string            = ").append(getString()).append("\n");buffer.append("[/OLD STRING]\n");return buffer.toString();}
public ExecutePolicyResult executePolicy(ExecutePolicyRequest request) {request = beforeClientExecution(request);return executeExecutePolicy(request);}
public UpdateEmailTemplateResult updateEmailTemplate(UpdateEmailTemplateRequest request) {request = beforeClientExecution(request);return executeUpdateEmailTemplate(request);}
public boolean equalsContents(final Object o) {final CustomProperty c = (CustomProperty) o;final String name1 = c.getName();final String name2 = this.getName();boolean equalNames = true;if (name1 == null) {equalNames = name2 == null;} else {equalNames = name1.equals(name2);}return equalNames && c.getID() == this.getID()&& c.getType() == this.getType()&& c.getValue().equals(this.getValue());}
public DuplicateFormatFlagsException(String f) {if (f == null) {throw new NullPointerException();}flags = f;}
public synchronized void mark(int readlimit) {marklimit = readlimit;markpos = pos;}
public final int prefixCompare(AnyObjectId other) {int cmp;cmp = NB.compareUInt32(w1, mask(1, other.w1));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, mask(2, other.w2));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, mask(3, other.w3));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, mask(4, other.w4));if (cmp != 0)return cmp;return NB.compareUInt32(w5, mask(5, other.w5));}
public UpdateRequestValidatorResult updateRequestValidator(UpdateRequestValidatorRequest request) {request = beforeClientExecution(request);return executeUpdateRequestValidator(request);}
public Extensions(char extensionFieldDelimiter) {this.extensionFieldDelimiter = extensionFieldDelimiter;}
public TokenStream create(TokenStream input) {return new EnglishMinimalStemFilter(input);}
public QueryText getPathElement(int index) {return values.get(index);}
public void serialize(LittleEndianOutput out) {out.writeShort(_sid);out.writeShort(_data.length);out.write(_data);}
public void setQueryConfigHandler(QueryConfigHandler queryConfigHandler) {this.queryConfig = queryConfigHandler;for (QueryNodeProcessor processor : this.processors) {processor.setQueryConfigHandler(this.queryConfig);}}
public DeleteGameSessionQueueResult deleteGameSessionQueue(DeleteGameSessionQueueRequest request) {request = beforeClientExecution(request);return executeDeleteGameSessionQueue(request);}
public List<DFAState> getStates() {List<DFAState> result = new ArrayList<DFAState>(states.keySet());Collections.sort(result, new Comparator<DFAState>() {@Override
public static CmpOp getOperator(String value) {int len = value.length();if (len < 1) {return OP_NONE;}char firstChar = value.charAt(0);switch(firstChar) {case '=':return OP_EQ;case '>':if (len > 1) {switch(value.charAt(1)) {case '=':return OP_GE;}}return OP_GT;case '<':if (len > 1) {switch(value.charAt(1)) {case '=':return OP_LE;case '>':return OP_NE;}}return OP_LT;}return OP_NONE;}
public void addChars( char[] characters, int[] widths ){for ( int i = 0; i < characters.length; i++ ){charWidths.put( Character.valueOf(characters[i]), Integer.valueOf(widths[i]));}}
public ShortBuffer duplicate() {return copy(this, mark);}
public void setValidating(boolean validating) {features.put (XmlPullParser.FEATURE_VALIDATION, validating);}
public DedicatedCapacityInner create(String resourceGroupName, String dedicatedCapacityName, DedicatedCapacityInner capacityParameters) {return createWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName, capacityParameters).toBlocking().last().body();}
public CancelIngestionResult cancelIngestion(CancelIngestionRequest request) {request = beforeClientExecution(request);return executeCancelIngestion(request);}
public void setEncoding(String encodingName) {encoding = Charset.forName(encodingName);}
public DeleteTemplateAliasResult deleteTemplateAlias(DeleteTemplateAliasRequest request) {request = beforeClientExecution(request);return executeDeleteTemplateAlias(request);}
public String resolveNameXText(int refIndex, int definedNameIndex, InternalWorkbook workbook) {int extBookIndex = _externSheetRecord.getExtbookIndexFromRefIndex(refIndex);int firstTabIndex = _externSheetRecord.getFirstSheetIndexFromRefIndex(refIndex);if (firstTabIndex == -1) {throw new RuntimeException("Referenced sheet could not be found");}ExternalBookBlock externalBook = _externalBookBlocks[extBookIndex];if (externalBook._externalNameRecords.length > definedNameIndex) {return _externalBookBlocks[extBookIndex].getNameText(definedNameIndex);} else if (firstTabIndex == -2) {NameRecord nr = getNameRecord(definedNameIndex);int sheetNumber = nr.getSheetNumber();StringBuilder text = new StringBuilder(64);if (sheetNumber > 0) {String sheetName = workbook.getSheetName(sheetNumber - 1);SheetNameFormatter.appendFormat(text, sheetName);text.append("!");}text.append(nr.getNameText());return text.toString();} else {throw new ArrayIndexOutOfBoundsException("Ext Book Index relative but beyond the supported length, was " +extBookIndex + " but maximum is " + _externalBookBlocks.length);}}
public InetAddress getRemoteAddress() {return peer;}
public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerTypeAction)) {return false;}return type == ((LexerTypeAction)obj).type;}
public RefValueArray(RefEval ref) {super(ref.getNumberOfSheets());_ref = ref;_width = ref.getNumberOfSheets();}
public static Git wrap(Repository repo) {return new Git(repo);}
public int get64BitNormalisedExponent() {return _binaryExponent + _significand.bitLength() - C_64;}
public GetRepoWebhookRequest() {super("cr", "2016-06-07", "GetRepoWebhook", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks");setMethod(MethodType.GET);}
public Object merge(Object first, Object second) {List<T> outputList = new ArrayList<>();if (!(first instanceof List)) {outputList.add((T) first);} else {outputList.addAll((List<T>) first);}if (!(second instanceof List)) {outputList.add((T) second);} else {outputList.addAll((List<T>) second);}return outputList;}
public UpdateThreatIntelSetResult updateThreatIntelSet(UpdateThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeUpdateThreatIntelSet(request);}
public final float getFloat(int index) {return Float.intBitsToFloat(getInt(index));}
public SortingFields(final Fields in, FieldInfos infos, Sorter.DocMap docMap) {super(in);this.docMap = docMap;this.infos = infos;}
public static SupBookRecord createAddInFunctions() {return new SupBookRecord(true, (short)1 );}
public ImportClientVpnClientCertificateRevocationListResult importClientVpnClientCertificateRevocationList(ImportClientVpnClientCertificateRevocationListRequest request) {request = beforeClientExecution(request);return executeImportClientVpnClientCertificateRevocationList(request);}
public GetVoiceConnectorOriginationResult getVoiceConnectorOrigination(GetVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorOrigination(request);}
public GetTypedLinkFacetInformationResult getTypedLinkFacetInformation(GetTypedLinkFacetInformationRequest request) {request = beforeClientExecution(request);return executeGetTypedLinkFacetInformation(request);}
public PhraseSlopQueryNode(QueryNode query, int value) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, "query", "null"));}this.value = value;setLeaf(false);allocate();add(query);}
public UpdateDeploymentGroupResult updateDeploymentGroup(UpdateDeploymentGroupRequest request) {request = beforeClientExecution(request);return executeUpdateDeploymentGroup(request);}
public DeleteVaultNotificationsRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
@Override public boolean contains(Object key) {return subMap.containsKey(key);}
public int get(String name, int dflt) {int vals[] = (int[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Integer.parseInt(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToIntArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public DeleteGitHubAccountTokenResult deleteGitHubAccountToken(DeleteGitHubAccountTokenRequest request) {request = beforeClientExecution(request);return executeDeleteGitHubAccountToken(request);}
public GetPasswordDataRequest(String instanceId) {setInstanceId(instanceId);}
public GetCloudFrontOriginAccessIdentityConfigRequest(String id) {setId(id);}
public STSAssumeRoleSessionCredentialsProvider withRoleSessionDurationSeconds(long roleSessionDurationSeconds) {if (roleSessionDurationSeconds < 900 || roleSessionDurationSeconds > 3600) {throw new IllegalArgumentException("Assume Role session duration should be in the range of 15min - 1Hr");}this.roleSessionDurationSeconds = roleSessionDurationSeconds;return this;}
final public QueryNode ModClause(CharSequence field) throws ParseException {QueryNode q;ModifierQueryNode.Modifier mods;mods = Modifiers();q = Clause(field);if (mods != ModifierQueryNode.Modifier.MOD_NONE) {q = new ModifierQueryNode(q, mods);}{if (true) return q;}throw new Error("Missing return statement in function");}
public AbbreviatedObjectId getOldId(int nthParent) {return oldIds[nthParent];}
public HttpRequest(String strUrl, Map<String, String> tmpHeaders) {super(strUrl);if (null != tmpHeaders) {this.headers = tmpHeaders;}}
public AcceptInvitationResult acceptInvitation(AcceptInvitationRequest request) {request = beforeClientExecution(request);return executeAcceptInvitation(request);}
public int getFormatIndex(CellValueRecordInterface cell) {ExtendedFormatRecord xfr = _xfRecords.get(cell.getXFIndex());if (xfr == null) {logger.log( POILogger.ERROR, "Cell " + cell.getRow() + "," + cell.getColumn()+ " uses XF with index " + cell.getXFIndex() + ", but we don't have that");return -1;}return xfr.getFormatIndex();}
public final File getFile() {return path;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 4) & 15;values[valuesOffset++] = block & 15;}}
public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");if (externalWorkbookNumber >= 0) {sb.append(" [");sb.append("workbook=").append(getExternalWorkbookNumber());sb.append("] ");}sb.append("sheet=").append(firstSheetName);if (lastSheetName != null) {sb.append(" : ");sb.append("sheet=").append(lastSheetName);}sb.append(" ! ");sb.append(formatReferenceAsString());sb.append("]");return sb.toString();}
public PushCommand setRefSpecs(List<RefSpec> specs) {checkCallable();this.refSpecs.clear();this.refSpecs.addAll(specs);return this;}
public static boolean isBinary(byte[] raw, int length) {if (length > FIRST_FEW_BYTES)length = FIRST_FEW_BYTES;for (int ptr = 0; ptr < length; ptr++)if (raw[ptr] == '\0')return true;return false;}
@Override public void clear() {AbstractBiMap.this.clear();}
public PackingPhase getPhase() {return phase;}
public State clone() {State clone = new State();clone.attribute = attribute.clone();if (next != null) {clone.next = next.clone();}return clone;}
public static double acosh(double a) {return Math.log(Math.sqrt(a * a - 1.0d) + a);}
public GetSearchSuggestionsResult getSearchSuggestions(GetSearchSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetSearchSuggestions(request);}
public static Date getJavaDate(double date, boolean use1904windowing, TimeZone tz) {return getJavaDate(date, use1904windowing, tz, false);}
public ListVerifiedEmailAddressesResult listVerifiedEmailAddresses(ListVerifiedEmailAddressesRequest request) {request = beforeClientExecution(request);return executeListVerifiedEmailAddresses(request);}
public int compareTo(QualityQuery other) {try {int n = Integer.parseInt(queryID);int nOther = Integer.parseInt(other.queryID);return n - nOther;} catch (NumberFormatException e) {return queryID.compareTo(other.queryID);}}
public void setExportAll(boolean export) {exportAll = export;}
public LexerATNConfig(LexerATNConfig c, ATNState state,PredictionContext context) {super(c, state, context, c.semanticContext);this.lexerActionExecutor = c.lexerActionExecutor;this.passedThroughNonGreedyDecision = checkNonGreedyDecision(c, state);}
public DescribeScheduledActionsResult describeScheduledActions(DescribeScheduledActionsRequest request) {request = beforeClientExecution(request);return executeDescribeScheduledActions(request);}
public boolean isAdjacentBefore(ColumnInfoRecord other) {return _lastCol == other._firstCol - 1;}
public QueryScorer(Query query, IndexReader reader, String field, String defaultField) {this.defaultField = defaultField;init(query, field, reader, true);}
public CreateConfigurationSetTrackingOptionsResult createConfigurationSetTrackingOptions(CreateConfigurationSetTrackingOptionsRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSetTrackingOptions(request);}
public synchronized int offsetByCodePoints(int index, int codePointOffset) {return super.offsetByCodePoints(index, codePointOffset);}
public void write(char[] buf) {write(buf, 0, buf.length);}
public GetSdkResult getSdk(GetSdkRequest request) {request = beforeClientExecution(request);return executeGetSdk(request);}
public PutEmailIdentityDkimAttributesResult putEmailIdentityDkimAttributes(PutEmailIdentityDkimAttributesRequest request) {request = beforeClientExecution(request);return executePutEmailIdentityDkimAttributes(request);}
public WorkflowExecutionDetail describeWorkflowExecution(DescribeWorkflowExecutionRequest request) {request = beforeClientExecution(request);return executeDescribeWorkflowExecution(request);}
public CloudFrontOriginAccessIdentityConfig(String callerReference) {setCallerReference(callerReference);}
public final String validate(String uri, int start, int end, String name)throws URISyntaxException {for (int i = start; i < end; ) {char ch = uri.charAt(i);if ((ch >= 'a' && ch <= 'z')|| (ch >= 'A' && ch <= 'Z')|| (ch >= '0' && ch <= '9')|| isRetained(ch)) {i++;} else if (ch == '%') {if (i + 2 >= end) {throw new URISyntaxException(uri, "Incomplete % sequence in " + name, i);}int d1 = hexToInt(uri.charAt(i + 1));int d2 = hexToInt(uri.charAt(i + 2));if (d1 == -1 || d2 == -1) {throw new URISyntaxException(uri, "Invalid % sequence: "+ uri.substring(i, i + 3) + " in " + name, i);}i += 3;} else {throw new URISyntaxException(uri, "Illegal character in " + name, i);}}return uri.substring(start, end);}
public UnbufferedCharStream(Reader input, int bufferSize) {this(bufferSize);this.input = input;fill(1); }
public ContinuableRecordInput(RecordInputStream in){_in = in;}
public StoredFieldsReader clone() {if (in == null) {throw new AlreadyClosedException("this FieldsReader is closed");}return new SimpleTextStoredFieldsReader(offsets, in.clone(), fieldInfos);}
public Initial(LittleEndianInput in) {_reserved0 = in.readInt();_reserved1 = in.readUShort();_reserved2 = in.readUByte();}
public synchronized int getProgress() {return mIndeterminate ? 0 : mProgress;}
public CreateNamedQueryResult createNamedQuery(CreateNamedQueryRequest request) {request = beforeClientExecution(request);return executeCreateNamedQuery(request);}
public static DoubleBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteDoubleArrayBuffer(capacity);}
public final String toString() {return getClass().getName() + " [" + _operator.getRepresentation() + getValueText() + "]";}
public LongBuffer asReadOnlyBuffer() {return ReadOnlyLongArrayBuffer.copy(this, mark);}
public CreateFlowDefinitionResult createFlowDefinition(CreateFlowDefinitionRequest request) {request = beforeClientExecution(request);return executeCreateFlowDefinition(request);}
public GetOpenIdTokenResult getOpenIdToken(GetOpenIdTokenRequest request) {request = beforeClientExecution(request);return executeGetOpenIdToken(request);}
public GetDocumentationPartResult getDocumentationPart(GetDocumentationPartRequest request) {request = beforeClientExecution(request);return executeGetDocumentationPart(request);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {int nArgs = args.length;if (nArgs < 2) {return ErrorEval.VALUE_INVALID;}try {double rate = NumericFunction.singleOperandEvaluate(args[0], srcRowIndex, srcColumnIndex);ValueEval[] vargs = new ValueEval[args.length-1];System.arraycopy(args, 1, vargs, 0, vargs.length);double[] values = AggregateFunction.ValueCollector.collectValues(vargs);double result = FinanceLib.npv(rate, values);NumericFunction.checkValue(result);return new NumberEval(result);} catch (EvaluationException e) {return e.getErrorEval();}}
public String suggestFileExtension() {switch (EscherRecordTypes.forTypeID(blip.getRecordId())) {case BLIP_WMF:return "wmf";case BLIP_EMF:return "emf";case BLIP_PICT:return "pict";case BLIP_PNG:return "png";case BLIP_JPEG:return "jpeg";case BLIP_DIB:return "dib";default:return "";}}
public AsyncResponsePostRequest() {super("industry-brain", "2018-07-12", "AsyncResponsePost");setMethod(MethodType.POST);}
public static final RevFilter between(long since, long until) {return new Between(since, until);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double val;double d1;try {val = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);d1 = singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}int nPlaces = (int)d1;if (nPlaces > 127) {return ErrorEval.VALUE_INVALID;}return new NumberEval(val);}
public Iterator<T> iterator() {return new MyIterator();}
public void reset(int[] docs, long[] offsets) {this.docs = docs;this.offsets = offsets;}
public ObjectId getObjectId() {return object;}
public String toString() {return "fileName=" + fileName + " size=" + size;}
public boolean isSubTotal(int rowIndex, int columnIndex){SheetRefEvaluator _sre = _evaluator.getSheetEvaluator(_evaluator.getFirstSheetIndex());return _sre.isSubTotal(getFirstRow() + rowIndex, getFirstColumn() + columnIndex);}
public DeleteCollectionResult deleteCollection(DeleteCollectionRequest request) {request = beforeClientExecution(request);return executeDeleteCollection(request);}
public void write(byte[] b) {writeContinueIfRequired(b.length);_ulrOutput.write(b);}
public Drawable getIndeterminateDrawable() {return mIndeterminateDrawable;}
public void write(byte[] b, int offset, int len) {checkPosition(len);System.arraycopy(b, offset, _buf, _writeIndex, len);_writeIndex += len;}
public ListWebsiteCertificateAuthoritiesResult listWebsiteCertificateAuthorities(ListWebsiteCertificateAuthoritiesRequest request) {request = beforeClientExecution(request);return executeListWebsiteCertificateAuthorities(request);}
public RevWalk(ObjectReader or, int depth) {super(or);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag("UNSHALLOW"); this.REINTERESTING = newFlag("REINTERESTING"); this.DEEPEN_NOT = newFlag("DEEPEN_NOT"); }
public DeleteLogStreamRequest(String logGroupName, String logStreamName) {setLogGroupName(logGroupName);setLogStreamName(logStreamName);}
public PrintWriter append(CharSequence csq) {if (csq == null) {csq = "null";}append(csq, 0, csq.length());return this;}
public boolean include(TreeWalk walker)throws MissingObjectException,IncorrectObjectTypeException, IOException {count++;if (count % stepSize == 0) {if (count <= total)monitor.update(stepSize);if (monitor.isCancelled())throw StopWalkException.INSTANCE;}return true;}
public RevObject getObjectId() {return id;}
public void setFlushOnEnd(boolean flushOnEnd) {this.flushOnEnd = flushOnEnd;}
public ListAutoMLJobsResult listAutoMLJobs(ListAutoMLJobsRequest request) {request = beforeClientExecution(request);return executeListAutoMLJobs(request);}
public void addBuilder(String nodeName, SpanQueryBuilder builder) {builders.put(nodeName, builder);}
public DescribeReplicationGroupsResult describeReplicationGroups() {return describeReplicationGroups(new DescribeReplicationGroupsRequest());}
public void removeAllCellsValuesForRow(int rowIndex) {if (rowIndex < 0 || rowIndex > MAX_ROW_INDEX) {throw new IllegalArgumentException("Specified rowIndex " + rowIndex+ " is outside the allowable range (0.." +MAX_ROW_INDEX + ")");}if (rowIndex >= records.length) {return;}records[rowIndex] = null;}
public DeleteProxySessionResult deleteProxySession(DeleteProxySessionRequest request) {request = beforeClientExecution(request);return executeDeleteProxySession(request);}
public DescribePoliciesResult describePolicies() {return describePolicies(new DescribePoliciesRequest());}
public NumberFormatIndexRecord(RecordInputStream in) {field_1_formatIndex = in.readShort();}
public CreatePrivateVirtualInterfaceResult createPrivateVirtualInterface(CreatePrivateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeCreatePrivateVirtualInterface(request);}
@Override public E get(int location) {return list.get(location);}
public String getPath() {return decode(path);}
public static String longToHex(long value) {StringBuilder sb = new StringBuilder(18);writeHex(sb, value, 16, "0x");return sb.toString();}
public RevFilter clone() {return new Binary(a.clone(), b.clone());}
public int compareTo( Toffs other ) {int diff = getStartOffset() - other.getStartOffset();if ( diff != 0 ) {return diff;}return getEndOffset() - other.getEndOffset();}
public UpdateNetworkProfileResult updateNetworkProfile(UpdateNetworkProfileRequest request) {request = beforeClientExecution(request);return executeUpdateNetworkProfile(request);}
public GetRelationalDatabaseParametersResult getRelationalDatabaseParameters(GetRelationalDatabaseParametersRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseParameters(request);}
public boolean contains(Object object) {return indexOf(object, 0) != -1;}
public boolean remove(Object object) {return removeFirstOccurrenceImpl(object);}
public DConRefRecord(RecordInputStream inStream) {if (inStream.getSid() != sid) {throw new RecordFormatException("Wrong sid: " + inStream.getSid());}firstRow = inStream.readUShort();lastRow = inStream.readUShort();firstCol = inStream.readUByte();lastCol = inStream.readUByte();charCount = inStream.readUShort();charType = inStream.readUByte() & 0x01;final int byteLength = charCount * (charType + 1);path = IOUtils.safelyAllocate(byteLength, MAX_RECORD_LENGTH);inStream.readFully(path);if (path[0] == 0x02) {_unused = inStream.readRemainder();}}
public int getSheetIndex(EvaluationSheet evalSheet) {HSSFSheet sheet = ((HSSFEvaluationSheet)evalSheet).getHSSFSheet();return _uBook.getSheetIndex(sheet);}
public synchronized int codePointAt(int index) {return super.codePointAt(index);}
public DeleteRepoBuildRuleRequest() {super("cr", "2016-06-07", "DeleteRepoBuildRule", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]");setMethod(MethodType.DELETE);}
public UpdateEmailChannelResult updateEmailChannel(UpdateEmailChannelRequest request) {request = beforeClientExecution(request);return executeUpdateEmailChannel(request);}
public TabIdRecord(RecordInputStream in) {int nTabs = in.remaining() / 2;_tabids = new short[nTabs];for (int i = 0; i < _tabids.length; i++) {_tabids[i] = in.readShort();}}
public String toFormulaString(){return ",";}
public CreateConnectionResult createConnection(CreateConnectionRequest request) {request = beforeClientExecution(request);return executeCreateConnection(request);}
public int calculateWorkdays(double start, double end, double[] holidays) {int saturdaysPast = this.pastDaysOfWeek(start, end, Calendar.SATURDAY);int sundaysPast = this.pastDaysOfWeek(start, end, Calendar.SUNDAY);int nonWeekendHolidays = this.calculateNonWeekendHolidays(start, end, holidays);return (int) (end - start + 1) - saturdaysPast - sundaysPast - nonWeekendHolidays;}
public IndexFormatTooNewException(String resourceDescription, int version, int minVersion, int maxVersion) {super("Format version is not supported (resource " + resourceDescription + "): "+ version + " (needs to be between " + minVersion + " and " + maxVersion + ")");this.resourceDescription = resourceDescription;this.version = version;this.minVersion = minVersion;this.maxVersion = maxVersion;}
public void apply(DirCacheEntry ent) {throw new UnsupportedOperationException(JGitText.get().noApplyInDelete);}
public boolean isNewFragment() {position += posIncAtt.getPositionIncrement();if (waitForPos <= position) {waitForPos = -1;} else if (waitForPos != -1) {return false;}WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());if (wSpanTerm != null) {List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();for (PositionSpan positionSpan : positionSpans) {if (positionSpan.start == position) {waitForPos = positionSpan.end + 1;break;}}}boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)&& (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);if (isNewFrag) {currentNumFrags++;}return isNewFrag;}
public StopMatchmakingResult stopMatchmaking(StopMatchmakingRequest request) {request = beforeClientExecution(request);return executeStopMatchmaking(request);}
public DescribeClientVpnTargetNetworksResult describeClientVpnTargetNetworks(DescribeClientVpnTargetNetworksRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnTargetNetworks(request);}
public FloatBuffer put(FloatBuffer buf) {throw new ReadOnlyBufferException();}
public final IntBuffer asIntBuffer() {return IntToByteBufferAdapter.asIntBuffer(this);}
public RemovePermissionResult removePermission(String queueUrl, String label) {return removePermission(new RemovePermissionRequest().withQueueUrl(queueUrl).withLabel(label));}
public void inform(ResourceLoader loader) {if (encoderClass.equals("float")){encoder = new FloatEncoder();} else if (encoderClass.equals("integer")){encoder = new IntegerEncoder();} else if (encoderClass.equals("identity")){encoder = new IdentityEncoder();} else {encoder = loader.newInstance(encoderClass, PayloadEncoder.class);}}
public GetHealthCheckResult getHealthCheck(GetHealthCheckRequest request) {request = beforeClientExecution(request);return executeGetHealthCheck(request);}
public ListNotebookInstanceLifecycleConfigsResult listNotebookInstanceLifecycleConfigs(ListNotebookInstanceLifecycleConfigsRequest request) {request = beforeClientExecution(request);return executeListNotebookInstanceLifecycleConfigs(request);}
public int next(int n) {if (n < 0) {for (int i = 0; i < -n; i++) {previous();}} else {for (int i = 0; i < n; i++) {next();}}return current();}
public static long calculateMaximumSize(final HeaderBlock header){return calculateMaximumSize(header.getBigBlockSize(), header.getBATCount());}
public String toString() {return "character=" + _character + ",fontIndex=" + _fontIndex;}
public static float[] grow(float[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {float[] copy = new float[oversize(minSize, Float.BYTES)];System.arraycopy(array, 0, copy, 0, array.length);return copy;} elsereturn array;}
public String getDataFormatString() {if (getDataFormatStringCache.get() != null) {if (lastDateFormat.get() == getDataFormat() && _workbook.getFormats().equals(lastFormats.get())) {return getDataFormatStringCache.get();}}lastFormats.set(_workbook.getFormats());lastDateFormat.set(getDataFormat());getDataFormatStringCache.set(getDataFormatString(_workbook));return getDataFormatStringCache.get();}
public UpdateSignalingChannelResult updateSignalingChannel(UpdateSignalingChannelRequest request) {request = beforeClientExecution(request);return executeUpdateSignalingChannel(request);}
public MoPenSendMqttMessageRequest() {super("MoPen", "2018-02-11", "MoPenSendMqttMessage", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public TreeSet(SortedSet<E> set) {this(set.comparator());Iterator<E> it = set.iterator();while (it.hasNext()) {add(it.next());}}
public DisassociateMembersResult disassociateMembers(DisassociateMembersRequest request) {request = beforeClientExecution(request);return executeDisassociateMembers(request);}
public DeleteVpcLinkResult deleteVpcLink(DeleteVpcLinkRequest request) {request = beforeClientExecution(request);return executeDeleteVpcLink(request);}
public DescribeDBSnapshotsResult describeDBSnapshots() {return describeDBSnapshots(new DescribeDBSnapshotsRequest());}
public void clear() {if(_evaluationListener != null) {_evaluationListener.onClearWholeCache();}_plainCellCache.clear();_formulaCellCache.clear();}
public void setDiffAlgorithm(DiffAlgorithm alg) {diffAlgorithm = alg;}
public DVALRecord(RecordInputStream in) {field_1_options = in.readShort();field_2_horiz_pos = in.readInt();field_3_vert_pos = in.readInt();field_cbo_id = in.readInt();field_5_dv_no = in.readInt();}
public IndexInput clone() {throw new UnsupportedOperationException();}
public Appendable append(CharSequence csq, int start, int end) {reserve(end-start);for (int i=start; i<end; i++) {unsafeWrite(csq.charAt(i));}return this;}
public DescribeJobFlowsResult describeJobFlows(DescribeJobFlowsRequest request) {request = beforeClientExecution(request);return executeDescribeJobFlows(request);}
public LowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int compareTo(Revision o) {IndexRevision other = (IndexRevision) o;return commit.compareTo(other.commit);}
public DisassociateResolverRuleResult disassociateResolverRule(DisassociateResolverRuleRequest request) {request = beforeClientExecution(request);return executeDisassociateResolverRule(request);}
public static boolean isUnicodeString(final String value) {return !value.equals(new String(value.getBytes(ISO_8859_1), ISO_8859_1));}
public DeleteApplicationCloudWatchLoggingOptionResult deleteApplicationCloudWatchLoggingOption(DeleteApplicationCloudWatchLoggingOptionRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationCloudWatchLoggingOption(request);}
public FreqProxPostingsArray(int size, boolean writeFreqs, boolean writeProx, boolean writeOffsets) {super(size);if (writeFreqs) {termFreqs = new int[size];}lastDocIDs = new int[size];lastDocCodes = new int[size];if (writeProx) {lastPositions = new int[size];if (writeOffsets) {lastOffsets = new int[size];}} else {assert !writeOffsets;}}
public List<String> matchPrefix(String prefix) {return matchPrefix(prefix, defaultNumReturnValues);}
public DescribeScalingPoliciesResult describeScalingPolicies(DescribeScalingPoliciesRequest request) {request = beforeClientExecution(request);return executeDescribeScalingPolicies(request);}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_row_offset);for (short field_2_cell_offset : field_2_cell_offsets) {out.writeShort(field_2_cell_offset);}}
public UserSViewBegin(RecordInputStream in) {_rawData = in.readRemainder();}
public static RevFilter create(String pattern) {if (pattern.length() == 0)throw new IllegalArgumentException(JGitText.get().cannotMatchOnEmptyString);if (SubStringRevFilter.safe(pattern))return new SubStringSearch(pattern);return new PatternSearch(pattern);}
public void serialize(LittleEndianOutput out) {out.writeShort(getFontHeight());out.writeShort(getAttributes());out.writeShort(getColorPaletteIndex());out.writeShort(getBoldWeight());out.writeShort(getSuperSubScript());out.writeByte(getUnderline());out.writeByte(getFamily());out.writeByte(getCharset());out.writeByte(field_9_zero);int fontNameLen = field_11_font_name.length();out.writeByte(fontNameLen);boolean hasMultibyte = StringUtil.hasMultibyte(field_11_font_name);out.writeByte(hasMultibyte ? 0x01 : 0x00);if (fontNameLen > 0) {if (hasMultibyte) {StringUtil.putUnicodeLE(field_11_font_name, out);} else {StringUtil.putCompressedUnicode(field_11_font_name, out);}}}
public DescribeLaunchConfigurationsResult describeLaunchConfigurations(DescribeLaunchConfigurationsRequest request) {request = beforeClientExecution(request);return executeDescribeLaunchConfigurations(request);}
public PathEdit(DirCacheEntry ent) {path = ent.path;}
public static int toCodePoints(char[] src, int srcOff, int srcLen, int[] dest, int destOff) {if (srcLen < 0) {throw new IllegalArgumentException("srcLen must be >= 0");}int codePointCount = 0;for (int i = 0; i < srcLen; ) {final int cp = Character.codePointAt(src, srcOff + i, srcOff + srcLen);final int charCount = Character.charCount(cp);dest[destOff + codePointCount++] = cp;i += charCount;}return codePointCount;}
public boolean hasNext() {return remaining != 0;}
public void consume() {if (LA(1) == IntStream.EOF) {throw new IllegalStateException("cannot consume EOF");}lastChar = data[p];   if (p == n-1 && numMarkers==0) {n = 0;p = -1; lastCharBufferStart = lastChar;}p++;currentCharIndex++;sync(1);}
public FileOutputStream(String path) throws FileNotFoundException {this(path, false);}
public FieldConfig(String fieldName) {if (fieldName == null) {throw new IllegalArgumentException("field name must not be null!");}this.fieldName = fieldName;}
public TokenFilter create(TokenStream input) {return new NGramTokenFilter(input, minGramSize, maxGramSize, preserveOriginal);}
public DescribeCacheParameterGroupsResult describeCacheParameterGroups(DescribeCacheParameterGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheParameterGroups(request);}
public ApostropheFilter(TokenStream in) {super(in);}
public void writeShort(int v) {writeContinueIfRequired(2);_ulrOutput.writeShort(v);}
public StringBuilder append(Object obj) {if (obj == null) {appendNull();} else {append0(obj.toString());}return this;}
public ListGatewayGroupsResult listGatewayGroups(ListGatewayGroupsRequest request) {request = beforeClientExecution(request);return executeListGatewayGroups(request);}
public AlibabaCloudCredentials getCredentials() throws ClientException {if (credentials == null || credentials.isExpired()) {ecsMetadataServiceFetchCount += 1;int maxRetryTimes = MAX_ECS_METADATA_FETCH_RETRY_TIMES;credentials = fetcher.fetch(maxRetryTimes);} else if (credentials.willSoonExpire() && credentials.shouldRefresh()) {try {ecsMetadataServiceFetchCount += 1;credentials = fetcher.fetch();} catch (ClientException e) {credentials.setLastFailedRefreshTime();}}return credentials;}
public DescribeVpnConnectionsResult describeVpnConnections(DescribeVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpnConnections(request);}
public ByteBuffer put(byte[] src, int srcOffset, int byteCount) {checkPutBounds(1, src.length, srcOffset, byteCount);System.arraycopy(src, srcOffset, backingArray, offset + position, byteCount);position += byteCount;return this;}
public ListDistributionsResult listDistributions(ListDistributionsRequest request) {request = beforeClientExecution(request);return executeListDistributions(request);}
public String getName() {if (params==null) {return name;}return new StringBuilder(name).append('(').append(params).append(')').toString();}
public DescribeTasksResult describeTasks(DescribeTasksRequest request) {request = beforeClientExecution(request);return executeDescribeTasks(request);}
public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups() {return describeCacheSubnetGroups(new DescribeCacheSubnetGroupsRequest());}
public float get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getFloat(position++ * SizeOf.FLOAT);}
public ShowNoteCommand setNotesRef(String notesRef) {checkCallable();this.notesRef = notesRef;return this;}
public UpdateAuthorizerResult updateAuthorizer(UpdateAuthorizerRequest request) {request = beforeClientExecution(request);return executeUpdateAuthorizer(request);}
public int ordVal(int doc) throws IOException {throw new UnsupportedOperationException();}
public UnknownRecord(RecordInputStream in) {_sid = in.getSid();_rawData = in.readRemainder();}
public Matcher reset() {return reset(input, 0, input.length());}
public UpdateApnsVoipSandboxChannelResult updateApnsVoipSandboxChannel(UpdateApnsVoipSandboxChannelRequest request) {request = beforeClientExecution(request);return executeUpdateApnsVoipSandboxChannel(request);}
public IntervalSet nextTokens(ATNState s, RuleContext ctx) {LL1Analyzer anal = new LL1Analyzer(this);IntervalSet next = anal.LOOK(s, ctx);return next;}
public ListTablesResult listTables(String exclusiveStartTableName, Integer limit) {return listTables(new ListTablesRequest().withExclusiveStartTableName(exclusiveStartTableName).withLimit(limit));}
public DescribeIdentityResult describeIdentity(DescribeIdentityRequest request) {request = beforeClientExecution(request);return executeDescribeIdentity(request);}
final public ArrayList<String> OptionalFields() throws ParseException {Token fieldName;ArrayList<String> fieldNames = null;label_1:while (true) {if (jj_2_1(2)) {;} else {break label_1;}fieldName = jj_consume_token(TERM);jj_consume_token(COLON);if (fieldNames == null) {fieldNames = new ArrayList<String>();}fieldNames.add(fieldName.image);}{if (true) return fieldNames;}throw new Error("Missing return statement in function");}
public SubmoduleAddCommand submoduleAdd() {return new SubmoduleAddCommand(repo);}
public DescribeTypeResult describeType(DescribeTypeRequest request) {request = beforeClientExecution(request);return executeDescribeType(request);}
public UpdateCompanyNetworkConfigurationResult updateCompanyNetworkConfiguration(UpdateCompanyNetworkConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateCompanyNetworkConfiguration(request);}
public final String get(String name) {for (IndexableField field : fields) {if (field.name().equals(name) && field.stringValue() != null) {return field.stringValue();}}return null;}
public boolean equalsSameType(Object other) {assert exists || 0 == value.length();MutableValueStr b = (MutableValueStr)other;return value.get().equals(b.value.get()) && exists == b.exists;}
public void read(RecordStream rs) {while (rs.peekNextClass() == MergeCellsRecord.class) {MergeCellsRecord mcr = (MergeCellsRecord) rs.getNext();int nRegions = mcr.getNumAreas();for (int i = 0; i < nRegions; i++) {CellRangeAddress cra = mcr.getAreaAt(i);_mergedRegions.add(cra);}}}
public int available() throws IOException {return in.available() / 2 + (lastChar == -1 ? 0 : 1);}
public Status getStatus() {return status;}
public CharSequence[] decompose(CharSequence cmd) {int parts = 0;for (int i = 0; 0 <= i && i < cmd.length();) {int next = dashEven(cmd, i);if (i == next) {parts++;i = next + 2;} else {parts++;i = next;}}CharSequence part[] = new CharSequence[parts];int x = 0;for (int i = 0; 0 <= i && i < cmd.length();) {int next = dashEven(cmd, i);if (i == next) {part[x++] = cmd.subSequence(i, i + 2);i = next + 2;} else {part[x++] = (next < 0) ? cmd.subSequence(i, cmd.length()) : cmd.subSequence(i, next);i = next;}}return part;}
public RevokeSecurityGroupIngressRequest(String groupName, java.util.List<IpPermission> ipPermissions) {setGroupName(groupName);setIpPermissions(ipPermissions);}
public Ref remove(Object key) {String name = toRefName((String) key);Ref res = null;int idx;if (0 <= (idx = packed.find(name))) {res = packed.get(name);packed = packed.remove(idx);sizeIsValid = false;}if (0 <= (idx = loose.find(name))) {res = loose.get(name);loose = loose.remove(idx);sizeIsValid = false;}if (0 <= (idx = resolved.find(name))) {res = resolved.get(name);resolved = resolved.remove(idx);sizeIsValid = false;}return res;}
public DescribeMLModelsResult describeMLModels(DescribeMLModelsRequest request) {request = beforeClientExecution(request);return executeDescribeMLModels(request);}
public String getInflectionType(int wordId) {return null; }
public CreateVolumeRequest(String snapshotId, String availabilityZone) {setSnapshotId(snapshotId);setAvailabilityZone(availabilityZone);}
public DataValidationConstraint createDateConstraint(int operatorType, String formula1, String formula2, String dateFormat) {return DVConstraint.createDateConstraint(operatorType, formula1, formula2, dateFormat);}
public CloneReceiptRuleSetResult cloneReceiptRuleSet(CloneReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeCloneReceiptRuleSet(request);}
public int getOffsetGap(String fieldName) {return 1;}
public long hash1(char c) {final long p = 1099511628211L;long hash = 0xcbf29ce484222325L;hash = (hash ^ (c & 0x00FF)) * p;hash = (hash ^ (c >> 8)) * p;hash += hash << 13;hash ^= hash >> 7;hash += hash << 3;hash ^= hash >> 17;hash += hash << 5;return hash;}
public final ByteBuffer order(ByteOrder byteOrder) {orderImpl(byteOrder);return this;}
public DescribeAlarmsForMetricResult describeAlarmsForMetric(DescribeAlarmsForMetricRequest request) {request = beforeClientExecution(request);return executeDescribeAlarmsForMetric(request);}
public void terminateWorkflowExecution(TerminateWorkflowExecutionRequest request) {request = beforeClientExecution(request);executeTerminateWorkflowExecution(request);}
public DistanceValueSource(PointVectorStrategy strategy, Point from, double multiplier) {this.strategy = strategy;this.from = from;this.multiplier = multiplier;this.nullValue = 180 * multiplier;}
public RenameBranchCommand branchRename() {return new RenameBranchCommand(repo);}
public IntBuffer get(int[] dst, int dstOffset, int intCount) {byteBuffer.limit(limit * SizeOf.INT);byteBuffer.position(position * SizeOf.INT);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, intCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, intCount);}this.position += intCount;return this;}
public DescribeInstanceEventNotificationAttributesResult describeInstanceEventNotificationAttributes(DescribeInstanceEventNotificationAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceEventNotificationAttributes(request);}
public void appendUserAgent(String key, String value) {this.userAgentConfig.append(key, value);}
public String getErrorDisplay(int c) {String s = String.valueOf((char)c);switch ( c ) {case Token.EOF :s = "<EOF>";break;case '\n' :s = "\\n";break;case '\t' :s = "\\t";break;case '\r' :s = "\\r";break;}return s;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[CHARTFORMAT]\n");buffer.append("    .xPosition       = ").append(getXPosition()).append("\n");buffer.append("    .yPosition       = ").append(getYPosition()).append("\n");buffer.append("    .width           = ").append(getWidth()).append("\n");buffer.append("    .height          = ").append(getHeight()).append("\n");buffer.append("    .grBit           = ").append(HexDump.intToHex(field5_grbit)).append("\n");buffer.append("[/CHARTFORMAT]\n");return buffer.toString();}
public GetQuotaRequest() {super("CloudPhoto", "2017-07-11", "GetQuota", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DeleteEventStreamResult deleteEventStream(DeleteEventStreamRequest request) {request = beforeClientExecution(request);return executeDeleteEventStream(request);}
public GetPhotosRequest() {super("CloudPhoto", "2017-07-11", "GetPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public int getBegin() {return begin;}
public void decRef() throws IOException {if (refCount.get() <= 0) {throw new IllegalStateException("this revision is already released");}final int rc = refCount.decrementAndGet();if (rc == 0) {boolean success = false;try {revision.release();success = true;} finally {if (!success) {refCount.incrementAndGet();}}} else if (rc < 0) {throw new IllegalStateException("too many decRef calls: refCount is " + rc + " after decrement");}}
public DescribeDataSetPermissionsResult describeDataSetPermissions(DescribeDataSetPermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDataSetPermissions(request);}
public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest() {super("Domain", "2018-01-29", "SaveTaskForUpdatingRegistrantInfoByIdentityCredential");setMethod(MethodType.POST);}
public TokenStreamToAutomaton() {this.preservePositionIncrements = true;}
public NameXPtg addNameXPtg(String name) {int extBlockIndex = -1;ExternalBookBlock extBlock = null;for (int i = 0; i < _externalBookBlocks.length; i++) {SupBookRecord ebr = _externalBookBlocks[i].getExternalBookRecord();if (ebr.isAddInFunctions()) {extBlock = _externalBookBlocks[i];extBlockIndex = i;break;}}if (extBlock == null) {extBlock = new ExternalBookBlock();extBlockIndex = extendExternalBookBlocks(extBlock);int idx = findFirstRecordLocBySid(ExternSheetRecord.sid);_workbookRecordList.add(idx, extBlock.getExternalBookRecord());_externSheetRecord.addRef(_externalBookBlocks.length - 1, -2, -2);}ExternalNameRecord extNameRecord = new ExternalNameRecord();extNameRecord.setText(name);extNameRecord.setParsedExpression(new Ptg[]{ErrPtg.REF_INVALID});int nameIndex = extBlock.addExternalName(extNameRecord);int supLinkIndex = 0;for (org.apache.poi.hssf.record.Record record : _workbookRecordList.getRecords()) {if (record instanceof SupBookRecord && ((SupBookRecord) record).isAddInFunctions()) {break;}supLinkIndex++;}int numberOfNames = extBlock.getNumberOfNames();_workbookRecordList.add(supLinkIndex + numberOfNames, extNameRecord);int fakeSheetIdx = -2; int ix = _externSheetRecord.getRefIxForSheet(extBlockIndex, fakeSheetIdx, fakeSheetIdx);return new NameXPtg(ix, nameIndex);}
public static IndexReaderContext getTopLevelContext(IndexReaderContext context) {while (context.parent != null) {context = context.parent;}return context;}
public final CharBuffer put(CharBuffer src) {throw new ReadOnlyBufferException();}
public DeleteLabelsResult deleteLabels(DeleteLabelsRequest request) {request = beforeClientExecution(request);return executeDeleteLabels(request);}
public ListAlgorithmsResult listAlgorithms(ListAlgorithmsRequest request) {request = beforeClientExecution(request);return executeListAlgorithms(request);}
public DiffCommand setShowNameAndStatusOnly(boolean showNameAndStatusOnly) {this.showNameAndStatusOnly = showNameAndStatusOnly;return this;}
public boolean isForceUpdate() {return force;}
public DeleteVpcEndpointServiceConfigurationsResult deleteVpcEndpointServiceConfigurations(DeleteVpcEndpointServiceConfigurationsRequest request) {request = beforeClientExecution(request);return executeDeleteVpcEndpointServiceConfigurations(request);}
public Field(String name, TokenStream tokenStream, IndexableFieldType type) {if (name == null) {throw new IllegalArgumentException("name must not be null");}if (tokenStream == null) {throw new NullPointerException("tokenStream must not be null");}if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {throw new IllegalArgumentException("TokenStream fields must be indexed and tokenized");}if (type.stored()) {throw new IllegalArgumentException("TokenStream fields cannot be stored");}this.name = name;this.fieldsData = null;this.tokenStream = tokenStream;this.type = type;}
public ListDeadLetterSourceQueuesResult listDeadLetterSourceQueues(ListDeadLetterSourceQueuesRequest request) {request = beforeClientExecution(request);return executeListDeadLetterSourceQueues(request);}
public BinaryDocValuesField(String name, BytesRef value) {super(name, TYPE);fieldsData = value;}
public CreateVpnConnectionRequest(String type, String customerGatewayId, String vpnGatewayId) {setType(type);setCustomerGatewayId(customerGatewayId);setVpnGatewayId(vpnGatewayId);}
public OpenInstancePublicPortsResult openInstancePublicPorts(OpenInstancePublicPortsRequest request) {request = beforeClientExecution(request);return executeOpenInstancePublicPorts(request);}
public Builder() {this.similarity = new BM25Similarity();}
public InputIteratorWrapper(BytesRefIterator wrapped) {this.wrapped = wrapped;}
public CreateUserProfileResult createUserProfile(CreateUserProfileRequest request) {request = beforeClientExecution(request);return executeCreateUserProfile(request);}
public ImportWorkspaceImageResult importWorkspaceImage(ImportWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeImportWorkspaceImage(request);}
public void finish() {mState = STATE_IDLE;}
public DescribeFleetHistoryResult describeFleetHistory(DescribeFleetHistoryRequest request) {request = beforeClientExecution(request);return executeDescribeFleetHistory(request);}
public ListGatewaysResult listGateways(ListGatewaysRequest request) {request = beforeClientExecution(request);return executeListGateways(request);}
public CreateTrafficMirrorFilterResult createTrafficMirrorFilter(CreateTrafficMirrorFilterRequest request) {request = beforeClientExecution(request);return executeCreateTrafficMirrorFilter(request);}
public BytesRef(byte[] bytes, int offset, int length) {this.bytes = bytes;this.offset = offset;this.length = length;assert isValid();}
public void write(LittleEndianOutput out) {out.writeByte(getSid());}
public BufferedChecksum(Checksum in, int bufferSize) {this.in = in;this.buffer = new byte[bufferSize];}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(ADD);buffer.append(operands[ 1 ]);return buffer.toString();}
public TagCommand tag() {return new TagCommand(repo);}
public DescribeClusterDbRevisionsResult describeClusterDbRevisions(DescribeClusterDbRevisionsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterDbRevisions(request);}
public StartImageScanResult startImageScan(StartImageScanRequest request) {request = beforeClientExecution(request);return executeStartImageScan(request);}
public final String toFormulaString() {throw new RuntimeException("toFormulaString(String[] operands) should be used for subclasses of OperationPtgs");}
public DBInstance restoreDBInstanceToPointInTime(RestoreDBInstanceToPointInTimeRequest request) {request = beforeClientExecution(request);return executeRestoreDBInstanceToPointInTime(request);}
public boolean removeShape(HSSFShape shape) {boolean  isRemoved = _mainSpgrContainer.removeChildRecord(shape.getEscherContainer());if (isRemoved){shape.afterRemove(this);_shapes.remove(shape);}return isRemoved;}
public static void fill(boolean[] array, boolean value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public DeleteAssessmentTemplateResult deleteAssessmentTemplate(DeleteAssessmentTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteAssessmentTemplate(request);}
public StartMonitoringScheduleResult startMonitoringSchedule(StartMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeStartMonitoringSchedule(request);}
public void println(int i) {println(String.valueOf(i));}
public PutRoomSkillParameterResult putRoomSkillParameter(PutRoomSkillParameterRequest request) {request = beforeClientExecution(request);return executePutRoomSkillParameter(request);}
public DeleteDomainResult deleteDomain(DeleteDomainRequest request) {request = beforeClientExecution(request);return executeDeleteDomain(request);}
public ModifyLaunchTemplateResult modifyLaunchTemplate(ModifyLaunchTemplateRequest request) {request = beforeClientExecution(request);return executeModifyLaunchTemplate(request);}
public final float overheadRatio(int bitsPerValue) {assert isSupported(bitsPerValue);return overheadPerValue(bitsPerValue) / bitsPerValue;}
public ObjectId getIndexId() {return indexId;}
public String toString(String field) {return "like:" + likeText;}
public long ramBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED;sizeInBytes += (docIDs!=null)? RamUsageEstimator.sizeOf(docIDs) : 0;sizeInBytes += (freqs!=null)? RamUsageEstimator.sizeOf(freqs) : 0;if(positions != null) {sizeInBytes += RamUsageEstimator.shallowSizeOf(positions);for(int[] position : positions) {sizeInBytes += (position!=null) ? RamUsageEstimator.sizeOf(position) : 0;}}if (payloads != null) {sizeInBytes += RamUsageEstimator.shallowSizeOf(payloads);for(byte[][] payload : payloads) {if(payload != null) {sizeInBytes += RamUsageEstimator.shallowSizeOf(payload);for(byte[] pload : payload) {sizeInBytes += (pload!=null) ? RamUsageEstimator.sizeOf(pload) : 0;}}}}return sizeInBytes;}
public void setNeedBaseObjectIds(boolean b) {this.needBaseObjectIds = b;}
public int getNextOrdinal() {return this.counter++;}
public FloatBuffer compact() {throw new ReadOnlyBufferException();}
public final int getLengthA() {return endA - beginA;}
public SearchDevicesResult searchDevices(SearchDevicesRequest request) {request = beforeClientExecution(request);return executeSearchDevices(request);}
public String getInflectionForm() {return dictionary.getInflectionForm(wordId);}
public RevFilter clone() {return this;}
public ReservedDBInstance purchaseReservedDBInstancesOffering(PurchaseReservedDBInstancesOfferingRequest request) {request = beforeClientExecution(request);return executePurchaseReservedDBInstancesOffering(request);}
public String getReason() {return super.getMessage();}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[24];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 10; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}}}}for (int i = 0; i < 24; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public int [] toArray(){int[] rval = new int[ _limit ];System.arraycopy(_array, 0, rval, 0, _limit);return rval;}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length == 1) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0]);}if (args.length == 2) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}return ErrorEval.VALUE_INVALID;}
public DescribeCustomerGatewaysResult describeCustomerGateways(DescribeCustomerGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeCustomerGateways(request);}
public String toString() {return utf8.utf8ToString() + "/" + bucket;}
public void clipRect(int x, int y, int width, int height){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"clipRect not supported");}
public void startFragment(TextFragment newFragment) {uniqueTermsInFragment = new HashSet<>();currentTextFragment = newFragment;totalScore = 0;}
public void setPolygonDrawArea(int width, int height) {setPropertyValue(new EscherSimpleProperty(EscherPropertyTypes.GEOMETRY__RIGHT, width));setPropertyValue(new EscherSimpleProperty(EscherPropertyTypes.GEOMETRY__BOTTOM, height));}
public DeleteRouteSettingsResult deleteRouteSettings(DeleteRouteSettingsRequest request) {request = beforeClientExecution(request);return executeDeleteRouteSettings(request);}
public CherryPickCommand include(String name, AnyObjectId commit) {return include(new ObjectIdRef.Unpeeled(Storage.LOOSE, name,commit.copy()));}
public short getFormat(String format, boolean createIfNotFound) {for (FormatRecord r : formats) {if (r.getFormatString().equals(format)) {return (short)r.getIndexCode();}}if (createIfNotFound) {return (short)createFormat(format);}return -1;}
public SpanNearQuery build() {return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered);}
public int getRowCellBlockSize(int startRow, int endRow) {int result = 0;for(int rowIx=startRow; rowIx<=endRow && rowIx<records.length; rowIx++) {result += getRowSerializedSize(records[rowIx]);}return result;}
public final boolean incrementToken() {if (!it.hasNext()) {return false;}AttributeSource.State state = it.next();restoreState(state);return true;}
public DeleteTemplateResult deleteTemplate(DeleteTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteTemplate(request);}
public StartFaceSearchResult startFaceSearch(StartFaceSearchRequest request) {request = beforeClientExecution(request);return executeStartFaceSearch(request);}
public static int formatBase10(final byte[] b, int o, int value) {if (value == 0) {b[--o] = '0';return o;}final boolean isneg = value < 0;if (isneg)value = -value;while (value != 0) {b[--o] = base10byte[value % 10];value /= 10;}if (isneg)b[--o] = '-';return o;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[SINDEX]\n");buffer.append("    .index                = ").append("0x").append(HexDump.toHex(  getIndex ())).append(" (").append( getIndex() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/SINDEX]\n");return buffer.toString();}
public DescribeDBSecurityGroupsResult describeDBSecurityGroups(DescribeDBSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSecurityGroups(request);}
public DeleteTrafficMirrorSessionResult deleteTrafficMirrorSession(DeleteTrafficMirrorSessionRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficMirrorSession(request);}
public void stopWalk() {final int cur = ptr;final int cnt = cache.getEntryCount();if (cur < cnt)builder.keep(cur, cnt - cur);}
public ExpandedDouble normaliseBaseTwo() {MutableFPNumber cc = new MutableFPNumber(composeFrac(), 39);cc.multiplyByPowerOfTen(_relativeDecimalExponent);cc.normalise64bit();return cc.createExpandedDouble();}
public PutLexiconResult putLexicon(PutLexiconRequest request) {request = beforeClientExecution(request);return executePutLexicon(request);}
public int[] init() {if (perField.postingsArray == null) {perField.postingsArray = perField.createPostingsArray(2);perField.newPostingsArray();bytesUsed.addAndGet(perField.postingsArray.size * perField.postingsArray.bytesPerPosting());}return perField.postingsArray.textStarts;}
public DirCacheEntry getDirCacheEntry() {return entry;}
public boolean include(TreeWalk walker) {return matchFilter(walker) <= 0;}
public void open(String closer) {if (closer == null) {throw new NullPointerException("closer == null");}if (this == NOOP || !ENABLED) {return;}String message = "Explicit termination method '" + closer + "' not called";allocationSite = new Throwable(message);}
public List<ParseTreeMatch> findAll(ParseTree tree, String xpath) {Collection<ParseTree> subtrees = XPath.findAll(tree, xpath, matcher.getParser());List<ParseTreeMatch> matches = new ArrayList<ParseTreeMatch>();for (ParseTree t : subtrees) {ParseTreeMatch match = match(t);if ( match.succeeded() ) {matches.add(match);}}return matches;}
public static boolean hasSLLConflictTerminatingPrediction(PredictionMode mode, ATNConfigSet configs) {if (allConfigsInRuleStopStates(configs)) {return true;}if ( mode == PredictionMode.SLL ) {if ( configs.hasSemanticContext ) {ATNConfigSet dup = new ATNConfigSet();for (ATNConfig c : configs) {c = new ATNConfig(c,SemanticContext.NONE);dup.add(c);}configs = dup;}}Collection<BitSet> altsets = getConflictingAltSubsets(configs);boolean heuristic =hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);return heuristic;}
public DescribeUpdateActionsResult describeUpdateActions(DescribeUpdateActionsRequest request) {request = beforeClientExecution(request);return executeDescribeUpdateActions(request);}
public HashMap() {table = (HashMapEntry<K, V>[]) EMPTY_TABLE;threshold = -1; }
public Trie optimize(Trie orig) {List<CharSequence> cmds = orig.cmds;List<Row> rows = new ArrayList<>();List<Row> orows = orig.rows;int remap[] = new int[orows.size()];Arrays.fill(remap, -1);rows = removeGaps(orig.root, rows, new ArrayList<Row>(), remap);return new Trie(orig.forward, remap[orig.root], cmds, rows);}
public CreateLifecyclePolicyResult createLifecyclePolicy(CreateLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeCreateLifecyclePolicy(request);}
public void writeLong(long v) {writeInt((int)(v));writeInt((int)(v >> 32));}
public void set(char[] arr, int end) {this.buf = arr;this.len = end;}
public HMMChineseTokenizerFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString() {return getClass().getSimpleName()+" field:"+fieldName+" ctx="+ctx;}
public ResendContactReachabilityEmailResult resendContactReachabilityEmail(ResendContactReachabilityEmailRequest request) {request = beforeClientExecution(request);return executeResendContactReachabilityEmail(request);}
public GetApiKeyResult getApiKey(GetApiKeyRequest request) {request = beforeClientExecution(request);return executeGetApiKey(request);}
public void advance() {previousValue = value;if (value == 1) {value = minShingleSize;} else if (value == maxShingleSize) {reset();} else {++value;}}
public int addConditionalFormatting(CellRangeAddress[] regions,ConditionalFormattingRule rule1) {return addConditionalFormatting(regions,  (HSSFConditionalFormattingRule)rule1);}
public RebaseCommand setUpstream(RevCommit upstream) {this.upstreamCommit = upstream;this.upstreamCommitName = upstream.name();return this;}
public GetDocumentTextDetectionResult getDocumentTextDetection(GetDocumentTextDetectionRequest request) {request = beforeClientExecution(request);return executeGetDocumentTextDetection(request);}
public CreateDBSecurityGroupRequest(String dBSecurityGroupName, String dBSecurityGroupDescription) {setDBSecurityGroupName(dBSecurityGroupName);setDBSecurityGroupDescription(dBSecurityGroupDescription);}
public Reader create(Reader input) {return new ICUNormalizer2CharFilter(input, normalizer);}
static public double pmt(double r, int nper, double pv) {return pmt(r, nper, pv, 0);}
public void set(String name, String value) throws Exception {if (valByRound.get(name) != null) {throw new Exception("Cannot modify a multi value property!");}props.setProperty(name, value);}
public DescribeFastSnapshotRestoresResult describeFastSnapshotRestores(DescribeFastSnapshotRestoresRequest request) {request = beforeClientExecution(request);return executeDescribeFastSnapshotRestores(request);}
public DescribeScheduledInstanceAvailabilityResult describeScheduledInstanceAvailability(DescribeScheduledInstanceAvailabilityRequest request) {request = beforeClientExecution(request);return executeDescribeScheduledInstanceAvailability(request);}
public SendBonusResult sendBonus(SendBonusRequest request) {request = beforeClientExecution(request);return executeSendBonus(request);}
public UnpackException(Throwable why) {super(JGitText.get().unpackException);initCause(why);}
public boolean remove(Object o) {if (!(o instanceof Map.Entry))return false;Map.Entry<?,?> e = (Map.Entry<?,?>)o;return ConcurrentHashMap.this.remove(e.getKey(), e.getValue());}
public Iterator<V> iterator() {return newValueIterator();}
public DescribeVpcEndpointServiceConfigurationsResult describeVpcEndpointServiceConfigurations(DescribeVpcEndpointServiceConfigurationsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServiceConfigurations(request);}
public void setDiffComparator(RawTextComparator cmp) {comparator = cmp;}
public FilePassRecord clone() {return copy();}
public DeleteServiceResult deleteService(DeleteServiceRequest request) {request = beforeClientExecution(request);return executeDeleteService(request);}
public FormulaRecord() {field_8_parsed_expr = Formula.create(Ptg.EMPTY_PTG_ARRAY);}
public DescribeHsmClientCertificatesResult describeHsmClientCertificates(DescribeHsmClientCertificatesRequest request) {request = beforeClientExecution(request);return executeDescribeHsmClientCertificates(request);}
public ICUTokenizerFactory(Map<String,String> args) {super(args);tailored = new HashMap<>();String rulefilesArg = get(args, RULEFILES);if (rulefilesArg != null) {List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);for (String scriptAndResourcePath : scriptAndResourcePaths) {int colonPos = scriptAndResourcePath.indexOf(":");String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);}}cjkAsWords = getBoolean(args, "cjkAsWords", true);myanmarAsWords = getBoolean(args, "myanmarAsWords", true);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public SuspendProcessesResult suspendProcesses(SuspendProcessesRequest request) {request = beforeClientExecution(request);return executeSuspendProcesses(request);}
public DescribeConfigurationRevisionResult describeConfigurationRevision(DescribeConfigurationRevisionRequest request) {request = beforeClientExecution(request);return executeDescribeConfigurationRevision(request);}
public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public TabIdRecord() {_tabids = EMPTY_SHORT_ARRAY;}
public List<String> getConflictingPaths() {return conflictingPaths;}
public void reset() {inDegree = 0;}
public DescribeJobFlowsRequest(java.util.List<String> jobFlowIds) {setJobFlowIds(jobFlowIds);}
public final void decRef() throws IOException {final int rc = refCount.decrementAndGet();if (rc == 0) {boolean success = false;try {release();success = true;} finally {if (!success) {refCount.incrementAndGet();}}} else if (rc < 0) {throw new IllegalStateException("too many decRef calls: refCount is " + rc + " after decrement");}}
public DeleteMountTargetResult deleteMountTarget(DeleteMountTargetRequest request) {request = beforeClientExecution(request);return executeDeleteMountTarget(request);}
public void println(double d) {println(String.valueOf(d));}
public DescribeDBProxyTargetsResult describeDBProxyTargets(DescribeDBProxyTargetsRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxyTargets(request);}
final public SrndQuery PrefixOperatorQuery() throws ParseException {Token oprt;List<SrndQuery> queries;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case OR:oprt = jj_consume_token(OR);queries = FieldsQueryList();{if (true) return getOrQuery(queries, false , oprt);}break;case AND:oprt = jj_consume_token(AND);queries = FieldsQueryList();{if (true) return getAndQuery(queries, false , oprt);}break;case N:oprt = jj_consume_token(N);queries = FieldsQueryList();{if (true) return getDistanceQuery(queries, false , oprt, false );}break;case W:oprt = jj_consume_token(W);queries = FieldsQueryList();{if (true) return getDistanceQuery(queries, false  , oprt, true );}break;default:jj_la1[6] = jj_gen;jj_consume_token(-1);throw new ParseException();}throw new Error("Missing return statement in function");}
public DeleteInstanceSnapshotResult deleteInstanceSnapshot(DeleteInstanceSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteInstanceSnapshot(request);}
public Entry<K, V> firstEntry() {return immutableCopy(endpoint(true));}
public DeregisterTransitGatewayMulticastGroupSourcesResult deregisterTransitGatewayMulticastGroupSources(DeregisterTransitGatewayMulticastGroupSourcesRequest request) {request = beforeClientExecution(request);return executeDeregisterTransitGatewayMulticastGroupSources(request);}
public ImportTerminologyResult importTerminology(ImportTerminologyRequest request) {request = beforeClientExecution(request);return executeImportTerminology(request);}
public int serialize(int offset, byte[] data){byte[] rawData = getRawData();if (getEscherRecords().size() == 0 && rawData != null){return writeData( offset, data, rawData );}byte[] buffer = new byte[getRawDataSize()];int pos = 0;for ( Iterator<EscherRecord> iterator = getEscherRecords().iterator(); iterator.hasNext(); ){EscherRecord r = iterator.next();pos += r.serialize(pos, buffer, new NullEscherSerializationListener() );}return writeData( offset, data, buffer );}
public DescribeDBParameterGroupsResult describeDBParameterGroups(DescribeDBParameterGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBParameterGroups(request);}
public static FuzzySet createSetBasedOnMaxMemory(int maxNumBytes){int setSize=getNearestSetSize(maxNumBytes);return new FuzzySet(new FixedBitSet(setSize+1),setSize, hashFunctionForVersion(VERSION_CURRENT));}
public BundleWriter(Repository repo) {db = repo;reader = null;include = new TreeMap<>();assume = new HashSet<>();tagTargets = new HashSet<>();}
public AssociateDomainResult associateDomain(AssociateDomainRequest request) {request = beforeClientExecution(request);return executeAssociateDomain(request);}
public GetInstancePortStatesResult getInstancePortStates(GetInstancePortStatesRequest request) {request = beforeClientExecution(request);return executeGetInstancePortStates(request);}
public SrndTruncQuery(String truncated, char unlimited, char mask) {super(false); this.truncated = truncated;this.unlimited = unlimited;this.mask = mask;truncatedToPrefixAndPattern();}
public final Explanation explain(BasicStats stats) {return Explanation.match(lambda(stats),getClass().getSimpleName()+ ", computed as (n + 1) / (N + 1) from:",Explanation.match(stats.getDocFreq(),"n, number of documents containing term"),Explanation.match(stats.getNumberOfDocuments(),"N, total number of documents with field"));}
public DeleteBaiduChannelResult deleteBaiduChannel(DeleteBaiduChannelRequest request) {request = beforeClientExecution(request);return executeDeleteBaiduChannel(request);}
public UnlinkDeveloperIdentityResult unlinkDeveloperIdentity(UnlinkDeveloperIdentityRequest request) {request = beforeClientExecution(request);return executeUnlinkDeveloperIdentity(request);}
public SimpleBoundaryScanner( int maxScan, Character[] boundaryChars ){this.maxScan = maxScan;this.boundaryChars = new HashSet<>();this.boundaryChars.addAll(Arrays.asList(boundaryChars));}
public CreateLogGroupRequest(String logGroupName) {setLogGroupName(logGroupName);}
public static Set<String> getDefaultStopTags(){return DefaultSetHolder.DEFAULT_STOP_TAGS;}
public ModifyInstanceFleetResult modifyInstanceFleet(ModifyInstanceFleetRequest request) {request = beforeClientExecution(request);return executeModifyInstanceFleet(request);}
public void addRule(ConditionalFormattingRule cfRule){addRule((HSSFConditionalFormattingRule)cfRule);}
public void SwitchTo(int lexState){if (lexState >= 3 || lexState < 0)throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);elsecurLexState = lexState;}
public void removeCharCount() {remove1stProperty(PropertyIDMap.PID_CHARCOUNT);}
public CreateCapacityReservationResult createCapacityReservation(CreateCapacityReservationRequest request) {request = beforeClientExecution(request);return executeCreateCapacityReservation(request);}
public StoredField(String name, long value) {super(name, TYPE);fieldsData = value;}
public void sync(Parser recognizer) throws RecognitionException {ATNState s = recognizer.getInterpreter().atn.states.get(recognizer.getState());if (inErrorRecoveryMode(recognizer)) {return;}TokenStream tokens = recognizer.getInputStream();int la = tokens.LA(1);IntervalSet nextTokens = recognizer.getATN().nextTokens(s);if (nextTokens.contains(la)) {nextTokensContext = null;nextTokensState = ATNState.INVALID_STATE_NUMBER;return;}if (nextTokens.contains(Token.EPSILON)) {if (nextTokensContext == null) {nextTokensContext = recognizer.getContext();nextTokensState = recognizer.getState();}return;}switch (s.getStateType()) {case ATNState.BLOCK_START:case ATNState.STAR_BLOCK_START:case ATNState.PLUS_BLOCK_START:case ATNState.STAR_LOOP_ENTRY:if ( singleTokenDeletion(recognizer)!=null ) {return;}throw new InputMismatchException(recognizer);case ATNState.PLUS_LOOP_BACK:case ATNState.STAR_LOOP_BACK:reportUnwantedToken(recognizer);IntervalSet expecting = recognizer.getExpectedTokens();IntervalSet whatFollowsLoopIterationOrRule =expecting.or(getErrorRecoverySet(recognizer));consumeUntil(recognizer, whatFollowsLoopIterationOrRule);break;default:break;}}
public int nextDoc() {if (!didNext) {didNext = true;return (doc = 0);} else {return (doc = NO_MORE_DOCS);}}
public static Charset parseEncoding(byte[] b) {String enc = parseEncodingName(b);if (enc == null) {return UTF_8;}String name = enc.trim();try {return Charset.forName(name);} catch (IllegalCharsetNameException| UnsupportedCharsetException badName) {Charset aliased = charsetForAlias(name);if (aliased != null) {return aliased;}throw badName;}}
public FloatBuffer put(float[] src, int srcOffset, int floatCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, floatCount);if (floatCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + floatCount; ++i) {put(src[i]);}return this;}
public BatchGetVariableResult batchGetVariable(BatchGetVariableRequest request) {request = beforeClientExecution(request);return executeBatchGetVariable(request);}
public void setRepetitions(int repetitions) throws Exception {fixedTime = false;this.repetitions = repetitions;if (repetitions==REPEAT_EXHAUST) {if (isParallel()) {throw new Exception("REPEAT_EXHAUST is not allowed for parallel tasks");}}setSequenceName();}
public synchronized static DefaultProfile getProfile() {if (null == profile) {profile = new DefaultProfile();}return profile;}
public String dequote(byte[] in, int inPtr, int inEnd) {if (2 <= inEnd - inPtr && in[inPtr] == '"' && in[inEnd - 1] == '"')return dq(in, inPtr + 1, inEnd - 1);return RawParseUtils.decode(UTF_8, in, inPtr, inEnd);}
public CacheCluster modifyCacheCluster(ModifyCacheClusterRequest request) {request = beforeClientExecution(request);return executeModifyCacheCluster(request);}
public TreeFormatter(int size) {buf = new byte[size];}
public void setMaxDeltaDepth(int maxDeltaDepth) {this.maxDeltaDepth = maxDeltaDepth;}
public int serialize(int offset, byte[] data, EscherSerializationListener listener) {listener.beforeRecordSerialize( offset, getRecordId(), this );int pos = offset;LittleEndian.putShort( data, pos, getOptions() );     pos += 2;LittleEndian.putShort( data, pos, getRecordId() );    pos += 2;int remainingBytes = getRecordSize() - 8;LittleEndian.putInt( data, pos, remainingBytes );              pos += 4;LittleEndian.putInt( data, pos, field_1_shapeIdMax );          pos += 4;LittleEndian.putInt( data, pos, getNumIdClusters() );          pos += 4;LittleEndian.putInt( data, pos, field_3_numShapesSaved );      pos += 4;LittleEndian.putInt( data, pos, field_4_drawingsSaved );       pos += 4;for (FileIdCluster fic : field_5_fileIdClusters) {LittleEndian.putInt( data, pos, fic.getDrawingGroupId() );   pos += 4;LittleEndian.putInt( data, pos, fic.getNumShapeIdsUsed() );  pos += 4;}listener.afterRecordSerialize( pos, getRecordId(), getRecordSize(), this );return getRecordSize();}
public LogDocMergePolicy() {minMergeSize = DEFAULT_MIN_MERGE_DOCS;maxMergeSize = Long.MAX_VALUE;maxMergeSizeForForcedMerge = Long.MAX_VALUE;}
public BM25Similarity() {this(1.2f, 0.75f);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(getExternSheetIndex());writeCoordinates(out);}
public String getAccessKeyId() {return accessKeyId;}
public PutLifecycleHookResult putLifecycleHook(PutLifecycleHookRequest request) {request = beforeClientExecution(request);return executePutLifecycleHook(request);}
public String toString() {return "[GRIDSET]\n" +"    .gridset        = " + getGridset() +"\n" +"[/GRIDSET]\n";}
public static int idealLongArraySize(int need) {return idealByteArraySize(need * 8) / 8;}
public int size() {return mSize;}
public String toString() {String biffName = getBiffName(_sid);if (biffName == null) {biffName = "UNKNOWNRECORD";}StringBuilder sb = new StringBuilder();sb.append('[').append(biffName).append("] (0x");sb.append(Integer.toHexString(_sid).toUpperCase(Locale.ROOT)).append(")\n");if (_rawData.length > 0) {sb.append("  rawData=").append(HexDump.toHex(_rawData)).append("\n");}sb.append("[/").append(biffName).append("]\n");return sb.toString();}
public int nextPosition() throws IOException {if (doc != 0) {throw new IllegalStateException();} else if (i >= termFreq - 1) {throw new IllegalStateException("Read past last position");}++i;if (payloadIndex != null) {payload.offset = basePayloadOffset + payloadIndex[positionIndex + i];payload.length = payloadIndex[positionIndex + i + 1] - payloadIndex[positionIndex + i];}if (positions == null) {return -1;} else {return positions[positionIndex + i];}}
public MergeDeveloperIdentitiesResult mergeDeveloperIdentities(MergeDeveloperIdentitiesRequest request) {request = beforeClientExecution(request);return executeMergeDeveloperIdentities(request);}
public CreateUserRequest(String userName) {setUserName(userName);}
public ReplaceNetworkAclEntryResult replaceNetworkAclEntry(ReplaceNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeReplaceNetworkAclEntry(request);}
public boolean isFastForward() {return fastForward;}
public List<Integer> getLLDecisions() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();List<Integer> LL = new ArrayList<Integer>();for (int i=0; i<decisions.length; i++) {long fallBack = decisions[i].LL_Fallback;if ( fallBack>0 ) LL.add(i);}return LL;}
public UpdateModelResult updateModel(UpdateModelRequest request) {request = beforeClientExecution(request);return executeUpdateModel(request);}
public int getEndIndex() {return end;}
public DeleteVPCAssociationAuthorizationResult deleteVPCAssociationAuthorization(DeleteVPCAssociationAuthorizationRequest request) {request = beforeClientExecution(request);return executeDeleteVPCAssociationAuthorization(request);}
public GetMediaResult getMedia(GetMediaRequest request) {request = beforeClientExecution(request);return executeGetMedia(request);}
public DeltaRecord clone() {return copy();}
public TableRestoreStatus restoreTableFromClusterSnapshot(RestoreTableFromClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreTableFromClusterSnapshot(request);}
public void writeInt(int v) {int b3 = (v >>> 24) & 0xFF;int b2 = (v >>> 16) & 0xFF;int b1 = (v >>>  8) & 0xFF;int b0 = (v) & 0xFF;try {out.write(b0);out.write(b1);out.write(b2);out.write(b3);} catch (IOException e) {throw new RuntimeException(e);}}
public static Query parse(String[] queries, String[] fields, Analyzer analyzer)throws QueryNodeException {if (queries.length != fields.length)throw new IllegalArgumentException("queries.length != fields.length");BooleanQuery.Builder bQuery = new BooleanQuery.Builder();StandardQueryParser qp = new StandardQueryParser();qp.setAnalyzer(analyzer);for (int i = 0; i < fields.length; i++) {Query q = qp.parse(queries[i], fields[i]);if (q != null) { bQuery.add(q, BooleanClause.Occur.SHOULD);}}return bQuery.build();}
public UpdateQualificationTypeResult updateQualificationType(UpdateQualificationTypeRequest request) {request = beforeClientExecution(request);return executeUpdateQualificationType(request);}
public void removeTemplate() {remove1stProperty(PropertyIDMap.PID_TEMPLATE);}
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {int nInnerArgs = args.length-1; if (nInnerArgs < 1) {return ErrorEval.VALUE_INVALID;}final Function innerFunc;int functionCode = 0;try {ValueEval ve = OperandResolver.getSingleValue(args[0], srcRowIndex, srcColumnIndex);functionCode = OperandResolver.coerceValueToInt(ve);innerFunc = findFunction(functionCode);} catch (EvaluationException e) {return e.getErrorEval();}final List<ValueEval> list = new ArrayList<>(Arrays.asList(args).subList(1, args.length));Iterator<ValueEval> it = list.iterator();while(it.hasNext()) {ValueEval eval = it.next();if(eval instanceof LazyRefEval) {LazyRefEval lazyRefEval = (LazyRefEval) eval;if(lazyRefEval.isSubTotal()) {it.remove();}if (functionCode > 100 && lazyRefEval.isRowHidden()) {it.remove();}}}return innerFunc.evaluate(list.toArray(new ValueEval[0]), srcRowIndex, srcColumnIndex);}
public InstanceGroupConfig(InstanceRoleType instanceRole, String instanceType, Integer instanceCount) {setInstanceRole(instanceRole.toString());setInstanceType(instanceType);setInstanceCount(instanceCount);}
public LeftMarginRecord(RecordInputStream in) {field_1_margin = in.readDouble();}
public DescribeTrialComponentResult describeTrialComponent(DescribeTrialComponentRequest request) {request = beforeClientExecution(request);return executeDescribeTrialComponent(request);}
public AssociateSubnetCidrBlockResult associateSubnetCidrBlock(AssociateSubnetCidrBlockRequest request) {request = beforeClientExecution(request);return executeAssociateSubnetCidrBlock(request);}
@Override public Iterator<E> iterator() {return new MapBasedMultisetIterator();}
public GetQueueAttributesResult getQueueAttributes(String queueUrl, java.util.List<String> attributeNames) {return getQueueAttributes(new GetQueueAttributesRequest().withQueueUrl(queueUrl).withAttributeNames(attributeNames));}
public final int getBeginA() {return beginA;}
public String toString() {return "NoLock";}
public boolean contains(Object object) {return backingMap.containsKey(object);}
public String toString() {return "arc=" + fstArc + " state=" + fsaState;}
public void clear() {ArrayList <HSSFShape> copy = new ArrayList<>(shapes);for (HSSFShape shape: copy){removeShape(shape);}}
public String toString() {return "PerFieldAnalyzerWrapper(" + fieldAnalyzers + ", default=" + defaultAnalyzer + ")";}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int available = data.length - (offset + 8);if (bytesRemaining > available) {bytesRemaining = available;}if (isContainerRecord()) {int bytesWritten = 0;thedata = new byte[0];offset += 8;bytesWritten += 8;while ( bytesRemaining > 0 ) {EscherRecord child = recordFactory.createRecord( data, offset );int childBytesWritten = child.fillFields( data, offset, recordFactory );bytesWritten += childBytesWritten;offset += childBytesWritten;bytesRemaining -= childBytesWritten;getChildRecords().add( child );}return bytesWritten;}if (bytesRemaining < 0) {bytesRemaining = 0;}thedata = IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, offset + 8, thedata, 0, bytesRemaining );return bytesRemaining + 8;}
public AssociatePhoneNumberWithUserResult associatePhoneNumberWithUser(AssociatePhoneNumberWithUserRequest request) {request = beforeClientExecution(request);return executeAssociatePhoneNumberWithUser(request);}
public FieldQuery getFieldQuery( Query query ) {try {return getFieldQuery(query, null);} catch (IOException e) {throw new RuntimeException (e);}}
public int getXBATEntriesPerBlock() {return getBATEntriesPerBlock() - 1;}
public static CellRangeAddress createEnclosingCellRange(CellRangeAddress crA, CellRangeAddress crB) {if( crB == null) {return crA.copy();}int minRow = lt(crB.getFirstRow(),   crA.getFirstRow())   ?crB.getFirstRow()   :crA.getFirstRow();int maxRow = gt(crB.getLastRow(),    crA.getLastRow())    ?crB.getLastRow()    :crA.getLastRow();int minCol = lt(crB.getFirstColumn(),crA.getFirstColumn())?crB.getFirstColumn():crA.getFirstColumn();int maxCol = gt(crB.getLastColumn(), crA.getLastColumn()) ?crB.getLastColumn() :crA.getLastColumn();return new CellRangeAddress(minRow, maxRow, minCol, maxCol);}
public static char[] grow(char[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Character.BYTES));} elsereturn array;}
public void setLineStyleColor(int red, int green, int blue) {int lineStyleColor = ((blue) << 16) | ((green) << 8) | red;setPropertyValue(new EscherRGBProperty(EscherPropertyTypes.LINESTYLE__COLOR, lineStyleColor));}
public CreateFileSystemResult createFileSystem(CreateFileSystemRequest request) {request = beforeClientExecution(request);return executeCreateFileSystem(request);}
public DeleteVaultRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public ByteBuffer read(int length, long position) {if(position >= size) {throw new IndexOutOfBoundsException("Unable to read " + length + " bytes from " +position + " in stream of length " + size);}int toRead = (int)Math.min(length, size - position);return ByteBuffer.wrap(buffer, (int)position, toRead);}
public boolean addPushRefSpec(RefSpec s) {if (push.contains(s))return false;return push.add(s);}
public ViewBillingResult viewBilling(ViewBillingRequest request) {request = beforeClientExecution(request);return executeViewBilling(request);}
public final char getChar() {int newPosition = position + SizeOf.CHAR;if (newPosition > limit) {throw new BufferUnderflowException();}char result = (char) Memory.peekShort(backingArray, offset + position, order);position = newPosition;return result;}
public SpanQuery getSpanQuery(Element e) throws ParserException {String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, "fieldName");String value = DOMUtils.getNonBlankTextOrFail(e);List<SpanQuery> clausesList = new ArrayList<>();try (TokenStream ts = analyzer.tokenStream(fieldName, value)) {TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);ts.reset();while (ts.incrementToken()) {SpanTermQuery stq = new SpanTermQuery(new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef())));clausesList.add(stq);}ts.end();SpanOrQuery soq = new SpanOrQuery(clausesList.toArray(new SpanQuery[clausesList.size()]));float boost = DOMUtils.getAttribute(e, "boost", 1.0f);return new SpanBoostQuery(soq, boost);}catch (IOException ioe) {throw new ParserException("IOException parsing value:" + value);}}
public UpdateGatewayResult updateGateway(UpdateGatewayRequest request) {request = beforeClientExecution(request);return executeUpdateGateway(request);}
public boolean getCachedBooleanValue() {return specialCachedValue.getBooleanValue();}
public DeleteIdentityPoolResult deleteIdentityPool(DeleteIdentityPoolRequest request) {request = beforeClientExecution(request);return executeDeleteIdentityPool(request);}
public PutSuppressedDestinationResult putSuppressedDestination(PutSuppressedDestinationRequest request) {request = beforeClientExecution(request);return executePutSuppressedDestination(request);}
public PutEventsResult putEvents(PutEventsRequest request) {request = beforeClientExecution(request);return executePutEvents(request);}
public GetRecommendationsResult getRecommendations(GetRecommendationsRequest request) {request = beforeClientExecution(request);return executeGetRecommendations(request);}
public boolean equals(Object obj) {if (this == obj) return true;if (obj instanceof SegmentInfo) {final SegmentInfo other = (SegmentInfo) obj;return other.dir == dir && other.name.equals(name);} else {return false;}}
public HSSFDataFormat createDataFormat() {if (formatter == null) {formatter = new HSSFDataFormat(workbook);}return formatter;}
public UpdateFaceRequest() {super("LinkFace", "2018-07-20", "UpdateFace");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public void serialize(LittleEndianOutput out) {out.writeDouble(getMaxChange());}
public ModifyVpcEndpointServicePermissionsResult modifyVpcEndpointServicePermissions(ModifyVpcEndpointServicePermissionsRequest request) {request = beforeClientExecution(request);return executeModifyVpcEndpointServicePermissions(request);}
public IntervalSet nextTokens(ATNState s) {if ( s.nextTokenWithinRule != null ) return s.nextTokenWithinRule;s.nextTokenWithinRule = nextTokens(s, null);s.nextTokenWithinRule.setReadonly(true);return s.nextTokenWithinRule;}
public GetResourceResult getResource(GetResourceRequest request) {request = beforeClientExecution(request);return executeGetResource(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[HYPERLINK RECORD]\n");buffer.append("    .range   = ").append(_range.formatAsString()).append("\n");buffer.append("    .guid    = ").append(_guid.toString()).append("\n");buffer.append("    .linkOpts= ").append(HexDump.intToHex(_linkOpts)).append("\n");buffer.append("    .label   = ").append(getLabel()).append("\n");if ((_linkOpts & HLINK_TARGET_FRAME) != 0) {buffer.append("    .targetFrame= ").append(getTargetFrame()).append("\n");}if((_linkOpts & HLINK_URL) != 0 && _moniker != null) {buffer.append("    .moniker   = ").append(_moniker.toString()).append("\n");}if ((_linkOpts & HLINK_PLACE) != 0) {buffer.append("    .textMark= ").append(getTextMark()).append("\n");}buffer.append("    .address   = ").append(getAddress()).append("\n");buffer.append("[/HYPERLINK RECORD]\n");return buffer.toString();}
public CreateFacetResult createFacet(CreateFacetRequest request) {request = beforeClientExecution(request);return executeCreateFacet(request);}
@Override public int indexOf(Object object) {final int size;final Object[] array;synchronized (mutex) {size = list.size();array = new Object[size];list.toArray(array);}if (object != null) {for (int i = 0; i < size; i++) {if (object.equals(array[i])) {return i;}}} else {for (int i = 0; i < size; i++) {if (array[i] == null) {return i;}}}return -1;}
public static PrintOrientation valueOf(int value){return _table[value];}
public DefineExpressionResult defineExpression(DefineExpressionRequest request) {request = beforeClientExecution(request);return executeDefineExpression(request);}
public long getLastModified() {return attributes.getLastModifiedInstant().toEpochMilli();}
public void close() {buffer = null;size = -1;}
public StartEntitiesDetectionJobResult startEntitiesDetectionJob(StartEntitiesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStartEntitiesDetectionJob(request);}
public boolean processMatch(ValueEval eval) {if(result == null) {result = eval;}else {if(result instanceof BlankEval) {result = eval;}else {if(!(eval instanceof BlankEval)) {result = ErrorEval.NUM_ERROR;return false;}}}return true;}
public TokenTagToken(String tokenName, int type, String label) {super(type);this.tokenName = tokenName;this.label = label;}
public void reset(boolean zeroFillBuffers, boolean reuseFirst) {if (bufferUpto != -1) {if (zeroFillBuffers) {for(int i=0;i<bufferUpto;i++) {Arrays.fill(buffers[i], (byte) 0);}Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);}if (bufferUpto > 0 || !reuseFirst) {final int offset = reuseFirst ? 1 : 0;allocator.recycleByteBlocks(buffers, offset, 1+bufferUpto);Arrays.fill(buffers, offset, 1+bufferUpto, null);}if (reuseFirst) {bufferUpto = 0;byteUpto = 0;byteOffset = 0;buffer = buffers[0];} else {bufferUpto = -1;byteUpto = BYTE_BLOCK_SIZE;byteOffset = -BYTE_BLOCK_SIZE;buffer = null;}}}
public UpdateExpirationForHITResult updateExpirationForHIT(UpdateExpirationForHITRequest request) {request = beforeClientExecution(request);return executeUpdateExpirationForHIT(request);}
public Policy(String id) {this.id = id;}
public UpdateApplicationVersionRequest(String applicationName, String versionLabel) {setApplicationName(applicationName);setVersionLabel(versionLabel);}
public String getEmailAddress() {final int lt = RawParseUtils.nextLF(buffer, valStart, '<');if (valEnd <= lt) {final int at = RawParseUtils.nextLF(buffer, valStart, '@');if (valStart < at && at < valEnd)return getValue();return null;}final int gt = RawParseUtils.nextLF(buffer, lt, '>');if (valEnd < gt)return null;return RawParseUtils.decode(enc, buffer, lt, gt - 1);}
public String simpleFormat(Object value) {StringBuffer sb = new StringBuffer();simpleValue(sb, value);return sb.toString();}
public RevFilter clone() {return new NotRevFilter(a.clone());}
public static int finish(int hash, int numberOfWords) {hash = hash ^ (numberOfWords * 4);hash = hash ^ (hash >>> 16);hash = hash * 0x85EBCA6B;hash = hash ^ (hash >>> 13);hash = hash * 0xC2B2AE35;hash = hash ^ (hash >>> 16);return hash;}
public StempelFilter(TokenStream in, StempelStemmer stemmer, int minLength) {super(in);this.stemmer = stemmer;this.minLength = minLength;}
public GetIntegrationResponseResult getIntegrationResponse(GetIntegrationResponseRequest request) {request = beforeClientExecution(request);return executeGetIntegrationResponse(request);}
public PostToConnectionResult postToConnection(PostToConnectionRequest request) {request = beforeClientExecution(request);return executePostToConnection(request);}
public TermRangeQueryNode(FieldQueryNode lower, FieldQueryNode upper,boolean lowerInclusive, boolean upperInclusive) {setBounds(lower, upper, lowerInclusive, upperInclusive);}
public QueryParser(CharStream stream) {token_source = new QueryParserTokenManager(stream);token = new Token();jj_ntk = -1;jj_gen = 0;for (int i = 0; i < 10; i++) jj_la1[i] = -1;for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();}
public CreateSchemaResult createSchema(CreateSchemaRequest request) {request = beforeClientExecution(request);return executeCreateSchema(request);}
public V get(char[] text, int off, int len) {if(text == null)throw new NullPointerException();return null;}
public List<CharsRef> stem(String word) {return stem(word.toCharArray(), word.length());}
public DeleteSmsTemplateResult deleteSmsTemplate(DeleteSmsTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteSmsTemplate(request);}
public void setPassword(short pw) {field_1_password = pw;}
public CharBuffer append(char c) {return put(c);}
public PutVoiceConnectorLoggingConfigurationResult putVoiceConnectorLoggingConfiguration(PutVoiceConnectorLoggingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorLoggingConfiguration(request);}
public boolean isAbsolute() {return path.length() > 0 && path.charAt(0) == separatorChar;}
public CreateSnapshotRequest(String volumeId, String description) {setVolumeId(volumeId);setDescription(description);}
public static ReaderIterator getReaderIteratorNoHeader(DataInput in, Format format, int version,int valueCount, int bitsPerValue, int mem) {checkVersion(version);return new PackedReaderIterator(format, version, valueCount, bitsPerValue, in, mem);}
public DoubleBuffer put(int index, double c) {throw new ReadOnlyBufferException();}
public StashDropCommand stashDrop() {return new StashDropCommand(repo);}
public boolean isUnmappable() {return this.type == TYPE_UNMAPPABLE_CHAR;}
public byte readByte() {checkPosition(1);return (byte)read();}
public void decode(long[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) {if (bitsPerValue > 32) {throw new UnsupportedOperationException("Cannot decode " + bitsPerValue + "-bits values into an int[]");}for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];valuesOffset = decode(block, values, valuesOffset);}}
public CustomAnalyzerConfig build() {return new CustomAnalyzerConfig(this);}
public UpdateAddressBookResult updateAddressBook(UpdateAddressBookRequest request) {request = beforeClientExecution(request);return executeUpdateAddressBook(request);}
public String toString() {return String.format("Point [%dx%d]", x, y);}
public DescribeAccountAttributesResult describeAccountAttributes(DescribeAccountAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeAccountAttributes(request);}
public static final RevFilter before(long ts) {return new Before(ts);}
public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = BytesRef.deepCopyOf(target);seekPending = true;}}
public DescribeClusterParameterGroupsResult describeClusterParameterGroups(DescribeClusterParameterGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeClusterParameterGroups(request);}
public BatchGetApplicationsResult batchGetApplications(BatchGetApplicationsRequest request) {request = beforeClientExecution(request);return executeBatchGetApplications(request);}
public String toString() {return "dels=" + Arrays.toString(item);}
public FreeRefFunction findFunction(String name) {FreeRefFunction evaluatorForFunction;for (UDFFinder pack : _usedToolPacks) {evaluatorForFunction = pack.findFunction(name);if (evaluatorForFunction != null) {return evaluatorForFunction;}}return null;}
public String toString(){StringBuilder sb = new StringBuilder();sb.append("[LABEL]\n");sb.append("    .row       = ").append(HexDump.shortToHex(getRow())).append("\n");sb.append("    .column    = ").append(HexDump.shortToHex(getColumn())).append("\n");sb.append("    .xfindex   = ").append(HexDump.shortToHex(getXFIndex())).append("\n");sb.append("    .string_len= ").append(HexDump.shortToHex(field_4_string_len)).append("\n");sb.append("    .unicode_flag= ").append(HexDump.byteToHex(field_5_unicode_flag)).append("\n");sb.append("    .value       = ").append(getValue()).append("\n");sb.append("[/LABEL]\n");return sb.toString();}
public static void verifyLabel(String label) {if (label == null || label.isEmpty()) {throw new IllegalArgumentException("empty or null components not allowed; got: " + label);}}
public boolean setReadOnly() {return setWritable(false, false);}
public CopyImageResult copyImage(CopyImageRequest request) {request = beforeClientExecution(request);return executeCopyImage(request);}
public CreateTrainingJobResult createTrainingJob(CreateTrainingJobRequest request) {request = beforeClientExecution(request);return executeCreateTrainingJob(request);}
public DescribeDomainsResult describeDomains(DescribeDomainsRequest request) {request = beforeClientExecution(request);return executeDescribeDomains(request);}
public String toString() {return "ngram(" + n + ")";}
public boolean formatMatches(ColumnInfoRecord other) {if (_xfIndex != other._xfIndex) {return false;}if (_options != other._options) {return false;}if (_colWidth != other._colWidth) {return false;}return true;}
public AddCommand add() {return new AddCommand(repo);}
public final int limit() {return limit;}
public CharBuffer asReadOnlyBuffer() {return ReadOnlyCharArrayBuffer.copy(this, mark);}
public synchronized boolean add(E object) {if (elementCount == elementData.length) {growByOne();}elementData[elementCount++] = object;modCount++;return true;}
public TSTNode getNode(CharSequence key) {return getNode(key, rootNode);}
public GetEventStreamResult getEventStream(GetEventStreamRequest request) {request = beforeClientExecution(request);return executeGetEventStream(request);}
public SendMessageBatchResult sendMessageBatch(SendMessageBatchRequest request) {request = beforeClientExecution(request);return executeSendMessageBatch(request);}
public DescribeDirectConnectGatewayAttachmentsResult describeDirectConnectGatewayAttachments(DescribeDirectConnectGatewayAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeDirectConnectGatewayAttachments(request);}
public Object add(Object prefix, Object output) {assert !(prefix instanceof List);if (!(output instanceof List)) {return outputs.add((T) prefix, (T) output);} else {List<T> outputList = (List<T>) output;List<T> addedList = new ArrayList<>(outputList.size());for(T _output : outputList) {addedList.add(outputs.add((T) prefix, _output));}return addedList;}}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3) {return evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, arg3, DEFAULT_ARG4);}
public static List<ParseTree> findAllNodes(ParseTree t, int index, boolean findTokens) {List<ParseTree> nodes = new ArrayList<ParseTree>();_findAllNodes(t, index, findTokens, nodes);return nodes;}
public boolean containsChart() {EscherOptRecord optRecord = (EscherOptRecord)_boundAggregate.findFirstWithId(EscherOptRecord.RECORD_ID);if (optRecord == null) {return false;}for (EscherProperty prop : optRecord.getEscherProperties()) {if (prop.getPropertyNumber() == 896 && prop.isComplex()) {EscherComplexProperty cp = (EscherComplexProperty) prop;String str = StringUtil.getFromUnicodeLE(cp.getComplexData());if (str.equals("Chart 1\0")) {return true;}}}return false;}
public int getWidth() {return w;}
public StopInstanceResult stopInstance(StopInstanceRequest request) {request = beforeClientExecution(request);return executeStopInstance(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[TABLE]\n");buffer.append("    .range    = ").append(getRange()).append("\n");buffer.append("    .flags    = ") .append(HexDump.byteToHex(field_5_flags)).append("\n");buffer.append("    .alwaysClc= ").append(isAlwaysCalc()).append("\n");buffer.append("    .reserved = ").append(HexDump.intToHex(field_6_res)).append("\n");CellReference crRowInput = cr(field_7_rowInputRow, field_8_colInputRow);CellReference crColInput = cr(field_9_rowInputCol, field_10_colInputCol);buffer.append("    .rowInput = ").append(crRowInput.formatAsString()).append("\n");buffer.append("    .colInput = ").append(crColInput.formatAsString()).append("\n");buffer.append("[/TABLE]\n");return buffer.toString();}
public RemoveTagsResult removeTags(RemoveTagsRequest request) {request = beforeClientExecution(request);return executeRemoveTags(request);}
public boolean hasNext() {if (next == null)next = peek();return next != null;}
public long byteCount(int packedIntsVersion, int valueCount, int bitsPerValue) {return (long) Math.ceil((double) valueCount * bitsPerValue / 8);}
public GetQueueUrlRequest(String queueName) {setQueueName(queueName);}
public void addEscherRecord(int index, EscherRecord element){escherRecords.add( index, element );}
public ListInstanceGroupsResult listInstanceGroups(ListInstanceGroupsRequest request) {request = beforeClientExecution(request);return executeListInstanceGroups(request);}
public TruncateTokenFilterFactory(Map<String, String> args) {super(args);prefixLength = Byte.parseByte(get(args, PREFIX_LENGTH_KEY, "5"));if (prefixLength < 1)throw new IllegalArgumentException(PREFIX_LENGTH_KEY + " parameter must be a positive number: " + prefixLength);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameter(s): " + args);}}
public GetDetectorResult getDetector(GetDetectorRequest request) {request = beforeClientExecution(request);return executeGetDetector(request);}
public void set(int index, int n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}
public StatePair(int s1, int s2) {this.s1 = s1;this.s2 = s2;this.s = -1;}
public DetachDiskResult detachDisk(DetachDiskRequest request) {request = beforeClientExecution(request);return executeDetachDisk(request);}
public void clear() {count = 0;}
public ListIterator<E> listIterator() {return delegate().listIterator(); }
public FieldDoc(int doc, float score, Object[] fields, int shardIndex) {super(doc, score, shardIndex);this.fields = fields;}
public ResourceRecord(String value) {setValue(value);}
public String getAuthority() {return decode(authority);}
public void flush() throws IOException {drain();output.flush();}
public ListMultipartUploadsRequest(String accountId, String vaultName) {setAccountId(accountId);setVaultName(vaultName);}
public UpdateRouteResponseResult updateRouteResponse(UpdateRouteResponseRequest request) {request = beforeClientExecution(request);return executeUpdateRouteResponse(request);}
public boolean containsKey(Object name) {return get(name) != null;}
public SimpleRateLimiter(double mbPerSec) {setMBPerSec(mbPerSec);lastNS = System.nanoTime();}
public void releaseSession(RemoteSession session) {session.disconnect();}
public SetQuotaRequest() {super("CloudPhoto", "2017-07-11", "SetQuota", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public ParserATNSimulator(Parser parser, ATN atn,DFA[] decisionToDFA,PredictionContextCache sharedContextCache){super(atn, sharedContextCache);this.parser = parser;this.decisionToDFA = decisionToDFA;}
public void remove() {Object[] a = array;int removalIdx = removalIndex;if (modCount != expectedModCount) {throw new ConcurrentModificationException();}if (removalIdx < 0) {throw new IllegalStateException();}System.arraycopy(a, removalIdx + 1, a, removalIdx, remaining);a[--size] = null;  removalIndex = -1;expectedModCount = ++modCount;}
public T getPointAt(int index) {return elements[index];}
public StatusCommand setWorkingTreeIt(WorkingTreeIterator workingTreeIt) {this.workingTreeIt = workingTreeIt;return this;}
public CharBlockArray append(CharSequence chars) {return append(chars, 0, chars.length());}
public void clear() {current.clear();}
public String toFormulaString() {return FormulaError.forInt(field_1_error_code).getString();}
public FtPioGrbitSubRecord clone() {return copy();}
public PositionSpan(int start, int end) {this.start = start;this.end = end;}
public void setParams(String params) {super.setParams(params);StringTokenizer st = new StringTokenizer(params, ",");while (st.hasMoreTokens()) {String param = st.nextToken();StringTokenizer expr = new StringTokenizer(param, ":");String key = expr.nextToken();String value = expr.nextToken();if (key.equals("impl")) {if (value.equalsIgnoreCase("icu"))impl = Implementation.ICU;else if (value.equalsIgnoreCase("jdk"))impl = Implementation.JDK;elsethrow new RuntimeException("Unknown parameter " + param);} else {throw new RuntimeException("Unknown parameter " + param);}}}
public DeleteBuildResult deleteBuild(DeleteBuildRequest request) {request = beforeClientExecution(request);return executeDeleteBuild(request);}
public DescribeVolumeStatusResult describeVolumeStatus() {return describeVolumeStatus(new DescribeVolumeStatusRequest());}
public String getFlags() {return f;}
public ShowNoteCommand setObjectId(RevObject id) {checkCallable();this.id = id;return this;}
public PatternReplaceFilter create(TokenStream input) {return new PatternReplaceFilter(input, pattern, replacement, replaceAll);}
public void reset() throws IOException {drain();output.writeByte(TC_RESET);resetState();}
public Ptg get3DReferencePtg(CellReference cr, SheetIdentifier sheet) {int extIx = getSheetExtIx(sheet);return new Ref3DPtg(cr, extIx);}
public static void fill(boolean[] array, int start, int end, boolean value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public TokenStream create(TokenStream input) {return new ICUFoldingFilter(input, normalizer);}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {return "[NTF]";}
public StashCreateCommand setWorkingDirectoryMessage(String message) {workingDirectoryMessage = message;return this;}
public SheetRangeEvaluator(int onlySheetIndex, SheetRefEvaluator sheetEvaluator) {this(onlySheetIndex, onlySheetIndex, new SheetRefEvaluator[] {sheetEvaluator});}
public static long[] grow(long[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Long.BYTES));} elsereturn array;}
public static RevFilter create(Collection<RevFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}
public DeregisterOnPremisesInstanceResult deregisterOnPremisesInstance(DeregisterOnPremisesInstanceRequest request) {request = beforeClientExecution(request);return executeDeregisterOnPremisesInstance(request);}
public ListDeliverabilityTestReportsResult listDeliverabilityTestReports(ListDeliverabilityTestReportsRequest request) {request = beforeClientExecution(request);return executeListDeliverabilityTestReports(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double dn;try {ValueEval ve1 = OperandResolver.getSingleValue(arg1, srcRowIndex, srcColumnIndex);dn = OperandResolver.coerceValueToDouble(ve1);} catch (EvaluationException e1) {return ErrorEval.VALUE_INVALID;}if (dn < 1.0) {return ErrorEval.NUM_ERROR;}int k = (int) Math.ceil(dn);double result;try {double[] ds = ValueCollector.collectValues(arg0);if (k > ds.length) {return ErrorEval.NUM_ERROR;}result = _isLarge ? StatsLib.kthLargest(ds, k) : StatsLib.kthSmallest(ds, k);NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public ByteArrayDataInput() {reset(BytesRef.EMPTY_BYTES);}
public ByteBuffer putDouble(double value) {throw new ReadOnlyBufferException();}
public ChangeMessageVisibilityResult changeMessageVisibility(ChangeMessageVisibilityRequest request) {request = beforeClientExecution(request);return executeChangeMessageVisibility(request);}
public UpdateWorkGroupResult updateWorkGroup(UpdateWorkGroupRequest request) {request = beforeClientExecution(request);return executeUpdateWorkGroup(request);}
public NavigableMap<K, V> tailMap(K fromInclusive) {return subMap(fromInclusive, INCLUSIVE, null, NO_BOUND);}
public String toString() {return "2";}
public BlameCommand setStartCommit(AnyObjectId commit) {this.startCommit = commit.toObjectId();return this;}
public ModifyEbsDefaultKmsKeyIdResult modifyEbsDefaultKmsKeyId(ModifyEbsDefaultKmsKeyIdRequest request) {request = beforeClientExecution(request);return executeModifyEbsDefaultKmsKeyId(request);}
public void removeAuthor() {remove1stProperty(PropertyIDMap.PID_AUTHOR);}
public Ref get(Object key) {String name = toRefName((String) key);Ref ref = resolved.get(name);if (ref == null)ref = loose.get(name);if (ref == null)ref = packed.get(name);return ref;}
public int addConditionalFormatting( HSSFConditionalFormatting cf ) {CFRecordsAggregate cfraClone = cf.getCFRecordsAggregate().cloneCFAggregate();return _conditionalFormattingTable.add(cfraClone);}
public final String toString() {return getClass().getName() + "[" + this.canonicalName + "]";}
public void serialize(LittleEndianOutput out) {out.writeShort(getIterations());}
public MatchAllDocsQuery build(QueryNode queryNode) throws QueryNodeException {if (!(queryNode instanceof MatchAllDocsQueryNode)) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass().getName()));}return new MatchAllDocsQuery();}
public LongBuffer get(long[] dst) {return get(dst, 0, dst.length);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append("/");buffer.append(operands[ 1 ]);return buffer.toString();}
@Override public void clear() {countMap.clear();}
public SpatialArgs(SpatialOperation operation, Shape shape) {if (operation == null || shape == null)throw new NullPointerException("operation and shape are required");this.operation = operation;this.shape = shape;}
public int compareTo(Completion o) {return this.utf8.compareTo(o.utf8);}
public GetInstancesResult getInstances(GetInstancesRequest request) {request = beforeClientExecution(request);return executeGetInstances(request);}
public int next() {if (text.getIndex() == text.getEndIndex() || 0 == sentenceStarts.length) {return DONE;} else if (currentSentence < sentenceStarts.length - 1) {text.setIndex(sentenceStarts[++currentSentence]);return current();} else {return last();}}
public HSSFClientAnchor getPreferredSize(double scaleX, double scaleY){ImageUtils.setPreferredSize(this, scaleX, scaleY);return getClientAnchor();}
public CreateTaskSetResult createTaskSet(CreateTaskSetRequest request) {request = beforeClientExecution(request);return executeCreateTaskSet(request);}
public ByteBuffer putFloat(int index, float value) {return putInt(index, Float.floatToRawIntBits(value));}
public static void main(String[] args) throws Exception {String field = null;int numTerms = DEFAULT_NUMTERMS;if (args.length == 0 || args.length > 4) {usage();System.exit(1);}Directory dir = FSDirectory.open(Paths.get(args[0]));Comparator<TermStats> comparator = new DocFreqComparator();for (int i = 1; i < args.length; i++) {if (args[i].equals("-t")) {comparator = new TotalTermFreqComparator();}else{try {numTerms = Integer.parseInt(args[i]);} catch (NumberFormatException e) {field=args[i];}}}IndexReader reader = DirectoryReader.open(dir);TermStats[] terms = getHighFreqTerms(reader, numTerms, field, comparator);for (int i = 0; i < terms.length; i++) {System.out.printf(Locale.ROOT, "%s:%s \t totalTF = %,d \t docFreq = %,d \n",terms[i].field, terms[i].termtext.utf8ToString(), terms[i].totalTermFreq, terms[i].docFreq);}reader.close();}
public static Collection<String> getNotSupportedFunctionNames(){Collection<String> lst = new TreeSet<>();lst.addAll(FunctionEval.getNotSupportedFunctionNames());lst.addAll(AnalysisToolPak.getNotSupportedFunctionNames());return Collections.unmodifiableCollection(lst);}
public CreateMeetingResult createMeeting(CreateMeetingRequest request) {request = beforeClientExecution(request);return executeCreateMeeting(request);}
public char get(int index) {checkIndex(index);return byteBuffer.getChar(index * SizeOf.CHAR);}
public GetInstanceSnapshotResult getInstanceSnapshot(GetInstanceSnapshotRequest request) {request = beforeClientExecution(request);return executeGetInstanceSnapshot(request);}
public static Map<String, Integer> toMap(String[] keys) {Map<String, Integer> m = new HashMap<String, Integer>();for (int i=0; i<keys.length; i++) {m.put(keys[i], i);}return m;}
public GetHealthCheckStatusResult getHealthCheckStatus(GetHealthCheckStatusRequest request) {request = beforeClientExecution(request);return executeGetHealthCheckStatus(request);}
public GetReusableDelegationSetResult getReusableDelegationSet(GetReusableDelegationSetRequest request) {request = beforeClientExecution(request);return executeGetReusableDelegationSet(request);}
public final ValueEval getAbsoluteValue(int row, int col) {int rowOffsetIx = row - _firstRow;int colOffsetIx = col - _firstColumn;if(rowOffsetIx < 0 || rowOffsetIx >= _nRows) {throw new IllegalArgumentException("Specified row index (" + row+ ") is outside the allowed range (" + _firstRow + ".." + _lastRow + ")");}if(colOffsetIx < 0 || colOffsetIx >= _nColumns) {throw new IllegalArgumentException("Specified column index (" + col+ ") is outside the allowed range (" + _firstColumn + ".." + col + ")");}return getRelativeValue(rowOffsetIx, colOffsetIx);}
public final LongBuffer put(long[] src, int srcOffset, int longCount) {throw new ReadOnlyBufferException();}
public final String toString() {StringBuilder buffer = new StringBuilder();buffer.append("Document<");for (int i = 0; i < fields.size(); i++) {IndexableField field = fields.get(i);buffer.append(field.toString());if (i != fields.size()-1) {buffer.append(" ");}}buffer.append(">");return buffer.toString();}
public StartMatchBackfillResult startMatchBackfill(StartMatchBackfillRequest request) {request = beforeClientExecution(request);return executeStartMatchBackfill(request);}
public FeatRecord clone() {return copy();}
public DeleteEmailTemplateResult deleteEmailTemplate(DeleteEmailTemplateRequest request) {request = beforeClientExecution(request);return executeDeleteEmailTemplate(request);}
public ListReceiptRuleSetsResult listReceiptRuleSets(ListReceiptRuleSetsRequest request) {request = beforeClientExecution(request);return executeListReceiptRuleSets(request);}
public boolean isRowGroupCollapsed(int row) {int collapseRow = findEndOfRowOutlineGroup(row) + 1;return getRow(collapseRow) != null && getRow(collapseRow).getColapsed();}
public void setPathFilter(TreeFilter filter) {pathFilter = filter != null ? filter : TreeFilter.ALL;}
public int getReturnState(int index) {assert index == 0;return returnState;}
public GroupingSearch setGroupDocsLimit(int groupDocsLimit) {this.groupDocsLimit = groupDocsLimit;return this;}
public final void removeField(String name) {Iterator<IndexableField> it = fields.iterator();while (it.hasNext()) {IndexableField field = it.next();if (field.name().equals(name)) {it.remove();return;}}}
public Double doubleValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Double.valueOf(responseMap.get(key));}
public DescribeLoadBalancersResult describeLoadBalancers(DescribeLoadBalancersRequest request) {request = beforeClientExecution(request);return executeDescribeLoadBalancers(request);}
public SpanQuery[] getClauses() {return clauses.toArray(new SpanQuery[clauses.size()]);}
public MulBlankRecord clone() {return copy();}
public final PersonIdent getTaggerIdent() {final byte[] raw = buffer;final int nameB = RawParseUtils.tagger(raw, 0);if (nameB < 0)return null;return RawParseUtils.parsePersonIdent(raw, nameB);}
public NameRecord createName(){return addName(new NameRecord());}
public void setCacheMissesUntilFill(int i) {ensureOpen();cacheMissesUntilFill = i;}
public final int hash(BytesRef br) {return hash32(br.bytes, br.offset, br.length);}
public DoubleBuffer get(double[] dst, int dstOffset, int doubleCount) {byteBuffer.limit(limit * SizeOf.DOUBLE);byteBuffer.position(position * SizeOf.DOUBLE);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, doubleCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, doubleCount);}this.position += doubleCount;return this;}
public void append(int key, int value) {if (mSize != 0 && key <= mKeys[mSize - 1]) {put(key, value);return;}int pos = mSize;if (pos >= mKeys.length) {int n = ArrayUtils.idealIntArraySize(pos + 1);int[] nkeys = new int[n];int[] nvalues = new int[n];System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);System.arraycopy(mValues, 0, nvalues, 0, mValues.length);mKeys = nkeys;mValues = nvalues;}mKeys[pos] = key;mValues[pos] = value;mSize = pos + 1;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);ValueEval ve = OperandResolver.getSingleValue(arg2, srcRowIndex, srcColumnIndex);Boolean method = OperandResolver.coerceValueToBoolean(ve, false);return new NumberEval(evaluate(d0, d1, method != null && method.booleanValue()));} catch (EvaluationException e) {return e.getErrorEval();}}
public QueryAllGroupsRequest() {super("LinkFace", "2018-07-20", "QueryAllGroups");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public int replace(char s[], int len) {if (replacement.length > 0) {System.arraycopy(replacement, 0, s, len - suffix.length, replacement.length);}return len - suffix.length + replacement.length;}
public StandardSyntaxParserTokenManager(CharStream stream){input_stream = stream;}
public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.commitMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public Request<GetPublicAccessBlockRequest> marshall(GetPublicAccessBlockRequest getPublicAccessBlockRequest) {if (getPublicAccessBlockRequest == null) {throw new SdkClientException("Invalid argument passed to marshall(...)");}Request<GetPublicAccessBlockRequest> request = new DefaultRequest<GetPublicAccessBlockRequest>(getPublicAccessBlockRequest, "AWSS3Control");request.setHttpMethod(HttpMethodName.GET);if (getPublicAccessBlockRequest.getAccountId() != null) {request.addHeader("x-amz-account-id", StringUtils.fromString(getPublicAccessBlockRequest.getAccountId()));}String uriResourcePath = "/v20180820/configuration/publicAccessBlock";request.setResourcePath(uriResourcePath);return request;}
public ChangeTagsForResourceResult changeTagsForResource(ChangeTagsForResourceRequest request) {request = beforeClientExecution(request);return executeChangeTagsForResource(request);}
public void println(char c) {println(String.valueOf(c));}
public RefUpdate.Result getResult() {return result;}
public HSSFRow getRow(int rowIndex) {return _rows.get(Integer.valueOf(rowIndex));}
public LongBuffer slice() {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());LongBuffer result = new LongToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public void append(byte[] name, FileMode mode, AnyObjectId id) {append(name, 0, name.length, mode, id);}
public String toString() {return String.format("mode(%d)", mode);}
public DescribeScriptResult describeScript(DescribeScriptRequest request) {request = beforeClientExecution(request);return executeDescribeScript(request);}
public String toString() {return "NoMergePolicy";}
public CacheSecurityGroup revokeCacheSecurityGroupIngress(RevokeCacheSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeRevokeCacheSecurityGroupIngress(request);}
public final double get(int index) {checkIndex(index);return backingArray[offset + index];}
public DeleteVoiceConnectorTerminationResult deleteVoiceConnectorTermination(DeleteVoiceConnectorTerminationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorTermination(request);}
public FileTreeIterator(Repository repo) {this(repo,repo.getConfig().get(WorkingTreeOptions.KEY).isDirNoGitLinks() ?NoGitlinksStrategy.INSTANCE :DefaultFileModeStrategy.INSTANCE);}
public ASCIIFoldingFilter(TokenStream input, boolean preserveOriginal){super(input);this.preserveOriginal = preserveOriginal;}
public final CharBuffer asCharBuffer() {return CharToByteBufferAdapter.asCharBuffer(this);}
public EmbeddedObjectRefSubRecord clone() {return copy();}
public DescribeLifecycleHookTypesResult describeLifecycleHookTypes(DescribeLifecycleHookTypesRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHookTypes(request);}
public String getEncoding() {if (!isOpen()) {return null;}return HistoricalCharsetNames.get(decoder.charset());}
public void respondDecisionTaskCompleted(RespondDecisionTaskCompletedRequest request) {request = beforeClientExecution(request);executeRespondDecisionTaskCompleted(request);}
public void close() {delegate().close();}
public GetStreamingDistributionRequest(String id) {setId(id);}
@Override public boolean equals(Object object) {return object instanceof Name&& ((Name) object).name.equalsIgnoreCase(name);}
public String toString() {return snapshot().toString();}
public GetDirectoryResult getDirectory(GetDirectoryRequest request) {request = beforeClientExecution(request);return executeGetDirectory(request);}
public SoraniNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public CreateSolutionVersionResult createSolutionVersion(CreateSolutionVersionRequest request) {request = beforeClientExecution(request);return executeCreateSolutionVersion(request);}
public UpdateWorkteamResult updateWorkteam(UpdateWorkteamRequest request) {request = beforeClientExecution(request);return executeUpdateWorkteam(request);}
public Matcher region(int start, int end) {return reset(input, start, end);}
public boolean containsKey(Object o) {if(o == null)throw new NullPointerException();return false;}
public UpdateServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}
public int valueAt(int index) {return mValues[index];}
public byte getCharacterClass(char c) {return characterCategoryMap[c];}
public int getBinaryExponent() {return _binaryExponent;}
public long getOffset() {return offset;}
public DescribeStackSetResult describeStackSet(DescribeStackSetRequest request) {request = beforeClientExecution(request);return executeDescribeStackSet(request);}
public E get(int location) {try {return listIterator(location).next();} catch (NoSuchElementException e) {throw new IndexOutOfBoundsException();}}
public static boolean isComponentRecord(int sid) {switch (sid) {case ProtectRecord.sid:case ObjectProtectRecord.sid:case ScenarioProtectRecord.sid:case PasswordRecord.sid:return true;}return false;}
public long getFilePointer() {return main.getFilePointer();}
public String toFormulaString() {return ""; }
public boolean run(String s) {int p = 0;int l = s.length();for (int i = 0, cp = 0; i < l; i += Character.charCount(cp)) {p = step(p, cp = s.codePointAt(i));if (p == -1) return false;}return accept.get(p);}
public GetSchemaAsJsonResult getSchemaAsJson(GetSchemaAsJsonRequest request) {request = beforeClientExecution(request);return executeGetSchemaAsJson(request);}
public T set(int index, T element) {if (index < 0 || size <= index)throw new IndexOutOfBoundsException(String.valueOf(index));T[] blockRef = directory[toDirectoryIndex(index)];int blockIdx = toBlockIndex(index);T old = blockRef[blockIdx];blockRef[blockIdx] = element;return old;}
public int get(int index, long[] arr, int off, int len) {assert len > 0 : "len must be > 0 (got " + len + ")";assert index >= 0 && index < size();assert off + len <= arr.length;final int gets = Math.min(size() - index, len);for (int i = index, o = off, end = index + gets; i < end; ++i, ++o) {arr[o] = get(i);}return gets;}
public void addParseListener(ParseTreeListener listener) {if (listener == null) {throw new NullPointerException("listener");}if (_parseListeners == null) {_parseListeners = new ArrayList<ParseTreeListener>();}this._parseListeners.add(listener);}
public CreateQueryLoggingConfigResult createQueryLoggingConfig(CreateQueryLoggingConfigRequest request) {request = beforeClientExecution(request);return executeCreateQueryLoggingConfig(request);}
public SetIdentityFeedbackForwardingEnabledResult setIdentityFeedbackForwardingEnabled(SetIdentityFeedbackForwardingEnabledRequest request) {request = beforeClientExecution(request);return executeSetIdentityFeedbackForwardingEnabled(request);}
public int getValueAt(int relativeOffset) {if(relativeOffset >= _values.length) {throw new ArrayIndexOutOfBoundsException("Unable to fetch offset " + relativeOffset + " as the " +"BAT only contains " + _values.length + " entries");}return _values[relativeOffset];}
@Override public boolean equals(Object o) {if (o == this) {return true;}if (!(o instanceof List)) {return false;}List<?> that = (List<?>) o;int s = size;if (that.size() != s) {return false;}Object[] a = array;if (that instanceof RandomAccess) {for (int i = 0; i < s; i++) {Object eThis = a[i];Object ethat = that.get(i);if (eThis == null ? ethat != null : !eThis.equals(ethat)) {return false;}}} else {  Iterator<?> it = that.iterator();for (int i = 0; i < s; i++) {Object eThis = a[i];Object eThat = it.next();if (eThis == null ? eThat != null : !eThis.equals(eThat)) {return false;}}}return true;}
public boolean equals(Object o) {if ( o instanceof ATNState ) return stateNumber==((ATNState)o).stateNumber;return false;}
public EmptyTreeIterator createEmptyTreeIterator() {final byte[] n = new byte[Math.max(pathLen + 1, DEFAULT_PATH_SIZE)];System.arraycopy(path, 0, n, 0, pathLen);n[pathLen] = '/';return new EmptyTreeIterator(this, n, pathLen + 1);}
public boolean isOverflow() {return this.type == TYPE_OVERFLOW;}
public ListQueueTagsResult listQueueTags(ListQueueTagsRequest request) {request = beforeClientExecution(request);return executeListQueueTags(request);}
public BuyOriginPicturesRequest() {super("lubancloud", "2018-05-09", "BuyOriginPictures", "luban");setMethod(MethodType.POST);}
public static String createSafeSheetName(final String nameProposal, char replaceChar) {if (nameProposal == null) {return "null";}if (nameProposal.length() < 1) {return "empty";}final int length = Math.min(31, nameProposal.length());final String shortenname = nameProposal.substring(0, length);final StringBuilder result = new StringBuilder(shortenname);for (int i=0; i<length; i++) {char ch = result.charAt(i);switch (ch) {case '\u0000':case '\u0003':case ':':case '/':case '\\':case '?':case '*':case ']':case '[':result.setCharAt(i, replaceChar);break;case '\'':if (i==0 || i==length-1) {result.setCharAt(i, replaceChar);}break;default:}}return result.toString();}
public String readLine() throws IOException {return primitiveTypes.readLine();}
public void setParentIds(ObjectId... newParents) {parentIds = new ObjectId[newParents.length];for (int i = 0; i < newParents.length; i++)parentIds[i] = newParents[i].copy();}
public LexerATNConfig(LexerATNConfig c, ATNState state,LexerActionExecutor lexerActionExecutor){super(c, state, c.context, c.semanticContext);this.lexerActionExecutor = lexerActionExecutor;this.passedThroughNonGreedyDecision = checkNonGreedyDecision(c, state);}
public NormValueSource(String field) {this.field = field;}
public static boolean equalsIgnoreCase(String a, String b) {if (References.isSameObject(a, b)) {return true;}if (a.length() != b.length())return false;for (int i = 0; i < a.length(); i++) {if (toLowerCase(a.charAt(i)) != toLowerCase(b.charAt(i)))return false;}return true;}
public String getName() {return attributes.getName();}
public float getDistance(String s1, String s2) {int[] mtp = matches(s1, s2);float m = mtp[0];if (m == 0) {return 0f;}float j = ((m / s1.length() + m / s2.length() + (m - mtp[1]) / m)) / 3;float jw = j < getThreshold() ? j : j + Math.min(0.1f, 1f / mtp[3]) * mtp[2]* (1 - j);return jw;}
public TokenGroup(TokenStream tokenStream) {offsetAtt = tokenStream.addAttribute(OffsetAttribute.class);termAtt = tokenStream.addAttribute(CharTermAttribute.class);}
public String getString(int i) {return getString(i, i + 1, true);}
public int getCountRead() {return _countRead;}
public CreateNetworkAclEntryResult createNetworkAclEntry(CreateNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeCreateNetworkAclEntry(request);}
public BreakIteratorBoundaryScanner(BreakIterator bi){this.bi = bi;}
public int getOffsetGap(String fieldName) {return getWrappedAnalyzer(fieldName).getOffsetGap(fieldName);}
public static double[] grow(double[] array) {return grow(array, 1 + array.length);}
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal,String[] tokenImageVal){super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));currentToken = currentTokenVal;expectedTokenSequences = expectedTokenSequencesVal;tokenImage = tokenImageVal;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[PLOTAREA]\n");buffer.append("[/PLOTAREA]\n");return buffer.toString();}
public DescribeClustersResult describeClusters() {return describeClusters(new DescribeClustersRequest());}
public void setDoubleValue(double value) {super.setLongValue(Double.doubleToRawLongBits(value));}
public CreateSolutionResult createSolution(CreateSolutionRequest request) {request = beforeClientExecution(request);return executeCreateSolution(request);}
public static Packed64SingleBlock create(int valueCount, int bitsPerValue) {switch (bitsPerValue) {case 1:return new Packed64SingleBlock1(valueCount);case 2:return new Packed64SingleBlock2(valueCount);case 3:return new Packed64SingleBlock3(valueCount);case 4:return new Packed64SingleBlock4(valueCount);case 5:return new Packed64SingleBlock5(valueCount);case 6:return new Packed64SingleBlock6(valueCount);case 7:return new Packed64SingleBlock7(valueCount);case 8:return new Packed64SingleBlock8(valueCount);case 9:return new Packed64SingleBlock9(valueCount);case 10:return new Packed64SingleBlock10(valueCount);case 12:return new Packed64SingleBlock12(valueCount);case 16:return new Packed64SingleBlock16(valueCount);case 21:return new Packed64SingleBlock21(valueCount);case 32:return new Packed64SingleBlock32(valueCount);default:throw new IllegalArgumentException("Unsupported number of bits per value: " + 32);}}
public FieldAndTerm clone() {return new FieldAndTerm(this);}
public DescribeAlgorithmResult describeAlgorithm(DescribeAlgorithmRequest request) {request = beforeClientExecution(request);return executeDescribeAlgorithm(request);}
public InvalidClassException(String className, String detailMessage) {super(detailMessage);this.classname = className;}
public ExportTransitGatewayRoutesResult exportTransitGatewayRoutes(ExportTransitGatewayRoutesRequest request) {request = beforeClientExecution(request);return executeExportTransitGatewayRoutes(request);}
public TokenStream create(TokenStream input) {final TokenStream filter = new TypeTokenFilter(input, stopTypes, useWhitelist);return filter;}
public final void yyreset(java.io.Reader reader) {zzReader = reader;zzAtBOL  = true;zzAtEOF  = false;zzEOFDone = false;zzEndRead = zzStartRead = 0;zzCurrentPos = zzMarkedPos = 0;zzFinalHighSurrogate = 0;yyline = yychar = yycolumn = 0;zzLexicalState = YYINITIAL;if (zzBuffer.length > ZZ_BUFFERSIZE)zzBuffer = new char[ZZ_BUFFERSIZE];}
public int compareTo(SegmentInfoAndLevel other) {return Float.compare(other.level, level);}
public FrenchMinimalStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public AreaErrPtg(LittleEndianInput in)  {unused1 = in.readInt();unused2 = in.readInt();}
public String getRemoteTrackingBranch() {return remoteTrackingBranch;}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;FieldVals other = (FieldVals) obj;if (fieldName == null) {if (other.fieldName != null)return false;} else if (!fieldName.equals(other.fieldName))return false;if (maxEdits != other.maxEdits) {return false;}if (prefixLength != other.prefixLength)return false;if (queryString == null) {return other.queryString == null;} else return queryString.equals(other.queryString);}
public void setMaxChainLength(int maxLen) {maxChainLength = maxLen;}
public DeleteReusableDelegationSetResult deleteReusableDelegationSet(DeleteReusableDelegationSetRequest request) {request = beforeClientExecution(request);return executeDeleteReusableDelegationSet(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[HEADER]\n");buffer.append("    .header = ").append(getText()).append("\n");buffer.append("[/HEADER]\n");return buffer.toString();}
public void writeStringData(String text) {boolean is16bitEncoded = StringUtil.hasMultibyte(text);int keepTogetherSize = 1 + 1; int optionFlags = 0x00;if (is16bitEncoded) {optionFlags |= 0x01;keepTogetherSize += 1; }writeContinueIfRequired(keepTogetherSize);writeByte(optionFlags);writeCharacterData(text, is16bitEncoded);}
public void nextBuffer() {if (1+bufferUpto == buffers.length) {byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,NUM_BYTES_OBJECT_REF)][];System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);buffers = newBuffers;}buffer = buffers[1+bufferUpto] = allocator.getByteBlock();bufferUpto++;byteUpto = 0;byteOffset += BYTE_BLOCK_SIZE;}
public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {if (lruType == LRUType.LRU_HASHED) {this.cache = new NameHashIntCacheLRU(cacheSize);} else {this.cache = new NameIntCacheLRU(cacheSize);}}
public boolean isShowSeriesKey(){return showSeriesKey.isSet(field_1_options);}
public static String toHex(final byte[] value){StringBuilder retVal = new StringBuilder();retVal.append('[');if (value != null && value.length > 0){for(int x = 0; x < value.length; x++){if (x>0) {retVal.append(", ");}retVal.append(toHex(value[x]));}}retVal.append(']');return retVal.toString();}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_index_extern_sheet);writeCoordinates(out);}
public void flush() {writer.flush();}
public UsernamePasswordCredentialsProvider(String username, char[] password) {this.username = username;this.password = password;}
public final List<String> getFooterLines(FooterKey keyName) {final List<FooterLine> src = getFooterLines();if (src.isEmpty())return Collections.emptyList();final ArrayList<String> r = new ArrayList<>(src.size());for (FooterLine f : src) {if (f.matches(keyName))r.add(f.getValue());}return r;}
public ActivityTaskStatus recordActivityTaskHeartbeat(RecordActivityTaskHeartbeatRequest request) {request = beforeClientExecution(request);return executeRecordActivityTaskHeartbeat(request);}
public DescribeStepResult describeStep(DescribeStepRequest request) {request = beforeClientExecution(request);return executeDescribeStep(request);}
public DeleteMessageBatchResult deleteMessageBatch(String queueUrl, java.util.List<DeleteMessageBatchRequestEntry> entries) {return deleteMessageBatch(new DeleteMessageBatchRequest().withQueueUrl(queueUrl).withEntries(entries));}
public QueryScorer(Query query, IndexReader reader, String field) {init(query, field, reader, true);}
public CreateVpcPeeringAuthorizationResult createVpcPeeringAuthorization(CreateVpcPeeringAuthorizationRequest request) {request = beforeClientExecution(request);return executeCreateVpcPeeringAuthorization(request);}
public boolean contains(Object object) {if (object != null) {for (E element : a) {if (object.equals(element)) {return true;}}} else {for (E element : a) {if (element == null) {return true;}}}return false;}
public DescribeDBSubnetGroupsResult describeDBSubnetGroups(DescribeDBSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSubnetGroups(request);}
public JobFlowExecutionStatusDetail(JobFlowExecutionState state, java.util.Date creationDateTime) {setState(state.toString());setCreationDateTime(creationDateTime);}
public String toString() {return "more";}
public KeyValue(String key, String value) {setKey(key);setValue(value);}
public void balancedTree(Object[] tokens, Object[] vals, int lo, int hi,TernaryTreeNode root) {if (lo > hi) return;int mid = (lo + hi) / 2;root = insert(root, (String) tokens[mid], vals[mid], 0);balancedTree(tokens, vals, lo, mid - 1, root);balancedTree(tokens, vals, mid + 1, hi, root);}
public PlotAreaRecord clone() {return copy();}
public DeleteSecurityConfigurationResult deleteSecurityConfiguration(DeleteSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteSecurityConfiguration(request);}
@Override public String toString() {return mapEntry.toString();}
public byte[] getCachedBytes(int sizeLimit) throws LargeObjectException,MissingObjectException, IOException {if (!isLarge())return getCachedBytes();try (ObjectStream in = openStream()) {long sz = in.getSize();if (sizeLimit < sz)throw new LargeObjectException.ExceedsLimit(sizeLimit, sz);if (Integer.MAX_VALUE < sz)throw new LargeObjectException.ExceedsByteArrayLimit();byte[] buf;try {buf = new byte[(int) sz];} catch (OutOfMemoryError notEnoughHeap) {throw new LargeObjectException.OutOfMemory(notEnoughHeap);}IO.readFully(in, buf, 0, buf.length);return buf;}}
public ListJobsByStatusResult listJobsByStatus(ListJobsByStatusRequest request) {request = beforeClientExecution(request);return executeListJobsByStatus(request);}
public UpdateClusterVersionResult updateClusterVersion(UpdateClusterVersionRequest request) {request = beforeClientExecution(request);return executeUpdateClusterVersion(request);}
public PushCommand setForce(boolean force) {checkCallable();this.force = force;return this;}
public ListStreamsResult listStreams(ListStreamsRequest request) {request = beforeClientExecution(request);return executeListStreams(request);}
public boolean wasEscaped(int index) {return this.wasEscaped[index];}
public void setNewObjectId(AnyObjectId id) {newValue = id.copy();}
public BatchRefUpdate newBatchUpdate() {return new BatchRefUpdate(this);}
public String toString() {return getClass().getSimpleName() + "(fields=" + fields.size() + ",delegate=" + postingsReader + ")";}
public CreateTrafficMirrorFilterRuleResult createTrafficMirrorFilterRule(CreateTrafficMirrorFilterRuleRequest request) {request = beforeClientExecution(request);return executeCreateTrafficMirrorFilterRule(request);}
public SendEventResult sendEvent(SendEventRequest request) {request = beforeClientExecution(request);return executeSendEvent(request);}
public MissingRowDummyRecord(int rowNumber) {this.rowNumber = rowNumber;}
public final int getLengthB() {return endB - beginB;}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 63; shift >= 0; shift -= 1) {values[valuesOffset++] = (int) ((block >>> shift) & 1);}}}
public void writeInt(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeInt(value);}
public ByteBuffer putInt(int index, int value) {throw new ReadOnlyBufferException();}
public K next() {return super.nextEntry().getKey();}
public RenameDetectionType getRenameDetectionType() {return renameDetectionType;}
public ReplaceNetworkAclAssociationResult replaceNetworkAclAssociation(ReplaceNetworkAclAssociationRequest request) {request = beforeClientExecution(request);return executeReplaceNetworkAclAssociation(request);}
public String getFontName(){return _fontName;}
public ViewSourceRecord(RecordInputStream in) {vs = in.readShort();}
public boolean hasTrackingRefUpdate() {return trackingRefUpdate != null;}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return set.contains(symbol);}
public ValueEval evaluate(EvaluationCell srcCell) {int sheetIndex = getSheetIndex(srcCell.getSheet());return evaluateAny(srcCell, sheetIndex, srcCell.getRowIndex(), srcCell.getColumnIndex(), new EvaluationTracker(_cache));}
public AcceptTransitGatewayVpcAttachmentResult acceptTransitGatewayVpcAttachment(AcceptTransitGatewayVpcAttachmentRequest request) {request = beforeClientExecution(request);return executeAcceptTransitGatewayVpcAttachment(request);}
public String toString() {return "<opaque schema='" + this.schema + "' value='" + this.value + "'/>";}
public static FuzzySet createSetBasedOnQuality(int maxNumUniqueValues, float desiredMaxSaturation){int setSize=getNearestSetSize(maxNumUniqueValues,desiredMaxSaturation);return new FuzzySet(new FixedBitSet(setSize+1),setSize, hashFunctionForVersion(VERSION_CURRENT));}
public DeregisterInstancesFromLoadBalancerRequest(String loadBalancerName, java.util.List<Instance> instances) {setLoadBalancerName(loadBalancerName);setInstances(instances);}
public DeleteIntegrationResult deleteIntegration(DeleteIntegrationRequest request) {request = beforeClientExecution(request);return executeDeleteIntegration(request);}
public Ref3DPtg(LittleEndianInput in)  {field_1_index_extern_sheet = in.readShort();readCoordinates(in);}
public synchronized E peek() {try {return (E) elementData[elementCount - 1];} catch (IndexOutOfBoundsException e) {throw new EmptyStackException();}}
public CheckDomainTransferabilityResult checkDomainTransferability(CheckDomainTransferabilityRequest request) {request = beforeClientExecution(request);return executeCheckDomainTransferability(request);}
@Override public Iterator<K> iterator() {return new MultisetKeyIterator();}
public InitiateJobResult initiateJob(InitiateJobRequest request) {request = beforeClientExecution(request);return executeInitiateJob(request);}
public StempelPolishStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void removeLastAuthor() {remove1stProperty(PropertyIDMap.PID_LASTAUTHOR);}
public void decRef() {final int rc = refCount.decrementAndGet();assert rc >= 0: "seg=" + info;}
public String toString() {return "<fuzzy field='" + this.field + "' similarity='" + this.similarity+ "' term='" + this.text + "'/>";}
public static void putCompressedUnicode(String input, LittleEndianOutput out) {byte[] bytes = input.getBytes(ISO_8859_1);out.write(bytes);}
public void append(final BytesRef bytes) {int bytesLeft = bytes.length;int offset = bytes.offset;while (bytesLeft > 0) {int bufferLeft = BYTE_BLOCK_SIZE - byteUpto;if (bytesLeft < bufferLeft) {System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bytesLeft);byteUpto += bytesLeft;break;} else {if (bufferLeft > 0) {System.arraycopy(bytes.bytes, offset, buffer, byteUpto, bufferLeft);}nextBuffer();bytesLeft -= bufferLeft;offset += bufferLeft;}}}
public GetBundlesResult getBundles(GetBundlesRequest request) {request = beforeClientExecution(request);return executeGetBundles(request);}
public StopAssessmentRunResult stopAssessmentRun(StopAssessmentRunRequest request) {request = beforeClientExecution(request);return executeStopAssessmentRun(request);}
public CreateFolderResult createFolder(CreateFolderRequest request) {request = beforeClientExecution(request);return executeCreateFolder(request);}
public ChangeResourceRecordSetsRequest(String hostedZoneId, ChangeBatch changeBatch) {setHostedZoneId(hostedZoneId);setChangeBatch(changeBatch);}
public CreateDeploymentStrategyResult createDeploymentStrategy(CreateDeploymentStrategyRequest request) {request = beforeClientExecution(request);return executeCreateDeploymentStrategy(request);}
public DeleteCacheClusterRequest(String cacheClusterId) {setCacheClusterId(cacheClusterId);}
public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 2:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1]);case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}
public GroupingSearch setAllGroupHeads(boolean allGroupHeads) {this.allGroupHeads = allGroupHeads;return this;}
public String dequote(String in) {final byte[] b = Constants.encode(in);return dequote(b, 0, b.length);}
public boolean isEmpty() {return entrySet().isEmpty();}
public Query makeLuceneQueryFieldNoBoost(String fieldName, BasicQueryFactory qf) {return SrndBooleanQuery.makeBooleanQuery( makeLuceneSubQueriesField(fieldName, qf), BooleanClause.Occur.MUST);}
public long getSize() {return data.length;}
public CreatePhoneNumberOrderResult createPhoneNumberOrder(CreatePhoneNumberOrderRequest request) {request = beforeClientExecution(request);return executeCreatePhoneNumberOrder(request);}
public ShortBuffer get(short[] dst, int dstOffset, int shortCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, shortCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, shortCount);}this.position += shortCount;return this;}
public DetectModerationLabelsResult detectModerationLabels(DetectModerationLabelsRequest request) {request = beforeClientExecution(request);return executeDetectModerationLabels(request);}
public UncalcedRecord(RecordInputStream in) {_reserved = in.readShort(); }
public String handlePart(Matcher m, String part, CellFormatType type,StringBuffer desc) {int pos = desc.length();char firstCh = part.charAt(0);switch (firstCh) {case '[':if (part.length() < 3)break;if (topmost != null)throw new IllegalArgumentException("Duplicate '[' times in format");part = part.toLowerCase(Locale.ROOT);int specLen = part.length() - 2;topmost = assignSpec(part.charAt(1), pos, specLen);return part.substring(1, 1 + specLen);case 'h':case 'm':case 's':case '0':part = part.toLowerCase(Locale.ROOT);assignSpec(part.charAt(0), pos, part.length());return part;case '\n':return "%n";case '\"':part = part.substring(1, part.length() - 1);break;case '\\':part = part.substring(1);break;case '*':if (part.length() > 1)part = CellFormatPart.expandChar(part);break;case '_':return null;}return PERCENTS.matcher(part).replaceAll("%%");}
public long ramBytesUsed() {long sizeInBytes =  ((delegateFieldsProducer!=null) ? delegateFieldsProducer.ramBytesUsed() : 0);for(Map.Entry<String,FuzzySet> entry: bloomsByFieldName.entrySet()) {sizeInBytes += entry.getKey().length() * Character.BYTES;sizeInBytes += entry.getValue().ramBytesUsed();}return sizeInBytes;}
public CreateImageRequest(String instanceId, String name) {setInstanceId(instanceId);setName(name);}
public SendDiagnosticInterruptResult sendDiagnosticInterrupt(SendDiagnosticInterruptRequest request) {request = beforeClientExecution(request);return executeSendDiagnosticInterrupt(request);}
public int lastIndexOf(Object object) {Object[] snapshot = elements;return lastIndexOf(object, snapshot, 0, snapshot.length);}
public AbortDocumentVersionUploadResult abortDocumentVersionUpload(AbortDocumentVersionUploadRequest request) {request = beforeClientExecution(request);return executeAbortDocumentVersionUpload(request);}
public PaneInformation(short x, short y, short top, short left, byte active, boolean frozen) {this.x = x;this.y = y;this.topRow = top;this.leftColumn = left;this.activePane = active;this.frozen = frozen;}
public DescribeScalingProcessTypesResult describeScalingProcessTypes(DescribeScalingProcessTypesRequest request) {request = beforeClientExecution(request);return executeDescribeScalingProcessTypes(request);}
public static boolean endsWith(char s[], int len, char suffix[]) {final int suffixLen = suffix.length;if (suffixLen > len)return false;for (int i = suffixLen - 1; i >= 0; i--)if (s[len -(suffixLen - i)] != suffix[i])return false;return true;}
public void warnIfOpen() {if (allocationSite == null || !ENABLED) {return;}String message =("A resource was acquired at attached stack trace but never released. "+ "See java.io.Closeable for information on avoiding resource leaks.");REPORTER.report(message, allocationSite);}
public GetImageScanRequest() {super("cr", "2016-06-07", "GetImageScan", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/scan");setMethod(MethodType.GET);}
public ListSkillsStoreCategoriesResult listSkillsStoreCategories(ListSkillsStoreCategoriesRequest request) {request = beforeClientExecution(request);return executeListSkillsStoreCategories(request);}
public int getHeight() {return mImage.getHeight();}
public void applyFont(Font font) {applyFont(0, _string.getCharCount(), font);}
public DetectEntitiesResult detectEntities(DetectEntitiesRequest request) {request = beforeClientExecution(request);return executeDetectEntities(request);}
public void copyRawTo(ByteBuffer w) {w.putInt(w1);w.putInt(w2);w.putInt(w3);w.putInt(w4);w.putInt(w5);}
public final char[] array() {return protectedArray();}
public void seekExact(long ord) throws IOException {if (indexEnum == null) {throw new IllegalStateException("terms index was not loaded");}assert ord < numTerms;in.seek(indexEnum.seek(ord));boolean result = nextBlock();assert result;indexIsCurrent = true;didIndexNext = false;seekPending = false;state.ord = indexEnum.ord()-1;assert state.ord >= -1: "ord=" + state.ord;term.copyBytes(indexEnum.term());int left = (int) (ord - state.ord);while(left > 0) {final BytesRef term = _next();assert term != null;left--;assert indexIsCurrent;}}
public String toString() {StringBuilder sb = new StringBuilder();sb.append('[');final int end = offset + length;for(int i=offset;i<end;i++) {if (i > offset) {sb.append(' ');}sb.append(Integer.toHexString(bytes[i]&0xff));}sb.append(']');return sb.toString();}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(" [FEATURE PROTECTION]\n");buffer.append("   Self Relative = " + fSD);buffer.append("   Password Verifier = " + passwordVerifier);buffer.append("   Title = " + title);buffer.append("   Security Descriptor Size = " + securityDescriptor.length);buffer.append(" [/FEATURE PROTECTION]\n");return buffer.toString();}
public void setCRC(int crc32) {crc = crc32;}
public DoubleRange(String label, double minIn, boolean minInclusive, double maxIn, boolean maxInclusive) {super(label);if (Double.isNaN(minIn)) {throw new IllegalArgumentException("min cannot be NaN");}if (!minInclusive) {minIn = Math.nextUp(minIn);}if (Double.isNaN(maxIn)) {throw new IllegalArgumentException("max cannot be NaN");}if (!maxInclusive) {maxIn = Math.nextAfter(maxIn, Double.NEGATIVE_INFINITY);}if (minIn > maxIn) {failNoMatch();}this.min = minIn;this.max = maxIn;}
public int getBATEntriesPerBlock() {return bigBlockSize / LittleEndianConsts.INT_SIZE;}
public CreatePublishingDestinationResult createPublishingDestination(CreatePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeCreatePublishingDestination(request);}
public void skipBytes(long count) {pos += count;}
public String toString() {return "jarowinkler(" + threshold + ")";}
public DeleteInvitationsResult deleteInvitations(DeleteInvitationsRequest request) {request = beforeClientExecution(request);return executeDeleteInvitations(request);}
public DelimitedPayloadTokenFilterFactory(Map<String, String> args) {super(args);encoderClass = require(args, ENCODER_ATTR);delimiter = getChar(args, DELIMITER_ATTR, '|');if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public ListSmartHomeAppliancesResult listSmartHomeAppliances(ListSmartHomeAppliancesRequest request) {request = beforeClientExecution(request);return executeListSmartHomeAppliances(request);}
public void dispatch(ConfigChangedListener listener) {listener.onConfigChanged(this);}
public File[] listFiles() {return filenamesToFiles(list());}
public DedicatedCapacityInner getByResourceGroup(String resourceGroupName, String dedicatedCapacityName) {return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCapacityName).toBlocking().single().body();}
public void seekExact(long ord) {assert ord < info.terms.size();termUpto = (int) ord;info.terms.get(info.sortedTerms[termUpto], br);}
public CreateTrialComponentResult createTrialComponent(CreateTrialComponentRequest request) {request = beforeClientExecution(request);return executeCreateTrialComponent(request);}
public UpdateResourceResult updateResource(UpdateResourceRequest request) {request = beforeClientExecution(request);return executeUpdateResource(request);}
public long length() {try {return channel.size();} catch (IOException ioe) {throw new RuntimeException("IOException during length(): " + this, ioe);}}
public char setIndex(int position) {if (position < getBeginIndex() || position > getEndIndex())throw new IllegalArgumentException("Illegal Position: " + position);index = start + position;return current();}
public static boolean isContainer(short options, short recordId){if(recordId >= EscherContainerRecord.DGG_CONTAINER &&  recordId<= EscherContainerRecord.SOLVER_CONTAINER){return true;} else {if (recordId == EscherTextboxRecord.RECORD_ID) {return false;} else {return ( options & (short) 0x000F ) == (short) 0x000F;}}}
public boolean exists(String fileName) {assert locked();if (!refCounts.containsKey(fileName)) {return false;} else {return getRefCount(fileName).count > 0;}}
public STSAssumeRoleSessionCredentialsProvider withSTSClient(IAcsClient client) {this.stsClient = client;return this;}
public AcceptMatchResult acceptMatch(AcceptMatchRequest request) {request = beforeClientExecution(request);return executeAcceptMatch(request);}
public static RevFilter create(int skip) {if (skip < 0)throw new IllegalArgumentException(JGitText.get().skipMustBeNonNegative);return new SkipRevFilter(skip);}
public GetHITResult getHIT(GetHITRequest request) {request = beforeClientExecution(request);return executeGetHIT(request);}
public StopStreamProcessorResult stopStreamProcessor(StopStreamProcessorRequest request) {request = beforeClientExecution(request);return executeStopStreamProcessor(request);}
public static AttrPtg createIf(int dist) {return new AttrPtg(optiIf.set(0), dist, null, -1);}
public DeleteIAMPolicyAssignmentResult deleteIAMPolicyAssignment(DeleteIAMPolicyAssignmentRequest request) {request = beforeClientExecution(request);return executeDeleteIAMPolicyAssignment(request);}
public UpdateCampaignResult updateCampaign(UpdateCampaignRequest request) {request = beforeClientExecution(request);return executeUpdateCampaign(request);}
public LexerActionExecutor fixOffsetBeforeMatch(int offset) {LexerAction[] updatedLexerActions = null;for (int i = 0; i < lexerActions.length; i++) {if (lexerActions[i].isPositionDependent() && !(lexerActions[i] instanceof LexerIndexedCustomAction)) {if (updatedLexerActions == null) {updatedLexerActions = lexerActions.clone();}updatedLexerActions[i] = new LexerIndexedCustomAction(offset, lexerActions[i]);}}if (updatedLexerActions == null) {return this;}return new LexerActionExecutor(updatedLexerActions);}
public void protectSheet(String password, boolean shouldProtectObjects,boolean shouldProtectScenarios) {if (password == null) {_passwordRecord = null;_protectRecord = null;_objectProtectRecord = null;_scenarioProtectRecord = null;return;}ProtectRecord prec = getProtect();PasswordRecord pass = getPassword();prec.setProtect(true);pass.setPassword((short)CryptoFunctions.createXorVerifier1(password));if (_objectProtectRecord == null && shouldProtectObjects) {ObjectProtectRecord rec = createObjectProtect();rec.setProtect(true);_objectProtectRecord = rec;}if (_scenarioProtectRecord == null && shouldProtectScenarios) {ScenarioProtectRecord srec = createScenarioProtect();srec.setProtect(true);_scenarioProtectRecord = srec;}}
public PackedDataOutput(DataOutput out) {this.out = out;current = 0;remainingBits = 8;}
public CFRuleBase getRule(int idx) {checkRuleIndex(idx);return rules.get(idx);}
public FieldCacheSource(String field) {this.field=field;}
public IndonesianStemFilterFactory(Map<String,String> args) {super(args);stemDerivational = getBoolean(args, "stemDerivational", true);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean isOffsetOverlap( WeightedPhraseInfo other ){int so = getStartOffset();int eo = getEndOffset();int oso = other.getStartOffset();int oeo = other.getEndOffset();if( so <= oso && oso < eo ) return true;if( so < oeo && oeo <= eo ) return true;if( oso <= so && so < oeo ) return true;if( oso < eo && eo <= oeo ) return true;return false;}
public MergeAlgorithm(DiffAlgorithm diff) {this.diffAlg = diff;}
public void serialize(LittleEndianOutput out) {out.writeInt(field_1_xAxisUpperLeft);out.writeInt(field_2_yAxisUpperLeft);out.writeInt(field_3_xSize);out.writeInt(field_4_ySize);out.writeByte(field_5_type);out.writeByte(field_6_spacing);out.writeShort(field_7_options);}
public long get(int index) {final int o = index / 21;final int b = index % 21;final int shift = b * 3;return (blocks[o] >>> shift) & 7L;}
public CodingErrorAction unmappableCharacterAction() {return unmappableCharacterAction;}
public Set<String> getSet(Map<String,String> args, String name) {String s = args.remove(name);if (s == null) {return null;} else {Set<String> set = null;Matcher matcher = ITEM_PATTERN.matcher(s);if (matcher.find()) {set = new HashSet<>();set.add(matcher.group(0));while (matcher.find()) {set.add(matcher.group(0));}}return set;}}
public AbstractTreeIterator createSubtreeIterator(ObjectReader reader)throws IncorrectObjectTypeException, IOException {if (currentSubtree == null)throw new IncorrectObjectTypeException(getEntryObjectId(),Constants.TYPE_TREE);return new DirCacheIterator(this, currentSubtree);}
public Explanation[] getDetails() {return details.toArray(new Explanation[0]);}
public String toString() {if ( text==null ) {return "<DeleteOp@"+tokens.get(index)+".."+tokens.get(lastIndex)+">";}return "<ReplaceOp@"+tokens.get(index)+".."+tokens.get(lastIndex)+":\""+text+"\">";}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( "[TopMargin]\n" );buffer.append( "    .margin               = " ).append( " (" ).append( getMargin() ).append( " )\n" );buffer.append( "[/TopMargin]\n" );return buffer.toString();}
static public double fv(double r, int nper, double c, double pv) {return fv(r, nper, c, pv, 0);}
@Override public boolean remove(Object object) {Object[] a = array;int s = size;if (object != null) {for (int i = 0; i < s; i++) {if (object.equals(a[i])) {System.arraycopy(a, i + 1, a, i, --s - i);a[s] = null;  size = s;modCount++;return true;}}} else {for (int i = 0; i < s; i++) {if (a[i] == null) {System.arraycopy(a, i + 1, a, i, --s - i);a[s] = null;  size = s;modCount++;return true;}}}return false;}
public MergeCellsRecord(CellRangeAddress[] regions, int startIndex, int numberOfRegions) {_regions = regions;_startIndex = startIndex;_numberOfRegions = numberOfRegions;}
public Cluster resizeCluster(ResizeClusterRequest request) {request = beforeClientExecution(request);return executeResizeCluster(request);}
public int getParent(int ordinal) throws IOException {ensureOpen();Objects.checkIndex(ordinal, nextID);int[] parents = getTaxoArrays().parents();assert ordinal < parents.length : "requested ordinal (" + ordinal + "); parents.length (" + parents.length + ") !";return parents[ordinal];}
@Override public Iterator<Multiset.Entry<E>> iterator() {final Iterator<Map.Entry<E, AtomicInteger>> backingEntries= backingMap.entrySet().iterator();return new Iterator<Multiset.Entry<E>>() {Map.Entry<E, AtomicInteger> toRemove;
public int alloc(int size) {int index = n;int len = array.length;if (n + size >= len) {char[] aux = new char[len + blockSize];System.arraycopy(array, 0, aux, 0, len);array = aux;}n += size;return index;}
public static String getInflectionTypeTranslation(String s) {return inflTypeTranslations.get(s);}
public Note call() throws GitAPIException {checkCallable();try (RevWalk walk = new RevWalk(repo);ObjectInserter inserter = repo.newObjectInserter()) {NoteMap map = NoteMap.newEmptyMap();RevCommit notesCommit = null;Ref ref = repo.exactRef(notesRef);if (ref != null) {notesCommit = walk.parseCommit(ref.getObjectId());map = NoteMap.read(walk.getObjectReader(), notesCommit);}map.set(id, null, inserter);AddNoteCommand.commitNoteMap(repo, notesRef, walk, map, notesCommit,inserter,"Notes removed by 'git notes remove'"); return map.getNote(id);} catch (IOException e) {throw new JGitInternalException(e.getMessage(), e);}}
public String getNewPath() {return newPath;}
public UserSViewBegin(byte[] data) {_rawData = data;}
public CreateMountTargetResult createMountTarget(CreateMountTargetRequest request) {request = beforeClientExecution(request);return executeCreateMountTarget(request);}
public DeleteSubnetRequest(String subnetId) {setSubnetId(subnetId);}
public void setTitle(String title) {this.title = title;}
public char current() {if (offset == end) {return DONE;}return string.charAt(offset);}
public void add(long n) {if (count == entries.length)grow();entries[count++] = n;}
public FloatBuffer put(int index, float c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public ListGroupPoliciesRequest(String groupName) {setGroupName(groupName);}
public void setDeltaSearchWindowSize(int objectCount) {if (objectCount <= 2)setDeltaCompress(false);elsedeltaSearchWindowSize = objectCount;}
public int nextDoc() {while (true) {if (queue.size() == 0) {doc = NO_MORE_DOCS;break;}int newDoc = queue.top().docID();if (newDoc != doc) {assert newDoc > doc: "doc=" + doc + " newDoc=" + newDoc;doc = newDoc;break;}if (queue.top().nextDoc() == NO_MORE_DOCS) {queue.pop();} else {queue.updateTop();}}return doc;}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 4) & 15;values[valuesOffset++] = block & 15;}}
public int getNameIndex(String name) {for (int k = 0; k < names.size(); k++) {String nameName = getNameName(k);if (nameName.equalsIgnoreCase(name)) {return k;}}return -1;}
public void seek(int index) {if (index == currentCharIndex) {return;}if (index > currentCharIndex) {sync(index - currentCharIndex);index = Math.min(index, getBufferStartIndex() + n - 1);}int i = index - getBufferStartIndex();if ( i < 0 ) {throw new IllegalArgumentException("cannot seek to negative index " + index);}else if (i >= n) {throw new UnsupportedOperationException("seek to index outside buffer: "+index+" not in "+getBufferStartIndex()+".."+(getBufferStartIndex()+n));}p = i;currentCharIndex = index;if (p == 0) {lastChar = lastCharBufferStart;}else {lastChar = data[p-1];}}
public void readBytes(byte[] b, int offset, int len) {System.arraycopy(data, pos, b, offset, len);pos += len;}
public ListGraphsResult listGraphs(ListGraphsRequest request) {request = beforeClientExecution(request);return executeListGraphs(request);}
public ATNDeserializer(ATNDeserializationOptions deserializationOptions) {if (deserializationOptions == null) {deserializationOptions = ATNDeserializationOptions.getDefaultOptions();}this.deserializationOptions = deserializationOptions;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = ((blocks[blocksOffset++] & 0xFF) << 8) | (blocks[blocksOffset++] & 0xFF);}}
public CanonicalTreeParser getParent() {return (CanonicalTreeParser) parent;}
public DetectDominantLanguageResult detectDominantLanguage(DetectDominantLanguageRequest request) {request = beforeClientExecution(request);return executeDetectDominantLanguage(request);}
public void removePageCount() {remove1stProperty(PropertyIDMap.PID_PAGECOUNT);}
public E previous() {if (expectedModCount == modCount) {try {E result = get(pos);lastPosition = pos;pos--;return result;} catch (IndexOutOfBoundsException e) {throw new NoSuchElementException();}}throw new ConcurrentModificationException();}
public String toString() {final StringBuilder r = new StringBuilder();r.append("(");for (int i = 0; i < subfilters.length; i++) {if (i > 0)r.append(" AND ");r.append(subfilters[i].toString());}r.append(")");return r.toString();}
public FooterRecord clone() {return copy();}
public int stem(final char s[], int len) {if (len < 4) return len;if (len > 5 && endsWith(s, len, "ища"))return len - 3;len = removeArticle(s, len);len = removePlural(s, len);if (len > 3) {if (endsWith(s, len, "я"))len--;if (endsWith(s, len, "а") ||endsWith(s, len, "о") ||endsWith(s, len, "е"))len--;}if (len > 4 && endsWith(s, len, "ен")) {s[len - 2] = 'н'; len--;}if (len > 5 && s[len - 2] == 'ъ') {s[len - 2] = s[len - 1]; len--;}return len;}
public synchronized CharSequence subSequence(int start, int end) {return super.substring(start, end);}
public DisableVpcClassicLinkDnsSupportResult disableVpcClassicLinkDnsSupport(DisableVpcClassicLinkDnsSupportRequest request) {request = beforeClientExecution(request);return executeDisableVpcClassicLinkDnsSupport(request);}
public static FormulaError forInt(byte type) throws IllegalArgumentException {FormulaError err = bmap.get(type);if(err == null) throw new IllegalArgumentException("Unknown error type: " + type);return err;}
public void remove() {if (index == 0)throw new IllegalStateException();BlockList.this.remove(--index);dirIdx = toDirectoryIndex(index);blkIdx = toBlockIndex(index);block = directory[dirIdx];}
public String formatNumberDateCell(CellValueRecordInterface cell) {double value;if (cell instanceof NumberRecord) {value = ((NumberRecord) cell).getValue();} else if (cell instanceof FormulaRecord) {value = ((FormulaRecord) cell).getValue();} else {throw new IllegalArgumentException("Unsupported CellValue Record passed in " + cell);}int formatIndex = getFormatIndex(cell);String formatString = getFormatString(cell);if (formatString == null) {return _defaultFormat.format(value);}return _formatter.formatRawCellContents(value, formatIndex, formatString);}
public synchronized StringBuffer append(Object obj) {if (obj == null) {appendNull();} else {append0(obj.toString());}return this;}
public String getUser() {return user;}
public CreateGraphResult createGraph(CreateGraphRequest request) {request = beforeClientExecution(request);return executeCreateGraph(request);}
public static BytesRef toBytesRef(IntsRef input, BytesRefBuilder scratch) {scratch.grow(input.length);for(int i=0;i<input.length;i++) {int value = input.ints[i+input.offset];assert value >= Byte.MIN_VALUE && value <= 255: "value " + value + " doesn't fit into byte";scratch.setByteAt(i, (byte) value);}scratch.setLength(input.length);return scratch.get();}
public final DoubleBuffer asDoubleBuffer() {return DoubleToByteBufferAdapter.asDoubleBuffer(this);}
public static final RevFilter between(Date since, Date until) {return between(since.getTime(), until.getTime());}
public AreaEval offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) {AreaI area = new OffsetArea(getRow(), getColumn(),relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);return new LazyAreaEval(area, _evaluator);}
public static void registerFunction(String name, FreeRefFunction func){AnalysisToolPak.registerFunction(name, func);}
public CreateAutoMLJobResult createAutoMLJob(CreateAutoMLJobRequest request) {request = beforeClientExecution(request);return executeCreateAutoMLJob(request);}
public DefineIndexFieldResult defineIndexField(DefineIndexFieldRequest request) {request = beforeClientExecution(request);return executeDefineIndexField(request);}
public ListDomainNamesResult listDomainNames(ListDomainNamesRequest request) {request = beforeClientExecution(request);return executeListDomainNames(request);}
public CharBuffer put(char c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putChar(position++ * SizeOf.CHAR, c);return this;}
public static PathFilter create(String path) {while (path.endsWith("/")) path = path.substring(0, path.length() - 1);if (path.length() == 0)throw new IllegalArgumentException(JGitText.get().emptyPathNotPermitted);return new PathFilter(path);}
public final String toString() {return String.copyValueOf(backingArray, offset + position, remaining());}
public char first() {index = start;return current();}
public void growForward() {forwardPos = ArrayUtil.grow(forwardPos, 1+forwardCount);forwardID = ArrayUtil.grow(forwardID, 1+forwardCount);forwardIndex = ArrayUtil.grow(forwardIndex, 1+forwardCount);final Type[] newForwardType = new Type[forwardPos.length];System.arraycopy(forwardType, 0, newForwardType, 0, forwardType.length);forwardType = newForwardType;}
public DescribeReplicationGroupsResult describeReplicationGroups(DescribeReplicationGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeReplicationGroups(request);}
public int getIndex(T o) {return valueKeyMap.getOrDefault(o, -1);}
public String toString() {return "("+pred+", "+alt+ ")";}
public DescribeRegionsResult describeRegions() {return describeRegions(new DescribeRegionsRequest());}
public ModifyVpcEndpointConnectionNotificationResult modifyVpcEndpointConnectionNotification(ModifyVpcEndpointConnectionNotificationRequest request) {request = beforeClientExecution(request);return executeModifyVpcEndpointConnectionNotification(request);}
public QueryPhraseMap( FieldQuery fieldQuery ){this.fieldQuery = fieldQuery;}
public DescribeAssessmentTemplatesResult describeAssessmentTemplates(DescribeAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeDescribeAssessmentTemplates(request);}
public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup,  boolean longestOnly) {super(input);this.dedup = dedup && longestOnly == false; this.stemmer = new Stemmer(dictionary);this.longestOnly = longestOnly;}
public NameCommentRecord getNameCommentRecord(final NameRecord nameRecord){return commentRecords.get(nameRecord.getNameText());}
public ScanRequest(String tableName) {setTableName(tableName);}
public AliasTarget(String hostedZoneId, String dNSName) {setHostedZoneId(hostedZoneId);setDNSName(dNSName);}
public ListOutgoingTypedLinksResult listOutgoingTypedLinks(ListOutgoingTypedLinksRequest request) {request = beforeClientExecution(request);return executeListOutgoingTypedLinks(request);}
public HsmConfiguration createHsmConfiguration(CreateHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateHsmConfiguration(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[BEGIN]\n");buffer.append("[/BEGIN]\n");return buffer.toString();}
public DisableDomainAutoRenewResult disableDomainAutoRenew(DisableDomainAutoRenewRequest request) {request = beforeClientExecution(request);return executeDisableDomainAutoRenew(request);}
@Override public boolean remove(Object o) {if (!(o instanceof Entry)) {return false;}Entry<?, ?> e = (Entry<?, ?>) o;Object key = e.getKey();return key != null && Impl.this.remove(key, e.getValue());}
public UpdateFindingsFeedbackResult updateFindingsFeedback(UpdateFindingsFeedbackRequest request) {request = beforeClientExecution(request);return executeUpdateFindingsFeedback(request);}
public void setColorAtIndex(short index, byte red, byte green, byte blue){_palette.setColor(index, red, green, blue);}
public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeByte(verOriginator);out.writeByte(verWriter);out.writeShort(rgCFRTID.length);for (CFRTID cfrtid : rgCFRTID) {cfrtid.serialize(out);}}
public RevokeInvitationResult revokeInvitation(RevokeInvitationRequest request) {request = beforeClientExecution(request);return executeRevokeInvitation(request);}
public GetTextDetectionResult getTextDetection(GetTextDetectionRequest request) {request = beforeClientExecution(request);return executeGetTextDetection(request);}
public void ensureCapacity(int min) {if (min > value.length) {int ourMin = value.length*2 + 2;enlargeBuffer(Math.max(ourMin, min));}}
public void write(byte[] buffer, int byteOffset, int byteCount) throws IOException {IoBridge.write(fd, buffer, byteOffset, byteCount);}
public DisassociateAddressResult disassociateAddress(DisassociateAddressRequest request) {request = beforeClientExecution(request);return executeDisassociateAddress(request);}
public TagCommand setForceUpdate(boolean forceUpdate) {this.forceUpdate = forceUpdate;return this;}
public PageItemRecord(RecordInputStream in) {int dataSize = in.remaining();if (dataSize % FieldInfo.ENCODED_SIZE != 0) {throw new RecordFormatException("Bad data size " + dataSize);}int nItems = dataSize / FieldInfo.ENCODED_SIZE;FieldInfo[] fis = new FieldInfo[nItems];for (int i = 0; i < fis.length; i++) {fis[i] = new FieldInfo(in);}_fieldInfos = fis;}
public XPathTokenElement(String tokenName, int tokenType) {super(tokenName);this.tokenType = tokenType;}
@Override public boolean contains(Object object) {return indexOf(object) != -1;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_x);out.writeShort(field_2_y);out.writeShort(field_3_topRow);out.writeShort(field_4_leftColumn);out.writeShort(field_5_activePane);}
public StepExecutionStatusDetail(StepExecutionState state, java.util.Date creationDateTime) {setState(state.toString());setCreationDateTime(creationDateTime);}
public EditEventRequest() {super("CloudPhoto", "2017-07-11", "EditEvent", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public PurchaseHostReservationResult purchaseHostReservation(PurchaseHostReservationRequest request) {request = beforeClientExecution(request);return executePurchaseHostReservation(request);}
public ConfirmPrivateVirtualInterfaceResult confirmPrivateVirtualInterface(ConfirmPrivateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeConfirmPrivateVirtualInterface(request);}
public static int getVariantLength(final long variantType) {final Integer length = numberToLength.get(variantType);return (length != null) ? length : LENGTH_UNKNOWN;}
public UnknownFormatFlagsException(String f) {if (f == null) {throw new NullPointerException();}flags = f;}
public boolean isFreezePane() {return frozen;}
public PurchaseReservedDBInstancesOfferingRequest(String reservedDBInstancesOfferingId) {setReservedDBInstancesOfferingId(reservedDBInstancesOfferingId);}
public HeaderBlock(POIFSBigBlockSize bigBlockSize){this.bigBlockSize = bigBlockSize;_data = new byte[ POIFSConstants.SMALLER_BIG_BLOCK_SIZE ];Arrays.fill(_data, _default_value);new LongField(_signature_offset, _signature, _data);new IntegerField(0x08, 0, _data);new IntegerField(0x0c, 0, _data);new IntegerField(0x10, 0, _data);new IntegerField(0x14, 0, _data);new ShortField(0x18, ( short ) 0x3b, _data);new ShortField(0x1a, ( short ) 0x3, _data);new ShortField(0x1c, ( short ) -2, _data);new ShortField(0x1e, bigBlockSize.getHeaderValue(), _data);new IntegerField(0x20, 0x6, _data);new IntegerField(0x24, 0, _data);new IntegerField(0x28, 0, _data);new IntegerField(0x34, 0, _data);new IntegerField(0x38, 0x1000, _data);_bat_count = 0;_sbat_count = 0;_xbat_count = 0;_property_start = POIFSConstants.END_OF_CHAIN;_sbat_start = POIFSConstants.END_OF_CHAIN;_xbat_start = POIFSConstants.END_OF_CHAIN;}
public ListEventSubscriptionsResult listEventSubscriptions(ListEventSubscriptionsRequest request) {request = beforeClientExecution(request);return executeListEventSubscriptions(request);}
public ListProxySessionsResult listProxySessions(ListProxySessionsRequest request) {request = beforeClientExecution(request);return executeListProxySessions(request);}
public SimpleBoundaryScanner( int maxScan, Set<Character> boundaryChars ){this.maxScan = maxScan;this.boundaryChars = boundaryChars;}
public ObjectId getObjectId() {return getLeaf().getObjectId();}
public void drawLine(int x1, int y1, int x2, int y2, int width){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor(x1, y1, x2, y2) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_LINE);shape.setLineWidth(width);shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());}
public ReverseBytesReader(byte[] bytes) {this.bytes = bytes;}
public GetActiveNamesResult getActiveNames(GetActiveNamesRequest request) {request = beforeClientExecution(request);return executeGetActiveNames(request);}
public MergeResult getFailingResult() {return failingResult;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[AREA]\n");buffer.append("    .formatFlags          = ").append("0x").append(HexDump.toHex(  getFormatFlags ())).append(" (").append( getFormatFlags() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("         .stacked                  = ").append(isStacked()).append('\n');buffer.append("         .displayAsPercentage      = ").append(isDisplayAsPercentage()).append('\n');buffer.append("         .shadow                   = ").append(isShadow()).append('\n');buffer.append("[/AREA]\n");return buffer.toString();}
public BatchCreateVariableResult batchCreateVariable(BatchCreateVariableRequest request) {request = beforeClientExecution(request);return executeBatchCreateVariable(request);}
public final boolean isReuseAsIs() {return (flags & REUSE_AS_IS) != 0;}
public String toString() {return "[PRINTGRIDLINES]\n" +"    .printgridlines = " + getPrintGridlines() +"\n" +"[/PRINTGRIDLINES]\n";}
public ApplySecurityGroupsToClientVpnTargetNetworkResult applySecurityGroupsToClientVpnTargetNetwork(ApplySecurityGroupsToClientVpnTargetNetworkRequest request) {request = beforeClientExecution(request);return executeApplySecurityGroupsToClientVpnTargetNetwork(request);}
public DetachInternetGatewayResult detachInternetGateway(DetachInternetGatewayRequest request) {request = beforeClientExecution(request);return executeDetachInternetGateway(request);}
public static final RevFilter after(long ts) {return new After(ts);}
public DescribeCampaignResult describeCampaign(DescribeCampaignRequest request) {request = beforeClientExecution(request);return executeDescribeCampaign(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[INDEX]\n");buffer.append("    .firstrow       = ").append(Integer.toHexString(getFirstRow())).append("\n");buffer.append("    .lastrowadd1    = ").append(Integer.toHexString(getLastRowAdd1())).append("\n");for (int k = 0; k < getNumDbcells(); k++) {buffer.append("    .dbcell_").append(k).append(" = ").append(Integer.toHexString(getDbcellAt(k))).append("\n");}buffer.append("[/INDEX]\n");return buffer.toString();}
public UserSViewEnd clone() {return copy();}
public final float averageCharsPerByte() {return averageCharsPerByte;}
public ListTimeLinePhotosRequest() {super("CloudPhoto", "2017-07-11", "ListTimeLinePhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String toString() {return getClass().getName() + " [" +formatAsString() +"]";}
public RunTaskResult runTask(RunTaskRequest request) {request = beforeClientExecution(request);return executeRunTask(request);}
public void setCollector(Collector collector) {this.collector = collector;}
public String toString() {return slice.toString()+":"+ postingsEnum;}
public void addFieldConfigListener(FieldConfigListener listener) {this.listeners.add(listener);}
public Result getResult() {return result;}
public ListNamedQueriesResult listNamedQueries(ListNamedQueriesRequest request) {request = beforeClientExecution(request);return executeListNamedQueries(request);}
public URIish setPort(int n) {final URIish r = new URIish(this);r.port = n > 0 ? n : -1;return r;}
public void serialize(LittleEndianOutput out) {out.writeShort(_flags);}
public byte[] getBuffer() {return buf;}
public String getSignerVersion() {return "1.0";}
public DBParameterGroup copyDBParameterGroup(CopyDBParameterGroupRequest request) {request = beforeClientExecution(request);return executeCopyDBParameterGroup(request);}
public PackedObjectInfo getObject(int nth) {return entries[nth];}
public CreateUserSourceAccountRequest() {super("cr", "2016-06-07", "CreateUserSourceAccount", "cr");setUriPattern("/users/sourceAccount");setMethod(MethodType.PUT);}
public DeleteApplicationVpcConfigurationResult deleteApplicationVpcConfiguration(DeleteApplicationVpcConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationVpcConfiguration(request);}
public final short[] array() {return protectedArray();}
public ByteBuffer putLong(int index, long value) {throw new ReadOnlyBufferException();}
public void removeSubject() {remove1stProperty(PropertyIDMap.PID_SUBJECT);}
public BatchGetDeploymentGroupsResult batchGetDeploymentGroups(BatchGetDeploymentGroupsRequest request) {request = beforeClientExecution(request);return executeBatchGetDeploymentGroups(request);}
public DisassociateRepositoryResult disassociateRepository(DisassociateRepositoryRequest request) {request = beforeClientExecution(request);return executeDisassociateRepository(request);}
public DescribeSpotPriceHistoryResult describeSpotPriceHistory() {return describeSpotPriceHistory(new DescribeSpotPriceHistoryRequest());}
public UpdateRepoSourceRepoRequest() {super("cr", "2016-06-07", "UpdateRepoSourceRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/sourceRepo");setMethod(MethodType.POST);}
public boolean isHidden() {if (path.isEmpty()) {return false;}return getName().startsWith(".");}
public PaneRecord(RecordInputStream in) {field_1_x          = in.readShort();field_2_y          = in.readShort();field_3_topRow     = in.readShort();field_4_leftColumn = in.readShort();field_5_activePane = in.readShort();}
public StartGameSessionPlacementResult startGameSessionPlacement(StartGameSessionPlacementRequest request) {request = beforeClientExecution(request);return executeStartGameSessionPlacement(request);}
public int getDFASize(int decision) {DFA decisionToDFA = atnSimulator.decisionToDFA[decision];return decisionToDFA.states.size();}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;remainingData = (bytesRemaining == 0) ? EMPTY : IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, pos, remainingData, 0, bytesRemaining );return 8 + bytesRemaining;}
public void startFragment(TextFragment newFragment) {foundTerms = new HashSet<>();totalScore = 0;}
public boolean equals(ATNConfig other) {if (this == other) {return true;}else if (!(other instanceof LexerATNConfig)) {return false;}LexerATNConfig lexerOther = (LexerATNConfig)other;if (passedThroughNonGreedyDecision != lexerOther.passedThroughNonGreedyDecision) {return false;}if (!ObjectEqualityComparator.INSTANCE.equals(lexerActionExecutor, lexerOther.lexerActionExecutor)) {return false;}return super.equals(other);}
public DescribeCacheParameterGroupsRequest(String cacheParameterGroupName) {setCacheParameterGroupName(cacheParameterGroupName);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("    [Pattern Formatting]\n");buffer.append("          .fillpattern= ").append(Integer.toHexString(getFillPattern())).append("\n");buffer.append("          .fgcoloridx= ").append(Integer.toHexString(getFillForegroundColor())).append("\n");buffer.append("          .bgcoloridx= ").append(Integer.toHexString(getFillBackgroundColor())).append("\n");buffer.append("    [/Pattern Formatting]\n");return buffer.toString();}
public boolean equals(Object o) {return o instanceof FileKey && path.equals(((FileKey) o).path);}
public UntagAttendeeResult untagAttendee(UntagAttendeeRequest request) {request = beforeClientExecution(request);return executeUntagAttendee(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[END]\n");buffer.append("[/END]\n");return buffer.toString();}
public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException { this.subs = subs;this.subSlices = subSlices;assert subs.length > 0 : "inefficient: don't use MultiTerms over one sub";boolean _hasFreqs = true;boolean _hasOffsets = true;boolean _hasPositions = true;boolean _hasPayloads = false;for(int i=0;i<subs.length;i++) {_hasFreqs &= subs[i].hasFreqs();_hasOffsets &= subs[i].hasOffsets();_hasPositions &= subs[i].hasPositions();_hasPayloads |= subs[i].hasPayloads();}hasFreqs = _hasFreqs;hasOffsets = _hasOffsets;hasPositions = _hasPositions;hasPayloads = hasPositions && _hasPayloads; }
public DescribeGameSessionPlacementResult describeGameSessionPlacement(DescribeGameSessionPlacementRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessionPlacement(request);}
public SynonymMap(FST<BytesRef> fst, BytesRefHash words, int maxHorizontalContext) {this.fst = fst;this.words = words;this.maxHorizontalContext = maxHorizontalContext;}
public DeleteTrialComponentResult deleteTrialComponent(DeleteTrialComponentRequest request) {request = beforeClientExecution(request);return executeDeleteTrialComponent(request);}
public RevisionSyntaxException(String revstr) {this.revstr = revstr;}
public void startWorker() {startWorkers(1);}
public SubscribeToEventResult subscribeToEvent(SubscribeToEventRequest request) {request = beforeClientExecution(request);return executeSubscribeToEvent(request);}
public PutScheduledUpdateGroupActionResult putScheduledUpdateGroupAction(PutScheduledUpdateGroupActionRequest request) {request = beforeClientExecution(request);return executePutScheduledUpdateGroupAction(request);}
public int doLogic() throws Exception {if (maxNumSegments == -1) {throw new IllegalStateException("required argument (maxNumSegments) was not specified");}IndexWriter iw = getRunData().getIndexWriter();iw.forceMerge(maxNumSegments);return 1;}
public String getSheetName(int sheetIndex) {return _uBook.getSheetName(sheetIndex);}
public DescribeConnectionLoaResult describeConnectionLoa(DescribeConnectionLoaRequest request) {request = beforeClientExecution(request);return executeDescribeConnectionLoa(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[NOTE]\n");buffer.append("    .row    = ").append(field_1_row).append("\n");buffer.append("    .col    = ").append(field_2_col).append("\n");buffer.append("    .flags  = ").append(field_3_flags).append("\n");buffer.append("    .shapeid= ").append(field_4_shapeid).append("\n");buffer.append("    .author = ").append(field_6_author).append("\n");buffer.append("[/NOTE]\n");return buffer.toString();}
public PipedInputStream(PipedOutputStream out, int pipeSize) throws IOException {this(pipeSize);connect(out);}
public String toString() {return description();}
public synchronized Credential getCredential() {if (null == credential && null != icredential) {credential = icredential.fresh();}return credential;}
public OptionGroup copyOptionGroup(CopyOptionGroupRequest request) {request = beforeClientExecution(request);return executeCopyOptionGroup(request);}
public InfoSubRecord(RecordInputStream in){field_1_stream_pos        = in.readInt();field_2_bucket_sst_offset = in.readShort();field_3_zero              = in.readShort();}
public TreeFilter clone() {final TreeFilter[] s = new TreeFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public SendAlexaOfferToMasterResult sendAlexaOfferToMaster(SendAlexaOfferToMasterRequest request) {request = beforeClientExecution(request);return executeSendAlexaOfferToMaster(request);}
public DescribeEndpointConfigResult describeEndpointConfig(DescribeEndpointConfigRequest request) {request = beforeClientExecution(request);return executeDescribeEndpointConfig(request);}
public PushCommand setProgressMonitor(ProgressMonitor monitor) {checkCallable();if (monitor == null) {monitor = NullProgressMonitor.INSTANCE;}this.monitor = monitor;return this;}
public FloatBuffer get(float[] dst, int dstOffset, int floatCount) {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, floatCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, floatCount);}this.position += floatCount;return this;}
public boolean shouldBeRecursive() {for (TreeFilter f : subfilters)if (f.shouldBeRecursive())return true;return false;}
public static void putUnicodeLE(String input, LittleEndianOutput out) {byte[] bytes = input.getBytes(UTF16LE);out.write(bytes);}
public ReservedNode acceptReservedNodeExchange(AcceptReservedNodeExchangeRequest request) {request = beforeClientExecution(request);return executeAcceptReservedNodeExchange(request);}
public ClusterSecurityGroup authorizeClusterSecurityGroupIngress(AuthorizeClusterSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeClusterSecurityGroupIngress(request);}
public ListVaultsResult listVaults(ListVaultsRequest request) {request = beforeClientExecution(request);return executeListVaults(request);}
public void add(UDFFinder toolPack){_usedToolPacks.add(toolPack);}
public CreateRealtimeEndpointResult createRealtimeEndpoint(CreateRealtimeEndpointRequest request) {request = beforeClientExecution(request);return executeCreateRealtimeEndpoint(request);}
public final void recurseClearCachedFormulaResults(IEvaluationListener listener) {if (listener == null) {recurseClearCachedFormulaResults();} else {listener.onClearCachedValue(this);recurseClearCachedFormulaResults(listener, 1);}}
public PageBreakRecord(RecordInputStream in) {final int nBreaks = in.readShort();_breaks.ensureCapacity(nBreaks + 2);for(int k = 0; k < nBreaks; k++) {_breaks.add(new Break(in));}initMap();}
public String toString() {return attSource.toString();}
public void add(double value) {ensureCapacity(_count + 1);_array[_count] = value;_count++;}
public FileInputStream(String path) throws FileNotFoundException {this(new File(path));}
public SetDataRetrievalPolicyResult setDataRetrievalPolicy(SetDataRetrievalPolicyRequest request) {request = beforeClientExecution(request);return executeSetDataRetrievalPolicy(request);}
public ScoreDoc(int doc, float score, int shardIndex) {this.doc = doc;this.score = score;this.shardIndex = shardIndex;}
public SpanNotQuery(SpanQuery include, SpanQuery exclude, int pre, int post) {this.include = Objects.requireNonNull(include);this.exclude = Objects.requireNonNull(exclude);this.pre = pre;this.post = post;if (include.getField() != null && exclude.getField() != null && !include.getField().equals(exclude.getField()))throw new IllegalArgumentException("Clauses must have same field.");}
public void visitContainedRecords(RecordVisitor rv) {if (_validationList.isEmpty()) {return;}rv.visitRecord(_headerRec);_validationList.forEach(rv::visitRecord);}
public void addArea(int rowFrom, int colFrom, int rowTo, int colTo) {_mergedRegions.add(new CellRangeAddress(rowFrom, rowTo, colFrom, colTo));}
public HungarianLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int readDataSize() {return _lei.readUShort();}
public DescribeAdjustmentTypesResult describeAdjustmentTypes(DescribeAdjustmentTypesRequest request) {request = beforeClientExecution(request);return executeDescribeAdjustmentTypes(request);}
public DefineSuggesterResult defineSuggester(DefineSuggesterRequest request) {request = beforeClientExecution(request);return executeDefineSuggester(request);}
public GetJourneyDateRangeKpiResult getJourneyDateRangeKpi(GetJourneyDateRangeKpiRequest request) {request = beforeClientExecution(request);return executeGetJourneyDateRangeKpi(request);}
public PushCommand add(String nameOrSpec) {if (0 <= nameOrSpec.indexOf(':')) {refSpecs.add(new RefSpec(nameOrSpec));} else {Ref src;try {src = repo.findRef(nameOrSpec);} catch (IOException e) {throw new JGitInternalException(JGitText.get().exceptionCaughtDuringExecutionOfPushCommand,e);}if (src != null)add(src);}return this;}
public DescribeDataSourceResult describeDataSource(DescribeDataSourceRequest request) {request = beforeClientExecution(request);return executeDescribeDataSource(request);}
public AutoCRLFInputStream(InputStream in, boolean detectBinary) {this.in = in;this.detectBinary = detectBinary;}
public byte[] getRawRecord(){return _rawData;}
public LongBuffer put(LongBuffer buf) {throw new ReadOnlyBufferException();}
@Override public E set(int location, E object) {synchronized (mutex) {return list.set(location, object);}}
public void jumpDrawablesToCurrentState() {super.jumpDrawablesToCurrentState();if (mProgressDrawable != null) mProgressDrawable.jumpToCurrentState();if (mIndeterminateDrawable != null) mIndeterminateDrawable.jumpToCurrentState();}
public boolean contains(Object object) {Link<E> link = voidLink.next;if (object != null) {while (link != voidLink) {if (object.equals(link.data)) {return true;}link = link.next;}} else {while (link != voidLink) {if (link.data == null) {return true;}link = link.next;}}return false;}
public static double[] copyOf(double[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public IndexSearcher acquire(long version) {ensureOpen();final SearcherTracker tracker = searchers.get(version);if (tracker != null &&tracker.searcher.getIndexReader().tryIncRef()) {return tracker.searcher;}return null;}
public void setDateToBeFormatted(double date) {this.dateToBeFormatted = date;}
public CreateIntegrationResponseResult createIntegrationResponse(CreateIntegrationResponseRequest request) {request = beforeClientExecution(request);return executeCreateIntegrationResponse(request);}
public PhraseWildcardQuery build() {return new PhraseWildcardQuery(field, phraseTerms, slop, maxMultiTermExpansions, segmentOptimizationEnabled);}
public synchronized void dropChanges() {pendingDeletes.dropChanges();dropMergingUpdates();}
public static int footerLength() {return 16;}
public DeleteDBParameterGroupRequest(String dBParameterGroupName) {setDBParameterGroupName(dBParameterGroupName);}
public GetDedicatedIpsResult getDedicatedIps(GetDedicatedIpsRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIps(request);}
public DeleteArchiveResult deleteArchive(DeleteArchiveRequest request) {request = beforeClientExecution(request);return executeDeleteArchive(request);}
public ResourceRecordSet(String name, RRType type) {setName(name);setType(type.toString());}
public ArabicNormalizationFilter(TokenStream input) {super(input);}
public ReceiveMessageResult receiveMessage(ReceiveMessageRequest request) {request = beforeClientExecution(request);return executeReceiveMessage(request);}
public CharSequence getFully(CharSequence key) {Row now = getRow(root);int w;Cell c;int cmd = -1;StrEnum e = new StrEnum(key, forward);Character ch = null;Character aux = null;for (int i = 0; i < key.length();) {ch = e.next();i++;c = now.at(ch);if (c == null) {return null;}cmd = c.cmd;for (int skip = c.skip; skip > 0; skip--) {if (i < key.length()) {aux = e.next();} else {return null;}i++;}w = now.getRef(ch);if (w >= 0) {now = getRow(w);} else if (i < key.length()) {return null;}}return (cmd == -1) ? null : cmds.get(cmd);}
public Span[] getNames(String[] words) {Span[] names = nameFinder.find(words);return names;}
public void reset() {used = false;}
public AnalyticsPrefixPredicate(String prefix) {this.prefix = prefix;}
public byte readByte() {return (byte) readUByte();}
public CreateImportJobResult createImportJob(CreateImportJobRequest request) {request = beforeClientExecution(request);return executeCreateImportJob(request);}
public byte[] build() {ByteArrayOutputStream os = new ByteArrayOutputStream();try (OutputStreamWriter w = new OutputStreamWriter(os,UTF_8)) {w.write("object "); getObjectId().copyTo(w);w.write('\n');w.write("type "); w.write(Constants.typeString(getObjectType()));w.write("\n"); w.write("tag "); w.write(getTag());w.write("\n"); if (getTagger() != null) {w.write("tagger "); w.write(getTagger().toExternalString());w.write('\n');}w.write('\n');if (getMessage() != null)w.write(getMessage());} catch (IOException err) {throw new RuntimeException(err);}return os.toByteArray();}
public boolean equals(ATNConfig a, ATNConfig b) {if ( a==b ) return true;if ( a==null || b==null ) return false;return a.state.stateNumber==b.state.stateNumber&& a.alt==b.alt&& a.semanticContext.equals(b.semanticContext);}
public CreateMemberResult createMember(CreateMemberRequest request) {request = beforeClientExecution(request);return executeCreateMember(request);}
public void removeParCount() {remove1stProperty(PropertyIDMap.PID_PARCOUNT);}
public DeleteDeliveryStreamResult deleteDeliveryStream(DeleteDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeDeleteDeliveryStream(request);}
public static RevFilter create(int maxCount) {if (maxCount < 0)throw new IllegalArgumentException(JGitText.get().maxCountMustBeNonNegative);return new MaxCountRevFilter(maxCount);}
public PeerVpcResult peerVpc(PeerVpcRequest request) {request = beforeClientExecution(request);return executePeerVpc(request);}
public GetResolverRuleResult getResolverRule(GetResolverRuleRequest request) {request = beforeClientExecution(request);return executeGetResolverRule(request);}
public DeleteScalingPolicyResult deleteScalingPolicy(DeleteScalingPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteScalingPolicy(request);}
public TokenStream create(TokenStream input) {return new SwedishLightStemFilter(input);}
public void serialize(LittleEndianOutput out) {out.writeShort(getRowNumber());out.writeShort(getFirstCol() == -1 ? (short)0 : getFirstCol());out.writeShort(getLastCol() == -1 ? (short)0 : getLastCol());out.writeShort(getHeight());out.writeShort(getOptimize());out.writeShort(field_6_reserved);out.writeShort(getOptionFlags());out.writeShort(getOptionFlags2());}
public GetCredentialsForIdentityResult getCredentialsForIdentity(GetCredentialsForIdentityRequest request) {request = beforeClientExecution(request);return executeGetCredentialsForIdentity(request);}
public DeleteFileSystemResult deleteFileSystem(DeleteFileSystemRequest request) {request = beforeClientExecution(request);return executeDeleteFileSystem(request);}
public DeleteGameServerGroupResult deleteGameServerGroup(DeleteGameServerGroupRequest request) {request = beforeClientExecution(request);return executeDeleteGameServerGroup(request);}
public AutoCRLFOutputStream(OutputStream out) {this(out, true);}
public DescribeLocationsResult describeLocations(DescribeLocationsRequest request) {request = beforeClientExecution(request);return executeDescribeLocations(request);}
public CopyWorkspaceImageResult copyWorkspaceImage(CopyWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeCopyWorkspaceImage(request);}
public UpdateAliasResult updateAlias(UpdateAliasRequest request) {request = beforeClientExecution(request);return executeUpdateAlias(request);}
public static final int nextLF(byte[] b, int ptr, char chrA) {final int sz = b.length;while (ptr < sz) {final byte c = b[ptr++];if (c == chrA || c == '\n')return ptr;}return ptr;}
public static long checkFooter(ChecksumIndexInput in) throws IOException {validateFooter(in);long actualChecksum = in.getChecksum();long expectedChecksum = readCRC(in);if (expectedChecksum != actualChecksum) {throw new CorruptIndexException("checksum failed (hardware problem?) : expected=" + Long.toHexString(expectedChecksum) +" actual=" + Long.toHexString(actualChecksum), in);}return actualChecksum;}
public GetLoadBalancersResult getLoadBalancers(GetLoadBalancersRequest request) {request = beforeClientExecution(request);return executeGetLoadBalancers(request);}
public GetRepoListByNamespaceRequest() {super("cr", "2016-06-07", "GetRepoListByNamespace", "cr");setUriPattern("/repos/[RepoNamespace]");setMethod(MethodType.GET);}
public boolean add(QueryNodeProcessor processor) {boolean added = this.processors.add(processor);if (added) {processor.setQueryConfigHandler(this.queryConfig);}return added;}
public PutEventStreamResult putEventStream(PutEventStreamRequest request) {request = beforeClientExecution(request);return executePutEventStream(request);}
public int getRenameLimit() {return renameLimit;}
public char next() {if (++index >= limit) {index = limit;return DONE;} else {return current();}}
public final ObjectId getDeltaBaseId() {return deltaBase;}
public FieldType(IndexableFieldType ref) {this.stored = ref.stored();this.tokenized = ref.tokenized();this.storeTermVectors = ref.storeTermVectors();this.storeTermVectorOffsets = ref.storeTermVectorOffsets();this.storeTermVectorPositions = ref.storeTermVectorPositions();this.storeTermVectorPayloads = ref.storeTermVectorPayloads();this.omitNorms = ref.omitNorms();this.indexOptions = ref.indexOptions();this.docValuesType = ref.docValuesType();this.dimensionCount = ref.pointDimensionCount();this.indexDimensionCount = ref.pointIndexDimensionCount();this.dimensionNumBytes = ref.pointNumBytes();if (ref.getAttributes() != null) {this.attributes = new HashMap<>(ref.getAttributes());}}
public RestoreWorkspaceResult restoreWorkspace(RestoreWorkspaceRequest request) {request = beforeClientExecution(request);return executeRestoreWorkspace(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[CODEPAGE]\n");buffer.append("    .codepage        = ").append(Integer.toHexString(getCodepage())).append("\n");buffer.append("[/CODEPAGE]\n");return buffer.toString();}
public GetRepoTagsRequest() {super("cr", "2016-06-07", "GetRepoTags", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags");setMethod(MethodType.GET);}
public ProtectRecord clone() {return copy();}
public ModifyDBParameterGroupResult modifyDBParameterGroup(ModifyDBParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyDBParameterGroup(request);}
public QueryParserConfig build() {return new QueryParserConfig(this);}
public Set<String> getSections() {return getState().getSections();}
public UpdateProxySessionResult updateProxySession(UpdateProxySessionRequest request) {request = beforeClientExecution(request);return executeUpdateProxySession(request);}
public double getAvp() {return maxGoodPoints==0 ? 0 : pReleventSum/maxGoodPoints;}
public ListCompatibleImagesResult listCompatibleImages(ListCompatibleImagesRequest request) {request = beforeClientExecution(request);return executeListCompatibleImages(request);}
public int getSourceEnd() {Region r = outRegion;return r.sourceStart + r.length;}
public int read() {if (pos < size) {return s.charAt(pos++);} else {s = null;return -1;}}
public GetMediaForFragmentListResult getMediaForFragmentList(GetMediaForFragmentListRequest request) {request = beforeClientExecution(request);return executeGetMediaForFragmentList(request);}
public BlendedTermQuery build() {return new BlendedTermQuery(ArrayUtil.copyOfSubArray(terms, 0, numTerms),ArrayUtil.copyOfSubArray(boosts, 0, numTerms),ArrayUtil.copyOfSubArray(contexts, 0, numTerms),rewriteMethod);}
public void write(byte[] buffer, int offset, int length) throws IOException {checkWritePrimitiveTypes();primitiveTypes.write(buffer, offset, length);}
public ModifyScheduledActionResult modifyScheduledAction(ModifyScheduledActionRequest request) {request = beforeClientExecution(request);return executeModifyScheduledAction(request);}
public CreateEventRequest() {super("CloudPhoto", "2017-07-11", "CreateEvent", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DeleteDirectoryResult deleteDirectory(DeleteDirectoryRequest request) {request = beforeClientExecution(request);return executeDeleteDirectory(request);}
public static RevFilter create(RevFilter a, RevFilter b) {if (a == ALL)return b;if (b == ALL)return a;return new Binary(a, b);}
public PasswordRecord(int password) {field_1_password = password;}
public CzechStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public CloseIgnoringInputStream(InputStream in) {super(in);}
public Snapshot modifyClusterSnapshot(ModifyClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeModifyClusterSnapshot(request);}
public boolean inErrorRecoveryMode(Parser recognizer) {return errorRecoveryMode;}
public FacetLabel(String dim, String[] path) {components = new String[1+path.length];components[0] = dim;System.arraycopy(path, 0, components, 1, path.length);length = components.length;checkComponents();}
public UntagStreamResult untagStream(UntagStreamRequest request) {request = beforeClientExecution(request);return executeUntagStream(request);}
public long addAndGet(long delta) {return count += delta;}
public int read() throws IOException {synchronized (lock) {if (!isOpen()) {throw new IOException("InputStreamReader is closed");}char[] buf = new char[1];return read(buf, 0, 1) != -1 ? buf[0] : -1;}}
public static int getEncodedSize(int numberOfItems) {return numberOfItems * ENCODED_SIZE;}
public PrintStream(File file, String csn) throws FileNotFoundException,UnsupportedEncodingException {super(new FileOutputStream(file));if (csn == null) {throw new NullPointerException();}if (!Charset.isSupported(csn)) {throw new UnsupportedEncodingException(csn);}encoding = csn;}
public E poll() {return size == 0 ? null : removeFirst();}
public void write(char[] cbuf, int offset, int count) throws IOException {synchronized (lock) {checkNotClosed();if (cbuf == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(cbuf.length, offset, count);if (pos == 0 && count >= this.buf.length) {out.write(cbuf, offset, count);return;}int available = this.buf.length - pos;if (count < available) {available = count;}if (available > 0) {System.arraycopy(cbuf, offset, this.buf, pos, available);pos += available;}if (pos == this.buf.length) {out.write(this.buf, 0, this.buf.length);pos = 0;if (count > available) {offset += available;available = count - available;if (available >= this.buf.length) {out.write(cbuf, offset, available);return;}System.arraycopy(cbuf, offset, this.buf, pos, available);pos += available;}}}}
public String toString(String enc) throws UnsupportedEncodingException {return new String(toByteArray(), enc);}
public CreateRoomMembershipResult createRoomMembership(CreateRoomMembershipRequest request) {request = beforeClientExecution(request);return executeCreateRoomMembership(request);}
public long ramBytesUsed() {long size = 0;for (Map.Entry<String,DocValuesProducer> entry : formats.entrySet()) {size += (entry.getKey().length() * Character.BYTES) + entry.getValue().ramBytesUsed();}return size;}
public int getDFASize() {int n = 0;DFA[] decisionToDFA = atnSimulator.decisionToDFA;for (int i = 0; i < decisionToDFA.length; i++) {n += getDFASize(i);}return n;}
public static CodePointCharStream fromString(String s) {return fromString(s, IntStream.UNKNOWN_SOURCE_NAME);}
public DeleteUserSourceAccountRequest() {super("cr", "2016-06-07", "DeleteUserSourceAccount", "cr");setUriPattern("/users/sourceAccount/[SourceAccountId]");setMethod(MethodType.DELETE);}
public static Proxy proxyFor(ProxySelector proxySelector, URL u)throws ConnectException {try {URI uri = new URI(u.getProtocol(), null, u.getHost(), u.getPort(),null, null, null);return proxySelector.select(uri).get(0);} catch (URISyntaxException e) {final ConnectException err;err = new ConnectException(MessageFormat.format(JGitText.get().cannotDetermineProxyFor, u));err.initCause(e);throw err;}}
public String toString() {String dsc = null;switch (this.type) {case TYPE_UNDERFLOW:dsc = "UNDERFLOW error";break;case TYPE_OVERFLOW:dsc = "OVERFLOW error";break;case TYPE_UNMAPPABLE_CHAR:dsc = "Unmappable-character error with erroneous input length "+ this.length;break;case TYPE_MALFORMED_INPUT:dsc = "Malformed-input error with erroneous input length "+ this.length;break;default:dsc = "";break;}return getClass().getName() + "[" + dsc + "]";}
public PredictResult predict(PredictRequest request) {request = beforeClientExecution(request);return executePredict(request);}
public Ptg get3DReferencePtg(AreaReference areaRef, SheetIdentifier sheet) {int extIx = getSheetExtIx(sheet);return new Area3DPtg(areaRef, extIx);}
public DescribeMatchmakingResult describeMatchmaking(DescribeMatchmakingRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmaking(request);}
public DeleteDeviceUsageDataResult deleteDeviceUsageData(DeleteDeviceUsageDataRequest request) {request = beforeClientExecution(request);return executeDeleteDeviceUsageData(request);}
public void removeHyperlink() {for (Iterator<RecordBase> it = _sheet.getSheet().getRecords().iterator(); it.hasNext();) {RecordBase rec = it.next();if (rec instanceof HyperlinkRecord) {HyperlinkRecord link = (HyperlinkRecord) rec;if (link.getFirstColumn() == _record.getColumn() && link.getFirstRow() == _record.getRow()) {it.remove();return;}}}}
public RegisterInstancesWithLoadBalancerRequest(String loadBalancerName, java.util.List<Instance> instances) {setLoadBalancerName(loadBalancerName);setInstances(instances);}
public AssociateResolverRuleResult associateResolverRule(AssociateResolverRuleRequest request) {request = beforeClientExecution(request);return executeAssociateResolverRule(request);}
@Override public Set<Entry<K, V>> entrySet() {throw new UnsupportedOperationException();}
public TreeFilter negate() {return a;}
public SearchProfilesResult searchProfiles(SearchProfilesRequest request) {request = beforeClientExecution(request);return executeSearchProfiles(request);}
public DBSubnetGroup modifyDBSubnetGroup(ModifyDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyDBSubnetGroup(request);}
public int compareTo(String version) {final String[] parts = version.split(":");final long indexGen = Long.parseLong(parts[0], RADIX);final long taxoGen = Long.parseLong(parts[1], RADIX);final long indexCommitGen = indexCommit.getGeneration();final long taxoCommitGen = taxoCommit.getGeneration();if (indexCommitGen < indexGen) {return -1;} else if (indexCommitGen > indexGen) {return 1;} else {return taxoCommitGen < taxoGen ? -1 : (taxoCommitGen > taxoGen ? 1 : 0);}}
public LiteralValueSource(String string) {this.string = string;this.bytesRef = new BytesRef(string);}
public int getValue(final int holder){return getRawValue(holder) >>> _shift_count;}
public HSSFShapeGroup(HSSFShape parent, HSSFAnchor anchor) {super(parent, anchor);_spgrRecord = ((EscherContainerRecord)getEscherContainer().getChild(0)).getChildById(EscherSpgrRecord.RECORD_ID);}
public String toString() {return "Note[" + name() + " -> " + data.name() + "]";}
public DeleteFpgaImageResult deleteFpgaImage(DeleteFpgaImageRequest request) {request = beforeClientExecution(request);return executeDeleteFpgaImage(request);}
public CreateAppCookieStickinessPolicyResult createAppCookieStickinessPolicy(CreateAppCookieStickinessPolicyRequest request) {request = beforeClientExecution(request);return executeCreateAppCookieStickinessPolicy(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[FNGROUPCOUNT]\n");buffer.append("    .count            = ").append(getCount()).append("\n");buffer.append("[/FNGROUPCOUNT]\n");return buffer.toString();}
public final void sort(int from, int to) {checkRange(from, to);quicksort(from, to, 2 * MathUtil.log(to - from, 2));}
public DescribeMonitoringScheduleResult describeMonitoringSchedule(DescribeMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeDescribeMonitoringSchedule(request);}
public HeaderLineParser(String[] header) {super(header);posToF = new FieldName[header.length];for (int i=0; i<header.length; i++) {String f = header[i];if (DocMaker.NAME_FIELD.equals(f)) {posToF[i] = FieldName.NAME;} else if (DocMaker.TITLE_FIELD.equals(f)) {posToF[i] = FieldName.TITLE;} else if (DocMaker.DATE_FIELD.equals(f)) {posToF[i] = FieldName.DATE;} else if (DocMaker.BODY_FIELD.equals(f)) {posToF[i] = FieldName.BODY;} else {posToF[i] = FieldName.PROP;}}}
public void reset() {if (useHash) {map.clear();useHash = false;}count = 0;}
public StandardTokenizerFactory(Map<String,String> args) {super(args);maxTokenLength = getInt(args, "maxTokenLength", StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);final long byte2 = blocks[blocksOffset++] & 0xFF;final long byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);final long byte4 = blocks[blocksOffset++] & 0xFF;final long byte5 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);final long byte6 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;}}
public boolean precpred(RuleContext localctx, int precedence) {return true;}
public int getFSD() {return fSD;}
public static FunctionMetadata getFunctionByIndex(int index) {return getInstance().getFunctionByIndexInternal(index);}
public Object toObject() {assert exists || 0 == value.length();return exists ? value.get().utf8ToString() : null;}
public GetDisksResult getDisks(GetDisksRequest request) {request = beforeClientExecution(request);return executeGetDisks(request);}
public String toString() {return getClass().getSimpleName() + "(compressionMode=" + compressionMode+ ", chunkSize=" + chunkSize + ", maxDocsPerChunk=" + maxDocsPerChunk + ", blockShift=" + blockShift + ")";}
public DescribeVolumesModificationsResult describeVolumesModifications(DescribeVolumesModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeVolumesModifications(request);}
public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {return currentPayloadScore + currentScore;}
public StartRepoBuildRequest() {super("cr", "2016-06-07", "StartRepoBuild", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build");setMethod(MethodType.PUT);}
public Instance(String instanceId) {setInstanceId(instanceId);}
public int getEntryPathHashCode() {int hash = 0;for (int i = Math.max(0, pathLen - 16); i < pathLen; i++) {byte c = path[i];if (c != ' ')hash = (hash >>> 2) + (c << 24);}return hash;}
public CreateBranchCommand setName(String name) {checkCallable();this.name = name;return this;}
public static Reporter getReporter() {return REPORTER;}
public void getChars(int start, int end, char[] dst, int dstStart) {if (start > count || end > count || start > end) {throw startEndAndLength(start, end);}System.arraycopy(value, start, dst, dstStart, end - start);}
public LongBuffer put(long[] src, int srcOffset, int longCount) {if (longCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, longCount);position += longCount;return this;}
public long getSourceSize() {return src.length;}
public void setID(String id) {if (id == null) {throw new NullPointerException();}ID = id;}
public GetCampaignVersionsResult getCampaignVersions(GetCampaignVersionsRequest request) {request = beforeClientExecution(request);return executeGetCampaignVersions(request);}
public long getTotalSLLLookaheadOps() {DecisionInfo[] decisions = atnSimulator.getDecisionInfo();long k = 0;for (int i = 0; i < decisions.length; i++) {k += decisions[i].SLL_TotalLook;}return k;}
public static Row getRow(int rowIndex, Sheet sheet) {Row row = sheet.getRow(rowIndex);if (row == null) {row = sheet.createRow(rowIndex);}return row;}
public void clear() {doc = null;analyzer = null;}
public KeyPairCredentials(String publicKeyId, String privateKeySecret) {if (publicKeyId == null || privateKeySecret == null) {throw new IllegalArgumentException("You must provide a valid pair of Public Key ID and Private Key Secret.");}this.publicKeyId = publicKeyId;this.privateKeySecret = privateKeySecret;}
public PredictionContext getParent(int index) {return parents[index];}
public synchronized StringBuffer append(String string) {append0(string);return this;}
public void removeBuiltinRecord(byte name, int sheetIndex) {NameRecord record = getSpecificBuiltinRecord(name, sheetIndex);if (record != null) {_definedNames.remove(record);}}
public SharedFormulaGroup(SharedFormulaRecord sfr, CellReference firstCell) {if (!sfr.isInRange(firstCell.getRow(), firstCell.getCol())) {throw new IllegalArgumentException("First formula cell " + firstCell.formatAsString()+ " is not shared formula range " + sfr.getRange() + ".");}_sfr = sfr;_firstCell = firstCell;int width = sfr.getLastColumn() - sfr.getFirstColumn() + 1;int height = sfr.getLastRow() - sfr.getFirstRow() + 1;_frAggs = new FormulaRecordAggregate[width * height];_numberOfFormulas = 0;}
public void modifyFormatRun(short oldPos, short newLen) {int shift = 0;for(int i=0; i < _formats.length; i++) {CTFormat ctf = _formats[i];if (shift != 0) {ctf.setOffset(ctf.getOffset() + shift);} else if (oldPos == ctf.getOffset() && i < _formats.length - 1){CTFormat nextCTF = _formats[i + 1];shift = newLen - (nextCTF.getOffset() - ctf.getOffset());}}}
public AddInstanceGroupsResult addInstanceGroups(AddInstanceGroupsRequest request) {request = beforeClientExecution(request);return executeAddInstanceGroups(request);}
public String getText() {if (getChildCount() == 0) {return "";}StringBuilder builder = new StringBuilder();for (int i = 0; i < getChildCount(); i++) {builder.append(getChild(i).getText());}return builder.toString();}
public ListCodeRepositoriesResult listCodeRepositories(ListCodeRepositoriesRequest request) {request = beforeClientExecution(request);return executeListCodeRepositories(request);}
public LexerATNConfig(ATNState state,int alt,PredictionContext context){super(state, alt, context, SemanticContext.NONE);this.passedThroughNonGreedyDecision = false;this.lexerActionExecutor = null;}
public int serialize(int offset, byte [] data) {throw new RecordFormatException("Old Label Records are supported READ ONLY");}
public GetSmsChannelResult getSmsChannel(GetSmsChannelRequest request) {request = beforeClientExecution(request);return executeGetSmsChannel(request);}
public Placement(String availabilityZone) {setAvailabilityZone(availabilityZone);}
public ListStacksResult listStacks(ListStacksRequest request) {request = beforeClientExecution(request);return executeListStacks(request);}
public ListFieldLevelEncryptionConfigsResult listFieldLevelEncryptionConfigs(ListFieldLevelEncryptionConfigsRequest request) {request = beforeClientExecution(request);return executeListFieldLevelEncryptionConfigs(request);}
public CloseInstancePublicPortsResult closeInstancePublicPorts(CloseInstancePublicPortsRequest request) {request = beforeClientExecution(request);return executeCloseInstancePublicPorts(request);}
public DeleteTransitGatewayRouteTableResult deleteTransitGatewayRouteTable(DeleteTransitGatewayRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGatewayRouteTable(request);}
public TokenStream create(TokenStream input) {return new StempelFilter(input, new StempelStemmer(PolishAnalyzer.getDefaultTable()));}
public static byte[] grow(byte[] array) {return grow(array, 1 + array.length);}
public DocFreqSorter(int maxDoc) {super(maxDoc / 64);this.tmpDocs = new int[maxDoc / 64];}
public void add(int a, int b) {add(Interval.of(a, b));}
public void cloneStyleFrom(HSSFCellStyle source) {_format.cloneStyleFrom(source._format);if(_workbook != source._workbook) {lastDateFormat.set(Short.MIN_VALUE);lastFormats.remove();getDataFormatStringCache.remove();short fmt = (short)_workbook.createFormat(source.getDataFormatString() );setDataFormat(fmt);FontRecord fr = _workbook.createNewFont();fr.cloneStyleFrom(source._workbook.getFontRecordAt(source.getFontIndexAsInt()));HSSFFont font = new HSSFFont((short)_workbook.getFontIndex(fr), fr);setFont(font);}}
public DeleteIdentitiesResult deleteIdentities(DeleteIdentitiesRequest request) {request = beforeClientExecution(request);return executeDeleteIdentities(request);}
public void nextSlice() {final int nextIndex = ((buffer[limit]&0xff)<<24) + ((buffer[1+limit]&0xff)<<16) + ((buffer[2+limit]&0xff)<<8) + (buffer[3+limit]&0xff);level = ByteBlockPool.NEXT_LEVEL_ARRAY[level];final int newSize = ByteBlockPool.LEVEL_SIZE_ARRAY[level];bufferUpto = nextIndex / ByteBlockPool.BYTE_BLOCK_SIZE;bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;buffer = pool.buffers[bufferUpto];upto = nextIndex & ByteBlockPool.BYTE_BLOCK_MASK;if (nextIndex + newSize >= endIndex) {assert endIndex - nextIndex > 0;limit = endIndex - bufferOffset;} else {limit = upto+newSize-4;}}
public DeleteMessageBatchRequest(String queueUrl, java.util.List<DeleteMessageBatchRequestEntry> entries) {setQueueUrl(queueUrl);setEntries(entries);}
public ReservedCacheNode purchaseReservedCacheNodesOffering(PurchaseReservedCacheNodesOfferingRequest request) {request = beforeClientExecution(request);return executePurchaseReservedCacheNodesOffering(request);}
public String getLineText() {final int eol = RawParseUtils.nextLF(buf, offset);return RawParseUtils.decode(UTF_8, buf, offset, eol);}
public DescribeNotificationConfigurationsResult describeNotificationConfigurations(DescribeNotificationConfigurationsRequest request) {request = beforeClientExecution(request);return executeDescribeNotificationConfigurations(request);}
@Override public boolean remove(Object object) {if (!esDelegate.remove(object)) {return false;}Entry<?, ?> entry = (Entry<?, ?>) object;inverse.delegate.remove(entry.getValue());return true;}
public static byte[] grow(byte[] array) {return grow(array, 1 + array.length);}
public IndexAndTaxonomyRevision(IndexWriter indexWriter, SnapshotDirectoryTaxonomyWriter taxoWriter)throws IOException {IndexDeletionPolicy delPolicy = indexWriter.getConfig().getIndexDeletionPolicy();if (!(delPolicy instanceof SnapshotDeletionPolicy)) {throw new IllegalArgumentException("IndexWriter must be created with SnapshotDeletionPolicy");}this.indexWriter = indexWriter;this.taxoWriter = taxoWriter;this.indexSDP = (SnapshotDeletionPolicy) delPolicy;this.taxoSDP = taxoWriter.getDeletionPolicy();this.indexCommit = indexSDP.snapshot();this.taxoCommit = taxoSDP.snapshot();this.version = revisionVersion(indexCommit, taxoCommit);this.sourceFiles = revisionFiles(indexCommit, taxoCommit);}
public synchronized String toString() {return super.toString();}
public static int hashCode(Object o) {return (o == null) ? 0 : o.hashCode();}
public GetModelTemplateResult getModelTemplate(GetModelTemplateRequest request) {request = beforeClientExecution(request);return executeGetModelTemplate(request);}
public XORShift64Random(long seed) {x = seed == 0 ? 0xdeadbeef : seed;}
public HeaderFooterRecord(RecordInputStream in) {_rawData = in.readRemainder();}
public HSSFPolygon createPolygon(HSSFClientAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(null, anchor);addShape(shape);onCreate(shape);return shape;}
public boolean equals(Object other) {if (other == null) {return false;}if (other instanceof BytesRef) {return this.bytesEquals((BytesRef) other);}return false;}
public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16) {values[valuesOffset++] = (block >>> shift) & 65535;}}}
public int serialize(int offset, byte[] data, EscherSerializationListener listener) {listener.beforeRecordSerialize( offset, getRecordId(), this );if (remainingData == null) {remainingData = EMPTY;}LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, remainingData.length );System.arraycopy( remainingData, 0, data, offset + 8, remainingData.length );int pos = offset + 8 + remainingData.length;listener.afterRecordSerialize( pos, getRecordId(), pos - offset, this );return pos - offset;}
public boolean equals(Object o) {if (! super.equals(o)) {return false;}SpanPositionRangeQuery other = (SpanPositionRangeQuery)o;return this.end == other.end && this.start == other.start;}
public CreateSignalingChannelResult createSignalingChannel(CreateSignalingChannelRequest request) {request = beforeClientExecution(request);return executeCreateSignalingChannel(request);}
public IndexDiffFilter(int dirCacheIndex, int workingTreeIndex,boolean honorIgnores) {this.dirCache = dirCacheIndex;this.workingTree = workingTreeIndex;this.honorIgnores = honorIgnores;}
public String toString() {StringBuilder sb = new StringBuilder("[" + getClass().getSimpleName() + ": ");sb.append("minMergeSize=").append(minMergeSize).append(", ");sb.append("mergeFactor=").append(mergeFactor).append(", ");sb.append("maxMergeSize=").append(maxMergeSize).append(", ");sb.append("maxMergeSizeForForcedMerge=").append(maxMergeSizeForForcedMerge).append(", ");sb.append("calibrateSizeByDeletes=").append(calibrateSizeByDeletes).append(", ");sb.append("maxMergeDocs=").append(maxMergeDocs).append(", ");sb.append("maxCFSSegmentSizeMB=").append(getMaxCFSSegmentSizeMB()).append(", ");sb.append("noCFSRatio=").append(noCFSRatio);sb.append("]");return sb.toString();}
public static void encode(StringBuilder urlstr, String key) {if (key == null || key.length() == 0)return;try {urlstr.append(URLEncoder.encode(key, UTF_8.name()));} catch (UnsupportedEncodingException e) {throw new RuntimeException(JGitText.get().couldNotURLEncodeToUTF8, e);}}
public DescribeTemplateResult describeTemplate(DescribeTemplateRequest request) {request = beforeClientExecution(request);return executeDescribeTemplate(request);}
public boolean mkdirs() {if (exists()) {return false;}if (mkdir()) {return true;}String parentDir = getParent();if (parentDir == null) {return false;}return (new File(parentDir).mkdirs() && mkdir());}
public HeaderBlock(InputStream stream) throws IOException {this(readFirst512(stream));if(bigBlockSize.getBigBlockSize() != 512) {int rest = bigBlockSize.getBigBlockSize() - 512;byte[] tmp = IOUtils.safelyAllocate(rest, MAX_RECORD_LENGTH);IOUtils.readFully(stream, tmp);}}
public void recover(LexerNoViableAltException e) {if (_input.LA(1) != IntStream.EOF) {getInterpreter().consume(_input);}}
public E valueAt(int index) {if (mGarbage) {gc();}return (E) mValues[index];}
public AttachToIndexResult attachToIndex(AttachToIndexRequest request) {request = beforeClientExecution(request);return executeAttachToIndex(request);}
public CreateMembersResult createMembers(CreateMembersRequest request) {request = beforeClientExecution(request);return executeCreateMembers(request);}
public double get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getDouble(position++ * SizeOf.DOUBLE);}
public WorkflowExecutionInfos listOpenWorkflowExecutions(ListOpenWorkflowExecutionsRequest request) {request = beforeClientExecution(request);return executeListOpenWorkflowExecutions(request);}
public CharSequence getFirstPathElement() {return values.get(0).value;}
public static int toEMU(double points){return (int)Math.rint(EMU_PER_POINT*points);}
public DeleteRequestValidatorResult deleteRequestValidator(DeleteRequestValidatorRequest request) {request = beforeClientExecution(request);return executeDeleteRequestValidator(request);}
public Repository open(boolean mustExist) throws IOException {if (mustExist && !isGitRepository(path, fs))throw new RepositoryNotFoundException(path);return new FileRepository(path);}
public GetOnPremisesInstanceResult getOnPremisesInstance(GetOnPremisesInstanceRequest request) {request = beforeClientExecution(request);return executeGetOnPremisesInstance(request);}
public String toString(){StringBuilder sb = new StringBuilder();sb.append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );return sb.toString();}
public short getFontAtIndex( int index ) {int size = _string.getFormatRunCount();FormatRun currentRun = null;for (int i=0;i<size;i++) {FormatRun r = _string.getFormatRun(i);if (r.getCharacterPos() > index) {break;}currentRun = r;}if (currentRun == null) {return NO_FONT;}return currentRun.getFontIndex();}
public StopMonitoringMembersResult stopMonitoringMembers(StopMonitoringMembersRequest request) {request = beforeClientExecution(request);return executeStopMonitoringMembers(request);}
public DetachLoadBalancerFromSubnetsResult detachLoadBalancerFromSubnets(DetachLoadBalancerFromSubnetsRequest request) {request = beforeClientExecution(request);return executeDetachLoadBalancerFromSubnets(request);}
public HSSFCell getCell(int cellnum, MissingCellPolicy policy) {HSSFCell cell = retrieveCell(cellnum);switch (policy) {case RETURN_NULL_AND_BLANK:return cell;case RETURN_BLANK_AS_NULL:boolean isBlank = (cell != null && cell.getCellType() == CellType.BLANK);return (isBlank) ? null : cell;case CREATE_NULL_AS_BLANK:return (cell == null) ? createCell(cellnum, CellType.BLANK) : cell;default:throw new IllegalArgumentException("Illegal policy " + policy);}}
public SimpleQQParser(String qqName, String indexField) {this(new String[] { qqName }, indexField);}
public Query makeQuery(int size) throws Exception {throw new Exception(this+".makeQuery(int size) is not supported!");}
public StringBuilder insert(int offset, float f) {insert0(offset, Float.toString(f));return this;}
public Class<ConfigChangedListener> getListenerType() {return ConfigChangedListener.class;}
public AddPermissionResult addPermission(AddPermissionRequest request) {request = beforeClientExecution(request);return executeAddPermission(request);}
public double get(int index) {checkIndex(index);return byteBuffer.getDouble(index * SizeOf.DOUBLE);}
public HSSFDataFormat createDataFormat() {return workbook.createDataFormat();}
public TermData add(TermData t1, TermData t2) {if (t1 == NO_OUTPUT) {return t2;} else if (t2 == NO_OUTPUT) {return t1;}TermData ret;if (t2.bytes != null || t2.docFreq > 0) {ret = new TermData(t2.bytes, t2.docFreq, t2.totalTermFreq);} else {ret = new TermData(t1.bytes, t1.docFreq, t1.totalTermFreq);}return ret;}
public FileSharingRecord(RecordInputStream in) {field_1_readonly = in.readShort();field_2_password = in.readShort();int nameLen = in.readShort();if(nameLen > 0) {field_3_username_unicode_options = in.readByte();field_3_username_value = in.readCompressedUnicode(nameLen);} else {field_3_username_value = "";}}
public double computeProbability(BasicStats stats) {return (stats.getTotalTermFreq()+1D) / (stats.getNumberOfFieldTokens()+1D);}
public StringCharacterIterator(String value) {string = value;start = offset = 0;end = string.length();}
public void start(String originalText, TokenStream tokenStream) {position = -1;currentNumFrags = 1;textSize = originalText.length();termAtt = tokenStream.addAttribute(CharTermAttribute.class);posIncAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);offsetAtt = tokenStream.addAttribute(OffsetAttribute.class);}
public String getSignerVersion() {return null;}
public String toString() {StringBuilder b = new StringBuilder();b.append("initial state: 0\n");for (int i = 0; i < size; i++) {b.append("state ").append(i);if (accept.get(i)) b.append(" [accept]:\n");else b.append(" [reject]:\n");for (int j = 0; j < points.length; j++) {int k = transitions[i * points.length + j];if (k != -1) {int min = points[j];int max;if (j + 1 < points.length) max = (points[j + 1] - 1);else max = alphabetSize;b.append(" ");Automaton.appendCharString(min, b);if (min != max) {b.append("-");Automaton.appendCharString(max, b);}b.append(" -> ").append(k).append("\n");}}}return b.toString();}
public synchronized long skip(long charCount) {if (charCount <= 0) {return 0;}int numskipped;if (this.count - pos < charCount) {numskipped = this.count - pos;pos = this.count;} else {numskipped = (int) charCount;pos += charCount;}return numskipped;}
@Override public ListIterator<E> listIterator(int location) {synchronized (mutex) {return list.listIterator(location);}}
public CreateAddressBookResult createAddressBook(CreateAddressBookRequest request) {request = beforeClientExecution(request);return executeCreateAddressBook(request);}
public StreamCopyThread(InputStream i, OutputStream o) {setName(Thread.currentThread().getName() + "-StreamCopy"); src = i;dst = o;writeLock = new Object();}
public AxisParentRecord(RecordInputStream in) {field_1_axisType = in.readShort();field_2_x        = in.readInt();field_3_y        = in.readInt();field_4_width    = in.readInt();field_5_height   = in.readInt();}
public FieldFragList createFieldFragList( FieldPhraseList fieldPhraseList, int fragCharSize ){return createFieldFragList( fieldPhraseList, new WeightedFieldFragList( fragCharSize ), fragCharSize );}
public TrimFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void push( TermInfo termInfo ){termList.push( termInfo );}
public DescribeNotebookInstanceResult describeNotebookInstance(DescribeNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstance(request);}
public String toFormulaString(){return ":";}
public ApplyCommand setPatch(InputStream in) {checkCallable();this.in = in;return this;}
public void setCreationTime(long when) {encodeTS(P_CTIME, when);}
public static final RevFilter before(Date ts) {return before(ts.getTime());}
public void advertiseCapability(String name) {capablities.add(name);}
public StopInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public CreateVpnGatewayResult createVpnGateway(CreateVpnGatewayRequest request) {request = beforeClientExecution(request);return executeCreateVpnGateway(request);}
public ResetCacheParameterGroupResult resetCacheParameterGroup(ResetCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeResetCacheParameterGroup(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {double result;try {double d0 = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);result = evaluate(d0, d1);if (result == 0.0) { if (!(this instanceof SubtractEvalClass)) {return NumberEval.ZERO;}}if (Double.isNaN(result) || Double.isInfinite(result)) {return ErrorEval.NUM_ERROR;}} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public PutMetricFilterRequest(String logGroupName, String filterName, String filterPattern, java.util.List<MetricTransformation> metricTransformations) {setLogGroupName(logGroupName);setFilterName(filterName);setFilterPattern(filterPattern);setMetricTransformations(metricTransformations);}
@Override public E get(int location) {synchronized (mutex) {return list.get(location);}}
public IntPtg(int value) {if (!isInRange(value)) {throw new IllegalArgumentException("value is out of range: " + value);}field_1_value = value;}
public Builder() {this(16, 16);}
public long getItemId(int position) {return position;}
public ByteBuffer putDouble(int index, double value) {return putLong(index, Double.doubleToRawLongBits(value));}
public void clear() {value = false;}
public CharVector(char[] a) {blockSize = DEFAULT_BLOCK_SIZE;array = a;n = a.length;}
public UAX29URLEmailTokenizerFactory(Map<String,String> args) {super(args);maxTokenLength = getInt(args, "maxTokenLength", StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public long ramBytesUsed() {long sizeInBytes = 0;for(FieldIndexData entry : fields.values()) {sizeInBytes += entry.ramBytesUsed();}return sizeInBytes;}
public boolean equals(Object other) {if (!(other instanceof CharBuffer)) {return false;}CharBuffer otherBuffer = (CharBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}
public StartDeploymentResult startDeployment(StartDeploymentRequest request) {request = beforeClientExecution(request);return executeStartDeployment(request);}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[1904]\n");buffer.append("    .is1904          = ").append(Integer.toHexString(getWindowing())).append("\n");buffer.append("[/1904]\n");return buffer.toString();}
public CreateModelResult createModel(CreateModelRequest request) {request = beforeClientExecution(request);return executeCreateModel(request);}
public DoubleBuffer put(double c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}
public SimpleFacetsExample() {config.setHierarchical("Publish Date", true);}
public DeleteConnectionResult deleteConnection(DeleteConnectionRequest request) {request = beforeClientExecution(request);return executeDeleteConnection(request);}
public String getSheetFirstNameByExternSheet(int externSheetIndex) {return _iBook.findSheetFirstNameFromExternSheet(externSheetIndex);}
public void begin(int timeout) {if (timeout <= 0)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTimeout, Integer.valueOf(timeout)));Thread.interrupted();state.begin(timeout);}
public final T updateTop() {downHeap(1);return heap[1];}
public QueryNodeException(Message message) {super(message.getKey());this.message = message;}
public static double factorial(int n) {double d = 1;if (n >= 0) {if (n <= 170) {for (int i=1; i<=n; i++) {d *= i;}}else {d = Double.POSITIVE_INFINITY;}}else {d = Double.NaN;}return d;}
public void sort(RevSort s) {assertNotStarted();sorting.clear();sorting.add(s);}
public CreateAuthorizerResult createAuthorizer(CreateAuthorizerRequest request) {request = beforeClientExecution(request);return executeCreateAuthorizer(request);}
public boolean isDeltaCompress() {return deltaCompress;}
public CreateWorkGroupResult createWorkGroup(CreateWorkGroupRequest request) {request = beforeClientExecution(request);return executeCreateWorkGroup(request);}
public BatchDetectSyntaxResult batchDetectSyntax(BatchDetectSyntaxRequest request) {request = beforeClientExecution(request);return executeBatchDetectSyntax(request);}
public void removeManager() {remove1stProperty(PropertyIDMap.PID_MANAGER);}
public Set keySet() {return Collections.unmodifiableSet(dictionary.values());}
public long hash1(char carray[]) {final long p = 1099511628211L;long hash = 0xcbf29ce484222325L;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = (hash ^ (d & 0x00FF)) * p;hash = (hash ^ (d >> 8)) * p;}return hash;}
public PutScalingPolicyResult putScalingPolicy(PutScalingPolicyRequest request) {request = beforeClientExecution(request);return executePutScalingPolicy(request);}
public KeywordRepeatFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void recycleByteBlocks(List<byte[]> blocks) {final byte[][] b = blocks.toArray(new byte[blocks.size()][]);recycleByteBlocks(b, 0, b.length);}
public List<Token> get(int start, int stop) {if ( start<0 || stop<0 ) return null;lazyInit();List<Token> subset = new ArrayList<Token>();if ( stop>=tokens.size() ) stop = tokens.size()-1;for (int i = start; i <= stop; i++) {Token t = tokens.get(i);if ( t.getType()==Token.EOF ) break;subset.add(t);}return subset;}
public String toString() {return tokenName + ":" + type;}
public static Automaton build(Collection<BytesRef> input) {final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();char[] chars = new char[0];CharsRef ref = new CharsRef();for (BytesRef b : input) {chars = ArrayUtil.grow(chars, b.length);final int len = UnicodeUtil.UTF8toUTF16(b, chars);ref.chars = chars;ref.length = len;builder.add(ref);}Automaton.Builder a = new Automaton.Builder();convert(a,builder.complete(),new IdentityHashMap<State,Integer>());return a.finish();}
public Row merge(Row master, Row existing) {Iterator<Character> i = master.cells.keySet().iterator();Row n = new Row();for (; i.hasNext();) {Character ch = i.next();Cell a = master.cells.get(ch);Cell b = existing.cells.get(ch);Cell s = (b == null) ? new Cell(a) : merge(a, b);if (s == null) {return null;}n.cells.put(ch, s);}i = existing.cells.keySet().iterator();for (; i.hasNext();) {Character ch = i.next();if (master.at(ch) != null) {continue;}n.cells.put(ch, existing.at(ch));}return n;}
public E peekFirst() {return peekFirstImpl();}
public static int response(HttpConnection c) throws IOException {try {return c.getResponseCode();} catch (ConnectException ce) {final URL url = c.getURL();final String host = (url == null) ? "<null>" : url.getHost(); if ("Connection timed out: connect".equals(ce.getMessage())) throw new ConnectException(MessageFormat.format(JGitText.get().connectionTimeOut, host));throw new ConnectException(ce.getMessage() + " " + host); }}
public GetConfigurationResult getConfiguration(GetConfigurationRequest request) {request = beforeClientExecution(request);return executeGetConfiguration(request);}
public static Collection<String> getSupportedFunctionNames(){Collection<String> lst = new TreeSet<>();lst.addAll(FunctionEval.getSupportedFunctionNames());lst.addAll(AnalysisToolPak.getSupportedFunctionNames());return Collections.unmodifiableCollection(lst);}
public PerFieldAnalyzerWrapper(Analyzer defaultAnalyzer,Map<String, Analyzer> fieldAnalyzers) {super(PER_FIELD_REUSE_STRATEGY);this.defaultAnalyzer = defaultAnalyzer;this.fieldAnalyzers = (fieldAnalyzers != null) ? fieldAnalyzers : Collections.<String, Analyzer>emptyMap();}
public DeletePublishingDestinationResult deletePublishingDestination(DeletePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeDeletePublishingDestination(request);}
public GetSendStatisticsResult getSendStatistics(GetSendStatisticsRequest request) {request = beforeClientExecution(request);return executeGetSendStatistics(request);}
public void copyArea(int x, int y, int width, int height, int dx, int dy){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,"copyArea not supported");}
public AreaErrPtg() {unused1 = 0;unused2 = 0;}
public GetUserSettingsResult getUserSettings(GetUserSettingsRequest request) {request = beforeClientExecution(request);return executeGetUserSettings(request);}
public static String toString(Object obj) {if (obj != null) {return obj.toString();} else {return null;}}
public String getAccessKeySecret() {return accessKeySecret;}
public Collection<ParseTree> evaluate(ParseTree t) {List<ParseTree> nodes = new ArrayList<ParseTree>();for (Tree c : Trees.getChildren(t)) {if ( c instanceof TerminalNode ) {TerminalNode tnode = (TerminalNode)c;if ( (tnode.getSymbol().getType() == tokenType && !invert) ||(tnode.getSymbol().getType() != tokenType && invert) ){nodes.add(tnode);}}}return nodes;}
public IsVpcPeeredResult isVpcPeered(IsVpcPeeredRequest request) {request = beforeClientExecution(request);return executeIsVpcPeered(request);}
public String toString() {return "ShardRef(shardIndex=" + shardIndex + " hitIndex=" + hitIndex + ")";}
public TerminateJobFlowsRequest(java.util.List<String> jobFlowIds) {setJobFlowIds(jobFlowIds);}
public DatRecord(RecordInputStream in) {field_1_options = in.readShort();}
public void removeExFormatRecord(int index) {int xfptr = records.getXfpos() - (numxfs - 1) + index;records.remove(xfptr); numxfs--;}
public double get(String name, double dflt) {double vals[] = (double[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Double.parseDouble(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToDoubleArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) {checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);this.packedIntsVersion = packedIntsVersion;this.blockSize = blockSize;this.values = new long[blockSize];this.valuesRef = new LongsRef(this.values, 0, 0);reset(in, valueCount);}
public void reset() {if (!first()) {ptr = treeStart;nextSubtreePos = 0;currentEntry = null;currentSubtree = null;if (!eof())parseEntry();}}
public BytesRef getPayload() {if (payloadLength == 0) {return null;} else {return payload;}}
public synchronized void setIndeterminate(boolean indeterminate) {if ((!mOnlyIndeterminate || !mIndeterminate) && indeterminate != mIndeterminate) {mIndeterminate = indeterminate;if (indeterminate) {mCurrentDrawable = mIndeterminateDrawable;startAnimation();} else {mCurrentDrawable = mProgressDrawable;stopAnimation();}}}
public void notifyDeleteCell(HSSFCell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell(cell));}
public boolean equals(Object o) {if (!(o instanceof FieldCacheSource)) return false;FieldCacheSource other = (FieldCacheSource)o;return this.field.equals(other.field);}
public DescribeLoaResult describeLoa(DescribeLoaRequest request) {request = beforeClientExecution(request);return executeDescribeLoa(request);}
public final K next() { return nextEntry().key; }
public ListFleetsResult listFleets(ListFleetsRequest request) {request = beforeClientExecution(request);return executeListFleets(request);}
public DelegationSet(java.util.List<String> nameServers) {setNameServers(nameServers);}
public GetKeyPairsResult getKeyPairs(GetKeyPairsRequest request) {request = beforeClientExecution(request);return executeGetKeyPairs(request);}
public ReservedNode purchaseReservedNodeOffering(PurchaseReservedNodeOfferingRequest request) {request = beforeClientExecution(request);return executePurchaseReservedNodeOffering(request);}
public String getPassword() {return password;}
public String getValue(String name) {return nameValPairs.get(name);}
public static String format(byte[] delta) {return format(delta, true);}
public Token(int kind, String image){this.kind = kind;this.image = image;}
public ArrayRecord(RecordInputStream in) {super(in);_options = in.readUShort();_field3notUsed = in.readInt();int formulaTokenLen = in.readUShort();int totalFormulaLen = in.available();_formula = Formula.read(formulaTokenLen, in, totalFormulaLen);}
public BootstrapActionConfig(String name, ScriptBootstrapActionConfig scriptBootstrapAction) {setName(name);setScriptBootstrapAction(scriptBootstrapAction);}
public CreateLoadBalancerPolicyResult createLoadBalancerPolicy(CreateLoadBalancerPolicyRequest request) {request = beforeClientExecution(request);return executeCreateLoadBalancerPolicy(request);}
public static String toHex(short value) {StringBuilder sb = new StringBuilder(4);writeHex(sb, value & 0xFFFF, 4, "");return sb.toString();}
public String toString() {return "MultiTermsEnum(" + Arrays.toString(subs) + ")";}
public PayloadSpanUtil(IndexReaderContext context) {this.context = context;}
public List<FormatError> getErrors() {return errors;}
public NormalisedDecimal createNormalisedDecimal(int pow10) {int missingUnderBits = _binaryExponent-39;int fracPart = (_significand.intValue() << missingUnderBits) & 0xFFFF80;long wholePart = _significand.shiftRight(C_64-_binaryExponent-1).longValue();return new NormalisedDecimal(wholePart, fracPart, pow10);}
public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(MINUS);buffer.append(operands[ 0]);return buffer.toString();}
public ListStackSetOperationResultsResult listStackSetOperationResults(ListStackSetOperationResultsRequest request) {request = beforeClientExecution(request);return executeListStackSetOperationResults(request);}
public static String getLocalizedMessage(String key, Object... args) {return getLocalizedMessage(key, Locale.getDefault(), args);}
public final String reflectAsString(final boolean prependAttClass) {final StringBuilder buffer = new StringBuilder();reflectWith(new AttributeReflector() {@Override
public CellRangeAddressBase getValuesCellRange() {return getCellRange(dataValues);}
public DescribeMatchmakingConfigurationsResult describeMatchmakingConfigurations(DescribeMatchmakingConfigurationsRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmakingConfigurations(request);}
public char get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getChar(position++ * SizeOf.CHAR);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FtCf ]\n");buffer.append("  size     = ").append(length).append("\n");buffer.append("  flags    = ").append(HexDump.toHex(flags)).append("\n");buffer.append("[/FtCf ]\n");return buffer.toString();}
public PutConfigurationSetSuppressionOptionsResult putConfigurationSetSuppressionOptions(PutConfigurationSetSuppressionOptionsRequest request) {request = beforeClientExecution(request);return executePutConfigurationSetSuppressionOptions(request);}
public ListProposalVotesResult listProposalVotes(ListProposalVotesRequest request) {request = beforeClientExecution(request);return executeListProposalVotes(request);}
public SheetRangeEvaluator getRefEvaluatorForCurrentSheet() {SheetRefEvaluator sre = new SheetRefEvaluator(_bookEvaluator, _tracker, _sheetIndex);return new SheetRangeEvaluator(_sheetIndex, sre);}
public long ramBytesUsed() {return fst == null ? 0 : fst.ramBytesUsed();}
public DataLabelExtensionRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();in.readFully(unused);}
public ArchiveFindingsResult archiveFindings(ArchiveFindingsRequest request) {request = beforeClientExecution(request);return executeArchiveFindings(request);}
public ChartSubstreamRecordAggregate(RecordStream rs) {_bofRec = (BOFRecord) rs.getNext();List<RecordBase> temp = new ArrayList<>();while (rs.peekNextClass() != EOFRecord.class) {if (PageSettingsBlock.isComponentRecord(rs.peekNextSid())) {if (_psBlock != null) {if (rs.peekNextSid() == HeaderFooterRecord.sid) {_psBlock.addLateHeaderFooter((HeaderFooterRecord)rs.getNext());continue;}throw new IllegalStateException("Found more than one PageSettingsBlock in chart sub-stream, had sid: " + rs.peekNextSid());}_psBlock = new PageSettingsBlock(rs);temp.add(_psBlock);continue;}temp.add(rs.getNext());}_recs = temp;org.apache.poi.hssf.record.Record eof = rs.getNext(); if (!(eof instanceof EOFRecord)) {throw new IllegalStateException("Bad chart EOF");}}
public CreateSnapshotsResult createSnapshots(CreateSnapshotsRequest request) {request = beforeClientExecution(request);return executeCreateSnapshots(request);}
public String toFormulaString() {return "()";}
@Override public Iterator<Entry<K, V>> iterator() {final Iterator<Entry<K, V>> iterator = filteredEntrySet.iterator();return new UnmodifiableIterator<Entry<K, V>>() {
public UnmonitorInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public static Inflater get() {final Inflater r = getImpl();return r != null ? r : new Inflater(false);}
public long get(int index) {checkIndex(index);return byteBuffer.getLong(index * SizeOf.LONG);}
public IntervalSet complement(int minElement, int maxElement) {return this.complement(IntervalSet.of(minElement,maxElement));}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("<sortedset" + ": \"").append(getField()).append("\">");if (getReverse()) buffer.append('!');if (missingValue != null) {buffer.append(" missingValue=");buffer.append(missingValue);}buffer.append(" selector=");buffer.append(selector);return buffer.toString();}
public DescribeTrafficMirrorSessionsResult describeTrafficMirrorSessions(DescribeTrafficMirrorSessionsRequest request) {request = beforeClientExecution(request);return executeDescribeTrafficMirrorSessions(request);}
public boolean isDirect() {return byteBuffer.isDirect();}
public Set<String> getConflicting() {return Collections.unmodifiableSet(diff.getConflicting());}
public ListDeviceEventsResult listDeviceEvents(ListDeviceEventsRequest request) {request = beforeClientExecution(request);return executeListDeviceEvents(request);}
@Override public boolean isEmpty() {return BoundedMap.this.isEmpty();}
public EscherSimpleProperty( short id, int propertyValue ) {super( id );this.propertyValue = propertyValue;}
public PointPrefixTreeFieldCacheProvider(SpatialPrefixTree grid, String shapeField, int defaultSize) {super( shapeField, defaultSize );this.grid = grid;}
public void writeByte(byte b) {assert pos < limit;bytes[pos++] = b;}
public DescribeTransitGatewayPeeringAttachmentsResult describeTransitGatewayPeeringAttachments(DescribeTransitGatewayPeeringAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayPeeringAttachments(request);}
public Set<Entry<String, Ref>> entrySet() {if (entrySet == null) {entrySet = new AbstractSet<Entry<String, Ref>>() {@Override
public final ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {try {return evaluateFunc(args, srcCellRow, srcCellCol);} catch (EvaluationException e) {return e.getErrorEval();}}
public CreateConfigurationTemplateRequest(String applicationName, String templateName) {setApplicationName(applicationName);setTemplateName(templateName);}
public GetUsagePlansResult getUsagePlans(GetUsagePlansRequest request) {request = beforeClientExecution(request);return executeGetUsagePlans(request);}
public static int serializePtgs(Ptg[] ptgs, byte[] array, int offset) {LittleEndianByteArrayOutputStream out = new LittleEndianByteArrayOutputStream(array, offset); List<Ptg> arrayPtgs = null;for (Ptg ptg : ptgs) {ptg.write(out);if (ptg instanceof ArrayPtg) {if (arrayPtgs == null) {arrayPtgs = new ArrayList<>(5);}arrayPtgs.add(ptg);}}if (arrayPtgs != null) {for (Ptg arrayPtg : arrayPtgs) {ArrayPtg p = (ArrayPtg) arrayPtg;p.writeTokenValueBytes(out);}}return out.getWriteIndex() - offset;}
public int size() {return lines.size() - 2;}
public NumberRecord(RecordInputStream in) {super(in);field_4_value = in.readDouble();}
public UnpeerVpcResult unpeerVpc(UnpeerVpcRequest request) {request = beforeClientExecution(request);return executeUnpeerVpc(request);}
public DescribeTransitGatewayMulticastDomainsResult describeTransitGatewayMulticastDomains(DescribeTransitGatewayMulticastDomainsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayMulticastDomains(request);}
public final Break getBreak(int main) {Integer rowKey = Integer.valueOf(main);return _breakMap.get(rowKey);}
public HSSFPatternFormatting getPatternFormatting(){return getPatternFormatting(false);}
public FileMode getMode(Side side) {return side == Side.OLD ? getOldMode() : getNewMode();}
public StringBuffer append(int i) {IntegralToString.appendInt(this, i);return this;}
public boolean requiresCommitBody() {return true;}
public boolean remove(Object object) {Iterator<?> it = iterator();if (object != null) {while (it.hasNext()) {if (object.equals(it.next())) {it.remove();return true;}}} else {while (it.hasNext()) {if (it.next() == null) {it.remove();return true;}}}return false;}
public Object get(CharSequence key) {return trie.get(key);}
public SubmoduleInitCommand submoduleInit() {return new SubmoduleInitCommand(repo);}
public GetRepositoryPolicyResult getRepositoryPolicy(GetRepositoryPolicyRequest request) {request = beforeClientExecution(request);return executeGetRepositoryPolicy(request);}
public HSSFPicture createPicture(ClientAnchor anchor, int pictureIndex) {return createPicture((HSSFClientAnchor) anchor, pictureIndex);}
public int fillFields(byte[] data, int pOffset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader(data, pOffset);int bytesWritten = 8;int offset = pOffset + 8;while (bytesRemaining > 0 && offset < data.length) {EscherRecord child = recordFactory.createRecord(data, offset);int childBytesWritten = child.fillFields(data, offset, recordFactory);bytesWritten += childBytesWritten;offset += childBytesWritten;bytesRemaining -= childBytesWritten;addChildRecord(child);if (offset >= data.length && bytesRemaining > 0) {_remainingLength = bytesRemaining;if (log.check(POILogger.WARN)) {log.log(POILogger.WARN, "Not enough Escher data: " + bytesRemaining + " bytes remaining but no space left");}}}return bytesWritten;}
public void startElement(String namespace, String simple, String qualified,Attributes attributes) {int elemType = getElementType(qualified);switch (elemType) {case PAGE:title = null;body = null;time = null;id = null;break;case BODY:case DATE:case TITLE:case ID:contents.setLength(0);break;default:}}
public AbbreviatedObjectId abbreviate(int len) {final int a = AbbreviatedObjectId.mask(len, 1, w1);final int b = AbbreviatedObjectId.mask(len, 2, w2);final int c = AbbreviatedObjectId.mask(len, 3, w3);final int d = AbbreviatedObjectId.mask(len, 4, w4);final int e = AbbreviatedObjectId.mask(len, 5, w5);return new AbbreviatedObjectId(len, a, b, c, d, e);}
public String toString() {return "{"+precedence+">=prec}?";}
public IntBuffer put(IntBuffer buf) {throw new ReadOnlyBufferException();}
public static PathSuffixFilter create(String path) {if (path.length() == 0)throw new IllegalArgumentException(JGitText.get().emptyPathNotPermitted);return new PathSuffixFilter(path);}
public static Cell getCell(Row row, int columnIndex) {Cell cell = row.getCell(columnIndex);if (cell == null) {cell = row.createCell(columnIndex);}return cell;}
public void write(ByteBuffer src, long position) {long endPosition = position + src.capacity();if(endPosition > buffer.length) {extend(endPosition);}src.get(buffer, (int)position, src.capacity());if(endPosition > size) {size = endPosition;}}
public void print(int i) {print(String.valueOf(i));}
public ICUNormalizer2CharFilterFactory(Map<String,String> args) {super(args);String form = get(args, "form", "nfkc_cf");String mode = get(args, "mode", Arrays.asList("compose", "decompose"), "compose");Normalizer2 normalizer = Normalizer2.getInstance(null, form, "compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);String filter = get(args, "filter");if (filter != null) {UnicodeSet set = new UnicodeSet(filter);if (!set.isEmpty()) {set.freeze();normalizer = new FilteredNormalizer2(normalizer, set);}}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}this.normalizer = normalizer;}
public CreateAdditionalAssignmentsForHITResult createAdditionalAssignmentsForHIT(CreateAdditionalAssignmentsForHITRequest request) {request = beforeClientExecution(request);return executeCreateAdditionalAssignmentsForHIT(request);}
public DeleteEventRequest() {super("CloudPhoto", "2017-07-11", "DeleteEvent", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public long getSize() {return size;}
public void undeprecateWorkflowType(UndeprecateWorkflowTypeRequest request) {request = beforeClientExecution(request);executeUndeprecateWorkflowType(request);}
public boolean removeValue(final int o){boolean rval = false;for (int j = 0; !rval && (j < _limit); j++){if (o == _array[ j ]){if (j+1 < _limit) {System.arraycopy(_array, j + 1, _array, j, _limit - j);}_limit--;rval = true;}}return rval;}
public String toString() {return new String(buf, 0, size());}
public void setDirCacheIterator(TreeWalk walk, int treeId) {state.walk = walk;state.dirCacheTree = treeId;}
public DescribeOrganizationResult describeOrganization(DescribeOrganizationRequest request) {request = beforeClientExecution(request);return executeDescribeOrganization(request);}
public CharsRef(int capacity) {chars = new char[capacity];}
public RebootInstanceResult rebootInstance(RebootInstanceRequest request) {request = beforeClientExecution(request);return executeRebootInstance(request);}
public static TreeFilter create(Collection<TreeFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final TreeFilter[] subfilters = new TreeFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}
public long ramBytesUsed() {long ramBytesUsed = BASE_RAM_BYTES_USED;ramBytesUsed += fields.size() * 2L * RamUsageEstimator.NUM_BYTES_OBJECT_REF;ramBytesUsed += formats.size() * 2L * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for(Map.Entry<String,FieldsProducer> entry: formats.entrySet()) {ramBytesUsed += entry.getValue().ramBytesUsed();}return ramBytesUsed;}
public ExportApiResult exportApi(ExportApiRequest request) {request = beforeClientExecution(request);return executeExportApi(request);}
public void setExpectedOldObjectId(AnyObjectId id) {expValue = id != null ? id.toObjectId() : null;}
public void skipBytes(long count) {pos += count;}
public String toString(){return String.valueOf(_value);}
public boolean isPopupShowing() {return mPopup.isShowing();}
public DBClusterSnapshot deleteDBClusterSnapshot(DeleteDBClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteDBClusterSnapshot(request);}
public Filter(String name, java.util.List<String> values) {setName(name);setValues(values);}
public SearchRoomsResult searchRooms(SearchRoomsRequest request) {request = beforeClientExecution(request);return executeSearchRooms(request);}
public int read(byte[] buf, int off, int cnt) throws IOException {try {beginRead();return super.read(buf, off, cnt);} catch (InterruptedIOException e) {throw readTimedOut(e);} finally {endRead();}}
public DeleteLoadBalancerTlsCertificateResult deleteLoadBalancerTlsCertificate(DeleteLoadBalancerTlsCertificateRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancerTlsCertificate(request);}
public static MessageDigest newMessageDigest() {try {return MessageDigest.getInstance(HASH_FUNCTION);} catch (NoSuchAlgorithmException nsae) {throw new RuntimeException(MessageFormat.format(JGitText.get().requiredHashFunctionNotAvailable, HASH_FUNCTION), nsae);}}
public IfFunction(ValueSource ifSource, ValueSource trueSource, ValueSource falseSource) {this.ifSource = ifSource;this.trueSource = trueSource;this.falseSource = falseSource;}
public static double npv(double r, double[] cfs) {double npv = 0;double r1 = r + 1;double trate = r1;for (int i=0, iSize=cfs.length; i<iSize; i++) {npv += cfs[i] / trate;trate *= r1;}return npv;}
public StandardQueryTreeBuilder() {setBuilder(GroupQueryNode.class, new GroupQueryNodeBuilder());setBuilder(FieldQueryNode.class, new FieldQueryNodeBuilder());setBuilder(BooleanQueryNode.class, new BooleanQueryNodeBuilder());setBuilder(FuzzyQueryNode.class, new FuzzyQueryNodeBuilder());setBuilder(PointQueryNode.class, new DummyQueryNodeBuilder());setBuilder(PointRangeQueryNode.class, new PointRangeQueryNodeBuilder());setBuilder(BoostQueryNode.class, new BoostQueryNodeBuilder());setBuilder(ModifierQueryNode.class, new ModifierQueryNodeBuilder());setBuilder(WildcardQueryNode.class, new WildcardQueryNodeBuilder());setBuilder(TokenizedPhraseQueryNode.class, new PhraseQueryNodeBuilder());setBuilder(MatchNoDocsQueryNode.class, new MatchNoDocsQueryNodeBuilder());setBuilder(PrefixWildcardQueryNode.class,new PrefixWildcardQueryNodeBuilder());setBuilder(TermRangeQueryNode.class, new TermRangeQueryNodeBuilder());setBuilder(RegexpQueryNode.class, new RegexpQueryNodeBuilder());setBuilder(SlopQueryNode.class, new SlopQueryNodeBuilder());setBuilder(SynonymQueryNode.class,new SynonymQueryNodeBuilder());setBuilder(MultiPhraseQueryNode.class, new MultiPhraseQueryNodeBuilder());setBuilder(MatchAllDocsQueryNode.class, new MatchAllDocsQueryNodeBuilder());}
public StringBuilder append(double d) {RealToString.getInstance().appendDouble(this, d);return this;}
public Tag(String key, String value) {setKey(key);setValue(value);}
public FederatedUser(String federatedUserId, String arn) {setFederatedUserId(federatedUserId);setArn(arn);}
public QueryRescorer(Query query) {this.query = query;}
public void setRule(int idx, HSSFConditionalFormattingRule cfRule) {cfAggregate.setRule(idx, cfRule.getCfRuleRecord());}
public RenameDetector getRenameDetector() {return renameDetector;}
public UpdateTemplatePermissionsResult updateTemplatePermissions(UpdateTemplatePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateTemplatePermissions(request);}
public DoubleBuffer put(int index, double c) {checkIndex(index);byteBuffer.putDouble(index * SizeOf.DOUBLE, c);return this;}
public ResetInstanceAttributeResult resetInstanceAttribute(ResetInstanceAttributeRequest request) {request = beforeClientExecution(request);return executeResetInstanceAttribute(request);}
public DirectoryEntry getDirectory() throws IOException {EmbeddedObjectRefSubRecord subRecord = findObjectRecord();int streamId = subRecord.getStreamId().intValue();String streamName = "MBD" + HexDump.toHex(streamId);Entry entry = _root.getEntry(streamName);if (entry instanceof DirectoryEntry) {return (DirectoryEntry) entry;}throw new IOException("Stream " + streamName + " was not an OLE2 directory");}
public HashMap(int capacity) {if (capacity < 0) {throw new IllegalArgumentException("Capacity: " + capacity);}if (capacity == 0) {@SuppressWarnings("unchecked")HashMapEntry<K, V>[] tab = (HashMapEntry<K, V>[]) EMPTY_TABLE;table = tab;threshold = -1; return;}if (capacity < MINIMUM_CAPACITY) {capacity = MINIMUM_CAPACITY;} else if (capacity > MAXIMUM_CAPACITY) {capacity = MAXIMUM_CAPACITY;} else {capacity = roundUpToPowerOfTwo(capacity);}makeTable(capacity);}
public int getCachedErrorValue() {return specialCachedValue.getErrorValue();}
public void add(BytesRef utf8) throws IOException {if (writer == null) {throw new IllegalStateException();}writer.write(utf8);}
public UpdateHITReviewStatusResult updateHITReviewStatus(UpdateHITReviewStatusRequest request) {request = beforeClientExecution(request);return executeUpdateHITReviewStatus(request);}
public ScandinavianNormalizationFilterFactory(Map<String, String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public DBSnapshotAttributesResult describeDBSnapshotAttributes(DescribeDBSnapshotAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeDBSnapshotAttributes(request);}
public GetNamespaceAuthorizationListRequest() {super("cr", "2016-06-07", "GetNamespaceAuthorizationList", "cr");setUriPattern("/namespace/[Namespace]/authorizations");setMethod(MethodType.GET);}
public LowFreqTerm(int[] postings, byte[] payloads, int docFreq, int totalTermFreq) {this.postings = postings;this.payloads = payloads;this.docFreq = docFreq;this.totalTermFreq = totalTermFreq;}
public void reset() {state = null;consumed = true;keepOrig = false;matched = false;}
public static final boolean isId(String id) {if (id.length() < 2 || Constants.OBJECT_ID_STRING_LENGTH < id.length())return false;try {for (int i = 0; i < id.length(); i++)RawParseUtils.parseHexInt4((byte) id.charAt(i));return true;} catch (ArrayIndexOutOfBoundsException e) {return false;}}
public static int entrySize(FileMode mode, int nameLen) {return mode.copyToLength() + nameLen + OBJECT_ID_LENGTH + 2;}
public void exitEveryRule(ParserRuleContext ctx) {System.out.println("exit    "+getRuleNames()[ctx.getRuleIndex()]+", LT(1)="+_input.LT(1).getText());}
public EventSubscription modifyEventSubscription(ModifyEventSubscriptionRequest request) {request = beforeClientExecution(request);return executeModifyEventSubscription(request);}
public NormalizeCharMap build() {final FST<CharsRef> map;try {final Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();final FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);final IntsRefBuilder scratch = new IntsRefBuilder();for(Map.Entry<String,String> ent : pendingPairs.entrySet()) {fstCompiler.add(Util.toUTF16(ent.getKey(), scratch),new CharsRef(ent.getValue()));}map = fstCompiler.compile();pendingPairs.clear();} catch (IOException ioe) {throw new RuntimeException(ioe);}return new NormalizeCharMap(map);}
public BootstrapActions(String bucket) {this.bucket = bucket;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {ValueEval ve;try {ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {ve = e.getErrorEval();}return BoolEval.valueOf(evaluate(ve));}
public static IndexDeletionPolicy getIndexDeletionPolicy(Config config) {String deletionPolicyName = config.get("deletion.policy", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy");if (deletionPolicyName.equals(NoDeletionPolicy.class.getName())) {return NoDeletionPolicy.INSTANCE;} else {try {return Class.forName(deletionPolicyName).asSubclass(IndexDeletionPolicy.class).getConstructor().newInstance();} catch (Exception e) {
public FontRecord(RecordInputStream in) {field_1_font_height         = in.readShort();field_2_attributes          = in.readShort();field_3_color_palette_index = in.readShort();field_4_bold_weight         = in.readShort();field_5_super_sub_script    = in.readShort();field_6_underline           = in.readByte();field_7_family              = in.readByte();field_8_charset             = in.readByte();field_9_zero                = in.readByte();int field_10_font_name_len  = in.readUByte();int unicodeFlags            = in.readUByte(); if (field_10_font_name_len > 0) {if (unicodeFlags == 0) {   field_11_font_name = in.readCompressedUnicode(field_10_font_name_len);} else {   field_11_font_name = in.readUnicodeLEString(field_10_font_name_len);}} else {field_11_font_name = "";}}
public String getRefLogMessage() {return destination.getRefLogMessage();}
public String toString() {return subSlice.toString()+":"+terms;}
public IntBuffer asReadOnlyBuffer() {return ReadOnlyIntArrayBuffer.copy(this, mark);}
public void clear() {super.clear();}
public static void fill(double[] array, int start, int end, double value) {Arrays.checkStartAndEnd(array.length, start, end);for (int i = start; i < end; i++) {array[i] = value;}}
public ByteBuffer next() {if(nextBlock == POIFSConstants.END_OF_CHAIN) {throw new IndexOutOfBoundsException("Can't read past the end of the stream");}try {loopDetector.claim(nextBlock);ByteBuffer data = blockStore.getBlockAt(nextBlock);nextBlock = blockStore.getNextBlock(nextBlock);return data;} catch(IOException e) {throw new RuntimeException(e);}}
public DFAState getCurrentState() {return currentState;}
public E lower(E e) {return backingMap.lowerKey(e);}
public FinnishLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("    [Font Formatting]\n");buffer.append("
public String toString() {StringBuilder retval = new StringBuilder();retval.append("[MERGEDCELLS]").append("\n");retval.append("     .numregions =").append(getNumAreas()).append("\n");for (int k = 0; k < _numberOfRegions; k++) {CellRangeAddress r = _regions[_startIndex + k];retval.append("     .rowfrom =").append(r.getFirstRow()).append("\n");retval.append("     .rowto   =").append(r.getLastRow()).append("\n");retval.append("     .colfrom =").append(r.getFirstColumn()).append("\n");retval.append("     .colto   =").append(r.getLastColumn()).append("\n");}retval.append("[MERGEDCELLS]").append("\n");return retval.toString();}
public String getString(int begin, int end, boolean dropLF) {if (begin == end)return ""; int s = getStart(begin);int e = getEnd(end - 1);if (dropLF && content[e - 1] == '\n')e--;return decode(s, e);}
public RevokeDomainAccessResult revokeDomainAccess(RevokeDomainAccessRequest request) {request = beforeClientExecution(request);return executeRevokeDomainAccess(request);}
public GetPhotoStoreRequest() {super("CloudPhoto", "2017-07-11", "GetPhotoStore", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DescribeVirtualInterfacesResult describeVirtualInterfaces(DescribeVirtualInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeVirtualInterfaces(request);}
public EmptyTreeIterator createEmptyTreeIterator() {return new EmptyTreeIterator(this);}
public File[] listFiles(FileFilter filter) {File[] files = listFiles();if (filter == null || files == null) {return files;}List<File> result = new ArrayList<File>(files.length);for (File file : files) {if (filter.accept(file)) {result.add(file);}}return result.toArray(new File[result.size()]);}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return this.text;} else {return this.field + ":" + this.text;}}
public WithdrawByoipCidrResult withdrawByoipCidr(WithdrawByoipCidrRequest request) {request = beforeClientExecution(request);return executeWithdrawByoipCidr(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_formatFlags);}
public CharBuffer put(int index, char c) {checkIndex(index);byteBuffer.putChar(index * SizeOf.CHAR, c);return this;}
public ICUTransformFilterFactory(Map<String,String> args) {super(args);String id = require(args, "id");String direction = get(args, "direction", Arrays.asList("forward", "reverse"), "forward", false);int dir = "forward".equals(direction) ? Transliterator.FORWARD : Transliterator.REVERSE;transliterator = Transliterator.getInstance(id, dir);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public UpdateFilterResult updateFilter(UpdateFilterRequest request) {request = beforeClientExecution(request);return executeUpdateFilter(request);}
public StoredField(String name, float value) {super(name, TYPE);fieldsData = value;}
public final int compareTo(Term other) {if (field.equals(other.field)) {return bytes.compareTo(other.bytes);} else {return field.compareTo(other.field);}}
public ErrorHandler getErrorHandler () {return (theErrorHandler == this) ? null : theErrorHandler;}
public float getSaturation() {int numBitsSet = filter.cardinality();return (float) numBitsSet / (float) bloomSize;}
public DeleteResolverEndpointResult deleteResolverEndpoint(DeleteResolverEndpointRequest request) {request = beforeClientExecution(request);return executeDeleteResolverEndpoint(request);}
public AssociateHostedConnectionResult associateHostedConnection(AssociateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAssociateHostedConnection(request);}
public final String name() {return this.canonicalName;}
public static void registerFunction(String name, Function func){FunctionEval.registerFunction(name, func);}
public GetRepoBuildStatusRequest() {super("cr", "2016-06-07", "GetRepoBuildStatus", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/build/[BuildId]/status");setMethod(MethodType.GET);}
public GetFramedPhotoUrlsRequest() {super("CloudPhoto", "2017-07-11", "GetFramedPhotoUrls", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public SimpleHTMLFormatter(String preTag, String postTag) {this.preTag = preTag;this.postTag = postTag;}
public void setData(byte[] b, int start, int length){thedata = IOUtils.safelyAllocate(length, MAX_RECORD_LENGTH);System.arraycopy(b,start,thedata,0,length);}
public String getKey() {return key;}
public AttachVolumeRequest(String volumeId, String instanceId, String device) {setVolumeId(volumeId);setInstanceId(instanceId);setDevice(device);}
public long ramBytesUsed() {long size = BASE_RAM_BYTES_USED + RamUsageEstimator.shallowSizeOf(blocks);if (blocks.length > 0) {size += (blocks.length - 1) * bytesUsedPerBlock;size += RamUsageEstimator.sizeOf(blocks[blocks.length - 1]);}return size;}
@Override public Object[] toArray() {return Lists.newArrayList(iterator()).toArray();}
public RevWalk(Repository repo, int depth) {super(repo);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag("UNSHALLOW"); this.REINTERESTING = newFlag("REINTERESTING"); this.DEEPEN_NOT = newFlag("DEEPEN_NOT"); }
public boolean equals(Object o) {return this == o;}
public ChangeResourceRecordSetsResult changeResourceRecordSets(ChangeResourceRecordSetsRequest request) {request = beforeClientExecution(request);return executeChangeResourceRecordSets(request);}
public Iterator<K> iterator() {return newKeyIterator();}
@Override public boolean equals(Object o) {return o instanceof ReverseComparator2&& ((ReverseComparator2) o).cmp.equals(cmp);}
public boolean isCheckEofAfterPackFooter() {return checkEofAfterPackFooter;}
public DescribeDirectConnectGatewayAssociationProposalsResult describeDirectConnectGatewayAssociationProposals(DescribeDirectConnectGatewayAssociationProposalsRequest request) {request = beforeClientExecution(request);return executeDescribeDirectConnectGatewayAssociationProposals(request);}
public void reset(byte[] bytes, int offset, int len) {this.bytes = bytes;pos = offset;limit = offset + len;}
public ByteBuffer putFloat(int index, float value) {throw new ReadOnlyBufferException();}
public boolean equals(Object obj) {if (obj == null)return false;if (! getClass().equals(obj.getClass()))return false;return toString().equals(obj.toString());}
public PutSchemaFromJsonResult putSchemaFromJson(PutSchemaFromJsonRequest request) {request = beforeClientExecution(request);return executePutSchemaFromJson(request);}
public UnassignPrivateIpAddressesResult unassignPrivateIpAddresses(UnassignPrivateIpAddressesRequest request) {request = beforeClientExecution(request);return executeUnassignPrivateIpAddresses(request);}
public ArrayPtg finishReading(LittleEndianInput in) {int nColumns = in.readUByte();short nRows = in.readShort();nColumns++;nRows++;int totalCount = nRows * nColumns;Object[] arrayValues = ConstantValueParser.parse(in, totalCount);ArrayPtg result = new ArrayPtg(_reserved0, _reserved1, _reserved2, nColumns, nRows, arrayValues);result.setClass(getPtgClass());return result;}
public NativeUnixDirectory(Path path, Directory delegate) throws IOException {this(path, DEFAULT_MERGE_BUFFER_SIZE, DEFAULT_MIN_BYTES_DIRECT, FSLockFactory.getDefault(), delegate);}
public CreateRestApiResult createRestApi(CreateRestApiRequest request) {request = beforeClientExecution(request);return executeCreateRestApi(request);}
public ValueEval getRef3DEval(Ref3DPtg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getExternSheetIndex());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}
public void add(FieldInfos other) {assert assertNotFinished();for(FieldInfo fieldInfo : other){add(fieldInfo);}}
public static CloseGuard get() {if (!ENABLED) {return NOOP;}return new CloseGuard();}
public void print(long lnum) {print(String.valueOf(lnum));}
public static String fileNameFromGeneration(String base, String ext, long gen) {if (gen == -1) {return null;} else if (gen == 0) {return segmentFileName(base, "", ext);} else {assert gen > 0;StringBuilder res = new StringBuilder(base.length() + 6 + ext.length()).append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));if (ext.length() > 0) {res.append('.').append(ext);}return res.toString();}}
public String getText() { return symbol.getText(); }
public long getSize() {return delegate().getSize();}
public FileMode getNewMode() {return newMode;}
public boolean isOpaque() {return opaque;}
public boolean requireEnd() {return requireEndImpl(address);}
public static InternalWorkbook createStubWorkbook(ExternSheetRecord[] externs,BoundSheetRecord[] bounds, SSTRecord sst) {List<org.apache.poi.hssf.record.Record> wbRecords = new ArrayList<>();if(bounds != null) {Collections.addAll(wbRecords, bounds);}if(sst != null) {wbRecords.add(sst);}if(externs != null) {wbRecords.add(SupBookRecord.createInternalReferences((short)externs.length));Collections.addAll(wbRecords, externs);}wbRecords.add(EOFRecord.instance);return InternalWorkbook.createWorkbook(wbRecords);}
public String getName() {return null;}
public UpdateNotebookInstanceLifecycleConfigResult updateNotebookInstanceLifecycleConfig(UpdateNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeUpdateNotebookInstanceLifecycleConfig(request);}
public void visitContainedRecords(RecordVisitor rv) {rv.visitRecord(_pls);for (ContinueRecord _plsContinue : _plsContinues) {rv.visitRecord(_plsContinue);}}
public static BoolEval valueOf(boolean b) {return b ? TRUE : FALSE;}
public EvaluationName getName(String name, int sheetIndex) {for(int i=0; i < _iBook.getNumNames(); i++) {NameRecord nr = _iBook.getNameRecord(i);if (nr.getSheetNumber() == sheetIndex+1 && name.equalsIgnoreCase(nr.getNameText())) {return new Name(nr, i);}}return sheetIndex == -1 ? null : getName(name, -1);}
public String getPIDString(final long pid) {Map<Long,String> dic = getDictionary();if (dic == null || !dic.containsKey(pid)) {ClassID fmt = getFormatID();if (SummaryInformation.FORMAT_ID.equals(fmt)) {dic = PropertyIDMap.getSummaryInformationProperties();} else if (DocumentSummaryInformation.FORMAT_ID[0].equals(fmt)) {dic = PropertyIDMap.getDocumentSummaryInformationProperties();}}return (dic != null && dic.containsKey(pid)) ? dic.get(pid) : PropertyIDMap.UNDEFINED;}
public BatchCreateRoomMembershipResult batchCreateRoomMembership(BatchCreateRoomMembershipRequest request) {request = beforeClientExecution(request);return executeBatchCreateRoomMembership(request);}
public V getValue() {return value;}
public DeleteQueueResult deleteQueue(DeleteQueueRequest request) {request = beforeClientExecution(request);return executeDeleteQueue(request);}
public Builder() {this.field = null;this.termArrays = new ArrayList<>();this.positions = new ArrayList<>();this.slop = 0;}
public BatchRefUpdate addCommand(ReceiveCommand cmd) {commands.add(cmd);return this;}
public DetachLoadBalancerTargetGroupsResult detachLoadBalancerTargetGroups(DetachLoadBalancerTargetGroupsRequest request) {request = beforeClientExecution(request);return executeDetachLoadBalancerTargetGroups(request);}
public FrameRecord(RecordInputStream in) {field_1_borderType = in.readShort();field_2_options = in.readShort();}
public final Explanation explain(BasicStats stats) {return Explanation.match(lambda(stats),getClass().getSimpleName()+ ", computed as (F + 1) / (N + 1) from:",Explanation.match(stats.getTotalTermFreq(),"F, total number of occurrences of term across all documents"),Explanation.match(stats.getNumberOfDocuments(),"N, total number of documents with field"));}
public boolean matches(ValueEval x) {if(x instanceof ErrorEval) {int testValue = ((ErrorEval)x).getErrorCode();return evaluate(testValue - _value);}return false;}
public S3Signer() {this.httpVerb = null;this.resourcePath = null;this.additionalQueryParamsToSign = null;}
public RejectDomainTransferFromAnotherAwsAccountResult rejectDomainTransferFromAnotherAwsAccount(RejectDomainTransferFromAnotherAwsAccountRequest request) {request = beforeClientExecution(request);return executeRejectDomainTransferFromAnotherAwsAccount(request);}
public String toString() {return "[STRING]\n" +"    .string            = " + _text + "\n" +"[/STRING]\n";}
public GetIdentityNotificationAttributesResult getIdentityNotificationAttributes(GetIdentityNotificationAttributesRequest request) {request = beforeClientExecution(request);return executeGetIdentityNotificationAttributes(request);}
public DoubleBuffer slice() {return new ReadOnlyDoubleArrayBuffer(remaining(), backingArray, offset + position);}
public void append(int key, E value) {if (mSize != 0 && key <= mKeys[mSize - 1]) {put(key, value);return;}if (mGarbage && mSize >= mKeys.length) {gc();}int pos = mSize;if (pos >= mKeys.length) {int n = ArrayUtils.idealIntArraySize(pos + 1);int[] nkeys = new int[n];Object[] nvalues = new Object[n];System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);System.arraycopy(mValues, 0, nvalues, 0, mValues.length);mKeys = nkeys;mValues = nvalues;}mKeys[pos] = key;mValues[pos] = value;mSize = pos + 1;}
public String toString() {return "INDEX_DIFF_FILTER"; }
public long ramBytesUsed() {return docs.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 2 + Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( "[LeftMargin]\n" );buffer.append( "    .margin               = " ).append( " (" ).append( getMargin() ).append( " )\n" );buffer.append( "[/LeftMargin]\n" );return buffer.toString();}
public FreeTextSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, int grams, byte separator) {this.grams = grams;this.indexAnalyzer = addShingles(indexAnalyzer);this.queryAnalyzer = addShingles(queryAnalyzer);if (grams < 1) {throw new IllegalArgumentException("grams must be >= 1");}if ((separator & 0x80) != 0) {throw new IllegalArgumentException("separator must be simple ascii character");}this.separator = separator;}
public CJKWidthFilter(TokenStream input) {super(input);}
public ModifyVpnTunnelOptionsResult modifyVpnTunnelOptions(ModifyVpnTunnelOptionsRequest request) {request = beforeClientExecution(request);return executeModifyVpnTunnelOptions(request);}
public int nextDoc() {while (true) {if (queue.size() == 0) {doc = NO_MORE_DOCS;break;}int newDoc = queue.top().docID();if (newDoc != doc) {assert newDoc > doc: "doc=" + doc + " newDoc=" + newDoc;doc = newDoc;break;}if (queue.top().nextDoc() == NO_MORE_DOCS) {queue.pop();} else {queue.updateTop();}}return doc;}
public GetTransitGatewayRouteTableAssociationsResult getTransitGatewayRouteTableAssociations(GetTransitGatewayRouteTableAssociationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayRouteTableAssociations(request);}
public DescribeLoggingStatusResult describeLoggingStatus(DescribeLoggingStatusRequest request) {request = beforeClientExecution(request);return executeDescribeLoggingStatus(request);}
public PorterStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public Storage getStorage() {return storage;}
public static CharBuffer wrap(char[] array) {return wrap(array, 0, array.length);}
public CreateVoiceConnectorResult createVoiceConnector(CreateVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeCreateVoiceConnector(request);}
public ParseException generateParseException() {jj_expentries.clear();boolean[] la1tokens = new boolean[24];if (jj_kind >= 0) {la1tokens[jj_kind] = true;jj_kind = -1;}for (int i = 0; i < 10; i++) {if (jj_la1[i] == jj_gen) {for (int j = 0; j < 32; j++) {if ((jj_la1_0[i] & (1<<j)) != 0) {la1tokens[j] = true;}}}}for (int i = 0; i < 24; i++) {if (la1tokens[i]) {jj_expentry = new int[1];jj_expentry[0] = i;jj_expentries.add(jj_expentry);}}jj_endpos = 0;jj_rescan_token();jj_add_error_token(0, 0);int[][] exptokseq = new int[jj_expentries.size()][];for (int i = 0; i < jj_expentries.size(); i++) {exptokseq[i] = jj_expentries.get(i);}return new ParseException(token, exptokseq, tokenImage);}
public void setSheetOrder(String sheetname, int pos ) {int sheetNumber = getSheetIndex(sheetname);boundsheets.add(pos, boundsheets.remove(sheetNumber));int initialBspos = records.getBspos();int pos0 = initialBspos - (boundsheets.size() - 1);org.apache.poi.hssf.record.Record removed = records.get(pos0 + sheetNumber);records.remove(pos0 + sheetNumber);records.add(pos0 + pos, removed);records.setBspos(initialBspos);}
public UpdateRepoBuildRuleRequest() {super("cr", "2016-06-07", "UpdateRepoBuildRule", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleId]");setMethod(MethodType.POST);}
public boolean contains(Object o) {return map.containsKey(o);}
public DescribeAutoScalingInstancesResult describeAutoScalingInstances() {return describeAutoScalingInstances(new DescribeAutoScalingInstancesRequest());}
public NLPTokenizerOp() {tokenizer = null;}
public int size() {synchronized (mutex) {return delegate().size();}}
public boolean retainAll(final IntList c){boolean rval = false;for (int j = 0; j < _limit; ){if (!c.contains(_array[ j ])){remove(j);rval = true;}else{j++;}}return rval;}
public String getPath() {return path.getPath();}
public UpdateSecurityGroupRuleDescriptionsEgressResult updateSecurityGroupRuleDescriptionsEgress(UpdateSecurityGroupRuleDescriptionsEgressRequest request) {request = beforeClientExecution(request);return executeUpdateSecurityGroupRuleDescriptionsEgress(request);}
public SetVaultAccessPolicyResult setVaultAccessPolicy(SetVaultAccessPolicyRequest request) {request = beforeClientExecution(request);return executeSetVaultAccessPolicy(request);}
public PutAutoScalingPolicyResult putAutoScalingPolicy(PutAutoScalingPolicyRequest request) {request = beforeClientExecution(request);return executePutAutoScalingPolicy(request);}
public CancelReservedInstancesListingResult cancelReservedInstancesListing(CancelReservedInstancesListingRequest request) {request = beforeClientExecution(request);return executeCancelReservedInstancesListing(request);}
public String getSignerName() {return null;}
public ListTagsForDeliveryStreamResult listTagsForDeliveryStream(ListTagsForDeliveryStreamRequest request) {request = beforeClientExecution(request);return executeListTagsForDeliveryStream(request);}
public RegisterDomainResult registerDomain(RegisterDomainRequest request) {request = beforeClientExecution(request);return executeRegisterDomain(request);}
public ListEntityRecognizersResult listEntityRecognizers(ListEntityRecognizersRequest request) {request = beforeClientExecution(request);return executeListEntityRecognizers(request);}
public void setTimeout(int millis) {if (millis < 0)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTimeout, Integer.valueOf(millis)));timeout = millis;}
public GetRepoSourceRepoRequest() {super("cr", "2016-06-07", "GetRepoSourceRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/sourceRepo");setMethod(MethodType.GET);}
public DescribeBatchInferenceJobResult describeBatchInferenceJob(DescribeBatchInferenceJobRequest request) {request = beforeClientExecution(request);return executeDescribeBatchInferenceJob(request);}
public CreateSecurityGroupRequest(String groupName, String description) {setGroupName(groupName);setDescription(description);}
public final int serialize(int offset, byte[] data) {SerializingRecordVisitor srv = new SerializingRecordVisitor(data, offset);visitContainedRecords(srv);return srv.countBytesWritten();}
public BatchGetImageResult batchGetImage(BatchGetImageRequest request) {request = beforeClientExecution(request);return executeBatchGetImage(request);}
public int read() throws IOException {try {beginRead();return super.read();} catch (InterruptedIOException e) {throw readTimedOut(e);} finally {endRead();}}
public ActivityTask pollForActivityTask(PollForActivityTaskRequest request) {request = beforeClientExecution(request);return executePollForActivityTask(request);}
public int execute(StringBuilder buf) {if ( text!=null ) {buf.append(text);}return lastIndex+1;}
public float overheadPerValue(int bitsPerValue) {assert isSupported(bitsPerValue);return 0f;}
public String toString() {return buf.toString();}
public PrecedenceQueryParser(Analyzer analyer) {super(analyer);setQueryNodeProcessor(new PrecedenceQueryNodeProcessorPipeline(getQueryConfigHandler()));}
public final int position() {return position;}
public boolean equals(Object o) {return this.getClass() == o.getClass();}
public IntBuffer compact() {throw new ReadOnlyBufferException();}
public void writeByte(int v) {writeContinueIfRequired(1);_ulrOutput.writeByte(v);}
public ExpireSessionResult expireSession(ExpireSessionRequest request) {request = beforeClientExecution(request);return executeExpireSession(request);}
public GetSubscriptionAttributesRequest(String subscriptionArn) {setSubscriptionArn(subscriptionArn);}
public GetMetricDataResult getMetricData(GetMetricDataRequest request) {request = beforeClientExecution(request);return executeGetMetricData(request);}
public DescribeDhcpOptionsResult describeDhcpOptions(DescribeDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeDhcpOptions(request);}
public NavigableSet<E> subSet(E start, boolean startInclusive, E end,boolean endInclusive) {Comparator<? super E> c = backingMap.comparator();int compare = (c == null) ? ((Comparable<E>) start).compareTo(end) : c.compare(start, end);if (compare <= 0) {return new TreeSet<E>(backingMap.subMap(start, startInclusive, end,endInclusive));}throw new IllegalArgumentException();}
public SendEmailResult sendEmail(SendEmailRequest request) {request = beforeClientExecution(request);return executeSendEmail(request);}
public String toString(){return String.valueOf(_value);}
public static double getExcelDate(LocalDate date) {return getExcelDate(date, false);}
public boolean equals( Object o ) {return o instanceof ItalianStemmer;}
public ListenerHandle addIndexChangedListener(IndexChangedListener listener) {return addListener(IndexChangedListener.class, listener);}
public SynthesizeSpeechResult synthesizeSpeech(SynthesizeSpeechRequest request) {request = beforeClientExecution(request);return executeSynthesizeSpeech(request);}
public void merge(TextFragment frag2){textEndPos = frag2.textEndPos;score=Math.max(score,frag2.score);}
public CreateLedgerResult createLedger(CreateLedgerRequest request) {request = beforeClientExecution(request);return executeCreateLedger(request);}
public DescribeFleetPortSettingsResult describeFleetPortSettings(DescribeFleetPortSettingsRequest request) {request = beforeClientExecution(request);return executeDescribeFleetPortSettings(request);}
public String getHost() {return host;}
public short get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getShort(position++ * SizeOf.SHORT);}
public void ReInit(CharStream stream){jjmatchedPos = jjnewStateCnt = 0;curLexState = defaultLexState;input_stream = stream;ReInitRounds();}
public void set(int index, long value) {final int o = index / 12;final int b = index % 12;final int shift = b * 5;blocks[o] = (blocks[o] & ~(31L << shift)) | (value << shift);}
public ByteSequencesWriter(IndexOutput out) {this.out = out;}
public MultiTermsEnum(ReaderSlice[] slices) {queue = new TermMergeQueue(slices.length);top = new TermsEnumWithSlice[slices.length];subs = new TermsEnumWithSlice[slices.length];subDocs = new MultiPostingsEnum.EnumWithSlice[slices.length];for(int i=0;i<slices.length;i++) {subs[i] = new TermsEnumWithSlice(i, slices[i]);subDocs[i] = new MultiPostingsEnum.EnumWithSlice();subDocs[i].slice = slices[i];}currentSubs = new TermsEnumWithSlice[slices.length];}
public char last() {if (start == end) {return DONE;}offset = end - 1;return string.charAt(offset);}
public AttributeSource(AttributeFactory factory) {this.attributes = new LinkedHashMap<>();this.attributeImpls = new LinkedHashMap<>();this.currentState = new State[1];this.factory = Objects.requireNonNull(factory, "AttributeFactory must not be null");}
public Matcher reset(CharSequence input) {return reset(input, 0, input.length());}
public GetConfigurationProfileResult getConfigurationProfile(GetConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeGetConfigurationProfile(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex) {return new NumberEval(srcColumnIndex+1);}
public static double[] grow(double[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Double.BYTES));} elsereturn array;}
public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections(DescribeVpcPeeringConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcPeeringConnections(request);}
public FloatBuffer put(float c) {throw new ReadOnlyBufferException();}
public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i=fromIx; i<toIx; i++) {result += _ptgs[i].getSize();}return result;}
public DirectBytesStartArray(int initSize, Counter counter) {this.bytesUsed = counter;this.initSize = initSize;}
public void clear() {for (T[] block : directory) {if (block != null)Arrays.fill(block, null);}size = 0;tailDirIdx = 0;tailBlkIdx = 0;tailBlock = directory[0];}
public UploadMultipartPartResult uploadMultipartPart(UploadMultipartPartRequest request) {request = beforeClientExecution(request);return executeUploadMultipartPart(request);}
public HCenterRecord(RecordInputStream in) {field_1_hcenter = in.readShort();}
public CreateDBClusterEndpointResult createDBClusterEndpoint(CreateDBClusterEndpointRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterEndpoint(request);}
public boolean hasNext() {return iterator.nextIndex() < end;}
public CredentialItem(String promptText, boolean maskValue) {this.promptText = promptText;this.valueSecure = maskValue;}
public DescribeCustomAvailabilityZonesResult describeCustomAvailabilityZones(DescribeCustomAvailabilityZonesRequest request) {request = beforeClientExecution(request);return executeDescribeCustomAvailabilityZones(request);}
public DescribeClusterParameterGroupsResult describeClusterParameterGroups() {return describeClusterParameterGroups(new DescribeClusterParameterGroupsRequest());}
public Item(char p, char c) {parent = p;child = c;}
public void reset(int[] docs, int[] freqs) {this.docs = docs;this.freqs = freqs;if (freqs != null && tmpFreqs == null) {tmpFreqs = new int[tmpDocs.length];}}
public ChangeMessageVisibilityResult changeMessageVisibility(String queueUrl, String receiptHandle, Integer visibilityTimeout) {return changeMessageVisibility(new ChangeMessageVisibilityRequest().withQueueUrl(queueUrl).withReceiptHandle(receiptHandle).withVisibilityTimeout(visibilityTimeout));}
public boolean contains(Object o) {return this.processors.contains(o);}
public int getReturnState(int index) {return returnState;}
public ModifyVolumeAttributeResult modifyVolumeAttribute(ModifyVolumeAttributeRequest request) {request = beforeClientExecution(request);return executeModifyVolumeAttribute(request);}
public DeleteVolumeResult deleteVolume(DeleteVolumeRequest request) {request = beforeClientExecution(request);return executeDeleteVolume(request);}
public ByteBuffer putLong(int index, long value) {checkIndex(index, SizeOf.LONG);Memory.pokeLong(backingArray, offset + index, value, order);return this;}
public boolean hasMetaDataChanges() {return changeType != ChangeType.MODIFY || newMode != oldMode;}
public void newField(FieldInfo fieldInfo) {count = interval;}
public TokenStream create(TokenStream input) {return new JapaneseReadingFormFilter(input, useRomaji);}
public static CellRangeAddress valueOf(String ref) {int sep = ref.indexOf(":");CellReference a;CellReference b;if (sep == -1) {a = new CellReference(ref);b = a;} else {a = new CellReference(ref.substring(0, sep));b = new CellReference(ref.substring(sep + 1));}return new CellRangeAddress(a.getRow(), b.getRow(), a.getCol(), b.getCol());}
public ModifySelfservicePermissionsResult modifySelfservicePermissions(ModifySelfservicePermissionsRequest request) {request = beforeClientExecution(request);return executeModifySelfservicePermissions(request);}
public int getTokenType(String tokenName) {Integer ttype = getTokenTypeMap().get(tokenName);if ( ttype!=null ) return ttype;return Token.INVALID_TYPE;}
public int compareTo(LongBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;long thisLong, otherLong;while (compareRemaining > 0) {thisLong = get(thisPos);otherLong = otherBuffer.get(otherPos);if (thisLong != otherLong) {return thisLong < otherLong ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public ApproveSkillResult approveSkill(ApproveSkillRequest request) {request = beforeClientExecution(request);return executeApproveSkill(request);}
public void writeContinueIfRequired(int requiredContinuousSize) {if (_ulrOutput.getAvailableSpace() < requiredContinuousSize) {writeContinue();}}
public GetApiKeysResult getApiKeys(GetApiKeysRequest request) {request = beforeClientExecution(request);return executeGetApiKeys(request);}
public Iterator<Entry<K, V>> iterator() {return newEntryIterator();}
public int compareTo(RowColKey o) {int cmp = _rowIndex - o._rowIndex;if (cmp != 0) {return cmp;}return _columnIndex - o._columnIndex;}
public ATNConfig(ATNConfig c, ATNState state,PredictionContext context,SemanticContext semanticContext){this.state = state;this.alt = c.alt;this.context = context;this.semanticContext = semanticContext;this.reachesIntoOuterContext = c.reachesIntoOuterContext;}
public void updateNamesAfterCellShift(FormulaShifter shifter) {for (int i = 0 ; i < getNumNames() ; ++i){NameRecord nr = getNameRecord(i);Ptg[] ptgs = nr.getNameDefinition();if (shifter.adjustFormula(ptgs, nr.getSheetNumber())) {nr.setNameDefinition(ptgs);}}}
public ListReviewPolicyResultsForHITResult listReviewPolicyResultsForHIT(ListReviewPolicyResultsForHITRequest request) {request = beforeClientExecution(request);return executeListReviewPolicyResultsForHIT(request);}
public GetExportResult getExport(GetExportRequest request) {request = beforeClientExecution(request);return executeGetExport(request);}
public void setHyperbolicTfFactors(float min, float max,double base, float xoffset) {tf_hyper_min = min;tf_hyper_max = max;tf_hyper_base = base;tf_hyper_xoffset = xoffset;}
public CharBuffer slice() {return new ReadWriteCharArrayBuffer(remaining(), backingArray, offset + position);}
public LexerNoViableAltException(Lexer lexer,CharStream input,int startIndex,ATNConfigSet deadEndConfigs) {super(lexer, input, null);this.startIndex = startIndex;this.deadEndConfigs = deadEndConfigs;}
public CreateCompilationJobResult createCompilationJob(CreateCompilationJobRequest request) {request = beforeClientExecution(request);return executeCreateCompilationJob(request);}
public int getPosition() {return position;}
public boolean canEncode(CharSequence sequence) {CharBuffer cb;if (sequence instanceof CharBuffer) {cb = ((CharBuffer) sequence).duplicate();} else {cb = CharBuffer.wrap(sequence);}return implCanEncode(cb);}
public synchronized void add(int index, E e) {Object[] newElements = new Object[elements.length + 1];System.arraycopy(elements, 0, newElements, 0, index);newElements[index] = e;System.arraycopy(elements, index, newElements, index + 1, elements.length - index);elements = newElements;}
public StopMonitoringScheduleResult stopMonitoringSchedule(StopMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeStopMonitoringSchedule(request);}
public int getDbcellAt(int cellnum){return field_5_dbcells.get(cellnum);}
public final int read(byte[] buffer, int offset, int length) throws IOException {return in.read(buffer, offset, length);}
public synchronized String[] getChunks(String[] words, String[] tags, double[] probs) {String[] chunks = chunker.chunk(words, tags);if (probs != null)chunker.probs(probs);return chunks;}
public Ref getTarget() {return this;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[DEFAULTROWHEIGHT]\n");buffer.append("    .optionflags    = ").append(Integer.toHexString(getOptionFlags())).append("\n");buffer.append("    .rowheight      = ").append(Integer.toHexString(getRowHeight())).append("\n");buffer.append("[/DEFAULTROWHEIGHT]\n");return buffer.toString();}
public AlibabaCloudCredentials getCredentials() {return this.credentials;}
public SeekStatus seekCeil(BytesRef term) {throw new UnsupportedOperationException();}
public NavigableSet<K> navigableKeySet() {BoundedKeySet result = keySet;return result != null ? result : (keySet = new BoundedKeySet());}
public ListEventsRequest() {super("CloudPhoto", "2017-07-11", "ListEvents", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String toString(){StringBuilder sb = new StringBuilder();sb.append("[LbsDropData]\n");sb.append("  ._wStyle:  ").append(_wStyle).append('\n');sb.append("  ._cLine:  ").append(_cLine).append('\n');sb.append("  ._dxMin:  ").append(_dxMin).append('\n');sb.append("  ._str:  ").append(_str).append('\n');if(_unused != null) {sb.append("  ._unused:  ").append(_unused).append('\n');}sb.append("[/LbsDropData]\n");return sb.toString();}
public String toString() {return "PackWriter.State[" + phase + ", memory=" + bytesUsed + "]";}
public RemoteRefUpdate getRemoteUpdate(String refName) {return remoteUpdates.get(refName);}
@Override public Iterator<E> iterator() {return listIterator(0);}
public TerminateInstancesRequest(java.util.List<String> instanceIds) {setInstanceIds(instanceIds);}
public CreateDataRepositoryTaskResult createDataRepositoryTask(CreateDataRepositoryTaskRequest request) {request = beforeClientExecution(request);return executeCreateDataRepositoryTask(request);}
public void undeprecateActivityType(UndeprecateActivityTypeRequest request) {request = beforeClientExecution(request);executeUndeprecateActivityType(request);}
public EndRecord clone() {return copy();}
public ListLabelingJobsResult listLabelingJobs(ListLabelingJobsRequest request) {request = beforeClientExecution(request);return executeListLabelingJobs(request);}
public void setTag(String shortName) {this.tag = shortName;}
public String getNameText(NamePtg namePtg) {return _iBook.getNameRecord(namePtg.getIndex()).getNameText();}
public Builder() {slop = 0;terms = new ArrayList<>();positions = new ArrayList<>();}
public SpanPositionRangeQuery(SpanQuery match, int start, int end) {super(match);this.start = start;this.end = end;}
public CreateDBProxyResult createDBProxy(CreateDBProxyRequest request) {request = beforeClientExecution(request);return executeCreateDBProxy(request);}
public boolean equals( Object o ) {return o instanceof LovinsStemmer;}
public ReplicationGroup modifyReplicationGroupShardConfiguration(ModifyReplicationGroupShardConfigurationRequest request) {request = beforeClientExecution(request);return executeModifyReplicationGroupShardConfiguration(request);}
public DeleteFacesResult deleteFaces(DeleteFacesRequest request) {request = beforeClientExecution(request);return executeDeleteFaces(request);}
public SSTSerializer( IntMapper<UnicodeString> strings, int numStrings, int numUniqueStrings ){this.strings = strings;_numStrings = numStrings;_numUniqueStrings = numUniqueStrings;int infoRecs = ExtSSTRecord.getNumberOfInfoRecsForStrings(strings.size());this.bucketAbsoluteOffsets = new int[infoRecs];this.bucketRelativeOffsets = new int[infoRecs];}
public URISyntaxException(String input, String reason, int index) {super(reason);if (input == null || reason == null) {throw new NullPointerException();}if (index < -1) {throw new IllegalArgumentException();}this.input = input;this.index = index;}
public String toString() {return "AssociationFacetField(dim=" + dim + " path=" + Arrays.toString(path) + " bytes=" + assoc + ")";}
public boolean requiresCommitBody() {return false;}
public static AttrPtg getSumSingle() {return new AttrPtg(optiSum.set(0), 0, null, -1);}
public GetModelsResult getModels(GetModelsRequest request) {request = beforeClientExecution(request);return executeGetModels(request);}
public Storage getStorage() {return Storage.LOOSE;}
public ForwardBytesReader(byte[] bytes) {this.bytes = bytes;}
public long ramBytesUsed() {return fst == null ? 0 : fst.ramBytesUsed();}
public ShortBuffer asReadOnlyBuffer() {return ReadOnlyShortArrayBuffer.copy(this, mark);}
public ListFiltersResult listFilters(ListFiltersRequest request) {request = beforeClientExecution(request);return executeListFilters(request);}
public HSSFRichTextString(String string) {if (string == null) {_string = new UnicodeString("");} else {_string = new UnicodeString(string);}}
public void readBytes(byte[] b, int offset, int len) {System.arraycopy(bytes, pos, b, offset, len);pos += len;}
public UpdateDomainNameserversResult updateDomainNameservers(UpdateDomainNameserversRequest request) {request = beforeClientExecution(request);return executeUpdateDomainNameservers(request);}
public ListWorkersWithQualificationTypeResult listWorkersWithQualificationType(ListWorkersWithQualificationTypeRequest request) {request = beforeClientExecution(request);return executeListWorkersWithQualificationType(request);}
public ResetCacheParameterGroupRequest(String cacheParameterGroupName, java.util.List<ParameterNameValue> parameterNameValues) {setCacheParameterGroupName(cacheParameterGroupName);setParameterNameValues(parameterNameValues);}
public EscherPropertyMetaData( String description ){this.description = description;}
public UserInputQueryBuilder(String defaultField, Analyzer analyzer) {this.analyzer = analyzer;this.defaultField = defaultField;}
public final CharsetDecoder replaceWith(String replacement) {if (replacement == null) {throw new IllegalArgumentException("replacement == null");}if (replacement.isEmpty()) {throw new IllegalArgumentException("replacement.isEmpty()");}if (replacement.length() > maxCharsPerByte()) {throw new IllegalArgumentException("replacement length > maxCharsPerByte: " +replacement.length() + " > " + maxCharsPerByte());}replacementChars = replacement;implReplaceWith(replacement);return this;}
public void reset() throws IOException {throw new IOException();}
public UpdateFileSystemResult updateFileSystem(UpdateFileSystemRequest request) {request = beforeClientExecution(request);return executeUpdateFileSystem(request);}
public int readUByte(){return _in.readUByte();}
public String toString() {return "[WSBOOL]\n" +"    .wsbool1        = " + Integer.toHexString(getWSBool1()) + "\n" +"        .autobreaks = " + getAutobreaks() + "\n" +"        .dialog     = " + getDialog() + "\n" +"        .rowsumsbelw= " + getRowSumsBelow() + "\n" +"        .rowsumsrigt= " + getRowSumsRight() + "\n" +"    .wsbool2        = " + Integer.toHexString(getWSBool2()) + "\n" +"        .fittopage  = " + getFitToPage() + "\n" +"        .displayguts= " + getDisplayGuts() + "\n" +"        .alternateex= " + getAlternateExpression() + "\n" +"        .alternatefo= " + getAlternateFormula() + "\n" +"[/WSBOOL]\n";}
public PutGatewayResponseResult putGatewayResponse(PutGatewayResponseRequest request) {request = beforeClientExecution(request);return executePutGatewayResponse(request);}
public Term[] getStopWords() {List<Term> allStopWords = new ArrayList<>();for (Map.Entry<String, Set<String>> entry : stopWordsPerField.entrySet()) {String field = entry.getKey();Set<String> stopWords = entry.getValue();for (String text : stopWords) {allStopWords.add(new Term(field, text));}}return allStopWords.toArray(new Term[allStopWords.size()]);}
public boolean isUpdate() {return update;}
public static InternalSheet createSheet(RecordStream rs) {return new InternalSheet(rs);}
public final IntBuffer get(int[] dst, int dstOffset, int intCount) {if (intCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, intCount);position += intCount;return this;}
public DisassociateVpcCidrBlockResult disassociateVpcCidrBlock(DisassociateVpcCidrBlockRequest request) {request = beforeClientExecution(request);return executeDisassociateVpcCidrBlock(request);}
public void add(TaskStats stat2) {numRuns += stat2.getNumRuns();elapsed += stat2.getElapsed();maxTotMem += stat2.getMaxTotMem();maxUsedMem += stat2.getMaxUsedMem();count += stat2.getCount();if (round != stat2.round) {round = -1; }if (countsByTime != null && stat2.countsByTime != null) {if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {throw new IllegalStateException("different by-time msec step");}if (countsByTime.length != stat2.countsByTime.length) {throw new IllegalStateException("different by-time msec count");}for(int i=0;i<stat2.countsByTime.length;i++) {countsByTime[i] += stat2.countsByTime[i];}}}
public StartStreamProcessorResult startStreamProcessor(StartStreamProcessorRequest request) {request = beforeClientExecution(request);return executeStartStreamProcessor(request);}
public void print(char c) {print(String.valueOf(c));}
public StepConfig(String name, HadoopJarStepConfig hadoopJarStep) {setName(name);setHadoopJarStep(hadoopJarStep);}
public GetIdentityPoliciesResult getIdentityPolicies(GetIdentityPoliciesRequest request) {request = beforeClientExecution(request);return executeGetIdentityPolicies(request);}
public ListAccountsResult listAccounts(ListAccountsRequest request) {request = beforeClientExecution(request);return executeListAccounts(request);}
public int getCompressionLevel() {return compressionLevel;}
public synchronized StringBuffer append(CharSequence s) {if (s == null) {appendNull();} else {append0(s, 0, s.length());}return this;}
@Override public String toString() {return key + "=" + value;}
public long skip(long byteCount) throws IOException {if (byteCount < 0) {throw new IllegalArgumentException("byteCount < 0: " + byteCount);}synchronized (lock) {checkNotClosed();if (byteCount < 1) {return 0;}if (end - pos >= byteCount) {pos += byteCount;return byteCount;}long read = end - pos;pos = end;while (read < byteCount) {if (fillBuf() == -1) {return read;}if (end - pos >= byteCount - read) {pos += byteCount - read;return byteCount;}read += (end - pos);pos = end;}return byteCount;}}
public void updateFormulasAfterRowShift(FormulaShifter formulaShifter, int currentExternSheetIndex) {_valuesAgg.updateFormulasAfterRowShift(formulaShifter, currentExternSheetIndex);}
public void close() {synchronized (lock) {if (isOpen()) {buf = null;}}}
public void seek(long pos) {this.pos =  (int) (pos - pointer);}
public String toFormulaString() {StringBuilder sb = new StringBuilder(64);boolean needsExclamation = false;if (externalWorkbookNumber >= 0) {sb.append('[');sb.append(externalWorkbookNumber);sb.append(']');needsExclamation = true;}if (sheetName != null) {SheetNameFormatter.appendFormat(sb, sheetName);needsExclamation = true;}if (needsExclamation) {sb.append('!');}sb.append(nameName);return sb.toString();}
public boolean isFinished() {return mState == STATE_IDLE;}
public static Transport open(Repository local, URIish uri, String remoteName)throws NotSupportedException, TransportException {for (WeakReference<TransportProtocol> ref : protocols) {TransportProtocol proto = ref.get();if (proto == null) {protocols.remove(ref);continue;}if (proto.canHandle(uri, local, remoteName)) {Transport tn = proto.open(uri, local, remoteName);tn.prePush = Hooks.prePush(local, tn.hookOutRedirect);tn.prePush.setRemoteLocation(uri.toString());tn.prePush.setRemoteName(remoteName);return tn;}}throw new NotSupportedException(MessageFormat.format(JGitText.get().URINotSupported, uri));}
public void setColor(Color color){foreground = color;}
public DeleteAliasResult deleteAlias(DeleteAliasRequest request) {request = beforeClientExecution(request);return executeDeleteAlias(request);}
public SeekStatus seekCeil(BytesRef text) {termUpto = binarySearch(text, br, 0, info.terms.size()-1, info.terms, info.sortedTerms);if (termUpto < 0) { termUpto = -termUpto-1;if (termUpto >= info.terms.size()) {return SeekStatus.END;} else {info.terms.get(info.sortedTerms[termUpto], br);return SeekStatus.NOT_FOUND;}} else {return SeekStatus.FOUND;}}
public CreateApplicationVersionRequest(String applicationName, String versionLabel) {setApplicationName(applicationName);setVersionLabel(versionLabel);}
public String toString() {return ruleName + ":" + bypassTokenType;}
public int indexOf(Object object) {Object[] snapshot = elements;return indexOf(object, snapshot, 0, snapshot.length);}
public int compareTo(ShortBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;short thisByte, otherByte;while (compareRemaining > 0) {thisByte = get(thisPos);otherByte = otherBuffer.get(otherPos);if (thisByte != otherByte) {return thisByte < otherByte ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public DescribeSecurityConfigurationResult describeSecurityConfiguration(DescribeSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeSecurityConfiguration(request);}
public void add(int location, E object) {insertElementAt(object, location);}
public GetDownloadUrlForLayerResult getDownloadUrlForLayer(GetDownloadUrlForLayerRequest request) {request = beforeClientExecution(request);return executeGetDownloadUrlForLayer(request);}
public StringWriter append(CharSequence csq) {if (csq == null) {csq = "null";}write(csq.toString());return this;}
public RevWalk getRevWalk() {return walker;}
@Override public int lastIndexOf(Object object) {Slice slice = this.slice;Object[] snapshot = elements;slice.checkConcurrentModification(snapshot);int result = CopyOnWriteArrayList.lastIndexOf(object, snapshot, slice.from, slice.to);return (result != -1) ? (result - slice.from) : -1;}
public IntBuffer put(int index, int c) {checkIndex(index);backingArray[offset + index] = c;return this;}
public HSSFTextbox(HSSFShape parent, HSSFAnchor anchor) {super(parent, anchor);setHorizontalAlignment(HORIZONTAL_ALIGNMENT_LEFT);setVerticalAlignment(VERTICAL_ALIGNMENT_TOP);setString(new HSSFRichTextString(""));}
public GetRegionRequest() {super("cr", "2016-06-07", "GetRegion", "cr");setUriPattern("/regions");setMethod(MethodType.GET);}
public ListObjectChildrenResult listObjectChildren(ListObjectChildrenRequest request) {request = beforeClientExecution(request);return executeListObjectChildren(request);}
public GetIdResult getId(GetIdRequest request) {request = beforeClientExecution(request);return executeGetId(request);}
public String getPassphrase() {return passphrase;}
public Map<String, Ref> getAllRefs() {try {return getRefDatabase().getRefs(RefDatabase.ALL);} catch (IOException e) {throw new UncheckedIOException(e);}}
public boolean hasMoreElements() { return hasNext(); }
public int numDataNodes() {return numDataNodes(rootNode);}
public HadoopJarStepConfig toHadoopJarStepConfig() {List<String> args = new ArrayList<String>();if (reducer == null) {hadoopConfig.put("mapred.reduce.tasks", "0");}for (Map.Entry<String, String> entry : hadoopConfig.entrySet()) {args.add("-D");args.add(entry.getKey() + "=" + entry.getValue());}for (String input : inputs) {args.add("-input");args.add(input);}if (output != null) {args.add("-output");args.add(output);}if (mapper != null) {args.add("-mapper");args.add(mapper);}if (reducer != null) {args.add("-reducer");args.add(reducer);}return new HadoopJarStepConfig().withJar("/home/hadoop/contrib/streaming/hadoop-streaming.jar").withArgs(args);}
public GetRelationalDatabaseEventsResult getRelationalDatabaseEvents(GetRelationalDatabaseEventsRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseEvents(request);}
public void drawLine(int x1, int y1, int x2, int y2){drawLine(x1,y1,x2,y2,0);}
public UpdateUserSecurityProfilesResult updateUserSecurityProfiles(UpdateUserSecurityProfilesRequest request) {request = beforeClientExecution(request);return executeUpdateUserSecurityProfiles(request);}
public String toString() {return "Action: " + this.action;}
public CreateVolumeRequest(Integer size, String availabilityZone) {setSize(size);setAvailabilityZone(availabilityZone);}
public final void setPrecedenceStartState(int precedence, DFAState startState) {if (!isPrecedenceDfa()) {throw new IllegalStateException("Only precedence DFAs may contain a precedence start state.");}if (precedence < 0) {return;}synchronized (s0) {if (precedence >= s0.edges.length) {s0.edges = Arrays.copyOf(s0.edges, precedence + 1);}s0.edges[precedence] = startState;}}
public EditPhotosRequest() {super("CloudPhoto", "2017-07-11", "EditPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public Builder() {PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);scratchInts = new IntsRefBuilder();}
public DeleteFlowDefinitionResult deleteFlowDefinition(DeleteFlowDefinitionRequest request) {request = beforeClientExecution(request);return executeDeleteFlowDefinition(request);}
public void setLastFailedRefreshTime() {lastFailedRefreshTime = System.currentTimeMillis();}
public ModifyDBInstanceRequest(String dBInstanceIdentifier) {setDBInstanceIdentifier(dBInstanceIdentifier);}
public GetTemplateSummaryResult getTemplateSummary(GetTemplateSummaryRequest request) {request = beforeClientExecution(request);return executeGetTemplateSummary(request);}
public Snapshot revokeSnapshotAccess(RevokeSnapshotAccessRequest request) {request = beforeClientExecution(request);return executeRevokeSnapshotAccess(request);}
public void serialize(final LittleEndianOutput out) {final int field_4_name_length = field_6_name_text.length();final int field_5_comment_length = field_7_comment_text.length();out.writeShort(field_1_record_type);out.writeShort(field_2_frt_cell_ref_flag);out.writeLong(field_3_reserved);out.writeShort(field_4_name_length);out.writeShort(field_5_comment_length);boolean isNameMultiByte = StringUtil.hasMultibyte(field_6_name_text);out.writeByte(isNameMultiByte ? 1 : 0);if (isNameMultiByte) {StringUtil.putUnicodeLE(field_6_name_text, out);} else {StringUtil.putCompressedUnicode(field_6_name_text, out);}boolean isCommentMultiByte = StringUtil.hasMultibyte(field_7_comment_text);out.writeByte(isCommentMultiByte ? 1 : 0);if (isCommentMultiByte) {StringUtil.putUnicodeLE(field_7_comment_text, out);} else {StringUtil.putCompressedUnicode(field_7_comment_text, out);}}
public StartProjectVersionResult startProjectVersion(StartProjectVersionRequest request) {request = beforeClientExecution(request);return executeStartProjectVersion(request);}
public MoPenDeleteGroupMemberRequest() {super("MoPen", "2018-02-11", "MoPenDeleteGroupMember", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public synchronized int getMax() {return mMax;}
public DiffCommand setSourcePrefix(String sourcePrefix) {this.sourcePrefix = sourcePrefix;return this;}
public CreateFlowLogsResult createFlowLogs(CreateFlowLogsRequest request) {request = beforeClientExecution(request);return executeCreateFlowLogs(request);}
public void writeString(String text, int numberOfRichTextRuns, int extendedDataSize) {boolean is16bitEncoded = StringUtil.hasMultibyte(text);int keepTogetherSize = 2 + 1 + 1; int optionFlags = 0x00;if (is16bitEncoded) {optionFlags |= 0x01;keepTogetherSize += 1; }if (numberOfRichTextRuns > 0) {optionFlags |= 0x08;keepTogetherSize += 2;}if (extendedDataSize > 0) {optionFlags |= 0x04;keepTogetherSize += 4;}writeContinueIfRequired(keepTogetherSize);writeShort(text.length());writeByte(optionFlags);if (numberOfRichTextRuns > 0) {writeShort(numberOfRichTextRuns);}if (extendedDataSize > 0) {writeInt(extendedDataSize);}writeCharacterData(text, is16bitEncoded);}
public String toFormulaString(String[] operands) {StringBuilder buf = new StringBuilder();if(isExternalFunction()) {buf.append(operands[0]); appendArgs(buf, 1, operands);} else {buf.append(getName());appendArgs(buf, 0, operands);}return buf.toString();}
public DetectStackDriftResult detectStackDrift(DetectStackDriftRequest request) {request = beforeClientExecution(request);return executeDetectStackDrift(request);}
public ObjectId idFor(TreeFormatter formatter) {return delegate().idFor(formatter);}
public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return getTermEscaped(escaper);} else {return this.field + ":" + getTermEscaped(escaper);}}
public RenderUiTemplateResult renderUiTemplate(RenderUiTemplateRequest request) {request = beforeClientExecution(request);return executeRenderUiTemplate(request);}
public final LongBuffer asLongBuffer() {return LongToByteBufferAdapter.asLongBuffer(this);}
public DescribeLimitsResult describeLimits(DescribeLimitsRequest request) {request = beforeClientExecution(request);return executeDescribeLimits(request);}
public DescribeAssessmentTargetsResult describeAssessmentTargets(DescribeAssessmentTargetsRequest request) {request = beforeClientExecution(request);return executeDescribeAssessmentTargets(request);}
public DeleteClientVpnRouteResult deleteClientVpnRoute(DeleteClientVpnRouteRequest request) {request = beforeClientExecution(request);return executeDeleteClientVpnRoute(request);}
public RebaseCommand setUpstream(AnyObjectId upstream) {try {this.upstreamCommit = walk.parseCommit(upstream);this.upstreamCommitName = upstream.name();} catch (IOException e) {throw new JGitInternalException(MessageFormat.format(JGitText.get().couldNotReadObjectWhileParsingCommit,upstream.name()), e);}return this;}
public Collection<ChildScorable> getChildren() {return Collections.singleton(new ChildScorable(in, "CACHED"));}
public synchronized String substring(int start) {return super.substring(start);}
public static double sum(double[] values) {double sum = 0;for (double value : values) {sum += value;}return sum;}
public static BlankRecord[] convertBlankRecords(MulBlankRecord mbk) {BlankRecord[] mulRecs = new BlankRecord[mbk.getNumColumns()];for (int k = 0; k < mbk.getNumColumns(); k++) {BlankRecord br = new BlankRecord();br.setColumn((short) (k + mbk.getFirstColumn()));br.setRow(mbk.getRow());br.setXFIndex(mbk.getXFAt(k));mulRecs[k] = br;}return mulRecs;}
public DeregisterDBProxyTargetsResult deregisterDBProxyTargets(DeregisterDBProxyTargetsRequest request) {request = beforeClientExecution(request);return executeDeregisterDBProxyTargets(request);}
public SummaryInformation(final PropertySet ps) throws UnexpectedPropertySetTypeException {super(ps);if (!isSummaryInformation()) {throw new UnexpectedPropertySetTypeException("Not a " + getClass().getName());}}
public void setCredentialsProvider(AlibabaCloudCredentialsProvider credentialsProvider) {if (credential != null) {return;}credential = new CredentialsBackupCompatibilityAdaptor(credentialsProvider);}
public CharArrayReader(char[] buf, int offset, int length) {if (offset < 0 || offset > buf.length || length < 0 || offset + length < 0) {throw new IllegalArgumentException();}this.buf = buf;this.pos = offset;this.markedPos = offset;int bufferLength = buf.length;this.count = offset + length < bufferLength ? length : bufferLength;}
public Object getProperty(final long id) {wasNull = !properties.containsKey(id);return (wasNull) ? null : properties.get(id).getValue();}
public BufferedOutputStream(OutputStream out, int size) {super(out);if (size <= 0) {throw new IllegalArgumentException("size <= 0");}buf = new byte[size];}
public AuthorizeDBSecurityGroupIngressRequest(String dBSecurityGroupName) {setDBSecurityGroupName(dBSecurityGroupName);}
public ArrayDataSource(T[] elements) {this.elements = elements.clone();}
public CreateDeploymentResult createDeployment(CreateDeploymentRequest request) {request = beforeClientExecution(request);return executeCreateDeployment(request);}
public final int getInt() {int newPosition = position + SizeOf.INT;if (newPosition > limit) {throw new BufferUnderflowException();}int result = Memory.peekInt(backingArray, offset + position, order);position = newPosition;return result;}
public DeleteTransitGatewayRouteResult deleteTransitGatewayRoute(DeleteTransitGatewayRouteRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGatewayRoute(request);}
public ListMultipartUploadsRequest(String bucketName) {this.bucketName = bucketName;}
public float score(float freq, long norm) {return (float) SimilarityBase.this.score(stats, freq, getLengthValue(norm));}
public char next() {if (offset >= (end - 1)) {offset = end;return DONE;}return string.charAt(++offset);}
public CherryPickResult(RevCommit newHead, List<Ref> cherryPickedRefs) {this.status = CherryPickStatus.OK;this.newHead = newHead;this.cherryPickedRefs = cherryPickedRefs;this.failingPaths = null;}
public static Token newToken(int ofKind){return newToken(ofKind, null);}
public HSSFClientAnchor getPreferredSize(double scale){return getPreferredSize(scale, scale);}
public UpdateInstanceRequest() {super("Ots", "2016-06-20", "UpdateInstance", "ots");setMethod(MethodType.POST);}
public ByteBuffer putInt(int index, int value) {checkIndex(index, SizeOf.INT);Memory.pokeInt(backingArray, offset + index, value, order);return this;}
public byte[] serialize() {int size = getDataSize() + 4;ByteArrayOutputStream baos = new ByteArrayOutputStream(size);serialize(new LittleEndianOutputStream(baos));if (baos.size() != size) {throw new RuntimeException("write size mismatch");}return baos.toByteArray();}
public GetFieldLevelEncryptionProfileResult getFieldLevelEncryptionProfile(GetFieldLevelEncryptionProfileRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionProfile(request);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_number_of_sheets);if(isExternalReferences()) {StringUtil.writeUnicodeString(out, field_2_encoded_url);for (String field_3_sheet_name : field_3_sheet_names) {StringUtil.writeUnicodeString(out, field_3_sheet_name);}} else {int field2val = _isAddInFunctions ? TAG_ADD_IN_FUNCTIONS : TAG_INTERNAL_REFERENCES;out.writeShort(field2val);}}
public BitsSlice(Bits parent, ReaderSlice slice) {this.parent = parent;this.start = slice.start;this.length = slice.length;assert length >= 0: "length=" + length;}
public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}
public ListConfigurationRevisionsResult listConfigurationRevisions(ListConfigurationRevisionsRequest request) {request = beforeClientExecution(request);return executeListConfigurationRevisions(request);}
public ObjectStream openStream() {return new ObjectStream.SmallStream(this);}
public boolean delete() {return directory.delete();}
public void clear(){_limit = 0;}
public void setMaxObjectSizeLimit(long limit) {maxObjectSizeLimit = limit;}
public DescribeEventSubscriptionsResult describeEventSubscriptions(DescribeEventSubscriptionsRequest request) {request = beforeClientExecution(request);return executeDescribeEventSubscriptions(request);}
public boolean startEvaluate(FormulaCellCacheEntry cce) {if (cce == null) {throw new IllegalArgumentException("cellLoc must not be null");}if (_currentlyEvaluatingCells.contains(cce)) {return false;}_currentlyEvaluatingCells.add(cce);_evaluationFrames.add(new CellEvaluationFrame(cce));return true;}
public void serialize(LittleEndianOutput out) {out.writeShort(sid);out.writeShort(_cbFContinued);if (_linkPtg == null) {out.writeShort(0);} else {int formulaSize = _linkPtg.getSize();int linkSize = formulaSize + 6;if (_unknownPostFormulaByte != null) {linkSize++;}out.writeShort(linkSize);out.writeShort(formulaSize);out.writeInt(_unknownPreFormulaInt);_linkPtg.write(out);if (_unknownPostFormulaByte != null) {out.writeByte(_unknownPostFormulaByte.intValue());}}out.writeShort(_cLines);out.writeShort(_iSel);out.writeShort(_flags);out.writeShort(_idEdit);if(_dropData != null) {_dropData.serialize(out);}if(_rgLines != null) {for(String str : _rgLines){StringUtil.writeUnicodeString(out, str);}}if(_bsels != null) {for(boolean val : _bsels){out.writeByte(val ? 1 : 0);}}}
public void remove(int el) {if ( readonly ) throw new IllegalStateException("can't alter readonly IntervalSet");int n = intervals.size();for (int i = 0; i < n; i++) {Interval I = intervals.get(i);int a = I.a;int b = I.b;if ( el<a ) {break; }if ( el==a && el==b ) {intervals.remove(i);break;}if ( el==a ) {I.a++;break;}if ( el==b ) {I.b--;break;}if ( el>a && el<b ) { int oldb = I.b;I.b = el-1;      add(el+1, oldb); }}}
public IntegerList toIntegerList() {IntegerList values = new IntegerList(size());int n = intervals.size();for (int i = 0; i < n; i++) {Interval I = intervals.get(i);int a = I.a;int b = I.b;for (int v=a; v<=b; v++) {values.add(v);}}return values;}
@Override public void clear() {AbstractMultimap.this.clear();}
public CharsRef pullNext() {assert upto < count;lastEndOffset = endOffsets[upto];lastPosLength = posLengths[upto];final CharsRefBuilder result = outputs[upto++];posIncr = 0;if (upto == count) {reset();}return result.get();}
public FSTTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter) throws IOException {final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);this.postingsWriter = postingsWriter;this.fieldInfos = state.fieldInfos;this.out = state.directory.createOutput(termsFileName, state.context);this.maxDoc = state.segmentInfo.maxDoc();boolean success = false;try {CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, TERMS_VERSION_CURRENT,state.segmentInfo.getId(), state.segmentSuffix);this.postingsWriter.init(out, state);success = true;} finally {if (!success) {IOUtils.closeWhileHandlingException(out);}}}
public int compareTo(Cell other) {return Double.compare(distanceSortKey, other.distanceSortKey);}
public ListAccountSettingsResult listAccountSettings(ListAccountSettingsRequest request) {request = beforeClientExecution(request);return executeListAccountSettings(request);}
public boolean find() {matchFound = findNextImpl(address, input, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}
public V next()        { return super.nextEntry().value; }
public DescribeLocalGatewaysResult describeLocalGateways(DescribeLocalGatewaysRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGateways(request);}
public ByteArrayDataInput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}
public String toString() {return super.toString() + ":" + revstr; }
public RegisterCrossAccountAccessRoleResult registerCrossAccountAccessRole(RegisterCrossAccountAccessRoleRequest request) {request = beforeClientExecution(request);return executeRegisterCrossAccountAccessRole(request);}
public void clear() {ConcurrentHashMap.this.clear();}
public DescribeFileSystemsResult describeFileSystems(DescribeFileSystemsRequest request) {request = beforeClientExecution(request);return executeDescribeFileSystems(request);}
public ReverseStringFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public Builder() {this(true);}
public TokenStream create(TokenStream input) {return new IrishLowerCaseFilter(input);}
public GetQualificationTypeResult getQualificationType(GetQualificationTypeRequest request) {request = beforeClientExecution(request);return executeGetQualificationType(request);}
public ThreeWayMerger newMerger(Repository db, boolean inCore) {return new ResolveMerger(db, inCore);}
public String getNameText(int definedNameIndex) {return _externalNameRecords[definedNameIndex].getText();}
public PlotWalk(Repository repo) {super(repo);super.sort(RevSort.TOPO, true);additionalRefMap = new HashMap<>();repository = repo;}
public SubscribeToDatasetResult subscribeToDataset(SubscribeToDatasetRequest request) {request = beforeClientExecution(request);return executeSubscribeToDataset(request);}
public StringBuilder append(char[] str, int offset, int len) {append0(str, offset, len);return this;}
public synchronized int indexOf(String subString, int start) {return super.indexOf(subString, start);}
public List<E> subList(int from, int to) {Object[] snapshot = elements;if (from < 0 || from > to || to > snapshot.length) {throw new IndexOutOfBoundsException("from=" + from + ", to=" + to +", list size=" + snapshot.length);}return new CowSubList(snapshot, from, to);}
public Severity getSeverity() {return severity;}
public DescribeBundleTasksResult describeBundleTasks() {return describeBundleTasks(new DescribeBundleTasksRequest());}
public BooleanQuery build() {return new BooleanQuery(minimumNumberShouldMatch, clauses.toArray(new BooleanClause[0]));}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[HIDEOBJ]\n");buffer.append("    .hideobj         = ").append(Integer.toHexString(getHideObj())).append("\n");buffer.append("[/HIDEOBJ]\n");return buffer.toString();}
public UseSelFSRecord(boolean b) {this(0);_options = useNaturalLanguageFormulasFlag.setBoolean(_options, b);}
public boolean equals( Object o ) {return o instanceof RomanianStemmer;}
public AbortMultipartUploadResult abortMultipartUpload(AbortMultipartUploadRequest request) {request = beforeClientExecution(request);return executeAbortMultipartUpload(request);}
public void reportMatch(Parser recognizer) {endErrorCondition(recognizer);}
public ModifyVpnConnectionResult modifyVpnConnection(ModifyVpnConnectionRequest request) {request = beforeClientExecution(request);return executeModifyVpnConnection(request);}
public GetSendStatisticsResult getSendStatistics() {return getSendStatistics(new GetSendStatisticsRequest());}
public CreateVoiceConnectorGroupResult createVoiceConnectorGroup(CreateVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeCreateVoiceConnectorGroup(request);}
public InitiateJobRequest(String vaultName, JobParameters jobParameters) {setVaultName(vaultName);setJobParameters(jobParameters);}
public MatchResult toMatchResult() {ensureMatch();return new MatchResultImpl(input, matchOffsets);}
public static String getInflectedFormTranslation(String s) {return inflFormTranslations.get(s);}
public static ErrPtg valueOf(int code) {switch(FormulaError.forInt(code)) {case DIV0: return DIV_ZERO;case NA: return N_A;case NAME: return NAME_INVALID;case NULL: return NULL_INTERSECTION;case NUM: return NUM_ERROR;case REF: return REF_INVALID;case VALUE: return VALUE_INVALID;default:throw new RuntimeException("Unexpected error code (" + code + ")");}}
public GetBasePathMappingResult getBasePathMapping(GetBasePathMappingRequest request) {request = beforeClientExecution(request);return executeGetBasePathMapping(request);}
public void fromObjectId(AnyObjectId src) {this.w1 = src.w1;this.w2 = src.w2;this.w3 = src.w3;this.w4 = src.w4;this.w5 = src.w5;}
public static List<? extends Tree> getAncestors(Tree t) {if ( t.getParent()==null ) return Collections.emptyList();List<Tree> ancestors = new ArrayList<Tree>();t = t.getParent();while ( t!=null ) {ancestors.add(0, t); t = t.getParent();}return ancestors;}
public GetUsagePlanResult getUsagePlan(GetUsagePlanRequest request) {request = beforeClientExecution(request);return executeGetUsagePlan(request);}
public UpdateLoadBalancerAttributeResult updateLoadBalancerAttribute(UpdateLoadBalancerAttributeRequest request) {request = beforeClientExecution(request);return executeUpdateLoadBalancerAttribute(request);}
public void addResult(int n, boolean isRelevant, long docNameExtractTime) {if (Math.abs(numPoints+1 - n) > 1E-6) {throw new IllegalArgumentException("point "+n+" illegal after "+numPoints+" points!");}if (isRelevant) {numGoodPoints+=1;recallPoints.add(new RecallPoint(n,numGoodPoints));if (recallPoints.size()==1 && n<=5) { mrr =  1.0 / n;}}numPoints = n;double p = numGoodPoints / numPoints;if (isRelevant) {pReleventSum += p;}if (n<pAt.length) {pAt[n] = p;}recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;docNamesExtractTime += docNameExtractTime;}
public UpdateExperimentResult updateExperiment(UpdateExperimentRequest request) {request = beforeClientExecution(request);return executeUpdateExperiment(request);}
public String toString() {return "(" + a.toString() + " AND " + b.toString() + ")";}
public String getAccessKeyId() {return accessKeyId;}
public GetBulkPublishDetailsResult getBulkPublishDetails(GetBulkPublishDetailsRequest request) {request = beforeClientExecution(request);return executeGetBulkPublishDetails(request);}
public static byte[] grow(byte[] array) {return grow(array, 1 + array.length);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {double result;try {result = evaluate(evalArg(arg0, srcRowIndex, srcColumnIndex), evalArg(arg1, srcRowIndex, srcColumnIndex), evalArg(arg2, srcRowIndex, srcColumnIndex));} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public static final int hash32(final byte[] data, int offset, int len) {return MurmurHash2.hash(data, 0x9747b28c, offset, len);}
public static Formula create(Ptg[] ptgs) {if (ptgs == null || ptgs.length < 1) {return EMPTY;}int totalSize = Ptg.getEncodedSize(ptgs);byte[] encodedData = new byte[totalSize];Ptg.serializePtgs(ptgs, encodedData, 0);int encodedTokenLen = Ptg.getEncodedSizeWithoutArrayData(ptgs);return new Formula(encodedData, encodedTokenLen);}
public String toString(String field){return null;}
public static int deleteN(char s[], int pos, int len, int nChars) {assert pos + nChars <= len;if (pos + nChars < len) { System.arraycopy(s, pos + nChars, s, pos, len - pos - nChars);}return len - nChars;}
public ThreadSafeProgressMonitor(ProgressMonitor pm) {this.pm = pm;this.lock = new ReentrantLock();this.mainThread = Thread.currentThread();this.workers = new AtomicInteger(0);this.pendingUpdates = new AtomicInteger(0);this.process = new Semaphore(0);}
public SendMessageBatchRequestEntry(String id, String messageBody) {setId(id);setMessageBody(messageBody);}
public DescribeAddressResult describeAddress(DescribeAddressRequest request) {request = beforeClientExecution(request);return executeDescribeAddress(request);}
public GetEventRequest() {super("CloudPhoto", "2017-07-11", "GetEvent", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public DescribeRuleResult describeRule(DescribeRuleRequest request) {request = beforeClientExecution(request);return executeDescribeRule(request);}
public final RevObject getObject() {return object;}
public JapaneseIterationMarkCharFilterFactory(Map<String,String> args) {super(args);normalizeKanji = getBoolean(args, NORMALIZE_KANJI_PARAM, JapaneseIterationMarkCharFilter.NORMALIZE_KANJI_DEFAULT);normalizeKana = getBoolean(args, NORMALIZE_KANA_PARAM, JapaneseIterationMarkCharFilter.NORMALIZE_KANA_DEFAULT);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public char previous() {if (--index < start) {index = start;return DONE;} else {return current();}}
public LoggingConfig(String bucket, String prefix) {setBucket(bucket);setPrefix(prefix);}
public static String createSafeSheetName(final String nameProposal) {return createSafeSheetName(nameProposal, ' ');}
public PutMetricAlarmResult putMetricAlarm(PutMetricAlarmRequest request) {request = beforeClientExecution(request);return executePutMetricAlarm(request);}
public CreateExclusionsPreviewResult createExclusionsPreview(CreateExclusionsPreviewRequest request) {request = beforeClientExecution(request);return executeCreateExclusionsPreview(request);}
public OutputStream getRawStream() {return buf;}
public int getThreads() {return threads;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);final int byte2 = blocks[blocksOffset++] & 0xFF;final int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 3) << 12) | (byte2 << 4) | (byte3 >>> 4);final int byte4 = blocks[blocksOffset++] & 0xFF;final int byte5 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);final int byte6 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;}}
public boolean eof() {assert upto + bufferOffset <= endIndex;return upto + bufferOffset == endIndex;}
public ClientException(String message) {super(message);this.setErrorType(ErrorType.Client);}
public static NumberRecord[] convertRKRecords(MulRKRecord mrk) {NumberRecord[] mulRecs = new NumberRecord[mrk.getNumColumns()];for (int k = 0; k < mrk.getNumColumns(); k++) {NumberRecord nr = new NumberRecord();nr.setColumn((short) (k + mrk.getFirstColumn()));nr.setRow(mrk.getRow());nr.setXFIndex(mrk.getXFAt(k));nr.setValue(mrk.getRKNumberAt(k));mulRecs[k] = nr;}return mulRecs;}
public List<ReceiveCommand> getCommands() {return Collections.unmodifiableList(commands);}
public UpdateVoiceConnectorResult updateVoiceConnector(UpdateVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeUpdateVoiceConnector(request);}
public static String getText(int errorCode) {if(FormulaError.isValidCode(errorCode)) {return FormulaError.forInt(errorCode).getString();}return "~non~std~err(" + errorCode + ")~";}
public long nextOrd() {long v = ord;ord = NO_MORE_ORDS;return v;}
public EntityResolver getEntityResolver () {return (theEntityResolver == this) ? null : theEntityResolver;}
public SheetRefEvaluator(WorkbookEvaluator bookEvaluator, EvaluationTracker tracker, int sheetIndex) {if (sheetIndex < 0) {throw new IllegalArgumentException("Invalid sheetIndex: " + sheetIndex + ".");}_bookEvaluator = bookEvaluator;_tracker = tracker;_sheetIndex = sheetIndex;}
public DBSecurityGroup authorizeDBSecurityGroupIngress(AuthorizeDBSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeDBSecurityGroupIngress(request);}
@Override public V put(K key, V value) {if (key == null) {return putValueForNullKey(value);}int hash = secondaryHash(key.hashCode());HashMapEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);for (HashMapEntry<K, V> e = tab[index]; e != null; e = e.next) {if (e.hash == hash && key.equals(e.key)) {preModify(e);V oldValue = e.value;e.value = value;return oldValue;}}modCount++;if (size++ > threshold) {tab = doubleCapacity();index = hash & (tab.length - 1);}addNewEntry(key, value, hash, index);return null;}
public GetTrafficPolicyInstanceResult getTrafficPolicyInstance(GetTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeGetTrafficPolicyInstance(request);}
public Message(Content subject, Body body) {setSubject(subject);setBody(body);}
public LbsDropData() {_str = "";_unused = 0;}
public Deleted3DPxg(String sheetName) {this(-1, sheetName);}
public String getName() {return "simple-two-way-in-core"; }
public RevTree parseTree(AnyObjectId id)throws MissingObjectException, IncorrectObjectTypeException,IOException {RevObject c = peel(parseAny(id));final RevTree t;if (c instanceof RevCommit)t = ((RevCommit) c).getTree();else if (!(c instanceof RevTree))throw new IncorrectObjectTypeException(id.toObjectId(),Constants.TYPE_TREE);elset = (RevTree) c;parseHeaders(t);return t;}
public DisableFastSnapshotRestoresResult disableFastSnapshotRestores(DisableFastSnapshotRestoresRequest request) {request = beforeClientExecution(request);return executeDisableFastSnapshotRestores(request);}
public int size() {return size;}
public CreateStreamResult createStream(CreateStreamRequest request) {request = beforeClientExecution(request);return executeCreateStream(request);}
public String replaceAll(String replacement) {reset();StringBuffer buffer = new StringBuffer(input.length());while (find()) {appendReplacement(buffer, replacement);}return appendTail(buffer).toString();}
public DeregisterInstanceEventNotificationAttributesResult deregisterInstanceEventNotificationAttributes(DeregisterInstanceEventNotificationAttributesRequest request) {request = beforeClientExecution(request);return executeDeregisterInstanceEventNotificationAttributes(request);}
public int getDepth() {return depth;}
public long get() {if (position == limit) {throw new BufferUnderflowException();}return byteBuffer.getLong(position++ * SizeOf.LONG);}
public boolean isEmpty() {return ConcurrentHashMap.this.isEmpty();}
public void addName(NameRecord name) {_definedNames.add(name);int idx = findFirstRecordLocBySid(ExternSheetRecord.sid);if (idx == -1) idx = findFirstRecordLocBySid(SupBookRecord.sid);if (idx == -1) idx = findFirstRecordLocBySid(CountryRecord.sid);int countNames = _definedNames.size();_workbookRecordList.add(idx + countNames, name);}
public void sort(RevSort s, boolean use) {assertNotStarted();if (use)sorting.add(s);elsesorting.remove(s);if (sorting.size() > 1)sorting.remove(RevSort.NONE);else if (sorting.isEmpty())sorting.add(RevSort.NONE);}
public String toString() {return "D";}
public DisassociateSkillGroupFromRoomResult disassociateSkillGroupFromRoom(DisassociateSkillGroupFromRoomRequest request) {request = beforeClientExecution(request);return executeDisassociateSkillGroupFromRoom(request);}
public static byte[] encodeASCII(long s) {return encodeASCII(Long.toString(s));}
public void setData(byte[] b) {setData(b,0,b.length);}
public void removeLinksDirty() {remove1stProperty(PropertyIDMap.PID_LINKSDIRTY);}
final public void OptionalWeights(SrndQuery q) throws ParseException {Token weight=null;label_8:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case CARAT:;break;default:jj_la1[9] = jj_gen;break label_8;}jj_consume_token(CARAT);weight = jj_consume_token(NUMBER);float f;try {f = Float.parseFloat(weight.image);} catch (Exception floatExc) {{if (true) throw new ParseException(BOOST_ERROR_MESSAGE + weight.image + " (" + floatExc + ")");}}if (f <= 0.0) {{if (true) throw new ParseException(BOOST_ERROR_MESSAGE + weight.image);}}q.setWeight(f * q.getWeight()); }}
public ListLogPatternSetsResult listLogPatternSets(ListLogPatternSetsRequest request) {request = beforeClientExecution(request);return executeListLogPatternSets(request);}
public String toString() {return "<field start='" + this.begin + "' end='" + this.end + "' field='"+ this.field + "' text='" + this.text + "'/>";}
public ListAssessmentTargetsResult listAssessmentTargets(ListAssessmentTargetsRequest request) {request = beforeClientExecution(request);return executeListAssessmentTargets(request);}
public HSSFFontFormatting getFontFormatting() {return getFontFormatting(false);}
public UpdateRoomResult updateRoom(UpdateRoomRequest request) {request = beforeClientExecution(request);return executeUpdateRoom(request);}
public ListLexiconsResult listLexicons(ListLexiconsRequest request) {request = beforeClientExecution(request);return executeListLexicons(request);}
public boolean equals( Object o ) {return o instanceof KpStemmer;}
public void write(String str, int offset, int count) {String sub = str.substring(offset, offset + count);buf.append(sub);}
public PackLock(File packFile, FS fs) {final File p = packFile.getParentFile();final String n = packFile.getName();keepFile = new File(p, n.substring(0, n.length() - 5) + ".keep"); }
public CreatePublicKeyResult createPublicKey(CreatePublicKeyRequest request) {request = beforeClientExecution(request);return executeCreatePublicKey(request);}
public PersonIdent getRefLogIdent() {return refLogIdent;}
public boolean equals(Object o) {if (this == o) {return true;}if (!(o instanceof EscherComplexProperty)) {return false;}EscherComplexProperty escherComplexProperty = (EscherComplexProperty) o;return Arrays.equals(complexData, escherComplexProperty.complexData);}
public void unread(int oneByte) throws IOException {if (buf == null) {throw new IOException();}if (pos == 0) {throw new IOException("Pushback buffer full");}buf[--pos] = (byte) oneByte;}
public GetSegmentImportJobsResult getSegmentImportJobs(GetSegmentImportJobsRequest request) {request = beforeClientExecution(request);return executeGetSegmentImportJobs(request);}
public VerifyEmailAddressResult verifyEmailAddress(VerifyEmailAddressRequest request) {request = beforeClientExecution(request);return executeVerifyEmailAddress(request);}
public GetTagsResult getTags(GetTagsRequest request) {request = beforeClientExecution(request);return executeGetTags(request);}
public String toString(){StringBuilder sb = new StringBuilder();sb.append( text ).append( '(' );for( Toffs to : termsOffsets )sb.append( to.toString() );sb.append( ')' );return sb.toString();}
public RevFilter clone() {return new Binary(a.clone(), b.clone());}
public StandardTokenizerImpl(java.io.Reader in) {this.zzReader = in;}
public MoPenFindGroupRequest() {super("MoPen", "2018-02-11", "MoPenFindGroup", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public static BreakIterator getLineInstance() {return getLineInstance(Locale.getDefault());}
public boolean exists() {return true;}
public LongBuffer asReadOnlyBuffer() {LongToByteBufferAdapter buf = new LongToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public void writeBytes(byte[] b, int offset, int length) {assert b.length >= offset + length;if (length == 0) {return;}if (upto == blockSize) {if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}final int offsetEnd = offset + length;while(true) {final int left = offsetEnd - offset;final int blockLeft = blockSize - upto;if (blockLeft < left) {System.arraycopy(b, offset, currentBlock, upto, blockLeft);addBlock(currentBlock);currentBlock = new byte[blockSize];upto = 0;offset += blockLeft;} else {System.arraycopy(b, offset, currentBlock, upto, left);upto += left;break;}}}
public ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}
public Class<?> getArgumentClass() {return arg;}
public GetVaultAccessPolicyResult getVaultAccessPolicy(GetVaultAccessPolicyRequest request) {request = beforeClientExecution(request);return executeGetVaultAccessPolicy(request);}
public GetReusableDelegationSetLimitResult getReusableDelegationSetLimit(GetReusableDelegationSetLimitRequest request) {request = beforeClientExecution(request);return executeGetReusableDelegationSetLimit(request);}
public int compareTo( WeightedPhraseInfo other ) {int diff = getStartOffset() - other.getStartOffset();if ( diff != 0 ) {return diff;}diff = getEndOffset() - other.getEndOffset();if ( diff != 0 ) {return diff;}return (int) Math.signum( getBoost() - other.getBoost() );}
public StopRelationalDatabaseResult stopRelationalDatabase(StopRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeStopRelationalDatabase(request);}
public void clear() {Arrays.fill(blocks, 0L);}
public UpdateScriptResult updateScript(UpdateScriptRequest request) {request = beforeClientExecution(request);return executeUpdateScript(request);}
public InterpreterRuleContext(ParserRuleContext parent,int invokingStateNumber,int ruleIndex){super(parent, invokingStateNumber);this.ruleIndex = ruleIndex;}
public CreateFileSystemFromBackupResult createFileSystemFromBackup(CreateFileSystemFromBackupRequest request) {request = beforeClientExecution(request);return executeCreateFileSystemFromBackup(request);}
public int getLevelForDistance(double dist) {if (dist == 0){return maxLevels;}int level =  S2Projections.MAX_WIDTH.getMinLevel(dist * DistanceUtils.DEGREES_TO_RADIANS);int roundLevel = level % arity != 0 ? 1 : 0;level = level/arity + roundLevel;return Math.min(maxLevels, level + 1);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {ValueEval ve0;ValueEval ve1;try {ve0 = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);ve1 = OperandResolver.getSingleValue(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}StringBuilder sb = new StringBuilder();sb.append(getText(ve0));sb.append(getText(ve1));return new StringEval(sb.toString());}
public static ChartDataSource<Number> fromNumericCellRange(Sheet sheet, CellRangeAddress cellRangeAddress) {return new AbstractCellRangeDataSource<Number>(sheet, cellRangeAddress) {@Override
public static FuncPtg create(LittleEndianInput in) {return create(in.readUShort());}
public InitiateVaultLockResult initiateVaultLock(InitiateVaultLockRequest request) {request = beforeClientExecution(request);return executeInitiateVaultLock(request);}
public final K getKey() {return key;}
public boolean isSet(final int holder){return (holder & _mask) != 0;}
public DoubleMetaphoneFilter(TokenStream input, int maxCodeLength, boolean inject) {super(input);this.encoder.setMaxCodeLen(maxCodeLength);this.inject = inject;}
public boolean changeExternalReference(String oldUrl, String newUrl) {return workbook.changeExternalReference(oldUrl, newUrl);}
public DescribeEngineDefaultParametersRequest(String cacheParameterGroupFamily) {setCacheParameterGroupFamily(cacheParameterGroupFamily);}
public void extendB() {endB++;}
public JapaneseReadingFormFilter(TokenStream input, boolean useRomaji) {super(input);this.useRomaji = useRomaji;}
public DeleteContactResult deleteContact(DeleteContactRequest request) {request = beforeClientExecution(request);return executeDeleteContact(request);}
public static final int next(byte[] b, int ptr, char chrA) {final int sz = b.length;while (ptr < sz) {if (b[ptr++] == chrA)return ptr;}return ptr;}
public InvokeEndpointResult invokeEndpoint(InvokeEndpointRequest request) {request = beforeClientExecution(request);return executeInvokeEndpoint(request);}
public PutAccountSettingDefaultResult putAccountSettingDefault(PutAccountSettingDefaultRequest request) {request = beforeClientExecution(request);return executePutAccountSettingDefault(request);}
public static Path categoriesLineFile(Path f) {Path dir = f.toAbsolutePath().getParent();String categoriesName = "categories-"+f.getFileName();return dir.resolve(categoriesName);}
public String toJson() {return new JsonPolicyWriter().writePolicyToString(this);}
public String getFunctionName(int idx) {return _funcMap.get(idx);}
public RecordHandlerProgressResult recordHandlerProgress(RecordHandlerProgressRequest request) {request = beforeClientExecution(request);return executeRecordHandlerProgress(request);}
public synchronized StringBuffer insert(int index, char[] chars, int start, int length) {insert0(index, chars, start, length);return this;}
public RevObject lookupAny(AnyObjectId id, int type) {RevObject r = objects.get(id);if (r == null) {switch (type) {case Constants.OBJ_COMMIT:r = createCommit(id);break;case Constants.OBJ_TREE:r = new RevTree(id);break;case Constants.OBJ_BLOB:r = new RevBlob(id);break;case Constants.OBJ_TAG:r = new RevTag(id);break;default:throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidGitType, Integer.valueOf(type)));}objects.add(r);}return r;}
public BytesRef encode(char[] buffer) {return encode(buffer, 0, buffer.length);}
public StringBuilder append(int i) {IntegralToString.appendInt(this, i);return this;}
public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}
public WrappedPositionArray() {for(int i=0;i<positions.length;i++) {positions[i] = new Position();}}
public PasswordRev4Record(int pw) {field_1_password = pw;}
public static String intToHex(int value) {StringBuilder sb = new StringBuilder(10);writeHex(sb, value & 0xFFFFFFFFL, 8, "0x");return sb.toString();}
public RemovePermissionRequest(String topicArn, String label) {setTopicArn(topicArn);setLabel(label);}
public UpdateOrganizationConfigurationResult updateOrganizationConfiguration(UpdateOrganizationConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateOrganizationConfiguration(request);}
public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}
public void println() {newline();}
public String toString() {return "NRTCachingDirectory(" + in + "; maxCacheMB=" + (maxCachedBytes/1024/1024.) + " maxMergeSizeMB=" + (maxMergeSizeBytes/1024/1024.) + ")";}
public DescribeWorkforceResult describeWorkforce(DescribeWorkforceRequest request) {request = beforeClientExecution(request);return executeDescribeWorkforce(request);}
public ToggleFeaturesRequest() {super("CloudPhoto", "2017-07-11", "ToggleFeatures", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public synchronized StringBuffer append(char[] chars, int start, int length) {append0(chars, start, length);return this;}
public ShortBuffer put(short c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putShort(position++ * SizeOf.SHORT, c);return this;}
public char last() {index = (limit == start) ? limit : limit - 1;return current();}
public WeightedSpanTermExtractor(String defaultField) {this.defaultField = defaultField;}
public StringReader(String str) {this.str = str;this.count = str.length();}
public GetThumbnailsRequest() {super("CloudPhoto", "2017-07-11", "GetThumbnails", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public TagCommand setName(String name) {checkCallable();this.name = name;return this;}
@Override public String toString() {synchronized (mutex) {return c.toString();}}
public String toString() {return toString((List<String>)null, (RuleContext)null);}
public String toString() {return "StandardDirectoryReader.ReaderCommit(" + segmentsFileName + " files=" + files + ")";}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesAfterHeader = readHeader( data, offset );int pos              = offset + HEADER_SIZE;field_pictureData = IOUtils.safelyAllocate(bytesAfterHeader, MAX_RECORD_LENGTH);System.arraycopy(data, pos, field_pictureData, 0, bytesAfterHeader);return bytesAfterHeader + 8;}
public static int[] copyOf(int[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public void serialize(LittleEndianOutput out) {out.write(data);}
public E get(int location) {if (location >= 0 && location < size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}return link.data;}throw new IndexOutOfBoundsException();}
public static boolean hasExactSharedBorder(CellRangeAddress crA, CellRangeAddress crB) {int oFirstRow = crB.getFirstRow();int oLastRow  = crB.getLastRow();int oFirstCol = crB.getFirstColumn();int oLastCol  = crB.getLastColumn();if (crA.getFirstRow() > 0 && crA.getFirstRow()-1 == oLastRow ||oFirstRow > 0 && oFirstRow-1 == crA.getLastRow()) {return crA.getFirstColumn() == oFirstCol && crA.getLastColumn() == oLastCol;}if (crA.getFirstColumn()>0 && crA.getFirstColumn() - 1 == oLastCol ||oFirstCol>0 && crA.getLastColumn() == oFirstCol -1) {return crA.getFirstRow() == oFirstRow && crA.getLastRow() == oLastRow;}return false;}
public void visitCellsForRow(int rowIndex, RecordVisitor rv) {CellValueRecordInterface[] rowCells = records[rowIndex];if(rowCells == null) {throw new IllegalArgumentException("Row [" + rowIndex + "] is empty");}for (int i = 0; i < rowCells.length; i++) {RecordBase cvr = (RecordBase) rowCells[i];if(cvr == null) {continue;}int nBlank = countBlanks(rowCells, i);if (nBlank > 1) {rv.visitRecord(createMBR(rowCells, i, nBlank));i+=nBlank-1;} else if (cvr instanceof RecordAggregate) {RecordAggregate agg = (RecordAggregate) cvr;agg.visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) cvr);}}}
public DeleteVpnConnectionResult deleteVpnConnection(DeleteVpnConnectionRequest request) {request = beforeClientExecution(request);return executeDeleteVpnConnection(request);}
public void clear() {username = null;if (password != null) {Arrays.fill(password, (char) 0);password = null;}}
public String toString() {return String.format(Locale.ROOT,"time=%.2f sec. total (%.2f reading, %.2f sorting, %.2f merging), lines=%d, temp files=%d, merges=%d, soft ram limit=%.2f MB",totalTimeMS / 1000.0d, readTimeMS / 1000.0d, sortTimeMS.get() / 1000.0d, mergeTimeMS.get() / 1000.0d,lineCount, tempMergeFiles, mergeRounds,(double) bufferSize / MB);}
public DetachLoadBalancersResult detachLoadBalancers(DetachLoadBalancersRequest request) {request = beforeClientExecution(request);return executeDetachLoadBalancers(request);}
public synchronized Span[] splitSentences(String line) {if (sentenceSplitter != null) {return sentenceSplitter.sentPosDetect(line);} else {Span[] shorty = new Span[1];shorty[0] = new Span(0, line.length());return shorty;}}
public boolean isRemote() {return getHost() != null;}
public void setBuiltinStyle(int builtinStyleId) {field_1_xf_index = isBuiltinFlag.set(field_1_xf_index);field_2_builtin_style = builtinStyleId;}
public ObjectReader getObjectReader() {return reader;}
public void addEscherProperty( EscherProperty prop ){properties.add( prop );}
public String toString() {StringBuilder sb = new StringBuilder();sb.append("[").append("USERSVIEWBEGIN").append("] (0x");sb.append(Integer.toHexString(sid).toUpperCase(Locale.ROOT)).append(")\n");sb.append("  rawData=").append(HexDump.toHex(_rawData)).append("\n");sb.append("[/").append("USERSVIEWBEGIN").append("]\n");return sb.toString();}
public String group(int group) {ensureMatch();int from = matchOffsets[group * 2];int to = matchOffsets[(group * 2) + 1];if (from == -1 || to == -1) {return null;} else {return input.substring(from, to);}}
public void removeCompany() {remove1stProperty(PropertyIDMap.PID_COMPANY);}
public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public static Charset defaultCharset() {return DEFAULT_CHARSET;}
public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}
public AttributeValueUpdate(AttributeValue value, AttributeAction action) {setValue(value);setAction(action.toString());}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[FOOTER]\n");buffer.append("    .footer = ").append(getText()).append("\n");buffer.append("[/FOOTER]\n");return buffer.toString();}
public DisassociateSkillFromSkillGroupResult disassociateSkillFromSkillGroup(DisassociateSkillFromSkillGroupRequest request) {request = beforeClientExecution(request);return executeDisassociateSkillFromSkillGroup(request);}
public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!getField().equals(field)) {buffer.append(getField());buffer.append(':');}buffer.append(term.text());buffer.append('*');return buffer.toString();}
public NameRecord getNameRecord(int index) {return _definedNames.get(index);}
public BottomMarginRecord clone() {return copy();}
@Override public V setValue(V object) {throw new UnsupportedOperationException();}
public QuadPrefixTree(SpatialContext ctx, Rectangle bounds, int maxLevels) {super(ctx, maxLevels);this.xmin = bounds.getMinX();this.xmax = bounds.getMaxX();this.ymin = bounds.getMinY();this.ymax = bounds.getMaxY();levelW = new double[maxLevels + 1];levelH = new double[maxLevels + 1];gridW = xmax - xmin;gridH = ymax - ymin;this.xmid = xmin + gridW/2.0;this.ymid = ymin + gridH/2.0;levelW[0] = gridW/2.0;levelH[0] = gridH/2.0;for (int i = 1; i < levelW.length; i++) {levelW[i] = levelW[i - 1] / 2.0;levelH[i] = levelH[i - 1] / 2.0;}}
public static HSSFAnchor createAnchorFromEscher(EscherContainerRecord container){if (null != container.getChildById(EscherChildAnchorRecord.RECORD_ID)){return new HSSFChildAnchor(container.getChildById(EscherChildAnchorRecord.RECORD_ID));} else {if (null != container.getChildById(EscherClientAnchorRecord.RECORD_ID)){return new HSSFClientAnchor(container.getChildById(EscherClientAnchorRecord.RECORD_ID));}return null;}}
public void reset() {if ( _input !=null ) {_input.seek(0); }_token = null;_type = Token.INVALID_TYPE;_channel = Token.DEFAULT_CHANNEL;_tokenStartCharIndex = -1;_tokenStartCharPositionInLine = -1;_tokenStartLine = -1;_text = null;_hitEOF = false;_mode = Lexer.DEFAULT_MODE;_modeStack.clear();getInterpreter().reset();}
public ShortBuffer slice() {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());ShortBuffer result = new ShortToByteBufferAdapter(bb);byteBuffer.clear();return result;}
public boolean isPackedGitMMAP() {return packedGitMMAP;}
public boolean equalsSameType(Object other) {assert exists || 0.0D == value;MutableValueDouble b = (MutableValueDouble)other;return value == b.value && exists == b.exists;}
public PurchaseReservedInstancesOfferingResult purchaseReservedInstancesOffering(PurchaseReservedInstancesOfferingRequest request) {request = beforeClientExecution(request);return executePurchaseReservedInstancesOffering(request);}
public final char readChar() throws IOException {return (char) readShort();}
public AssociateRepositoryResult associateRepository(AssociateRepositoryRequest request) {request = beforeClientExecution(request);return executeAssociateRepository(request);}
public ImportApiKeysResult importApiKeys(ImportApiKeysRequest request) {request = beforeClientExecution(request);return executeImportApiKeys(request);}
public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_index_extern_sheet);out.writeInt(unused1);out.writeInt(unused2);}
public Type getType() {return type;}
public static Calendar getJavaCalendar(double date, boolean use1904windowing) {return getJavaCalendar(date, use1904windowing, null, false);}
public DeleteSnapshotScheduleResult deleteSnapshotSchedule(DeleteSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeDeleteSnapshotSchedule(request);}
public void writeProtectWorkbook( String password, String username ) {this.workbook.writeProtectWorkbook(password, username);}
public CreateCloudFormationStackResult createCloudFormationStack(CreateCloudFormationStackRequest request) {request = beforeClientExecution(request);return executeCreateCloudFormationStack(request);}
public void writeByte(byte b) throws IOException {assert bufferPos == buffer.position(): "bufferPos=" + bufferPos + " vs buffer.position()=" + buffer.position();buffer.put(b);if (++bufferPos == bufferSize) {dump();}}
public ExtendedFormatRecord(RecordInputStream in) {field_1_font_index           = in.readShort();field_2_format_index         = in.readShort();field_3_cell_options         = in.readShort();field_4_alignment_options    = in.readShort();field_5_indention_options    = in.readShort();field_6_border_options       = in.readShort();field_7_palette_options      = in.readShort();field_8_adtl_palette_options = in.readInt();field_9_fill_palette_options = in.readShort();}
public int getExternalSheetIndex(String workbookName, String sheetName) {return _iBook.getExternalSheetIndex(workbookName, sheetName);}
public HSSFObjectData(EscherContainerRecord spContainer, ObjRecord objRecord, DirectoryEntry _root) {super(spContainer, objRecord);this._root = _root;}
public long ramBytesUsed() {return super.ramBytesUsed()+ offsets.ramBytesUsed()+ lengths.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF+ values.bytes().length;}
public UpdateApnsVoipChannelResult updateApnsVoipChannel(UpdateApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeUpdateApnsVoipChannel(request);}
public String[] getNames() {return nameValPairs.keySet().toArray(new String[0]);}
public DeleteAutoSnapshotResult deleteAutoSnapshot(DeleteAutoSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteAutoSnapshot(request);}
public int getLowIx() {return _lowIx;}
public DescribeSubscribedWorkteamResult describeSubscribedWorkteam(DescribeSubscribedWorkteamRequest request) {request = beforeClientExecution(request);return executeDescribeSubscribedWorkteam(request);}
public DeleteVpnGatewayResult deleteVpnGateway(DeleteVpnGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteVpnGateway(request);}
public boolean get(int index) {return intSet.exists(index);}
public String constantName() {return constantName;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_formatIndex);}
public boolean isEmpty() {return size() == 0;}
public DescribeCacheParametersResult describeCacheParameters(DescribeCacheParametersRequest request) {request = beforeClientExecution(request);return executeDescribeCacheParameters(request);}
public SimpleFraction(int numerator, int denominator){this.numerator = numerator;this.denominator = denominator;}
public static int idealBooleanArraySize(int need) {return idealByteArraySize(need);}
public SubmoduleStatusCommand submoduleStatus() {return new SubmoduleStatusCommand(repo);}
public PutRecordBatchResult putRecordBatch(PutRecordBatchRequest request) {request = beforeClientExecution(request);return executePutRecordBatch(request);}
public QueryTermScorer(WeightedTerm[] weightedTerms) {termsToFind = new HashMap<>();for (int i = 0; i < weightedTerms.length; i++) {WeightedTerm existingTerm = termsToFind.get(weightedTerms[i].term);if ((existingTerm == null)|| (existingTerm.weight < weightedTerms[i].weight)) {termsToFind.put(weightedTerms[i].term, weightedTerms[i]);maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());}}}
public static boolean allSubsetsConflict(Collection<BitSet> altsets) {return !hasNonConflictingAltSet(altsets);}
public DescribeRuntimeConfigurationResult describeRuntimeConfiguration(DescribeRuntimeConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeRuntimeConfiguration(request);}
public RevCommit parseCommit(AnyObjectId id)throws MissingObjectException, IncorrectObjectTypeException,IOException {RevObject c = peel(parseAny(id));if (!(c instanceof RevCommit))throw new IncorrectObjectTypeException(id.toObjectId(),Constants.TYPE_COMMIT);return (RevCommit) c;}
public short readShort() {return (short)readUShort();}
public final void clear() {for (int i = 0; i <= size; i++) {heap[i] = null;}size = 0;}
public CreateVPCAssociationAuthorizationResult createVPCAssociationAuthorization(CreateVPCAssociationAuthorizationRequest request) {request = beforeClientExecution(request);return executeCreateVPCAssociationAuthorization(request);}
public ModifyCacheParameterGroupRequest(String cacheParameterGroupName, java.util.List<ParameterNameValue> parameterNameValues) {setCacheParameterGroupName(cacheParameterGroupName);setParameterNameValues(parameterNameValues);}
public boolean equals( Object o ) {return o instanceof CatalanStemmer;}
public AutomatonQuery(final Term term, Automaton automaton) {this(term, automaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);}
public String getPattern() {return pattern;}
public int compareTo(IntBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;int thisInt, otherInt;while (compareRemaining > 0) {thisInt = get(thisPos);otherInt = otherBuffer.get(otherPos);if (thisInt != otherInt) {return thisInt < otherInt ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}
public final boolean hasNext() {return next != header;}
public Class<IndexChangedListener> getListenerType() {return IndexChangedListener.class;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[OBJECTLINK]\n");buffer.append("    .anchorId             = ").append("0x").append(HexDump.toHex(  getAnchorId ())).append(" (").append( getAnchorId() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("    .link1                = ").append("0x").append(HexDump.toHex(  getLink1 ())).append(" (").append( getLink1() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("    .link2                = ").append("0x").append(HexDump.toHex(  getLink2 ())).append(" (").append( getLink2() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("[/OBJECTLINK]\n");return buffer.toString();}
public void setDetectRenames(boolean on) {if (on && renameDetector == null) {assertHaveReader();renameDetector = new RenameDetector(reader, diffCfg);} else if (!on)renameDetector = null;}
public boolean isSupported(int bitsPerValue) {return Packed64SingleBlock.isSupported(bitsPerValue);}
public void setOutputUnigrams(boolean outputUnigrams) {this.outputUnigrams = outputUnigrams;gramSize = new CircularSequence();}
public TypeAsPayloadTokenFilter create(TokenStream input) {return new TypeAsPayloadTokenFilter(input);}
public CreateIndexResult createIndex(CreateIndexRequest request) {request = beforeClientExecution(request);return executeCreateIndex(request);}
public QualityQuery(String queryID, Map<String,String> nameValPairs) {this.queryID = queryID;this.nameValPairs = nameValPairs;}
public void addFirst(E object) {addFirstImpl(object);}
public ValidateConfigurationSettingsRequest(String applicationName, java.util.List<ConfigurationOptionSetting> optionSettings) {setApplicationName(applicationName);setOptionSettings(optionSettings);}
public static FileKey exact(File directory, FS fs) {return new FileKey(directory, fs);}
public void removeScale() {remove1stProperty(PropertyIDMap.PID_SCALE);}
public DocumentDictionary(IndexReader reader, String field, String weightField, String payloadField, String contextsField) {this.reader = reader;this.field = field;this.weightField = weightField;this.payloadField = payloadField;this.contextsField = contextsField;}
public long get(int index) {final int o = index / 5;final int b = index % 5;final int shift = b * 12;return (blocks[o] >>> shift) & 4095L;}
@Override public void clear() {synchronized (mutex) {c.clear();}}
public boolean hasNext() {return _nextIndex < _endIx;}
public AssociateVirtualInterfaceResult associateVirtualInterface(AssociateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAssociateVirtualInterface(request);}
public DoubleValuesSource makeDistanceValueSource(Point queryPoint) {return makeDistanceValueSource(queryPoint, 1.0);}
public float getTokenScore() {position += posIncAtt.getPositionIncrement();String termText = termAtt.toString();WeightedSpanTerm weightedSpanTerm;if ((weightedSpanTerm = fieldWeightedSpanTerms.get(termText)) == null) {return 0;}if (weightedSpanTerm.positionSensitive &&!weightedSpanTerm.checkPosition(position)) {return 0;}float score = weightedSpanTerm.getWeight();if (!foundTerms.contains(termText)) {totalScore += score;foundTerms.add(termText);}return score;}
public E pollFirst() {Map.Entry<E, Object> entry = backingMap.pollFirstEntry();return (entry == null) ? null : entry.getKey();}
public void enterEveryRule(ParserRuleContext ctx) {System.out.println("enter   " + getRuleNames()[ctx.getRuleIndex()] +", LT(1)=" + _input.LT(1).getText());}
public ShortBuffer put(int index, short c) {checkIndex(index);byteBuffer.putShort(index * SizeOf.SHORT, c);return this;}
public void notifyUpdateCell(Cell cell) {_bookEvaluator.notifyUpdateCell(new HSSFEvaluationCell((HSSFCell)cell));}
public void moveCell(HSSFCell cell, short newColumn) {if(cells.length > newColumn && cells[newColumn] != null) {throw new IllegalArgumentException("Asked to move cell to column " + newColumn + " but there's already a cell there");}if(! cells[cell.getColumnIndex()].equals(cell)) {throw new IllegalArgumentException("Asked to move a cell, but it didn't belong to our row");}removeCell(cell, false);cell.updateCellNum(newColumn);addCell(cell);}
public void connect(PipedWriter src) throws IOException {src.connect(this);}
public void serialize(LittleEndianOutput out) {out.writeShort(getFirstColumn());out.writeShort(getLastColumn());out.writeShort(getColumnWidth());out.writeShort(getXFIndex());out.writeShort(_options);out.writeShort(field_6_reserved);}
public ModifyWorkspaceCreationPropertiesResult modifyWorkspaceCreationProperties(ModifyWorkspaceCreationPropertiesRequest request) {request = beforeClientExecution(request);return executeModifyWorkspaceCreationProperties(request);}
public BoolDocValues(ValueSource vs) {this.vs = vs;}
public void reset() {nextWrite--;while(count > 0) {if (nextWrite == -1) {nextWrite = positions.length - 1;}positions[nextWrite--].reset();count--;}nextWrite = 0;nextPos = 0;count = 0;}
public UpdateDirectConnectGatewayAssociationResult updateDirectConnectGatewayAssociation(UpdateDirectConnectGatewayAssociationRequest request) {request = beforeClientExecution(request);return executeUpdateDirectConnectGatewayAssociation(request);}
public EditPhotoStoreRequest() {super("CloudPhoto", "2017-07-11", "EditPhotoStore", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public String toString() {return "<matchNoDocsQueryNode/>";}
public AddCommand addFilepattern(String filepattern) {checkCallable();filepatterns.add(filepattern);return this;}
public String toString() {return '[' + "HEADERFOOTER" + "] (0x" +Integer.toHexString(sid).toUpperCase(Locale.ROOT) + ")\n" +"  rawData=" + HexDump.toHex(_rawData) + "\n" +"[/" + "HEADERFOOTER" + "]\n";}
public UpdateBrokerResult updateBroker(UpdateBrokerRequest request) {request = beforeClientExecution(request);return executeUpdateBroker(request);}
public FormatRecord clone() {return copy();}
public AssociateS3ResourcesResult associateS3Resources(AssociateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeAssociateS3Resources(request);}
public UnknownRecord(int id, byte[] data) {_sid = id & 0xFFFF;_rawData = data;}
public TreeFilter clone() {return new Binary(a.clone(), b.clone());}
public int getRawValue(final int holder){return (holder & _mask);}
public CancelResizeResult cancelResize(CancelResizeRequest request) {request = beforeClientExecution(request);return executeCancelResize(request);}
public CreateTransitGatewayRouteResult createTransitGatewayRoute(CreateTransitGatewayRouteRequest request) {request = beforeClientExecution(request);return executeCreateTransitGatewayRoute(request);}
public FastVectorHighlighter( boolean phraseHighlight, boolean fieldMatch,FragListBuilder fragListBuilder, FragmentsBuilder fragmentsBuilder ){this.phraseHighlight = phraseHighlight;this.fieldMatch = fieldMatch;this.fragListBuilder = fragListBuilder;this.fragmentsBuilder = fragmentsBuilder;}
public SetTypeDefaultVersionResult setTypeDefaultVersion(SetTypeDefaultVersionRequest request) {request = beforeClientExecution(request);return executeSetTypeDefaultVersion(request);}
public final long computeNorm(FieldInvertState state) {return get(state.getName()).computeNorm(state);}
public CreateCustomVerificationEmailTemplateResult createCustomVerificationEmailTemplate(CreateCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeCreateCustomVerificationEmailTemplate(request);}
public static double median(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {int n = v.length;Arrays.sort(v);r = (n % 2 == 0)? (v[n / 2] + v[n / 2 - 1]) / 2: v[n / 2];}return r;}
public void walk(ParseTreeListener listener, ParseTree t) {if ( t instanceof ErrorNode) {listener.visitErrorNode((ErrorNode)t);return;}else if ( t instanceof TerminalNode) {listener.visitTerminal((TerminalNode)t);return;}RuleNode r = (RuleNode)t;enterRule(listener, r);int n = r.getChildCount();for (int i = 0; i<n; i++) {walk(listener, r.getChild(i));}exitRule(listener, r);}
public SCLRecord(RecordInputStream in) {field_1_numerator              = in.readShort();field_2_denominator            = in.readShort();}
public boolean add(final T value) {int index = elements.size();elements.add(value);valueKeyMap.put(value, index);return true;}
public RawText(byte[] input) {this(input, RawParseUtils.lineMap(input, 0, input.length));}
public void writeInt(int v) {checkPosition(4);int i = _writeIndex;_buf[i++] = (byte)((v >>>  0) & 0xFF);_buf[i++] = (byte)((v >>>  8) & 0xFF);_buf[i++] = (byte)((v >>> 16) & 0xFF);_buf[i++] = (byte)((v >>> 24) & 0xFF);_writeIndex = i;}
public GetRepoBatchRequest() {super("cr", "2016-06-07", "GetRepoBatch", "cr");setUriPattern("/batchsearch");setMethod(MethodType.GET);}
public MoPenDoRecognizeRequest() {super("MoPen", "2018-02-11", "MoPenDoRecognize", "mopen");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}
public Iterator<Map.Entry<K,V>> iterator() {return new EntryIterator();}
public DeleteApnsSandboxChannelResult deleteApnsSandboxChannel(DeleteApnsSandboxChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsSandboxChannel(request);}
public short readShort() {if (shouldSkipEncryptionOnCurrentRecord) {readPlain(buffer, 0, LittleEndianConsts.SHORT_SIZE);return LittleEndian.getShort(buffer);} else {return ccis.readShort();}}
public DeleteEndpointResult deleteEndpoint(DeleteEndpointRequest request) {request = beforeClientExecution(request);return executeDeleteEndpoint(request);}
@Override public int lastIndexOf(Object object) {return list.lastIndexOf(object);}
public void SwitchTo(int lexState){if (lexState >= 3 || lexState < 0)throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);elsecurLexState = lexState;}
public GetIndustryInfoChildrenListRequest() {super("industry-brain", "2018-07-12", "GetIndustryInfoChildrenList");setProtocol(ProtocolType.HTTPS);}
public Credential(String keyId, String secret, int expiredHours) {this.accessKeyId = keyId;this.accessSecret = secret;this.refreshDate = new Date();setExpiredDate(expiredHours);}
public KeywordMarkerFilterFactory(Map<String,String> args) {super(args);wordFiles = get(args, PROTECTED_TOKENS);stringPattern = get(args, PATTERN);ignoreCase = getBoolean(args, "ignoreCase", false);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public CellRangeAddress getAreaAt(int index) {return _regions[_startIndex + index];}
public PutEmailIdentityDkimSigningAttributesResult putEmailIdentityDkimSigningAttributes(PutEmailIdentityDkimSigningAttributesRequest request) {request = beforeClientExecution(request);return executePutEmailIdentityDkimSigningAttributes(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(" [FEATURE SMART TAGS]\n");buffer.append(" [/FEATURE SMART TAGS]\n");return buffer.toString();}
public static void checkStartAndEnd(int len, int start, int end) {if (start < 0 || end > len) {throw new ArrayIndexOutOfBoundsException("start < 0 || end > len."+ " start=" + start + ", end=" + end + ", len=" + len);}if (start > end) {throw new IllegalArgumentException("start > end: " + start + " > " + end);}}
public Loc(int bookIndex, int sheetIndex, int rowIndex, int columnIndex) {_bookSheetColumn = toBookSheetColumn(bookIndex, sheetIndex, columnIndex);_rowIndex = rowIndex;}
public BoolErrRecord(RecordInputStream in) {super(in);switch (in.remaining()) {case 2:_value = in.readByte();break;case 3:_value = in.readUShort();break;default:throw new RecordFormatException("Unexpected size ("+ in.remaining() + ") for BOOLERR record.");}int flag = in.readUByte();switch (flag) {case 0:_isError = false;break;case 1:_isError = true;break;default:throw new RecordFormatException("Unexpected isError flag ("+ flag + ") for BOOLERR record.");}}
public String toString() {return "OrdTermState ord=" + ord;}
public Note(AnyObjectId noteOn, ObjectId noteData) {super(noteOn);data = noteData;}
public GetModelVersionResult getModelVersion(GetModelVersionRequest request) {request = beforeClientExecution(request);return executeGetModelVersion(request);}
public void addBreak(int main, int subFrom, int subTo) {Integer key = Integer.valueOf(main);Break region = _breakMap.get(key);if(region == null) {region = new Break(main, subFrom, subTo);_breakMap.put(key, region);_breaks.add(region);} else {region.main = main;region.subFrom = subFrom;region.subTo = subTo;}}
public DescribeUsageReportSubscriptionsResult describeUsageReportSubscriptions(DescribeUsageReportSubscriptionsRequest request) {request = beforeClientExecution(request);return executeDescribeUsageReportSubscriptions(request);}
public boolean offerLast(E e) {return addLastImpl(e);}
public RegistrantProfileRealNameVerificationRequest() {super("Domain", "2018-01-29", "RegistrantProfileRealNameVerification");setMethod(MethodType.POST);}
public RowColKey(int rowIndex, int columnIndex) {_rowIndex = rowIndex;_columnIndex = columnIndex;}
public DisassociateTransitGatewayMulticastDomainResult disassociateTransitGatewayMulticastDomain(DisassociateTransitGatewayMulticastDomainRequest request) {request = beforeClientExecution(request);return executeDisassociateTransitGatewayMulticastDomain(request);}
public Charset detectedCharset() {throw new UnsupportedOperationException();}
public RightMarginRecord clone() {return copy();}
public ListTrafficPoliciesResult listTrafficPolicies(ListTrafficPoliciesRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicies(request);}
public DeleteKeyPairRequest(String keyName) {setKeyName(keyName);}
public void setElement(int index, byte[] element) {if (emptyComplexPart) {return;}int actualSize = getActualSizeOfElements(getSizeOfElements());System.arraycopy( element, 0, getComplexData(), FIXED_SIZE + index * actualSize, actualSize);}
public FieldDoc(int doc, float score, Object[] fields) {super(doc, score);this.fields = fields;}
public TreeFilter clone() {return new Binary(a.clone(), b.clone());}
public void fillTo(int toIndex, long val) {while (count < toIndex)add(val);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 5;values[valuesOffset++] = (byte0 >>> 2) & 7;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);values[valuesOffset++] = (byte1 >>> 4) & 7;values[valuesOffset++] = (byte1 >>> 1) & 7;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 >>> 3) & 7;values[valuesOffset++] = byte2 & 7;}}
public RawText getResultContents() {return resultContents;}
public void setMaxShingleSize(int maxShingleSize) {if (maxShingleSize < 2) {throw new IllegalArgumentException("Max shingle size must be >= 2");}this.maxShingleSize = maxShingleSize;}
public FieldInfo(RecordInputStream in) {_isxvi = in.readShort();_isxvd = in.readShort();_idObj = in.readShort();}
public DescribeDBEngineVersionsResult describeDBEngineVersions(DescribeDBEngineVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeDBEngineVersions(request);}
public DBSnapshot copyDBSnapshot(CopyDBSnapshotRequest request) {request = beforeClientExecution(request);return executeCopyDBSnapshot(request);}
public DFA(DecisionState atnStartState, int decision) {this.atnStartState = atnStartState;this.decision = decision;boolean precedenceDfa = false;if (atnStartState instanceof StarLoopEntryState) {if (((StarLoopEntryState)atnStartState).isPrecedenceDecision) {precedenceDfa = true;DFAState precedenceState = new DFAState(new ATNConfigSet());precedenceState.edges = new DFAState[0];precedenceState.isAcceptState = false;precedenceState.requiresFullContext = false;this.s0 = precedenceState;}}this.precedenceDfa = precedenceDfa;}
public QueryParserTokenManager(CharStream stream){input_stream = stream;}
public String toString() {return "<group>" + "\n" + getChild().toString() + "\n</group>";}
public UpdateResolverRuleResult updateResolverRule(UpdateResolverRuleRequest request) {request = beforeClientExecution(request);return executeUpdateResolverRule(request);}
public int compareTo(BytesRef other) {return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,other.bytes, other.offset, other.offset + other.length);}
public void rewind() {ns.removeAllElements();ks.setLength(0);cur = root;run();}
public ModifyWorkspaceAccessPropertiesResult modifyWorkspaceAccessProperties(ModifyWorkspaceAccessPropertiesRequest request) {request = beforeClientExecution(request);return executeModifyWorkspaceAccessProperties(request);}
public DescribeFleetAttributesResult describeFleetAttributes(DescribeFleetAttributesRequest request) {request = beforeClientExecution(request);return executeDescribeFleetAttributes(request);}
public CreateBuildResult createBuild(CreateBuildRequest request) {request = beforeClientExecution(request);return executeCreateBuild(request);}
public static FloatBuffer wrap(float[] array, int start, int floatCount) {Arrays.checkOffsetAndCount(array.length, start, floatCount);FloatBuffer buf = new ReadWriteFloatArrayBuffer(array);buf.position = start;buf.limit = start + floatCount;return buf;}
public String toString() {StringBuilder result = new StringBuilder();DateFormatTokenizer tokenizer = new DateFormatTokenizer(format);String token;while( ( token = tokenizer.getNextToken() ) != null ) {if( result.length() > 0 ) {result.append( ", " );}result.append("[").append(token).append("]");}return result.toString();}
public byte readByte() {return data[pos++];}
public CreateDatasetResult createDataset(CreateDatasetRequest request) {request = beforeClientExecution(request);return executeCreateDataset(request);}
public BytesRef next() {termOrd++;if (termOrd < terms.length) {return setTerm();} else {return null;}}
public static FontCharset valueOf(int value){return (value < 0 || value >= _table.length) ? null :_table[value];}
public static String escape(String s) {StringBuilder sb = new StringBuilder();for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'|| c == ':' || c == '^' || c == '[' || c == ']' || c == '\"'|| c == '{' || c == '}' || c == '~' || c == '*' || c == '?'|| c == '|' || c == '&' || c == '/') {sb.append('\\');}sb.append(c);}return sb.toString();}
public RejectVpcEndpointConnectionsResult rejectVpcEndpointConnections(RejectVpcEndpointConnectionsRequest request) {request = beforeClientExecution(request);return executeRejectVpcEndpointConnections(request);}
public V next() { return nextEntry().value; }
public ShingleAnalyzerWrapper(Analyzer delegate,int minShingleSize,int maxShingleSize,String tokenSeparator,boolean outputUnigrams,boolean outputUnigramsIfNoShingles,String fillerToken) {super(delegate.getReuseStrategy());this.delegate = delegate;if (maxShingleSize < 2) {throw new IllegalArgumentException("Max shingle size must be >= 2");}this.maxShingleSize = maxShingleSize;if (minShingleSize < 2) {throw new IllegalArgumentException("Min shingle size must be >= 2");}if (minShingleSize > maxShingleSize) {throw new IllegalArgumentException("Min shingle size must be <= max shingle size");}this.minShingleSize = minShingleSize;this.tokenSeparator = (tokenSeparator == null ? "" : tokenSeparator);this.outputUnigrams = outputUnigrams;this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;this.fillerToken = fillerToken;}
public CreateInterconnectResult createInterconnect(CreateInterconnectRequest request) {request = beforeClientExecution(request);return executeCreateInterconnect(request);}
public DeleteTrafficMirrorTargetResult deleteTrafficMirrorTarget(DeleteTrafficMirrorTargetRequest request) {request = beforeClientExecution(request);return executeDeleteTrafficMirrorTarget(request);}
public UpdateMonitoringScheduleResult updateMonitoringSchedule(UpdateMonitoringScheduleRequest request) {request = beforeClientExecution(request);return executeUpdateMonitoringSchedule(request);}
public DeleteGatewayGroupResult deleteGatewayGroup(DeleteGatewayGroupRequest request) {request = beforeClientExecution(request);return executeDeleteGatewayGroup(request);}
public ListStackSetOperationsResult listStackSetOperations(ListStackSetOperationsRequest request) {request = beforeClientExecution(request);return executeListStackSetOperations(request);}
public ListOfOutputs(Outputs<T> outputs) {this.outputs = outputs;}
public ExceedsLimit(long limit, long size) {this.limit = limit;this.size = size;}
public GetIndustryInfoRequest() {super("industry-brain", "2018-07-12", "GetIndustryInfo");setProtocol(ProtocolType.HTTPS);}
public CreateVpnGatewayRequest(String type) {setType(type);}
public int compareTo(PointTransitions other) {return point - other.point;}
public DeleteQueuedReservedInstancesResult deleteQueuedReservedInstances(DeleteQueuedReservedInstancesRequest request) {request = beforeClientExecution(request);return executeDeleteQueuedReservedInstances(request);}
public static final AbbreviatedObjectId fromString(String str) {if (str.length() > Constants.OBJECT_ID_STRING_LENGTH)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidId, str));final byte[] b = Constants.encodeASCII(str);return fromHexString(b, 0, b.length);}
public final int getByte(int index) {int w;switch (index >> 2) {case 0:w = w1;break;case 1:w = w2;break;case 2:w = w3;break;case 3:w = w4;break;case 4:w = w5;break;default:throw new ArrayIndexOutOfBoundsException(index);}return (w >>> (8 * (3 - (index & 3)))) & 0xff;}
public SpanFirstBuilder(SpanQueryBuilder factory) {this.factory = factory;}
public DescribeInstancesResult describeInstances(DescribeInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeInstances(request);}
public DescribeProjectsResult describeProjects(DescribeProjectsRequest request) {request = beforeClientExecution(request);return executeDescribeProjects(request);}
public static String toHexString(String s) {StringBuilder sb = new StringBuilder();for(int i=0;i<s.length();i++) {char ch = s.charAt(i);if (i > 0) {sb.append(' ');}if (ch < 128) {sb.append(ch);} else {if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {sb.append("H:");} else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {sb.append("L:");} else if (ch > UNI_SUR_LOW_END) {if (ch == 0xffff) {sb.append("F:");} else {sb.append("E:");}}sb.append("0x").append(Integer.toHexString(ch));}}return sb.toString();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = Math.log(d0) / LOG_10_TO_BASE_e;NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public long byteCount(int packedIntsVersion, int valueCount, int bitsPerValue) {assert bitsPerValue >= 0 && bitsPerValue <= 64 : bitsPerValue;return 8L * longCount(packedIntsVersion, valueCount, bitsPerValue);}
public Policy(String id, Collection<Statement> statements) {this(id);setStatements(statements);}
public FunctionQuery(ValueSource func) {this.func=func;}
public UpdateGameServerResult updateGameServer(UpdateGameServerRequest request) {request = beforeClientExecution(request);return executeUpdateGameServer(request);}
public GetDetectorVersionResult getDetectorVersion(GetDetectorVersionRequest request) {request = beforeClientExecution(request);return executeGetDetectorVersion(request);}
public void addField(String fieldName, String text, Analyzer analyzer) {if (fieldName == null)throw new IllegalArgumentException("fieldName must not be null");if (text == null)throw new IllegalArgumentException("text must not be null");if (analyzer == null)throw new IllegalArgumentException("analyzer must not be null");TokenStream stream = analyzer.tokenStream(fieldName, text);storeTerms(getInfo(fieldName, defaultFieldType), stream,analyzer.getPositionIncrementGap(fieldName), analyzer.getOffsetGap(fieldName));}
public boolean isEnabled(String component) {return false;}
public long next() {final long idx = 1 + (ord / indexInterval);if (idx >= fieldIndex.numIndexTerms) {return -1;}ord += indexInterval;final long offset = fieldIndex.termOffsets.get(idx);final int length = (int) (fieldIndex.termOffsets.get(1+idx) - offset);termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(idx);}
public DisassociateMemberFromGroupResult disassociateMemberFromGroup(DisassociateMemberFromGroupRequest request) {request = beforeClientExecution(request);return executeDisassociateMemberFromGroup(request);}
public UnmergedPathException(DirCacheEntry dce) {super(MessageFormat.format(JGitText.get().unmergedPath, dce.getPathString()));entry = dce;}
public Name(NameRecord nameRecord, int index) {_nameRecord = nameRecord;_index = index;}
public void add(ET object) {if (expectedModCount == list.modCount) {Link<ET> next = link.next;Link<ET> newLink = new Link<ET>(object, link, next);link.next = newLink;next.previous = newLink;link = newLink;lastLink = null;pos++;expectedModCount++;list.size++;list.modCount++;} else {throw new ConcurrentModificationException();}}
public final ByteOrder order() {return order;}
public ValueFiller getValueFiller() {return new ValueFiller() {private final MutableValueStr mval = new MutableValueStr();@Override
public SubmoduleInitCommand addPath(String path) {paths.add(path);return this;}
public DeleteInterconnectResult deleteInterconnect(DeleteInterconnectRequest request) {request = beforeClientExecution(request);return executeDeleteInterconnect(request);}
public Credential(String keyId, String secret) {this.accessKeyId = keyId;this.accessSecret = secret;this.refreshDate = new Date();}
public DeleteRepoWebhookRequest() {super("cr", "2016-06-07", "DeleteRepoWebhook", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]");setMethod(MethodType.DELETE);}
public DeleteDeviceResult deleteDevice(DeleteDeviceRequest request) {request = beforeClientExecution(request);return executeDeleteDevice(request);}
public CreateEventBusResult createEventBus(CreateEventBusRequest request) {request = beforeClientExecution(request);return executeCreateEventBus(request);}
public boolean isEnabled() {return enabled;}
public boolean isSigned() {return signed;}
public DeleteRuleVersionResult deleteRuleVersion(DeleteRuleVersionRequest request) {request = beforeClientExecution(request);return executeDeleteRuleVersion(request);}
public long seek(long ord) {throw new UnsupportedOperationException();}
public CreateAppCookieStickinessPolicyRequest(String loadBalancerName, String policyName, String cookieName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);setCookieName(cookieName);}
public BlameCommand setDiffAlgorithm(DiffAlgorithm diffAlgorithm) {this.diffAlgorithm = diffAlgorithm;return this;}
public DisassociateSkillFromUsersResult disassociateSkillFromUsers(DisassociateSkillFromUsersRequest request) {request = beforeClientExecution(request);return executeDisassociateSkillFromUsers(request);}
public PatchIdDiffFormatter() {super(new DigestOutputStream(NullOutputStream.INSTANCE,Constants.newMessageDigest()));digest = ((DigestOutputStream) getOutputStream()).getMessageDigest();}
public SendMessageResult sendMessage(SendMessageRequest request) {request = beforeClientExecution(request);return executeSendMessage(request);}
public static ParsePathType pathType(Path f) {int pathLength = 0;while (f != null && f.getFileName() != null && ++pathLength < MAX_PATH_LENGTH) {ParsePathType ppt = pathName2Type.get(f.getFileName().toString().toUpperCase(Locale.ROOT));if (ppt!=null) {return ppt;}f = f.getParent();}return DEFAULT_PATH_TYPE;}
public static long estimateIndexSize(int sourceLength) {return sourceLength + (sourceLength * 3 / 4);}
public UpdateDashboardPermissionsResult updateDashboardPermissions(UpdateDashboardPermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDashboardPermissions(request);}
public String formatAsString() {switch (_cellType) {case NUMERIC:return String.valueOf(_numberValue);case STRING:return '"' + _textValue + '"';case BOOLEAN:return _booleanValue ? "TRUE" : "FALSE";case ERROR:return ErrorEval.getText(_errorCode);default:return "<error unexpected cell type " + _cellType + ">";}}
public final void add(RevFlagSet set) {flags |= set.mask;}
public URIish setHost(String n) {final URIish r = new URIish(this);r.host = n;return r;}
public void clearFormulaEntry() {CellCacheEntry[] usedCells = _sensitiveInputCells;if (usedCells != null) {for (int i = usedCells.length-1; i>=0; i--) {usedCells[i].clearConsumingCell(this);}}_sensitiveInputCells = null;clearValue();}
public GetDiskSnapshotResult getDiskSnapshot(GetDiskSnapshotRequest request) {request = beforeClientExecution(request);return executeGetDiskSnapshot(request);}
public DescribeIpv6PoolsResult describeIpv6Pools(DescribeIpv6PoolsRequest request) {request = beforeClientExecution(request);return executeDescribeIpv6Pools(request);}
public UpdateDetectorResult updateDetector(UpdateDetectorRequest request) {request = beforeClientExecution(request);return executeUpdateDetector(request);}
public DeleteInstanceResult deleteInstance(DeleteInstanceRequest request) {request = beforeClientExecution(request);return executeDeleteInstance(request);}
public ListThreatIntelSetsResult listThreatIntelSets(ListThreatIntelSetsRequest request) {request = beforeClientExecution(request);return executeListThreatIntelSets(request);}
public ExportClientVpnClientConfigurationResult exportClientVpnClientConfiguration(ExportClientVpnClientConfigurationRequest request) {request = beforeClientExecution(request);return executeExportClientVpnClientConfiguration(request);}
public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.max(currentPayloadScore, currentScore);}}
public CreateDBParameterGroupRequest(String dBParameterGroupName, String dBParameterGroupFamily, String description) {setDBParameterGroupName(dBParameterGroupName);setDBParameterGroupFamily(dBParameterGroupFamily);setDescription(description);}
public void add(int forwardId, int backwardId, int cost) {int offset = (backwardId * forwardSize + forwardId) * 2;costs.putShort(offset, (short) cost);}
public boolean isPeeled() {return true;}
public CreateTransitVirtualInterfaceResult createTransitVirtualInterface(CreateTransitVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeCreateTransitVirtualInterface(request);}
public BatchDetectSentimentResult batchDetectSentiment(BatchDetectSentimentRequest request) {request = beforeClientExecution(request);return executeBatchDetectSentiment(request);}
public boolean equals(Object o) {if ( o==null || !(o instanceof Interval) ) {return false;}Interval other = (Interval)o;return this.a==other.a && this.b==other.b;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[USESELFS]\n");buffer.append("    .options = ").append(HexDump.shortToHex(_options)).append("\n");buffer.append("[/USESELFS]\n");return buffer.toString();}
public SmallDocSet union(SmallDocSet other) {SmallDocSet bigger;SmallDocSet smaller;if (other.intSet.size() > this.intSet.size()) {bigger = other;smaller = this;} else {bigger = this;smaller = other;}for (int v : smaller.intSet.keys) {if (v == smaller.intSet.emptyVal)continue;bigger.set(v);}return bigger;}
public boolean equals(Object o) {if (o instanceof Edit) {final Edit e = (Edit) o;return this.beginA == e.beginA && this.endA == e.endA&& this.beginB == e.beginB && this.endB == e.endB;}return false;}
public int getBigFileThreshold() {return bigFileThreshold;}
public String toString() {final StringBuilder r = new StringBuilder();r.append(getSeverity().name().toLowerCase(Locale.ROOT));r.append(": at offset "); r.append(getOffset());r.append(": "); r.append(getMessage());r.append("\n"); r.append("  in "); r.append(getLineText());return r.toString();}
public IntBuffer slice() {return new ReadWriteIntArrayBuffer(remaining(), backingArray, offset + position);}
public DeleteApplicationResult deleteApplication(DeleteApplicationRequest request) {request = beforeClientExecution(request);return executeDeleteApplication(request);}
public TokenOffsetPayloadTokenFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public boolean equals(Object o) {if (this.getClass() != o.getClass()) return false;MultiFunction other = (MultiFunction)o;return this.sources.equals(other.sources);}
public SpanQuery getSpanQuery(Element e) throws ParserException {SpanQueryBuilder builder = builders.get(e.getNodeName());if (builder == null) {throw new ParserException("No SpanQueryObjectBuilder defined for node " + e.getNodeName());}return builder.getSpanQuery(e);}
public void incRef() {final int rc = refCount.incrementAndGet();assert rc > 1: "seg=" + info;}
public String formula() {return _formula;}
public T removeTop() {T currentTop = top;if (iter.hasNext()) {top = iter.next();} else {top = null;}return currentTop;}
public ObjectId getExpectedOldObjectId() {return expValue;}
public DefaultPassageFormatter(String preTag, String postTag, String ellipsis, boolean escape) {if (preTag == null || postTag == null || ellipsis == null) {throw new NullPointerException();}this.preTag = preTag;this.postTag = postTag;this.ellipsis = ellipsis;this.escape = escape;}
public UpdateImagePermissionsResult updateImagePermissions(UpdateImagePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateImagePermissions(request);}
public ListCustomVerificationEmailTemplatesResult listCustomVerificationEmailTemplates(ListCustomVerificationEmailTemplatesRequest request) {request = beforeClientExecution(request);return executeListCustomVerificationEmailTemplates(request);}
public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {return IoBridge.read(fd, buffer, byteOffset, byteCount);}
public StringCharacterIterator(String value, int location) {string = value;start = 0;end = string.length();if (location < 0 || location > end) {throw new IllegalArgumentException();}offset = location;}
public DeleteQueryLoggingConfigResult deleteQueryLoggingConfig(DeleteQueryLoggingConfigRequest request) {request = beforeClientExecution(request);return executeDeleteQueryLoggingConfig(request);}
public InvalidPatternException(String message, String pattern) {super(message);this.pattern = pattern;}
public int resolveNameXIx(int refIndex, int definedNameIndex) {int extBookIndex = _externSheetRecord.getExtbookIndexFromRefIndex(refIndex);return _externalBookBlocks[extBookIndex].getNameIx(definedNameIndex);}
public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;FuzzyQuery other = (FuzzyQuery) obj;if (maxEdits != other.maxEdits)return false;if (prefixLength != other.prefixLength)return false;if (maxExpansions != other.maxExpansions)return false;if (transpositions != other.transpositions)return false;if (term == null) {if (other.term != null)return false;} else if (!term.equals(other.term))return false;return true;}
public Term getLuceneTerm(String fieldName) {return new Term(fieldName, getTermText());}
public static MessageDigest newMessageDigest() {try {return MessageDigest.getInstance(LONG_HASH_FUNCTION);} catch (NoSuchAlgorithmException nsae) {throw new RuntimeException(MessageFormat.format(LfsText.get().requiredHashFunctionNotAvailable,LONG_HASH_FUNCTION), nsae);}}
public void reset() {synchronized (lock) {count = 0;}}
public HyphenationTree() {stoplist = new HashMap<>(23); classmap = new TernaryTree();vspace = new ByteVector();vspace.alloc(1); }
public DescribeCollectionResult describeCollection(DescribeCollectionRequest request) {request = beforeClientExecution(request);return executeDescribeCollection(request);}
public synchronized StringBuffer insert(int index, char[] chars) {insert0(index, chars);return this;}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | (byte2 >>> 4);final long byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);final long byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}
public GetSearchRequest() {super("cr", "2016-06-07", "GetSearch", "cr");setUriPattern("/search-delete");setMethod(MethodType.GET);}
public void consume() {boolean skipEofCheck;if (p >= 0) {if (fetchedEOF) {skipEofCheck = p < tokens.size() - 1;}else {skipEofCheck = p < tokens.size();}}else {skipEofCheck = false;}if (!skipEofCheck && LA(1) == EOF) {throw new IllegalStateException("cannot consume EOF");}if (sync(p + 1)) {p = adjustSeekIndex(p + 1);}}
public CharBlockArray append(String s) {int remain = s.length();int offset = 0;while (remain > 0) {if (this.current.length == this.blockSize) {addBlock();}int toCopy = remain;int remainingInBlock = this.blockSize - this.current.length;if (remainingInBlock < toCopy) {toCopy = remainingInBlock;}s.getChars(offset, offset + toCopy, this.current.chars, this.current.length);offset += toCopy;remain -= toCopy;this.current.length += toCopy;}this.length += s.length();return this;}
public ConfigureHealthCheckResult configureHealthCheck(ConfigureHealthCheckRequest request) {request = beforeClientExecution(request);return executeConfigureHealthCheck(request);}
public CommonRoaRequest(String product) {super(product);setSysAcceptFormat(FormatType.JSON);}
public static int strlen(char[] a) {return strlen(a, 0);}
public void setReaderValue(Reader value) {if (!(fieldsData instanceof Reader)) {throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to Reader");}fieldsData = value;}
public DeleteUsagePlanResult deleteUsagePlan(DeleteUsagePlanRequest request) {request = beforeClientExecution(request);return executeDeleteUsagePlan(request);}
public DeleteThreatIntelSetResult deleteThreatIntelSet(DeleteThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeDeleteThreatIntelSet(request);}
public DescribePlacementGroupsResult describePlacementGroups(DescribePlacementGroupsRequest request) {request = beforeClientExecution(request);return executeDescribePlacementGroups(request);}
public EnableAddOnResult enableAddOn(EnableAddOnRequest request) {request = beforeClientExecution(request);return executeEnableAddOn(request);}
public TreeFilter clone() {final TreeFilter[] s = new TreeFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}
public ListTagsForResourceOutput listTagsForResource(ListTagsForResourceRequest request) {request = beforeClientExecution(request);return executeListTagsForResource(request);}
public WeightedSpanTerm getWeightedSpanTerm(String token) {return fieldWeightedSpanTerms.get(token);}
public Slope() {func = new LinearRegressionFunction(FUNCTION.SLOPE);}
public String toStringUnquoted() {return getTruncated();}
public UpdateSubnetGroupResult updateSubnetGroup(UpdateSubnetGroupRequest request) {request = beforeClientExecution(request);return executeUpdateSubnetGroup(request);}
public void remove(int index) {checkIndex(index);_cfHeaders.remove(index);}
public static long pop_intersect(long[] arr1, long[] arr2, int wordOffset, int numWords) {long popCount = 0;for (int i = wordOffset, end = wordOffset + numWords; i < end; ++i) {popCount += Long.bitCount(arr1[i] & arr2[i]);}return popCount;}
public boolean shouldBeRecursive() {return true;}
public JapaneseBaseFormFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public void visitContainedRecords(RecordVisitor rv) {rv.visitRecord(header);for (CFRuleBase rule : rules) {rv.visitRecord(rule);}}
public void dumpDrawingGroupRecords(boolean fat) {DrawingGroupRecord r = (DrawingGroupRecord) workbook.findFirstRecordBySid( DrawingGroupRecord.sid );if (r == null) {return;}r.decode();List<EscherRecord> escherRecords = r.getEscherRecords();PrintWriter w = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()));for (EscherRecord escherRecord : escherRecords) {if (fat) {System.out.println(escherRecord);} else {escherRecord.display(w, 0);}}w.flush();}
public int getLinesDeleted() {return nDeleted;}
public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(" [");sb.append(_offset).append("...").append(getLastIndex());sb.append("]");return sb.toString();}
public int[] compact() {assert bytesStart != null : "bytesStart is null - not initialized";int upto = 0;for (int i = 0; i < hashSize; i++) {if (ids[i] != -1) {if (upto < i) {ids[upto] = ids[i];ids[i] = -1;}upto++;}}assert upto == count;lastCount = count;return ids;}
public AccessKey(String userName, String accessKeyId, StatusType status, String secretAccessKey) {setUserName(userName);setAccessKeyId(accessKeyId);setStatus(status.toString());setSecretAccessKey(secretAccessKey);}
public GetDomainResult getDomain(GetDomainRequest request) {request = beforeClientExecution(request);return executeGetDomain(request);}
public ListTypeRegistrationsResult listTypeRegistrations(ListTypeRegistrationsRequest request) {request = beforeClientExecution(request);return executeListTypeRegistrations(request);}
public boolean isSymbolic() {return false;}
public DeleteTableRequest(String tableName) {setTableName(tableName);}
public UpdateAccountSettingsResult updateAccountSettings(UpdateAccountSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateAccountSettings(request);}
public SearcherTracker(IndexSearcher searcher) {this.searcher = searcher;version = ((DirectoryReader) searcher.getIndexReader()).getVersion();searcher.getIndexReader().incRef();recordTimeSec = System.nanoTime() / NANOS_PER_SEC;}
public Principal(String accountId) {this("AWS", accountId);if (accountId == null) {throw new IllegalArgumentException("Null AWS account ID specified");}}
public V setValue(V object) {V result = value;value = object;return result;}
public ListMomentPhotosRequest() {super("CloudPhoto", "2017-07-11", "ListMomentPhotos", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public boolean contains(Object o) {return map.containsKey(o);}
public LinearOffsetRange(int offset, int length) {if(length == 0) {throw new RuntimeException("length may not be zero");}_offset = offset;_length = length;}
public ListPipelinesResult listPipelines() {return listPipelines(new ListPipelinesRequest());}
public static boolean indexExists(Directory directory) throws IOException {String[] files = directory.listAll();String prefix = IndexFileNames.SEGMENTS + "_";for(String file : files) {if (file.startsWith(prefix)) {return true;}}return false;}
public DisassociateFromMasterAccountResult disassociateFromMasterAccount(DisassociateFromMasterAccountRequest request) {request = beforeClientExecution(request);return executeDisassociateFromMasterAccount(request);}
public GetVoiceTemplateResult getVoiceTemplate(GetVoiceTemplateRequest request) {request = beforeClientExecution(request);return executeGetVoiceTemplate(request);}
public long ramBytesUsed() {return RamUsageEstimator.sizeOf(filter.getBits());}
public RejectInvitationResult rejectInvitation(RejectInvitationRequest request) {request = beforeClientExecution(request);return executeRejectInvitation(request);}
public RejectQualificationRequestResult rejectQualificationRequest(RejectQualificationRequestRequest request) {request = beforeClientExecution(request);return executeRejectQualificationRequest(request);}
public final long[] array() {return protectedArray();}
public void writeChars(String value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeChars(value);}
public void finish(FieldInfos fis, int numDocs) throws IOException {if (numDocsWritten != numDocs) {throw new RuntimeException("mergeVectors produced an invalid result: mergedDocs is " + numDocs + " but vec numDocs is " + numDocsWritten + " file=" + out.toString() + "; now aborting this merge to prevent index corruption");}write(END);newLine();SimpleTextUtil.writeChecksum(out, scratch);}
public void readBytes(byte[] b, int offset, int len) throws IOException {while (len > 0) {final int cnt = is.read(b, offset, len);if (cnt < 0) {throw new EOFException();}len -= cnt;offset += cnt;}}
public long ramBytesUsed() {long ramBytesUsed = BASE_RAM_BYTES_USED;ramBytesUsed += fields.size() * 2L * RamUsageEstimator.NUM_BYTES_OBJECT_REF;ramBytesUsed += formats.size() * 2L * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for(Map.Entry<String,FieldsProducer> entry: formats.entrySet()) {ramBytesUsed += entry.getValue().ramBytesUsed();}return ramBytesUsed;}
public boolean equals(Object obj) {if (this == obj) return true;if (null == obj || getClass() != obj.getClass()) return false;JaroWinklerDistance o = (JaroWinklerDistance)obj;return (Float.floatToIntBits(o.threshold)== Float.floatToIntBits(this.threshold));}
public BatchRefUpdate addCommand(ReceiveCommand... cmd) {return addCommand(Arrays.asList(cmd));}
public ArrayPredictionContext(SingletonPredictionContext a) {this(new PredictionContext[] {a.parent}, new int[] {a.returnState});}
public void write(byte[] buf, int off, int len) throws IOException {try {beginWrite();dst.write(buf, off, len);} catch (InterruptedIOException e) {throw writeTimedOut(e);} finally {endWrite();}}
public DeregisterGameServerResult deregisterGameServer(DeregisterGameServerRequest request) {request = beforeClientExecution(request);return executeDeregisterGameServer(request);}
public void write(byte[] b) {try {super.write(b);} catch (IOException e) {throw new RuntimeException(e);}}
public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return symbol >= from && symbol <= to;}
public void finish(FieldInfos fis, int numDocs) throws IOException {if (numBufferedDocs > 0) {flush();numDirtyChunks++; } else {assert bufferedDocs.size() == 0;}if (docBase != numDocs) {throw new RuntimeException("Wrote " + docBase + " docs, finish called with numDocs=" + numDocs);}indexWriter.finish(numDocs, fieldsStream.getFilePointer());fieldsStream.writeVLong(numChunks);fieldsStream.writeVLong(numDirtyChunks);CodecUtil.writeFooter(fieldsStream);assert bufferedDocs.size() == 0;}
public Iterator<String> iterator() {final Iterator<String> i = names.values().iterator();return new Iterator<String>() {@Override
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[DEFAULTCOLWIDTH]\n");buffer.append("    .colwidth      = ").append(Integer.toHexString(getColWidth())).append("\n");buffer.append("[/DEFAULTCOLWIDTH]\n");return buffer.toString();}
public DataValidityTable(RecordStream rs) {_headerRec = (DVALRecord) rs.getNext();List<DVRecord> temp = new ArrayList<>();while (rs.peekNextClass() == DVRecord.class) {temp.add((DVRecord) rs.getNext());}_validationList = temp;}
public DeleteRoomMembershipResult deleteRoomMembership(DeleteRoomMembershipRequest request) {request = beforeClientExecution(request);return executeDeleteRoomMembership(request);}
public QueryParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}
public RebootDBInstanceRequest(String dBInstanceIdentifier) {setDBInstanceIdentifier(dBInstanceIdentifier);}
public CreateAutoScalingGroupResult createAutoScalingGroup(CreateAutoScalingGroupRequest request) {request = beforeClientExecution(request);return executeCreateAutoScalingGroup(request);}
public K floorKey(K key) {Entry<K, V> entry = findBounded(key, FLOOR);return entry != null ? entry.getKey() : null;}
public boolean include(RevWalk walker, RevCommit c) {return true;}
public boolean isValidating() {return getFeature (XmlPullParser.FEATURE_VALIDATION);}
public synchronized void write(int oneByte) {if (out == null) {setError();return;}try {out.write(oneByte);int b = oneByte & 0xFF;boolean isNewline = b == 0x0A || b == 0x15;if (autoFlush && isNewline) {flush();}} catch (IOException e) {setError();}}
public UpdateScalingParametersResult updateScalingParameters(UpdateScalingParametersRequest request) {request = beforeClientExecution(request);return executeUpdateScalingParameters(request);}
public ModifyDBClusterParameterGroupResult modifyDBClusterParameterGroup(ModifyDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyDBClusterParameterGroup(request);}
public GetOperationsForResourceResult getOperationsForResource(GetOperationsForResourceRequest request) {request = beforeClientExecution(request);return executeGetOperationsForResource(request);}
public NLPTokenizerOp(TokenizerModel model) {tokenizer = new TokenizerME(model);}
public StartImageScanRequest() {super("cr", "2016-06-07", "StartImageScan", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/tags/[Tag]/scan");setMethod(MethodType.PUT);}
public UpdateFleetResult updateFleet(UpdateFleetRequest request) {request = beforeClientExecution(request);return executeUpdateFleet(request);}
public Editable newEditable(CharSequence source) {return new CalculatorEditable(source, mLogic);}
public static TreeFilter createFromStrings(String... paths) {if (paths.length == 0)throw new IllegalArgumentException(JGitText.get().atLeastOnePathIsRequired);final int length = paths.length;final PathFilter[] p = new PathFilter[length];for (int i = 0; i < length; i++)p[i] = PathFilter.create(paths[i]);return create(p);}
public DescribeHostedConnectionsResult describeHostedConnections(DescribeHostedConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeHostedConnections(request);}
public RejectTransitGatewayPeeringAttachmentResult rejectTransitGatewayPeeringAttachment(RejectTransitGatewayPeeringAttachmentRequest request) {request = beforeClientExecution(request);return executeRejectTransitGatewayPeeringAttachment(request);}
public static double toPoints(long emu){return (double)emu/EMU_PER_POINT;}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {return arg1;}
public final BytesRef getBinaryValue(String name) {for (IndexableField field : fields) {if (field.name().equals(name)) {final BytesRef bytes = field.binaryValue();if (bytes != null) {return bytes;}}}return null;}
public CRNBlock(RecordStream rs) {_countRecord = (CRNCountRecord) rs.getNext();int nCRNs = _countRecord.getNumberOfCRNs();CRNRecord[] crns = new CRNRecord[nCRNs];for (int i = 0; i < crns.length; i++) {crns[i] = (CRNRecord) rs.getNext();}_crns = crns;}
public int get(int index, long[] arr, int off, int len) {return current.get(index, arr, off, len);}
public LooseRef peel(ObjectIdRef newLeaf) {return this;}
public UpdateModelVersionResult updateModelVersion(UpdateModelVersionRequest request) {request = beforeClientExecution(request);return executeUpdateModelVersion(request);}
public Builder() {PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);scratchInts = new IntsRefBuilder();}
public boolean stem() {int v_1 = cursor;r_mark_regions();cursor = v_1;limit_backward = cursor;cursor = limit;int v_2 = limit - cursor;r_main_suffix();cursor = limit - v_2;int v_3 = limit - cursor;r_consonant_pair();cursor = limit - v_3;int v_4 = limit - cursor;r_other_suffix();cursor = limit - v_4;cursor = limit_backward;return true;}
public int describeContents() {return 0;}
public FetchConnection openFetch() throws TransportException {if (src == null)throw new TransportException(uri, JGitText.get().onlyOneFetchSupported);try {return new BundleFetchConnection(this, src);} finally {src = null;}}
public DeleteWorkGroupResult deleteWorkGroup(DeleteWorkGroupRequest request) {request = beforeClientExecution(request);return executeDeleteWorkGroup(request);}
public GetApiResult getApi(GetApiRequest request) {request = beforeClientExecution(request);return executeGetApi(request);}
public LongBuffer slice() {return new ReadOnlyLongArrayBuffer(remaining(), backingArray, offset + position);}
public String toString() {String opName = getClass().getName();int $index = opName.indexOf('$');opName = opName.substring($index+1, opName.length());return "<"+opName+"@"+tokens.get(index)+":\""+text+"\">";}
public String toString() {return "Action[" + token + "]";}
public static EvaluationException invalidRef() {return new EvaluationException(ErrorEval.REF_INVALID);}
public Iterator<Entry> getEntries() {return new FilteringIterator();}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(" [FUTURE HEADER]\n");buffer.append("   Type " + recordType);buffer.append("   Flags " + grbitFrt);buffer.append(" [/FUTURE HEADER]\n");return buffer.toString();}
public void copy(MutableValue source) {MutableValueStr s = (MutableValueStr) source;exists = s.exists;value.copyBytes(s.value);}
public ReaderSlice(int start, int length, int readerIndex) {this.start = start;this.length = length;this.readerIndex = readerIndex;}
public AddTagsResult addTags(AddTagsRequest request) {request = beforeClientExecution(request);return executeAddTags(request);}
public static URI create(String uri) {try {return new URI(uri);} catch (URISyntaxException e) {throw new IllegalArgumentException(e.getMessage());}}
public UpdateConfigurationSetTrackingOptionsResult updateConfigurationSetTrackingOptions(UpdateConfigurationSetTrackingOptionsRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetTrackingOptions(request);}
public void recycleByteBlocks(byte[][] blocks, int start, int end) {bytesUsed.addAndGet(-((end-start)* blockSize));for (int i = start; i < end; i++) {blocks[i] = null;}}
public DoubleBuffer compact() {throw new ReadOnlyBufferException();}
public GetVoiceConnectorStreamingConfigurationResult getVoiceConnectorStreamingConfiguration(GetVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorStreamingConfiguration(request);}
public boolean hasNext() {return pos + 1 < size();}
public double getRKNumberAt(int coffset) {return RKUtil.decodeNumber(field_3_rks[coffset].rk);}
public ReimportApiResult reimportApi(ReimportApiRequest request) {request = beforeClientExecution(request);return executeReimportApi(request);}
public boolean hasNext() {return link.previous != list.voidLink;}
public void fill(BytesRef b, long start) {final int index = (int) (start >> blockBits);final int offset = (int) (start & blockMask);final byte[] block = b.bytes = blocks[index];if ((block[offset] & 128) == 0) {b.length = block[offset];b.offset = offset+1;} else {b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);b.offset = offset+2;assert b.length > 0;}}
public void trimToSize() {if (n < array.length) {byte[] aux = new byte[n];System.arraycopy(array, 0, aux, 0, n);array = aux;}}
public SubmoduleUpdateCommand submoduleUpdate() {return new SubmoduleUpdateCommand(repo);}
public static ShortBuffer wrap(short[] array, int start, int shortCount) {Arrays.checkOffsetAndCount(array.length, start, shortCount);ShortBuffer buf = new ReadWriteShortArrayBuffer(array);buf.position = start;buf.limit = start + shortCount;return buf;}
public GetVpcLinksResult getVpcLinks(GetVpcLinksRequest request) {request = beforeClientExecution(request);return executeGetVpcLinks(request);}
public RemoveResourcePermissionResult removeResourcePermission(RemoveResourcePermissionRequest request) {request = beforeClientExecution(request);return executeRemoveResourcePermission(request);}
public ListIndexResult listIndex(ListIndexRequest request) {request = beforeClientExecution(request);return executeListIndex(request);}
public List<Integer> toList() {List<Integer> values = new ArrayList<Integer>();int n = intervals.size();for (int i = 0; i < n; i++) {Interval I = intervals.get(i);int a = I.a;int b = I.b;for (int v=a; v<=b; v++) {values.add(v);}}return values;}
public CreateCustomerGatewayRequest(GatewayType type, String publicIp, Integer bgpAsn) {setType(type.toString());setPublicIp(publicIp);setBgpAsn(bgpAsn);}
public int getWeekNo(Calendar cal, int weekStartOn) {if (weekStartOn == 1) {cal.setFirstDayOfWeek(Calendar.SUNDAY);} else {cal.setFirstDayOfWeek(Calendar.MONDAY);}return cal.get(Calendar.WEEK_OF_YEAR);}
public String toString() {String s = "o:"+offset+" p:"+position+" c:"+count;if (rptGroup >=0 ) {s += " rpt:"+rptGroup+",i"+rptInd;}return s;}
@Override public ListIterator<E> listIterator() {return listIterator(0);}
public GetUserEndpointsResult getUserEndpoints(GetUserEndpointsRequest request) {request = beforeClientExecution(request);return executeGetUserEndpoints(request);}
public UAX29URLEmailTokenizerImpl(java.io.Reader in) {this.zzReader = in;}
public ResetCommand addPath(String path) {if (mode != null)throw new JGitInternalException(MessageFormat.format(JGitText.get().illegalCombinationOfArguments, "<paths>...", "[--mixed | --soft | --hard]")); filepaths.add(path);return this;}
public org.apache.poi.hssf.record.Record findNextRecordBySid(short sid, int pos) {int matches = 0;for (org.apache.poi.hssf.record.Record record : records.getRecords() ) {if (record.getSid() == sid && matches++ == pos) {return record;}}return null;}
public int[] toArray() {return toIntegerList().toArray();}
public GetDomainNamesResult getDomainNames(GetDomainNamesRequest request) {request = beforeClientExecution(request);return executeGetDomainNames(request);}
public UpdateTemplateAliasResult updateTemplateAlias(UpdateTemplateAliasRequest request) {request = beforeClientExecution(request);return executeUpdateTemplateAlias(request);}
public String getReceivePack() {return receivePack;}
public synchronized Set<K> keySet() {Set<K> ks = keySet;return (ks != null) ? ks : (keySet = new KeySet());}
public AssociateAddressRequest(String instanceId, String publicIp) {setInstanceId(instanceId);setPublicIp(publicIp);}
public static CharBuffer wrap(CharSequence chseq) {return new CharSequenceAdapter(chseq);}
public void reset() {reset(true, true);}
public static double nChooseK(int n, int k) {double d = 1;if (n<0 || k<0 || n<k) {d= Double.NaN;}else {int minnk = Math.min(n-k, k);int maxnk = Math.max(n-k, k);for (int i=maxnk; i<n; i++) {d *= i+1;}d /= factorial(minnk);}return d;}
public static String toHex(String value) {return (value == null || value.length() == 0)? "[]": toHex(value.getBytes(LocaleUtil.CHARSET_1252));}
public String getAccessSecret() {return getCredentials().getAccessKeySecret();}
public static BoundSheetRecord[] orderByBofPosition(List<BoundSheetRecord> boundSheetRecords) {BoundSheetRecord[] bsrs = new BoundSheetRecord[boundSheetRecords.size()];boundSheetRecords.toArray(bsrs);Arrays.sort(bsrs, BoundSheetRecord::compareRecords);return bsrs;}
public DeleteNotebookInstanceResult deleteNotebookInstance(DeleteNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeDeleteNotebookInstance(request);}
public DTDHandler getDTDHandler () {return (theDTDHandler == this) ? null : theDTDHandler;}
public static File resolve(File directory, FS fs) {if (isGitRepository(directory, fs))return directory;if (isGitRepository(new File(directory, Constants.DOT_GIT), fs))return new File(directory, Constants.DOT_GIT);final String name = directory.getName();final File parent = directory.getParentFile();if (isGitRepository(new File(parent, name + Constants.DOT_GIT_EXT), fs))return new File(parent, name + Constants.DOT_GIT_EXT);return null;}
public WorkflowTypeInfos listWorkflowTypes(ListWorkflowTypesRequest request) {request = beforeClientExecution(request);return executeListWorkflowTypes(request);}
public Snapshot copyClusterSnapshot(CopyClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCopyClusterSnapshot(request);}
public Ptg[] getFormulaTokens(EvaluationCell evalCell) {HSSFCell cell = ((HSSFEvaluationCell)evalCell).getHSSFCell();FormulaRecordAggregate fra = (FormulaRecordAggregate) cell.getCellValueRecord();return fra.getFormulaTokens();}
public DisassociateVPCFromHostedZoneResult disassociateVPCFromHostedZone(DisassociateVPCFromHostedZoneRequest request) {request = beforeClientExecution(request);return executeDisassociateVPCFromHostedZone(request);}
public StringBuffer insert(int index, int i) {return insert(index, Integer.toString(i));}
public void setBytesValue(BytesRef value) {if (!(fieldsData instanceof BytesRef)) {throw new IllegalArgumentException("cannot change value type from " + fieldsData.getClass().getSimpleName() + " to BytesRef");}if (type.indexOptions() != IndexOptions.NONE) {throw new IllegalArgumentException("cannot set a BytesRef value on an indexed field");}if (value == null) {throw new IllegalArgumentException("value must not be null");}fieldsData = value;}
public boolean equals( Object o ) {return o instanceof GermanStemmer;}
public UntagMeetingResult untagMeeting(UntagMeetingRequest request) {request = beforeClientExecution(request);return executeUntagMeeting(request);}
public String toString() {return "[PRECISION]\n" +"    .precision       = " + getFullPrecision() +"\n" +"[/PRECISION]\n";}
static public double pmt(double r, int nper, double pv, double fv) {return pmt(r, nper, pv, fv, 0);}
public ValueEval getArea3DEval(Area3DPxg aptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(aptg.getSheetName(), aptg.getLastSheetName(), aptg.getExternalWorkbookNumber());return new LazyAreaEval(aptg.getFirstRow(), aptg.getFirstColumn(),aptg.getLastRow(), aptg.getLastColumn(), sre);}
public boolean equals(Object obj) {if (obj instanceof Rect) {Rect rhs = (Rect) obj;if (isValid() != rhs.isValid()) {return false;}if (!isValid() && !rhs.isValid()) {return true;}return this.x == rhs.x && this.y == rhs.y && this.w == rhs.w && this.h == rhs.h;}return false;}
public final boolean containsColumn(int col) {return _firstColumn <= col && _lastColumn >= col;}
public RunJobFlowRequest(String name, JobFlowInstancesConfig instances) {setName(name);setInstances(instances);}
public String toString() {if (noBreak == null && postBreak == null && preBreak != null&& preBreak.equals("-")) {return "-";}StringBuilder res = new StringBuilder("{");res.append(preBreak);res.append("}{");res.append(postBreak);res.append("}{");res.append(noBreak);res.append('}');return res.toString();}
public ListPublishedSchemaArnsResult listPublishedSchemaArns(ListPublishedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListPublishedSchemaArns(request);}
public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}
public DescribeNetworkAclsResult describeNetworkAcls() {return describeNetworkAcls(new DescribeNetworkAclsRequest());}
public PushCommand add(Ref ref) {refSpecs.add(new RefSpec(ref.getLeaf().getName()));return this;}
public DeleteVoiceConnectorGroupResult deleteVoiceConnectorGroup(DeleteVoiceConnectorGroupRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorGroup(request);}
public IntervalSet(List<Interval> intervals) {this.intervals = intervals;}
public IteratorQueue(Iterator<T> iter) {this.iter = iter;T removeTop = removeTop();assert removeTop == null;}
public static long[] grow(long[] array) {return grow(array, 1 + array.length);}
public StemmerOverrideMap(FST<BytesRef> fst, boolean ignoreCase) {this.fst = fst;this.ignoreCase = ignoreCase;}
public DeleteAdmChannelResult deleteAdmChannel(DeleteAdmChannelRequest request) {request = beforeClientExecution(request);return executeDeleteAdmChannel(request);}
public SetSubscriptionAttributesRequest(String subscriptionArn, String attributeName, String attributeValue) {setSubscriptionArn(subscriptionArn);setAttributeName(attributeName);setAttributeValue(attributeValue);}
public void unsafeWrite(char b) {buf[len++] = b;}
@Override public boolean remove(Object key) {int count = 0;Collection<V> collection = subMap.remove(key);if (collection != null) {count = collection.size();collection.clear();totalSize -= count;}return count > 0;}
public boolean markSupported() {return false;}
public DVRecord(RecordInputStream in) {_option_flags = in.readInt();_promptTitle = readUnicodeString(in);_errorTitle = readUnicodeString(in);_promptText = readUnicodeString(in);_errorText = readUnicodeString(in);int field_size_first_formula = in.readUShort();_not_used_1 = in.readShort();_formula1 = Formula.read(field_size_first_formula, in);int field_size_sec_formula = in.readUShort();_not_used_2 = in.readShort();_formula2 = Formula.read(field_size_sec_formula, in);_regions = new CellRangeAddressList(in);}
public String toString() {return pattern();}
public InsertInstanceRequest() {super("Ots", "2016-06-20", "InsertInstance", "ots");setMethod(MethodType.POST);}
public boolean contains(Object o) {return indexOf(o) != -1;}
public final ByteBuffer encode(String s) {return encode(CharBuffer.wrap(s));}
public boolean requiresCommitBody() {return false;}
public String getKey() {return RawParseUtils.decode(enc, buffer, keyStart, keyEnd);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3, ValueEval arg4) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double d2 = NumericFunction.singleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);double d3 = NumericFunction.singleOperandEvaluate(arg3, srcRowIndex, srcColumnIndex);double d4 = NumericFunction.singleOperandEvaluate(arg4, srcRowIndex, srcColumnIndex);result = evaluate(d0, d1, d2, d3, d4 != 0.0);NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public DeleteClientVpnEndpointResult deleteClientVpnEndpoint(DeleteClientVpnEndpointRequest request) {request = beforeClientExecution(request);return executeDeleteClientVpnEndpoint(request);}
public Object get(CharSequence key) {List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);if (list == null || list.isEmpty()) {return null;}for (TernaryTreeNode n : list) {if (charSeqEquals(n.token, key)) {return n.val;}}return null;}
public StartFleetActionsResult startFleetActions(StartFleetActionsRequest request) {request = beforeClientExecution(request);return executeStartFleetActions(request);}
public CellRangeAddress getCellRangeAddress(int index) {return _list.get(index);}
public static Document loadXML(Reader is) {DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();DocumentBuilder db = null;try {db = dbf.newDocumentBuilder();}catch (Exception se) {throw new RuntimeException("Parser configuration error", se);}org.w3c.dom.Document doc = null;try {doc = db.parse(new InputSource(is));}catch (Exception se) {throw new RuntimeException("Error parsing file:" + se, se);}return doc;}
public double get(String name, double dflt) {double vals[] = (double[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Double.parseDouble(sval);}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToDoubleArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public int getBackgroundImageId(){EscherSimpleProperty property = getOptRecord().lookup(EscherPropertyTypes.FILL__PATTERNTEXTURE);return property == null ? 0 : property.getPropertyValue();}
public TreeFilter getTreeFilter() {return treeFilter;}
public GetMemberResult getMember(GetMemberRequest request) {request = beforeClientExecution(request);return executeGetMember(request);}
public boolean canEncode() {return true;}
public ReplaceRouteResult replaceRoute(ReplaceRouteRequest request) {request = beforeClientExecution(request);return executeReplaceRoute(request);}
public ObjectId getResultTreeId() {return (resultTree == null) ? null : resultTree.toObjectId();}
public boolean equals(final Object o){boolean rval = this == o;if (!rval && (o != null) && (o.getClass() == this.getClass())){IntList other = ( IntList ) o;if (other._limit == _limit){rval = true;for (int j = 0; rval && (j < _limit); j++){rval = _array[ j ] == other._array[ j ];}}}return rval;}
public ListReusableDelegationSetsResult listReusableDelegationSets(ListReusableDelegationSetsRequest request) {request = beforeClientExecution(request);return executeListReusableDelegationSets(request);}
public String toString() {return "(" + a.toString() + " OR " + b.toString() + ")";}
public InitiateLayerUploadResult initiateLayerUpload(InitiateLayerUploadRequest request) {request = beforeClientExecution(request);return executeInitiateLayerUpload(request);}
public UpdateRepoRequest() {super("cr", "2016-06-07", "UpdateRepo", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]");setMethod(MethodType.POST);}
public PhoneticFilterFactory(Map<String,String> args) {super(args);inject = getBoolean(args, INJECT, true);name = require(args, ENCODER);String v = get(args, MAX_CODE_LENGTH);if (v != null) {maxCodeLength = Integer.valueOf(v);} else {maxCodeLength = null;}if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public FetchCommand fetch() {return new FetchCommand(repo);}
public QueryPhraseMap searchPhrase( String fieldName, final List<TermInfo> phraseCandidate ){QueryPhraseMap root = getRootMap( fieldName );if( root == null ) return null;return root.searchPhrase( phraseCandidate );}
@Override public Iterator<Multiset.Entry<K>> iterator() {return new MultisetEntryIterator();}
public DBSnapshot deleteDBSnapshot(DeleteDBSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteDBSnapshot(request);}
public void setOutput() {output = true;}
public ByteBuffer compact() {throw new ReadOnlyBufferException();}
public XmlPullParser newPullParser() throws XmlPullParserException {if (parserClasses == null) throw new XmlPullParserException("Factory initialization was incomplete - has not tried "+classNamesLocation);if (parserClasses.size() == 0) throw new XmlPullParserException("No valid parser classes found in "+classNamesLocation);final StringBuilder issues = new StringBuilder();for (int i = 0; i < parserClasses.size(); i++) {final Class ppClass = (Class) parserClasses.get(i);try {final XmlPullParser pp = (XmlPullParser) ppClass.newInstance();for (Iterator iter = features.keySet().iterator(); iter.hasNext(); ) {final String key = (String) iter.next();final Boolean value = (Boolean) features.get(key);if(value != null && value.booleanValue()) {pp.setFeature(key, true);}}return pp;} catch(Exception ex) {issues.append (ppClass.getName () + ": "+ ex.toString ()+"; ");}}throw new XmlPullParserException ("could not create parser: "+issues);}
public DeleteAnalysisSchemeResult deleteAnalysisScheme(DeleteAnalysisSchemeRequest request) {request = beforeClientExecution(request);return executeDeleteAnalysisScheme(request);}
public ExcelExtractor(HSSFWorkbook wb) {super(wb);_wb = wb;_formatter = new HSSFDataFormatter();}
public IntBuffer put(int index, int c) {checkIndex(index);byteBuffer.putInt(index * SizeOf.INT, c);return this;}
public final byte getParameterClass(int index) {if (index >= paramClass.length) {return paramClass[paramClass.length - 1];}return paramClass[index];}
public ListEndpointsResult listEndpoints(ListEndpointsRequest request) {request = beforeClientExecution(request);return executeListEndpoints(request);}
public static CharsRef join(String[] words, CharsRefBuilder reuse) {int upto = 0;char[] buffer = reuse.chars();for (String word : words) {final int wordLen = word.length();final int needed = (0 == upto ? wordLen : 1 + upto + wordLen); if (needed > buffer.length) {reuse.grow(needed);buffer = reuse.chars();}if (upto > 0) {buffer[upto++] = SynonymMap.WORD_SEPARATOR;}word.getChars(0, wordLen, buffer, upto);upto += wordLen;}reuse.setLength(upto);return reuse.get();}
public StringBuffer insert(int index, float f) {return insert(index, Float.toString(f));}
public ShortBuffer put(short[] src, int srcOffset, int shortCount) {if (shortCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, shortCount);position += shortCount;return this;}
public DisassociateResolverEndpointIpAddressResult disassociateResolverEndpointIpAddress(DisassociateResolverEndpointIpAddressRequest request) {request = beforeClientExecution(request);return executeDisassociateResolverEndpointIpAddress(request);}
public AcceptDirectConnectGatewayAssociationProposalResult acceptDirectConnectGatewayAssociationProposal(AcceptDirectConnectGatewayAssociationProposalRequest request) {request = beforeClientExecution(request);return executeAcceptDirectConnectGatewayAssociationProposal(request);}
public StopStackSetOperationResult stopStackSetOperation(StopStackSetOperationRequest request) {request = beforeClientExecution(request);return executeStopStackSetOperation(request);}
public CacheSubnetGroup createCacheSubnetGroup(CreateCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateCacheSubnetGroup(request);}
public CachedOrds(OrdinalsSegmentReader source, int maxDoc) throws IOException {offsets = new int[maxDoc + 1];int[] ords = new int[maxDoc]; long totOrds = 0;final IntsRef values = new IntsRef(32);for (int docID = 0; docID < maxDoc; docID++) {offsets[docID] = (int) totOrds;source.get(docID, values);long nextLength = totOrds + values.length;if (nextLength > ords.length) {if (nextLength > ArrayUtil.MAX_ARRAY_LENGTH) {throw new IllegalStateException("too many ordinals (>= " + nextLength + ") to cache");}ords = ArrayUtil.grow(ords, (int) nextLength);}System.arraycopy(values.ints, 0, ords, (int) totOrds, values.length);totOrds = nextLength;}offsets[maxDoc] = (int) totOrds;if ((double) totOrds / ords.length < 0.9) {this.ordinals = new int[(int) totOrds];System.arraycopy(ords, 0, this.ordinals, 0, (int) totOrds);} else {this.ordinals = ords;}}
public String getRawUserInfo() {return userInfo;}
@Override public Object[] toArray() {return ObjectArrays.toArrayImpl(this);}
public DescribeCompilationJobResult describeCompilationJob(DescribeCompilationJobRequest request) {request = beforeClientExecution(request);return executeDescribeCompilationJob(request);}
public String getQuery() {return decode(query);}
public CreateEnvironmentResult createEnvironment(CreateEnvironmentRequest request) {request = beforeClientExecution(request);return executeCreateEnvironment(request);}
public ParseTreeMatch match(ParseTree tree) {return matcher.match(tree, this);}
public boolean contains(CharSequence cs) {return map.containsKey(cs);}
public QueryRequest(String tableName) {setTableName(tableName);}
public boolean isRowGroupHiddenByParent(int row) {int endLevel;boolean endHidden;int endOfOutlineGroupIdx = findEndOfRowOutlineGroup(row);if (getRow(endOfOutlineGroupIdx + 1) == null) {endLevel = 0;endHidden = false;} else {endLevel = getRow(endOfOutlineGroupIdx + 1).getOutlineLevel();endHidden = getRow(endOfOutlineGroupIdx + 1).getZeroHeight();}int startLevel;boolean startHidden;int startOfOutlineGroupIdx = findStartOfRowOutlineGroup( row );if (startOfOutlineGroupIdx - 1 < 0 || getRow(startOfOutlineGroupIdx - 1) == null) {startLevel = 0;startHidden = false;} else {startLevel = getRow(startOfOutlineGroupIdx - 1).getOutlineLevel();startHidden = getRow(startOfOutlineGroupIdx - 1).getZeroHeight();}if (endLevel > startLevel) {return endHidden;}return startHidden;}
public boolean retryFailedLockFileCommit() {return true;}
public ValidateMatchmakingRuleSetResult validateMatchmakingRuleSet(ValidateMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeValidateMatchmakingRuleSet(request);}
public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, "" + dflt);if (sval.indexOf(":") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(":");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}
public UpdateLinkAttributesResult updateLinkAttributes(UpdateLinkAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateLinkAttributes(request);}
public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {super(input);if (typeMatch == null) {throw new IllegalArgumentException("typeMatch must not be null");}thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));this.typeMatch = typeMatch;}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[CALCCOUNT]\n");buffer.append("    .iterations     = ").append(Integer.toHexString(getIterations())).append("\n");buffer.append("[/CALCCOUNT]\n");return buffer.toString();}
public E push(E object) {addElement(object);return object;}
public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) {super(initialCapacity, loadFactor);init();this.accessOrder = accessOrder;}
public TreeSet() {backingMap = new TreeMap<E, Object>();}
public long skip(long charCount) throws IOException {if (charCount < 0) {throw new IllegalArgumentException("charCount < 0: " + charCount);}synchronized (lock) {long skipped = 0;int toRead = charCount < 512 ? (int) charCount : 512;char[] charsSkipped = new char[toRead];while (skipped < charCount) {int read = read(charsSkipped, 0, toRead);if (read == -1) {return skipped;}skipped += read;if (read < toRead) {return skipped;}if (charCount - skipped < toRead) {toRead = (int) (charCount - skipped);}}return skipped;}}
public ValueEval getRef3DEval(Ref3DPxg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}
public NewAnalyzerTask(PerfRunData runData) {super(runData);analyzerNames = new ArrayList<>();}
public boolean equals( Object o ) {return o instanceof EnglishStemmer;}
public void decode(long[] blocks, int blocksOffset, long[] values,int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];valuesOffset = decode(block, values, valuesOffset);}}
public final void incRef() {ensureOpen();refCount.incrementAndGet();}
public ReplicationGroup testFailover(TestFailoverRequest request) {request = beforeClientExecution(request);return executeTestFailover(request);}
public RefWriter(Collection<Ref> refs) {this.refs = RefComparator.sort(refs);}
public ByteVector(int capacity) {if (capacity > 0) {blockSize = capacity;} else {blockSize = DEFAULT_BLOCK_SIZE;}array = new byte[blockSize];n = 0;}
public void endWorker() {if (workers.decrementAndGet() == 0)process.release();}
public DescribeVolumeStatusResult describeVolumeStatus(DescribeVolumeStatusRequest request) {request = beforeClientExecution(request);return executeDescribeVolumeStatus(request);}
public IntMapper(final int initialCapacity) {elements = new ArrayList<>(initialCapacity);valueKeyMap = new HashMap<>(initialCapacity);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_borderType);out.writeShort(field_2_options);}
public synchronized void copyInto(Object[] elements) {System.arraycopy(elementData, 0, elements, 0, elementCount);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {double s0;String s1;try {s0 = evaluateDoubleArg(arg0, srcRowIndex, srcColumnIndex);s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}try {String formattedStr = formatter.formatRawCellContents(s0, -1, s1);return new StringEval(formattedStr);} catch (Exception e) {return ErrorEval.VALUE_INVALID;}}
public CustomViewSettingsRecordAggregate(RecordStream rs) {_begin = rs.getNext();if (_begin.getSid() != UserSViewBegin.sid) {throw new IllegalStateException("Bad begin record");}List<RecordBase> temp = new ArrayList<>();while (rs.peekNextSid() != UserSViewEnd.sid) {if (PageSettingsBlock.isComponentRecord(rs.peekNextSid())) {if (_psBlock != null) {if (rs.peekNextSid() == HeaderFooterRecord.sid) {_psBlock.addLateHeaderFooter((HeaderFooterRecord)rs.getNext());continue;}throw new IllegalStateException("Found more than one PageSettingsBlock in chart sub-stream, had sid: " + rs.peekNextSid());}_psBlock = new PageSettingsBlock(rs);temp.add(_psBlock);continue;}temp.add(rs.getNext());}_recs = temp;_end = rs.getNext(); if (_end.getSid() != UserSViewEnd.sid) {throw new IllegalStateException("Bad custom view settings end record");}}
public DeleteSignalingChannelResult deleteSignalingChannel(DeleteSignalingChannelRequest request) {request = beforeClientExecution(request);return executeDeleteSignalingChannel(request);}
@Override public boolean remove(Object o) {if (contains(o)) {Entry<?> entry = (Entry<?>) o;AtomicInteger frequency = backingMap.remove(entry.getElement());int numberRemoved = frequency.getAndSet(0);size -= numberRemoved;return true;}return false;}
public SnapshotDeletionPolicy(IndexDeletionPolicy primary) {this.primary = primary;}
public void throwException() throws BufferUnderflowException,BufferOverflowException, UnmappableCharacterException,MalformedInputException, CharacterCodingException {switch (this.type) {case TYPE_UNDERFLOW:throw new BufferUnderflowException();case TYPE_OVERFLOW:throw new BufferOverflowException();case TYPE_UNMAPPABLE_CHAR:throw new UnmappableCharacterException(this.length);case TYPE_MALFORMED_INPUT:throw new MalformedInputException(this.length);default:throw new CharacterCodingException();}}
public StringPtg(LittleEndianInput in)  {int nChars = in.readUByte(); _is16bitUnicode = (in.readByte() & 0x01) != 0;if (_is16bitUnicode) {field_3_string = StringUtil.readUnicodeLE(in, nChars);} else {field_3_string = StringUtil.readCompressedUnicode(in, nChars);}}
public GetPublicAccessUrlsRequest() {super("CloudPhoto", "2017-07-11", "GetPublicAccessUrls", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public CleanCommand clean() {return new CleanCommand(repo);}
public Collection<PackFile> getPacks() {PackList list = packList.get();if (list == NO_PACKS)list = scanPacks(list);PackFile[] packs = list.packs;return Collections.unmodifiableCollection(Arrays.asList(packs));}
public DescribeStackDriftDetectionStatusResult describeStackDriftDetectionStatus(DescribeStackDriftDetectionStatusRequest request) {request = beforeClientExecution(request);return executeDescribeStackDriftDetectionStatus(request);}
public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities(ListCloudFrontOriginAccessIdentitiesRequest request) {request = beforeClientExecution(request);return executeListCloudFrontOriginAccessIdentities(request);}
public static SshSessionFactory getInstance() {return INSTANCE;}
public ListConferenceProvidersResult listConferenceProviders(ListConferenceProvidersRequest request) {request = beforeClientExecution(request);return executeListConferenceProviders(request);}
public UpdateReceiptRuleResult updateReceiptRule(UpdateReceiptRuleRequest request) {request = beforeClientExecution(request);return executeUpdateReceiptRule(request);}
public String toString() {final StringBuilder r = new StringBuilder();r.append("("); for (int i = 0; i < subfilters.length; i++) {if (i > 0)r.append(" OR "); r.append(subfilters[i].toString());}r.append(")"); return r.toString();}
public void serialize(LittleEndianOutput out) {out.writeShort(sid);out.writeShort(length);out.writeShort(flags);}
public UpdateHealthCheckResult updateHealthCheck(UpdateHealthCheckRequest request) {request = beforeClientExecution(request);return executeUpdateHealthCheck(request);}
public synchronized long ramBytesUsed() {long bytes = 0;for(CachedOrds ords : ordsCache.values()) {bytes += ords.ramBytesUsed();}return bytes;}
public UpdateWorkforceResult updateWorkforce(UpdateWorkforceRequest request) {request = beforeClientExecution(request);return executeUpdateWorkforce(request);}
public void setObjectId(AnyObjectId id) {id.copyRawTo(idBuffer(), idOffset());}
public void write(byte[] buffer, int byteOffset, int byteCount) throws IOException {IoBridge.write(fd, buffer, byteOffset, byteCount);if (syncMetadata) {fd.sync();}}
public GetBlockResult getBlock(GetBlockRequest request) {request = beforeClientExecution(request);return executeGetBlock(request);}
public void exportDirectory(File dir) {exportBase.add(dir);}
public CreateReservedInstancesListingResult createReservedInstancesListing(CreateReservedInstancesListingRequest request) {request = beforeClientExecution(request);return executeCreateReservedInstancesListing(request);}
public ByteBuffer put(byte b) {throw new ReadOnlyBufferException();}
public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {double result;try {List<Double> temp = new ArrayList<>();for (ValueEval arg : args) {collectValues(arg, temp);}double[] values = new double[temp.size()];for (int i = 0; i < values.length; i++) {values[i] = temp.get(i).doubleValue();}result = evaluate(values);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}
public static int getCharType(char ch) {if (isSurrogate(ch))return CharType.SURROGATE;if (ch >= 0x4E00 && ch <= 0x9FA5)return CharType.HANZI;if ((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))return CharType.LETTER;if (ch >= 0x0030 && ch <= 0x0039)return CharType.DIGIT;if (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n' || ch == '　')return CharType.SPACE_LIKE;if ((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)|| (ch >= 0x3001 && ch <= 0x301E))return CharType.DELIMITER;if ((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))return CharType.FULLWIDTH_LETTER;if (ch >= 0xFF10 && ch <= 0xFF19)return CharType.FULLWIDTH_DIGIT;if (ch >= 0xFE30 && ch <= 0xFF63)return CharType.DELIMITER;return CharType.OTHER;}
public StopJumpserverRequest() {super("HPC", "2016-06-03", "StopJumpserver", "hpc");setMethod(MethodType.POST);}
public CreateDirectoryConfigResult createDirectoryConfig(CreateDirectoryConfigRequest request) {request = beforeClientExecution(request);return executeCreateDirectoryConfig(request);}
public DescribeExportTasksResult describeExportTasks() {return describeExportTasks(new DescribeExportTasksRequest());}
public ExportClientVpnClientCertificateRevocationListResult exportClientVpnClientCertificateRevocationList(ExportClientVpnClientCertificateRevocationListRequest request) {request = beforeClientExecution(request);return executeExportClientVpnClientCertificateRevocationList(request);}
public CompleteMultipartUploadResult completeMultipartUpload(CompleteMultipartUploadRequest request) {request = beforeClientExecution(request);return executeCompleteMultipartUpload(request);}
public long ramBytesUsed() {long sizeInBytes = 0;sizeInBytes += RamUsageEstimator.sizeOf(minValues);sizeInBytes += RamUsageEstimator.sizeOf(averages);for(PackedInts.Reader reader: subReaders) {sizeInBytes += reader.ramBytesUsed();}return sizeInBytes;}
public static void fill(Object[] array, Object value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public ByteBuffer putDouble(int index, double value) {throw new ReadOnlyBufferException();}
public DescribeAdjustmentTypesResult describeAdjustmentTypes() {return describeAdjustmentTypes(new DescribeAdjustmentTypesRequest());}
public PersonIdent getSourceCommitter() {RevCommit c = getSourceCommit();return c != null ? c.getCommitterIdent() : null;}
public Object[] toArray() {int index = 0;Object[] contents = new Object[size];Link<E> link = voidLink.next;while (link != voidLink) {contents[index++] = link.data;link = link.next;}return contents;}
public String toString() {return name + " version " + version;}
public PushCommand setRefSpecs(RefSpec... specs) {checkCallable();this.refSpecs.clear();Collections.addAll(refSpecs, specs);return this;}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("spanFirst(");buffer.append(match.toString(field));buffer.append(", ");buffer.append(end);buffer.append(")");return buffer.toString();}
public X509Certificate[] getAcceptedIssuers() {return null;}
public int read() {if (pos < size) {return s.charAt(pos++);} else {s = null;return -1;}}
public PersonIdent getRefLogIdent() {return destination.getRefLogIdent();}
@Override public int size() {return size;}
public GetRequestValidatorsResult getRequestValidators(GetRequestValidatorsRequest request) {request = beforeClientExecution(request);return executeGetRequestValidators(request);}
public String toString() {return "I(F)";}
public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;SegToken other = (SegToken) obj;if (!Arrays.equals(charArray, other.charArray))return false;if (endOffset != other.endOffset)return false;if (index != other.index)return false;if (startOffset != other.startOffset)return false;if (weight != other.weight)return false;if (wordType != other.wordType)return false;return true;}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_shapeId    =  LittleEndian.getInt( data, pos + size );     size += 4;field_2_flags      =  LittleEndian.getInt( data, pos + size );     size += 4;return getRecordSize();}
public String getSignerName() {return ALGORITHM_NAME;}
public synchronized void clear() {if (size != 0) {Arrays.fill(table, null);modCount++;size = 0;}}
public CancelCapacityReservationResult cancelCapacityReservation(CancelCapacityReservationRequest request) {request = beforeClientExecution(request);return executeCancelCapacityReservation(request);}
public ImportDocumentationPartsResult importDocumentationParts(ImportDocumentationPartsRequest request) {request = beforeClientExecution(request);return executeImportDocumentationParts(request);}
public SuggestResult suggest(SuggestRequest request) {request = beforeClientExecution(request);return executeSuggest(request);}
public Explanation explain(int docId, String field, int numPayloadsSeen, float payloadScore){return Explanation.match(docScore(docId, field, numPayloadsSeen, payloadScore),getClass().getSimpleName() + ".docScore()");}
public int serialize(int offset, byte[] data) {int result = 0;for (org.apache.poi.hssf.record.Record rec : _list) {result += rec.serialize(offset + result, data);}return result;}
public String toString() {return _string.toString();}
public static long[] copyOfRange(long[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);long[] result = new long[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public static byte[] toByteArray(ByteBuffer buffer, int length) {if(buffer.hasArray() && buffer.arrayOffset() == 0) {return buffer.array();}checkByteSizeLimit(length);byte[] data = new byte[length];buffer.get(data);return data;}
public synchronized void setProgress(int progress) {setProgress(progress, false);}
public void removeCell(CellValueRecordInterface cell) {if (cell == null) {throw new IllegalArgumentException("cell must not be null");}int row = cell.getRow();if (row >= records.length) {throw new RuntimeException("cell row is out of range");}CellValueRecordInterface[] rowCells = records[row];if (rowCells == null) {throw new RuntimeException("cell row is already empty");}short column = cell.getColumn();if (column >= rowCells.length) {throw new RuntimeException("cell column is out of range");}rowCells[column] = null;}
public static String canonicalizePath(String path, boolean discardRelativePrefix) {int segmentStart = 0;int deletableSegments = 0;for (int i = 0; i <= path.length(); ) {int nextSegmentStart;if (i == path.length()) {nextSegmentStart = i;} else if (path.charAt(i) == '/') {nextSegmentStart = i + 1;} else {i++;continue;}if (i == segmentStart + 1 && path.regionMatches(segmentStart, ".", 0, 1)) {path = path.substring(0, segmentStart) + path.substring(nextSegmentStart);i = segmentStart;} else if (i == segmentStart + 2 && path.regionMatches(segmentStart, "..", 0, 2)) {if (deletableSegments > 0 || discardRelativePrefix) {deletableSegments--;int prevSegmentStart = path.lastIndexOf('/', segmentStart - 2) + 1;path = path.substring(0, prevSegmentStart) + path.substring(nextSegmentStart);i = segmentStart = prevSegmentStart;} else {i++;segmentStart = i;}} else {if (i > 0) {deletableSegments++;}i++;segmentStart = i;}}return path;}
public ApostropheFilterFactory(Map<String, String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameter(s): " + args);}}
public Entry<String, Ref> peek() {if (packedIdx < packed.size() && looseIdx < loose.size()) {Ref p = packed.get(packedIdx);Ref l = loose.get(looseIdx);int cmp = RefComparator.compareTo(p, l);if (cmp < 0) {packedIdx++;return toEntry(p);}if (cmp == 0)packedIdx++;looseIdx++;return toEntry(resolveLoose(l));}if (looseIdx < loose.size())return toEntry(resolveLoose(loose.get(looseIdx++)));if (packedIdx < packed.size())return toEntry(packed.get(packedIdx++));return null;}
public DeleteEnvironmentResult deleteEnvironment(DeleteEnvironmentRequest request) {request = beforeClientExecution(request);return executeDeleteEnvironment(request);}
public int stem(char s[], int len) {for (int i = 0; i < len; i++)switch(s[i]) {case 'á': s[i] = 'a'; break;case 'ë':case 'é': s[i] = 'e'; break;case 'í': s[i] = 'i'; break;case 'ó':case 'ő':case 'õ':case 'ö': s[i] = 'o'; break;case 'ú':case 'ű':case 'ũ':case 'û':case 'ü': s[i] = 'u'; break;}len = removeCase(s, len);len = removePossessive(s, len);len = removePlural(s, len);return normalize(s, len);}
public void addChildBefore(EscherRecord record, int insertBeforeRecordId) {int idx = 0;for (EscherRecord rec : this) {if(rec.getRecordId() == (short)insertBeforeRecordId) {break;}idx++;}_childRecords.add(idx, record);}
public ListAlbumsRequest() {super("CloudPhoto", "2017-07-11", "ListAlbums", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest() {super("Domain-intl", "2017-12-18", "SaveTaskForUpdatingRegistrantInfoByIdentityCredential", "domain");setMethod(MethodType.POST);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {int result;if (arg0 instanceof TwoDEval) {result = ((TwoDEval) arg0).getHeight();} else if (arg0 instanceof RefEval) {result = 1;} else { return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}
public DescribeReservedInstancesResult describeReservedInstances() {return describeReservedInstances(new DescribeReservedInstancesRequest());}
public void setPackedGitMMAP(boolean usemmap) {packedGitMMAP = usemmap;}
public POIFSDocumentPath(){this.components = new String[ 0 ];}
public String toString() {return key + "/" + value;}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | (byte2 >>> 4);final int byte3 = blocks[blocksOffset++] & 0xFF;final int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;}}
public void serialize(LittleEndianOutput out) {out.writeShort(_extBookIndex);out.writeShort(_firstSheetIndex);out.writeShort(_lastSheetIndex);}
public PatternParser(PatternConsumer consumer) {this();this.consumer = consumer;}
public final String[] getValues(String name) {List<String> result = new ArrayList<>();for (IndexableField field : fields) {if (field.name().equals(name) && field.stringValue() != null) {result.add(field.stringValue());}}if (result.size() == 0) {return NO_STRINGS;}return result.toArray(new String[result.size()]);}
public ListIdentityPoolUsageResult listIdentityPoolUsage(ListIdentityPoolUsageRequest request) {request = beforeClientExecution(request);return executeListIdentityPoolUsage(request);}
public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {if(args.length < 1 || args.length > 5) {return ErrorEval.VALUE_INVALID;}try {BaseRef baseRef = evaluateBaseRef(args[0]);int rowOffset = (args[1] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[1], srcCellRow, srcCellCol);int columnOffset = (args[2] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[2], srcCellRow, srcCellCol);int height = baseRef.getHeight();int width = baseRef.getWidth();switch(args.length) {case 5:if(!(args[4] instanceof MissingArgEval)) {width = evaluateIntArg(args[4], srcCellRow, srcCellCol);}case 4:if(!(args[3] instanceof MissingArgEval)) {height = evaluateIntArg(args[3], srcCellRow, srcCellCol);}break;default:break;}if(height == 0 || width == 0) {return ErrorEval.REF_INVALID;}LinearOffsetRange rowOffsetRange = new LinearOffsetRange(rowOffset, height);LinearOffsetRange colOffsetRange = new LinearOffsetRange(columnOffset, width);return createOffset(baseRef, rowOffsetRange, colOffsetRange);} catch (EvaluationException e) {return e.getErrorEval();}}
public int[] getCountsByTime() {return countsByTime;}
public UpdateAccountResult updateAccount(UpdateAccountRequest request) {request = beforeClientExecution(request);return executeUpdateAccount(request);}
public DescribeTrainingJobResult describeTrainingJob(DescribeTrainingJobRequest request) {request = beforeClientExecution(request);return executeDescribeTrainingJob(request);}
public DeleteGroupResult deleteGroup(DeleteGroupRequest request) {request = beforeClientExecution(request);return executeDeleteGroup(request);}
public int advance(int target) {upto++;if (upto == docIDs.length) {return docID = NO_MORE_DOCS;}int inc = 10;int nextUpto = upto+10;int low;int high;while (true) {if (nextUpto >= docIDs.length) {low = nextUpto-inc;high = docIDs.length-1;break;}if (target <= docIDs[nextUpto]) {low = nextUpto-inc;high = nextUpto;break;}inc *= 2;nextUpto += inc;}while (true) {if (low > high) {upto = low;break;}int mid = (low + high) >>> 1;int cmp = docIDs[mid] - target;if (cmp < 0) {low = mid + 1;} else if (cmp > 0) {high = mid - 1;} else {upto = mid;break;}}if (upto == docIDs.length) {return docID = NO_MORE_DOCS;} else {return docID = docIDs[upto];}}
public void registerListener(final POIFSReaderListener listener) {if (listener == null) {throw new NullPointerException();}if (registryClosed) {throw new IllegalStateException();}registry.registerListener(listener);}
public static int[] grow(int[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Integer.BYTES));} elsereturn array;}
public void visitTerminal(TerminalNode node) {System.out.println("consume "+node.getSymbol()+" rule "+getRuleNames()[_ctx.getRuleIndex()]);}
public TokenStream create(TokenStream input) {return new LatvianStemFilter(input);}
public ReplicationGroup increaseReplicaCount(IncreaseReplicaCountRequest request) {request = beforeClientExecution(request);return executeIncreaseReplicaCount(request);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 5;values[valuesOffset++] = (byte0 >>> 2) & 7;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);values[valuesOffset++] = (byte1 >>> 4) & 7;values[valuesOffset++] = (byte1 >>> 1) & 7;final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 >>> 3) & 7;values[valuesOffset++] = byte2 & 7;}}
public StopHyperParameterTuningJobResult stopHyperParameterTuningJob(StopHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeStopHyperParameterTuningJob(request);}
public ResetNetworkInterfaceAttributeResult resetNetworkInterfaceAttribute(ResetNetworkInterfaceAttributeRequest request) {request = beforeClientExecution(request);return executeResetNetworkInterfaceAttribute(request);}
public RevBlob lookupBlob(AnyObjectId id) {RevBlob c = (RevBlob) objects.get(id);if (c == null) {c = new RevBlob(id);objects.add(c);}return c;}
public ListGroupMembershipsResult listGroupMemberships(ListGroupMembershipsRequest request) {request = beforeClientExecution(request);return executeListGroupMemberships(request);}
public static void mkdir(File d, boolean skipExisting)throws IOException {if (!d.mkdir()) {if (skipExisting && d.isDirectory())return;throw new IOException(MessageFormat.format(JGitText.get().mkDirFailed, d.getAbsolutePath()));}}
public UpdateDetectorVersionMetadataResult updateDetectorVersionMetadata(UpdateDetectorVersionMetadataRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersionMetadata(request);}
public void write(String str, int offset, int count) throws IOException {if ((offset | count) < 0 || offset > str.length() - count) {throw new StringIndexOutOfBoundsException(str, offset, count);}char[] buf = new char[count];str.getChars(offset, offset + count, buf, 0);synchronized (lock) {write(buf, 0, buf.length);}}
public synchronized void ensureCapacity(int min) {super.ensureCapacity(min);}
public DescribeRecipeResult describeRecipe(DescribeRecipeRequest request) {request = beforeClientExecution(request);return executeDescribeRecipe(request);}
public DisassociateRouteTableResult disassociateRouteTable(DisassociateRouteTableRequest request) {request = beforeClientExecution(request);return executeDisassociateRouteTable(request);}
public SetTopicAttributesRequest(String topicArn, String attributeName, String attributeValue) {setTopicArn(topicArn);setAttributeName(attributeName);setAttributeValue(attributeValue);}
public static char[] grow(char[] array, int minSize) {assert minSize >= 0: "size must be positive (got " + minSize + "): likely integer overflow?";if (array.length < minSize) {return growExact(array, oversize(minSize, Character.BYTES));} elsereturn array;}
public StashCreateCommand setRef(String ref) {this.ref = ref;return this;}
public FormulaRecord(RecordInputStream ris) {super(ris);long valueLongBits  = ris.readLong();field_5_options = ris.readShort();specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);if (specialCachedValue == null) {field_4_value = Double.longBitsToDouble(valueLongBits);}field_6_zero = ris.readInt();int field_7_expression_len = ris.readShort(); int nBytesAvailable = ris.available();field_8_parsed_expr = Formula.read(field_7_expression_len, ris, nBytesAvailable);}
public SynonymQuery build() {Collections.sort(terms, Comparator.comparing(a -> a.term));return new SynonymQuery(terms.toArray(new TermAndBoost[0]), field);}
public PasswordRev4Record(RecordInputStream in) {field_1_password = in.readShort();}
public boolean isReadOnly() {return false;}
public int preceding(int pos) {if (pos < start || pos > end) {throw new IllegalArgumentException("offset out of bounds");} else if (pos == start) {current = start;return DONE;} else {return first();}}
public CodepageRecord(RecordInputStream in) {field_1_codepage = in.readShort();}
public ApproveAssignmentResult approveAssignment(ApproveAssignmentRequest request) {request = beforeClientExecution(request);return executeApproveAssignment(request);}
public DescribeVpnConnectionsResult describeVpnConnections() {return describeVpnConnections(new DescribeVpnConnectionsRequest());}
public final V next() { return nextEntry().value; }
public DescribeInstanceHealthResult describeInstanceHealth(DescribeInstanceHealthRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceHealth(request);}
public static void register(TransportProtocol proto) {protocols.add(0, new WeakReference<>(proto));}
public static char[] copyOfRange(char[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);char[] result = new char[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}
public static void fill(int[] array, int value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public Class<? extends Record> peekNextClass() {if(!hasNext()) {return null;}return _list.get(_nextIndex).getClass();}
public static char[] copyOf(char[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public DeleteRelationalDatabaseResult deleteRelationalDatabase(DeleteRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeDeleteRelationalDatabase(request);}
public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}WeightedPhraseInfo other = (WeightedPhraseInfo) obj;if (getStartOffset() != other.getStartOffset()) {return false;}if (getEndOffset() != other.getEndOffset()) {return false;}if (getBoost() != other.getBoost()) {return false;}return true;}
public boolean hasNext() {return nextBlock != POIFSConstants.END_OF_CHAIN;}
public void write(char b) {if (len >= buf.length) {resize(len +1);}unsafeWrite(b);}
public void serialize(LittleEndianOutput out) {futureHeader.serialize(out);out.writeShort(isf_sharedFeatureType);out.writeByte(reserved);out.writeInt((int)cbHdrData);out.write(rgbHdrData);}
public ListUserHierarchyGroupsResult listUserHierarchyGroups(ListUserHierarchyGroupsRequest request) {request = beforeClientExecution(request);return executeListUserHierarchyGroups(request);}
public GetTopicAttributesRequest(String topicArn) {setTopicArn(topicArn);}
public CreateTrafficPolicyVersionResult createTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicyVersion(request);}
@Override public boolean equals(Object object) {if (this == object) {return true;}if (object instanceof Map.Entry) {Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;return (key == null ? entry.getKey() == null : key.equals(entry.getKey()))&& (value == null ? entry.getValue() == null : value.equals(entry.getValue()));}return false;}
public ListResourcesResult listResources(ListResourcesRequest request) {request = beforeClientExecution(request);return executeListResources(request);}
public final V getAndSet(V newValue) {while (true) {V x = get();if (compareAndSet(x, newValue))return x;}}
public FeatHdrRecord() {futureHeader = new FtrHeader();futureHeader.setRecordType(sid);}
public DisassociatePhoneNumbersFromVoiceConnectorResult disassociatePhoneNumbersFromVoiceConnector(DisassociatePhoneNumbersFromVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeDisassociatePhoneNumbersFromVoiceConnector(request);}
public ObjectId idFor(int type, byte[] data) {return idFor(type, data, 0, data.length);}
public void removeParseListener(ParseTreeListener listener) {if (_parseListeners != null) {if (_parseListeners.remove(listener)) {if (_parseListeners.isEmpty()) {_parseListeners = null;}}}}
public AxisRecord(RecordInputStream in) {field_1_axisType  = in.readShort();field_2_reserved1 = in.readInt();field_3_reserved2 = in.readInt();field_4_reserved3 = in.readInt();field_5_reserved4 = in.readInt();}
public static double evaluate(double[] v) throws EvaluationException {if (v.length < 2) {throw new EvaluationException(ErrorEval.NA);}int[] counts = new int[v.length];Arrays.fill(counts, 1);for (int i = 0, iSize = v.length; i < iSize; i++) {for (int j = i + 1, jSize = v.length; j < jSize; j++) {if (v[i] == v[j])counts[i]++;}}double maxv = 0;int maxc = 0;for (int i = 0, iSize = counts.length; i < iSize; i++) {if (counts[i] > maxc) {maxv = v[i];maxc = counts[i];}}if (maxc > 1) {return maxv;}throw new EvaluationException(ErrorEval.NA);}
public void addFacetCount(BytesRef facetValue, int count) {if (count < currentMin) {return;}FacetEntry facetEntry = new FacetEntry(facetValue, count);if (facetEntries.size() == maxSize) {if (facetEntries.higher(facetEntry) == null) {return;}facetEntries.pollLast();}facetEntries.add(facetEntry);if (facetEntries.size() == maxSize) {currentMin = facetEntries.last().count;}}
public String toString(){StringBuilder buffer = new StringBuilder();String nl = System.getProperty("line.separator");buffer.append("[ftGmo]" + nl);buffer.append("  reserved = ").append(HexDump.toHex(reserved)).append(nl);buffer.append("[/ftGmo]" + nl);return buffer.toString();}
public String toString() {return getMode().toString() + " " + getName(); }
public CharVector(int capacity) {if (capacity > 0) {blockSize = capacity;} else {blockSize = DEFAULT_BLOCK_SIZE;}array = new char[blockSize];n = 0;}
public DescribeAccountLimitsResult describeAccountLimits(DescribeAccountLimitsRequest request) {request = beforeClientExecution(request);return executeDescribeAccountLimits(request);}
public void removeBuiltinRecord(byte name, int sheetIndex) {linkTable.removeBuiltinRecord(name, sheetIndex);}
public CreateSecurityGroupResult createSecurityGroup(CreateSecurityGroupRequest request) {request = beforeClientExecution(request);return executeCreateSecurityGroup(request);}
public boolean equals(Object other) {return sameClassAs(other) &&equalsTo(getClass().cast(other));}
public GetObjectInformationResult getObjectInformation(GetObjectInformationRequest request) {request = beforeClientExecution(request);return executeGetObjectInformation(request);}
public StringBuffer append(long l) {IntegralToString.appendLong(this, l);return this;}
public GetIntegrationResponsesResult getIntegrationResponses(GetIntegrationResponsesRequest request) {request = beforeClientExecution(request);return executeGetIntegrationResponses(request);}
public ListDeploymentConfigsResult listDeploymentConfigs() {return listDeploymentConfigs(new ListDeploymentConfigsRequest());}
public CellRangeAddress remove(int rangeIndex) {if (_list.isEmpty()) {throw new RuntimeException("List is empty");}if (rangeIndex < 0 || rangeIndex >= _list.size()) {throw new RuntimeException("Range index (" + rangeIndex+ ") is outside allowable range (0.." + (_list.size()-1) + ")");}return _list.remove(rangeIndex);}
public DimConfig getDimConfig(String dimName) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = getDefaultDimConfig();}return ft;}
public DescribeStackResourceDriftsResult describeStackResourceDrifts(DescribeStackResourceDriftsRequest request) {request = beforeClientExecution(request);return executeDescribeStackResourceDrifts(request);}
public void setParams(String params) {if (!supportsParams()) {throw new UnsupportedOperationException(getName()+" does not support command line parameters.");}this.params = params;}
public DescribeRepositoryAssociationResult describeRepositoryAssociation(DescribeRepositoryAssociationRequest request) {request = beforeClientExecution(request);return executeDescribeRepositoryAssociation(request);}
public synchronized Enumeration<V> elements() {return new ValueEnumeration();}
public void set(int index, long value) {final int o = index >>> 4;final int b = index & 15;final int shift = b << 2;blocks[o] = (blocks[o] & ~(15L << shift)) | (value << shift);}
public HTMLStripCharFilterFactory(Map<String,String> args) {super(args);escapedTags = getSet(args, "escapedTags");if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public int getEntryPathLength() {return pathLen;}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_option_flag);out.writeShort(field_2_ixals);out.writeShort(field_3_not_used);out.writeByte(field_4_name.length());StringUtil.writeUnicodeStringFlagAndData(out, field_4_name);if(!isOLELink() && !isStdDocumentNameIdentifier()){if(isAutomaticLink()){if(_ddeValues != null) {out.writeByte(_nColumns-1);out.writeShort(_nRows-1);ConstantValueParser.encode(out, _ddeValues);}} else {field_5_name_definition.serialize(out);}}}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[REFRESHALL]\n");buffer.append("    .options      = ").append(HexDump.shortToHex(_options)).append("\n");buffer.append("[/REFRESHALL]\n");return buffer.toString();}
public ContinueDeploymentResult continueDeployment(ContinueDeploymentRequest request) {request = beforeClientExecution(request);return executeContinueDeployment(request);}
public void set(int index, long value) {final int o = index / 3;final int b = index % 3;final int shift = b * 21;blocks[o] = (blocks[o] & ~(2097151L << shift)) | (value << shift);}
public long next() throws IOException {if (ord == valueCount) {throw new EOFException();}if (off == blockSize) {refill();}final long value = values[off++];++ord;return value;}
public static final RevFilter between(Date since, Date until) {return between(since.getTime(), until.getTime());}
public DeleteVaultResult deleteVault(DeleteVaultRequest request) {request = beforeClientExecution(request);return executeDeleteVault(request);}
public final void reset() {it = cachedStates.getStates();}
public void setDetachingSymbolicRef() {detachingSymbolicRef = true;}
public ModifyIdentityIdFormatResult modifyIdentityIdFormat(ModifyIdentityIdFormatRequest request) {request = beforeClientExecution(request);return executeModifyIdentityIdFormat(request);}
public void addException(String word, ArrayList<Object> hyphenatedword) {stoplist.put(word, hyphenatedword);}
public GreekStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException("Unknown parameters: " + args);}}
public RegisterTypeResult registerType(RegisterTypeRequest request) {request = beforeClientExecution(request);return executeRegisterType(request);}
public GetAccessControlEffectResult getAccessControlEffect(GetAccessControlEffectRequest request) {request = beforeClientExecution(request);return executeGetAccessControlEffect(request);}
public HSSFShapeGroup createGroup(HSSFChildAnchor anchor) {HSSFShapeGroup group = new HSSFShapeGroup(this, anchor);group.setParent(this);group.setAnchor(anchor);shapes.add(group);onCreate(group);return group;}
public String toExternalString() {final StringBuilder r = new StringBuilder();appendSanitized(r, getName());r.append(" <"); appendSanitized(r, getEmailAddress());r.append("> "); r.append(when / 1000);r.append(' ');appendTimezone(r, tzOffset);return r.toString();}
public static FontCharset valueOf(int value){if(value >= _table.length)return null;return _table[value];}
public NLPSentenceDetectorOp() {sentenceSplitter = null;}
public String resource() {return this.resource;}
public QueryScorer(Query query, String field) {init(query, field, null, true);}
public ActiveTrustedSigners(java.util.List<Signer> items) {setItems(items);}
public final String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName());sb.append(" [");sb.append(formatReferenceAsString());sb.append("]");return sb.toString();}
public UpdateNodegroupConfigResult updateNodegroupConfig(UpdateNodegroupConfigRequest request) {request = beforeClientExecution(request);return executeUpdateNodegroupConfig(request);}
public void fill(int fromIndex, int toIndex, long val) {assert val <= maxValue(getBitsPerValue());assert fromIndex <= toIndex;for (int i = fromIndex; i < toIndex; ++i) {set(i, val);}}
public ListTrainingJobsResult listTrainingJobs(ListTrainingJobsRequest request) {request = beforeClientExecution(request);return executeListTrainingJobs(request);}
public DescribeProfilingGroupResult describeProfilingGroup(DescribeProfilingGroupRequest request) {request = beforeClientExecution(request);return executeDescribeProfilingGroup(request);}
public IgnoreNode(List<FastIgnoreRule> rules) {this.rules = rules;}
public static void fill(char[] array, char value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}
public GetTransitGatewayMulticastDomainAssociationsResult getTransitGatewayMulticastDomainAssociations(GetTransitGatewayMulticastDomainAssociationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayMulticastDomainAssociations(request);}
public LongBuffer compact() {System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());position = limit - position;limit = capacity;mark = UNSET_MARK;return this;}
public GetCelebrityInfoResult getCelebrityInfo(GetCelebrityInfoRequest request) {request = beforeClientExecution(request);return executeGetCelebrityInfo(request);}
public GetTranscriptResult getTranscript(GetTranscriptRequest request) {request = beforeClientExecution(request);return executeGetTranscript(request);}
public DeleteCacheParameterGroupResult deleteCacheParameterGroup(DeleteCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeDeleteCacheParameterGroup(request);}
public DescribeTagsRequest(java.util.List<Filter> filters) {setFilters(filters);}
public CreateCustomMetadataResult createCustomMetadata(CreateCustomMetadataRequest request) {request = beforeClientExecution(request);return executeCreateCustomMetadata(request);}
public Cluster resumeCluster(ResumeClusterRequest request) {request = beforeClientExecution(request);return executeResumeCluster(request);}
public DescribeMovingAddressesResult describeMovingAddresses(DescribeMovingAddressesRequest request) {request = beforeClientExecution(request);return executeDescribeMovingAddresses(request);}
public SearchAddressBooksResult searchAddressBooks(SearchAddressBooksRequest request) {request = beforeClientExecution(request);return executeSearchAddressBooks(request);}
public UpdateDomainToDomainGroupRequest() {super("Domain", "2018-01-29", "UpdateDomainToDomainGroup");setMethod(MethodType.POST);}
public void add(RevCommit c) {Block b = tail;if (b == null) {b = free.newBlock();b.add(c);head = b;tail = b;return;} else if (b.isFull()) {b = free.newBlock();tail.next = b;tail = b;}b.add(c);}
public FloatBuffer put(int index, float c) {checkIndex(index);byteBuffer.putFloat(index * SizeOf.FLOAT, c);return this;}
public void flush() throws IOException {try {beginWrite();dst.flush();} catch (InterruptedIOException e) {throw writeTimedOut(e);} finally {endWrite();}}
public Set<String> getModified() {return Collections.unmodifiableSet(diff.getModified());}
public LongsRef next(int count) throws IOException {assert count > 0;if (ord == valueCount) {throw new EOFException();}if (off == blockSize) {refill();}count = Math.min(count, blockSize - off);count = (int) Math.min(count, valueCount - ord);valuesRef.offset = off;valuesRef.length = count;off += count;ord += count;return valuesRef;}
public ByteBuffer slice() {return new ReadOnlyHeapByteBuffer(backingArray, remaining(), offset + position);}
public final boolean isEmpty() {return beginA == endA && beginB == endB;}
public static final int commitMessage(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; return tagMessage(b, ptr);}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length != 2) {return ErrorEval.VALUE_INVALID;}try {double startDateAsNumber = getValue(args[0]);int offsetInMonthAsNumber = (int) getValue(args[1]);Date startDate = DateUtil.getJavaDate(startDateAsNumber);if (startDate == null) {return ErrorEval.VALUE_INVALID;}Calendar calendar = LocaleUtil.getLocaleCalendar();calendar.setTime(startDate);calendar.add(Calendar.MONTH, offsetInMonthAsNumber);return new NumberEval(DateUtil.getExcelDate(calendar.getTime()));} catch (EvaluationException e) {return e.getErrorEval();}}
public DeleteSuggesterResult deleteSuggester(DeleteSuggesterRequest request) {request = beforeClientExecution(request);return executeDeleteSuggester(request);}
public CreatePipelineResult createPipeline(CreatePipelineRequest request) {request = beforeClientExecution(request);return executeCreatePipeline(request);}
public StopDeliveryStreamEncryptionResult stopDeliveryStreamEncryption(StopDeliveryStreamEncryptionRequest request) {request = beforeClientExecution(request);return executeStopDeliveryStreamEncryption(request);}
public DeleteApplicationSnapshotResult deleteApplicationSnapshot(DeleteApplicationSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationSnapshot(request);}
public ApplyCommand apply() {return new ApplyCommand(repo);}
public RebootCacheClusterRequest(String cacheClusterId, java.util.List<String> cacheNodeIdsToReboot) {setCacheClusterId(cacheClusterId);setCacheNodeIdsToReboot(cacheNodeIdsToReboot);}
public ModifyCacheClusterRequest(String cacheClusterId) {setCacheClusterId(cacheClusterId);}
public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;ScoreTerm other = (ScoreTerm) obj;if (term == null) {if (other.term != null) return false;} else if (!term.bytesEquals(other.term)) return false;return true;}
public AssociateTransitGatewayMulticastDomainResult associateTransitGatewayMulticastDomain(AssociateTransitGatewayMulticastDomainRequest request) {request = beforeClientExecution(request);return executeAssociateTransitGatewayMulticastDomain(request);}
public UpdateContactResult updateContact(UpdateContactRequest request) {request = beforeClientExecution(request);return executeUpdateContact(request);}
public TableRecord(CellRangeAddress8Bit range) {super(range);field_6_res = 0;}
public CreateProcessingJobResult createProcessingJob(CreateProcessingJobRequest request) {request = beforeClientExecution(request);return executeCreateProcessingJob(request);}
public CharSequence subSequence(int start, int end) {checkStartEndRemaining(start, end);CharSequenceAdapter result = copy(this);result.position = position + start;result.limit = position + end;return result;}
public GetCoipPoolUsageResult getCoipPoolUsage(GetCoipPoolUsageRequest request) {request = beforeClientExecution(request);return executeGetCoipPoolUsage(request);}
public UpdateResolverEndpointResult updateResolverEndpoint(UpdateResolverEndpointRequest request) {request = beforeClientExecution(request);return executeUpdateResolverEndpoint(request);}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {ValueEval veText;try {veText = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String strText = OperandResolver.coerceValueToString(veText);Double result = convertTextToNumber(strText);if(result == null) result = parseDateTime(strText);if (result == null) {return ErrorEval.VALUE_INVALID;}return new NumberEval(result.doubleValue());}
public int addExternalName(ExternalNameRecord rec) {ExternalNameRecord[] tmp = new ExternalNameRecord[_externalNameRecords.length + 1];System.arraycopy(_externalNameRecords, 0, tmp, 0, _externalNameRecords.length);tmp[tmp.length - 1] = rec;_externalNameRecords = tmp;return _externalNameRecords.length - 1;}
public DescribePrincipalIdFormatResult describePrincipalIdFormat(DescribePrincipalIdFormatRequest request) {request = beforeClientExecution(request);return executeDescribePrincipalIdFormat(request);}
public ListPartnerEventSourceAccountsResult listPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request) {request = beforeClientExecution(request);return executeListPartnerEventSourceAccounts(request);}
public File getFile() {return file;}
public void onChanged() {if (mSelectedIds.size() > 0) {return;}chooseListToShow();ensureSomeGroupIsExpanded();}
public String getTextAsString() {if (this.text == null)return null;elsereturn this.text.toString();}
public LongBuffer put(long[] src, int srcOffset, int longCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, longCount);if (longCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + longCount; ++i) {put(src[i]);}return this;}
@Override public boolean remove(Object object) {synchronized (CopyOnWriteArrayList.this) {int index = indexOf(object);if (index == -1) {return false;}remove(index);return true;}}
public long length() {if (onDiskFile == null) {return super.length();}return onDiskFile.length();}
public FieldBoostMapFCListener(QueryConfigHandler config) {this.config = config;}
public StartActivityStreamResult startActivityStream(StartActivityStreamRequest request) {request = beforeClientExecution(request);return executeStartActivityStream(request);}
public Hyphenation hyphenate(String word, int remainCharCount,int pushCharCount) {char[] w = word.toCharArray();return hyphenate(w, 0, w.length, remainCharCount, pushCharCount);}
public CreateSmsTemplateResult createSmsTemplate(CreateSmsTemplateRequest request) {request = beforeClientExecution(request);return executeCreateSmsTemplate(request);}
public void clear() {int n = mSize;Object[] values = mValues;for (int i = 0; i < n; i++) {values[i] = null;}mSize = 0;mGarbage = false;}
public String toStringTree(Parser parser) {return toString();}
public long get(int index) {final int o = index >>> 2;final int b = index & 3;final int shift = b << 4;return (blocks[o] >>> shift) & 65535L;}
public String toString() {return getType().name() + ": " + getOldId().name() + " "+ getNewId().name() + " " + getRefName();}
public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval text, ValueEval number_times) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(text, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String strText1 = OperandResolver.coerceValueToString(veText1);double numberOfTime = 0;try {numberOfTime = OperandResolver.coerceValueToDouble(number_times);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}int numberOfTimeInt = (int)numberOfTime;StringBuilder strb = new StringBuilder(strText1.length() * numberOfTimeInt);for(int i = 0; i < numberOfTimeInt; i++) {strb.append(strText1);}if (strb.toString().length() > 32767) {return ErrorEval.VALUE_INVALID;}return new StringEval(strb.toString());}
public Entry<K, V> lastEntry() {return immutableCopy(endpoint(false));}
public DeleteEvaluationResult deleteEvaluation(DeleteEvaluationRequest request) {request = beforeClientExecution(request);return executeDeleteEvaluation(request);}
public ContinueRecord(RecordInputStream in) {_data = in.readRemainder();}
public CreateFilterResult createFilter(CreateFilterRequest request) {request = beforeClientExecution(request);return executeCreateFilter(request);}
public CharSequence subSequence(int start, int end) {checkStartEndRemaining(start, end);CharBuffer result = duplicate();result.limit(position + end);result.position(position + start);return result;}
public CreateTrafficMirrorSessionResult createTrafficMirrorSession(CreateTrafficMirrorSessionRequest request) {request = beforeClientExecution(request);return executeCreateTrafficMirrorSession(request);}
public CreateNodegroupResult createNodegroup(CreateNodegroupRequest request) {request = beforeClientExecution(request);return executeCreateNodegroup(request);}
public SoraniStemFilter create(TokenStream input) {return new SoraniStemFilter(input);}
public UpdateCustomVerificationEmailTemplateResult updateCustomVerificationEmailTemplate(UpdateCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeUpdateCustomVerificationEmailTemplate(request);}
public static FormulaError forInt(int type) throws IllegalArgumentException {FormulaError err = imap.get(type);if(err == null) err = bmap.get((byte)type);if(err == null) throw new IllegalArgumentException("Unknown error type: " + type);return err;}
public DeleteSubnetGroupResult deleteSubnetGroup(DeleteSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteSubnetGroup(request);}
public String toString() {return getClass().getName() + " [" +_error.getString() +"]";}
public Object toObject() {assert exists || 0.0D == value;return exists ? value : null;}
public void destroy() {super.destroy();if (onDiskFile != null) {try {if (!onDiskFile.delete())onDiskFile.deleteOnExit();} finally {onDiskFile = null;}}}
public DecreaseReplicationFactorResult decreaseReplicationFactor(DecreaseReplicationFactorRequest request) {request = beforeClientExecution(request);return executeDecreaseReplicationFactor(request);}
public Counta(){_predicate = defaultPredicate;}
public EvaluationWorkbook getWorkbook() {return _workbook;}
public DescribeRouteTablesResult describeRouteTables() {return describeRouteTables(new DescribeRouteTablesRequest());}
public CreateAssessmentTemplateResult createAssessmentTemplate(CreateAssessmentTemplateRequest request) {request = beforeClientExecution(request);return executeCreateAssessmentTemplate(request);}
public DeleteProjectResult deleteProject(DeleteProjectRequest request) {request = beforeClientExecution(request);return executeDeleteProject(request);}
public DeleteUserPolicyRequest(String userName, String policyName) {setUserName(userName);setPolicyName(policyName);}
public TermVectorsReader clone() {return new CompressingTermVectorsReader(this);}
public void close() {if (sock != null) {try {sch.releaseSession(sock);} finally {sock = null;}}}
public LongBuffer put(long c) {throw new ReadOnlyBufferException();}
public int serialize( int offset, byte[] data ) {LOG.log( DEBUG, "Serializing Workbook with offsets" );int pos = 0;SSTRecord lSST = null;int sstPos = 0;boolean wroteBoundSheets = false;for ( org.apache.poi.hssf.record.Record record : records.getRecords() ) {int len = 0;if (record instanceof SSTRecord) {lSST = (SSTRecord)record;sstPos = pos;}if (record.getSid() == ExtSSTRecord.sid && lSST != null) {record = lSST.createExtSSTRecord(sstPos + offset);}if (record instanceof BoundSheetRecord) {if(!wroteBoundSheets) {for (BoundSheetRecord bsr : boundsheets) {len += bsr.serialize(pos+offset+len, data);}wroteBoundSheets = true;}} else {len = record.serialize( pos + offset, data );}pos += len;}LOG.log( DEBUG, "Exiting serialize workbook" );return pos;}
public DescribeClusterSecurityGroupsResult describeClusterSecurityGroups() {return describeClusterSecurityGroups(new DescribeClusterSecurityGroupsRequest());}
public Explanation explain(Explanation freq, long norm) {return Explanation.match(score(freq.getValue().floatValue(), norm),"score(freq=" + freq.getValue() +"), with freq of:",Collections.singleton(freq));}
public DisassociatePhoneNumberFromUserResult disassociatePhoneNumberFromUser(DisassociatePhoneNumberFromUserRequest request) {request = beforeClientExecution(request);return executeDisassociatePhoneNumberFromUser(request);}
public boolean has(AnyObjectId objectId, int typeHint) throws IOException {try {open(objectId, typeHint);return true;} catch (MissingObjectException notFound) {return false;}}
public String toString(){StringBuilder buffer = new StringBuilder();buffer.append("[ATTACHEDLABEL]\n");buffer.append("    .formatFlags          = ").append("0x").append(HexDump.toHex(  getFormatFlags ())).append(" (").append( getFormatFlags() ).append(" )");buffer.append(System.getProperty("line.separator"));buffer.append("         .showActual               = ").append(isShowActual()).append('\n');buffer.append("         .showPercent              = ").append(isShowPercent()).append('\n');buffer.append("         .labelAsPercentage        = ").append(isLabelAsPercentage()).append('\n');buffer.append("         .smoothedLine             = ").append(isSmoothedLine()).append('\n');buffer.append("         .showLabel                = ").append(isShowLabel()).append('\n');buffer.append("         .showBubbleSizes          = ").append(isShowBubbleSizes()).append('\n');buffer.append("[/ATTACHEDLABEL]\n");return buffer.toString();}
public String toString(String field) {StringBuilder buffer = new StringBuilder();buffer.append("spanOr([");Iterator<SpanQuery> i = clauses.iterator();while (i.hasNext()) {SpanQuery clause = i.next();buffer.append(clause.toString(field));if (i.hasNext()) {buffer.append(", ");}}buffer.append("])");return buffer.toString();}
public DisableInsightRulesResult disableInsightRules(DisableInsightRulesRequest request) {request = beforeClientExecution(request);return executeDisableInsightRules(request);}
public BootstrapActionConfig newRunIf(String condition, BootstrapActionConfig config) {List<String> args = config.getScriptBootstrapAction().getArgs();args.add(0, condition);args.add(1, config.getScriptBootstrapAction().getPath());return new BootstrapActionConfig().withName("Run If, " + config.getName()).withScriptBootstrapAction(new ScriptBootstrapActionConfig().withPath("s3:.withArgs(args));}
public final CharBuffer get(char[] dst, int dstOffset, int charCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, charCount);if (charCount > remaining()) {throw new BufferUnderflowException();}int newPosition = position + charCount;sequence.toString().getChars(position, newPosition, dst, dstOffset);position = newPosition;return this;}
public Set<String> getNames(String section, String subsection) {return getState().getNames(section, subsection);}
public CreateBrokerResult createBroker(CreateBrokerRequest request) {request = beforeClientExecution(request);return executeCreateBroker(request);}
public void onAbsorb(int velocity) {mState = STATE_ABSORB;velocity = Math.max(MIN_VELOCITY, Math.abs(velocity));mStartTime = AnimationUtils.currentAnimationTimeMillis();mDuration = 0.1f + (velocity * 0.03f);mEdgeAlphaStart = 0.f;mEdgeScaleY = mEdgeScaleYStart = 0.f;mGlowAlphaStart = 0.5f;mGlowScaleYStart = 0.f;mEdgeAlphaFinish = Math.max(0, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1));mEdgeScaleYFinish = Math.max(HELD_EDGE_SCALE_Y, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1.f));mGlowScaleYFinish = Math.min(0.025f + (velocity * (velocity / 100) * 0.00015f), 1.75f);mGlowAlphaFinish = Math.max(mGlowAlphaStart, Math.min(velocity * VELOCITY_GLOW_FACTOR * .00001f, MAX_ALPHA));}
public ListSuppressedDestinationsResult listSuppressedDestinations(ListSuppressedDestinationsRequest request) {request = beforeClientExecution(request);return executeListSuppressedDestinations(request);}
public List<Pair<K,V>> getPairs() {List<Pair<K,V>> pairs = new ArrayList<Pair<K,V>>();for (K key : keySet()) {for (V value : get(key)) {pairs.add(new Pair<K,V>(key, value));}}return pairs;}
public void setParams(String params) {super.setParams(params);int k = params.indexOf(",");name = params.substring(0,k).trim();value = params.substring(k+1).trim();}
@Override public V put(K key, V value) {if (!isInBounds(key)) {throw outOfBounds(key, fromBound, toBound);}return putInternal(key, value);}
public DeregisterImageRequest(String imageId) {setImageId(imageId);}
public GetApplicationResult getApplication(GetApplicationRequest request) {request = beforeClientExecution(request);return executeGetApplication(request);}
public DescribeProblemObservationsResult describeProblemObservations(DescribeProblemObservationsRequest request) {request = beforeClientExecution(request);return executeDescribeProblemObservations(request);}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesAfterHeader = readHeader( data, offset );int pos = offset + HEADER_SIZE;System.arraycopy( data, pos, field_1_UID, 0, 16 ); pos += 16;field_2_marker = data[pos]; pos++;setPictureData(data, pos, bytesAfterHeader - 17);return bytesAfterHeader + HEADER_SIZE;}
public static boolean endsWith(BytesRef ref, BytesRef suffix) {int startAt = ref.length - suffix.length;if (startAt < 0) {return false;}return Arrays.equals(ref.bytes, ref.offset + startAt, ref.offset + startAt + suffix.length,suffix.bytes, suffix.offset, suffix.offset + suffix.length);}
public DeleteOptionGroupResult deleteOptionGroup(DeleteOptionGroupRequest request) {request = beforeClientExecution(request);return executeDeleteOptionGroup(request);}
public static String getFromUnicodeLE(byte[] string) {if (string.length == 0) {return "";}return getFromUnicodeLE(string, 0, string.length / 2);}
public CellRangeAddressList() {_list = new ArrayList<>();}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {throw new NotImplementedFunctionException(_functionName);}
public DescribeOptionGroupsResult describeOptionGroups() {return describeOptionGroups(new DescribeOptionGroupsRequest());}
public DisableVpcClassicLinkResult disableVpcClassicLink(DisableVpcClassicLinkRequest request) {request = beforeClientExecution(request);return executeDisableVpcClassicLink(request);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[SXIDSTM]\n");buffer.append("    .idstm      =").append(HexDump.shortToHex(idstm)).append('\n');buffer.append("[/SXIDSTM]\n");return buffer.toString();}
public ListStackInstancesResult listStackInstances(ListStackInstancesRequest request) {request = beforeClientExecution(request);return executeListStackInstances(request);}
public DescribeCompanyNetworkConfigurationResult describeCompanyNetworkConfiguration(DescribeCompanyNetworkConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeCompanyNetworkConfiguration(request);}
public final CoderResult flush(CharBuffer out) {if (status != END && status != INIT) {throw new IllegalStateException();}CoderResult result = implFlush(out);if (result == CoderResult.UNDERFLOW) {status = FLUSH;}return result;}
public DescribeDBClustersResult describeDBClusters(DescribeDBClustersRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusters(request);}
public GetDocumentVersionResult getDocumentVersion(GetDocumentVersionRequest request) {request = beforeClientExecution(request);return executeGetDocumentVersion(request);}
public TermData subtract(TermData t1, TermData t2) {if (t2 == NO_OUTPUT) {return t1;}TermData ret;if (statsEqual(t1, t2) && bytesEqual(t1, t2)) {ret = NO_OUTPUT;} else {ret = new TermData(t1.bytes, t1.docFreq, t1.totalTermFreq);}return ret;}
public ModifyCapacityReservationResult modifyCapacityReservation(ModifyCapacityReservationRequest request) {request = beforeClientExecution(request);return executeModifyCapacityReservation(request);}
@Override public int size() {synchronized (mutex) {return c.size();}}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}
public int length() throws UnsupportedOperationException {if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {return this.length;}throw new UnsupportedOperationException("length meaningless for " + toString());}
public String toFormulaString() {throw invalid();}
public E next() {if (iterator.nextIndex() < end) {return iterator.next();}throw new NoSuchElementException();}
public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, "");return sb.toString();}
public long get(int index) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;return (blocks[o] >>> shift) & 1L;}
public int[] clear() {start = end = null;return super.clear();}
public TokenStream init(TokenStream tokenStream) {termAtt = tokenStream.addAttribute(CharTermAttribute.class);return null;}
public UpdateGameServerGroupResult updateGameServerGroup(UpdateGameServerGroupRequest request) {request = beforeClientExecution(request);return executeUpdateGameServerGroup(request);}
public UnmappableCharacterException(int length) {this.inputLength = length;}
public UpdateIdentityProviderConfigurationResult updateIdentityProviderConfiguration(UpdateIdentityProviderConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateIdentityProviderConfiguration(request);}
@Override public int lastIndexOf(Object object) {Object[] a = array;if (object != null) {for (int i = size - 1; i >= 0; i--) {if (object.equals(a[i])) {return i;}}} else {for (int i = size - 1; i >= 0; i--) {if (a[i] == null) {return i;}}}return -1;}
public ConstantScoreQueryBuilder(QueryBuilderFactory queryFactory) {this.queryFactory = queryFactory;}
public int getNumberOfOnChannelTokens() {int n = 0;fill();for (int i = 0; i < tokens.size(); i++) {Token t = tokens.get(i);if ( t.getChannel()==channel ) n++;if ( t.getType()==Token.EOF ) break;}return n;}
public POIFSDocumentPath(final String [] components)throws IllegalArgumentException{if (components == null){this.components = new String[ 0 ];}else{this.components = new String[ components.length ];for (int j = 0; j < components.length; j++){if ((components[ j ] == null)|| (components[ j ].length() == 0)){throw new IllegalArgumentException("components cannot contain null or empty strings");}this.components[ j ] = components[ j ];}}}
public SQLException(String theReason) {this(theReason, null, 0);}
public ListFragmentsResult listFragments(ListFragmentsRequest request) {request = beforeClientExecution(request);return executeListFragments(request);}
public QueryBuilder getQueryBuilder(String nodeName) {return builders.get(nodeName);}
public CreateDirectoryResult createDirectory(CreateDirectoryRequest request) {request = beforeClientExecution(request);return executeCreateDirectory(request);}
public int getExternalSheetIndex(String workbookName, String sheetName) {return getOrCreateLinkTable().getExternalSheetIndex(workbookName, sheetName, sheetName);}
public V getValue() {return value;}
public K getKey() {return key;}
public boolean hasTransparentBounds() {return transparentBounds;}
public void setKeepEmpty(boolean empty) {keepEmpty = empty;}
public XPathRuleAnywhereElement(String ruleName, int ruleIndex) {super(ruleName);this.ruleIndex = ruleIndex;}
public int getHeight(){return _height;}
public final void write(OpenStringBuilder arr) {write(arr.buf, 0, len);}
public void jumpDrawablesToCurrentState() {super.jumpDrawablesToCurrentState();if (mThumb != null) mThumb.jumpToCurrentState();}
public void setParams(String params) {super.setParams(params);final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));stok.quoteChar('"');stok.quoteChar('\'');stok.eolIsSignificant(false);stok.ordinaryChar(',');try {while (stok.nextToken() != StreamTokenizer.TT_EOF) {switch (stok.ttype) {case ',': {break;}case '\'':case '\"':case StreamTokenizer.TT_WORD: {analyzerNames.add(stok.sval);break;}default: {throw new RuntimeException("Unexpected token: " + stok.toString());}}}} catch (RuntimeException e) {if (e.getMessage().startsWith("Line #")) {throw e;} else {throw new RuntimeException("Line #" + (stok.lineno() + getAlgLineNum()) + ": ", e);}} catch (Throwable t) {throw new RuntimeException("Line #" + (stok.lineno() + getAlgLineNum()) + ": ", t);}}
public DescribeVolumesResult describeVolumes(DescribeVolumesRequest request) {request = beforeClientExecution(request);return executeDescribeVolumes(request);}
public DescribeFlowLogsResult describeFlowLogs(DescribeFlowLogsRequest request) {request = beforeClientExecution(request);return executeDescribeFlowLogs(request);}
public UpdateMethodResult updateMethod(UpdateMethodRequest request) {request = beforeClientExecution(request);return executeUpdateMethod(request);}
public GetAuthorizationTokenRequest() {super("cr", "2016-06-07", "GetAuthorizationToken", "cr");setUriPattern("/tokens");setMethod(MethodType.GET);}
public StopContactResult stopContact(StopContactRequest request) {request = beforeClientExecution(request);return executeStopContact(request);}
public CreateDataSetResult createDataSet(CreateDataSetRequest request) {request = beforeClientExecution(request);return executeCreateDataSet(request);}
public ObjectDatabase newCachedDatabase() {return this;}
public CreateJourneyResult createJourney(CreateJourneyRequest request) {request = beforeClientExecution(request);return executeCreateJourney(request);}
public DeleteDashboardsResult deleteDashboards(DeleteDashboardsRequest request) {request = beforeClientExecution(request);return executeDeleteDashboards(request);}
public UpgradeIndexMergePolicy(MergePolicy in) {super(in);}
public GetHealthCheckCountResult getHealthCheckCount(GetHealthCheckCountRequest request) {request = beforeClientExecution(request);return executeGetHealthCheckCount(request);}
public ChartStartBlockRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();iObjectKind = in.readShort();iObjectContext = in.readShort();iObjectInstance1 = in.readShort();iObjectInstance2 = in.readShort();}
public SeriesRecord(RecordInputStream in) {field_1_categoryDataType = in.readShort();field_2_valuesDataType   = in.readShort();field_3_numCategories    = in.readShort();field_4_numValues        = in.readShort();field_5_bubbleSeriesType = in.readShort();field_6_numBubbleValues  = in.readShort();}
public static Class<? extends CharFilterFactory> lookupClass(String name) {return loader.lookupClass(name);}
public GetPublicKeyResult getPublicKey(GetPublicKeyRequest request) {request = beforeClientExecution(request);return executeGetPublicKey(request);}
public CreateLocalGatewayRouteTableVpcAssociationResult createLocalGatewayRouteTableVpcAssociation(CreateLocalGatewayRouteTableVpcAssociationRequest request) {request = beforeClientExecution(request);return executeCreateLocalGatewayRouteTableVpcAssociation(request);}
public static boolean toBoolean(String stringValue) {if (stringValue == null)throw new NullPointerException(JGitText.get().expectedBooleanStringValue);final Boolean bool = toBooleanOrNull(stringValue);if (bool == null)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().notABoolean, stringValue));return bool.booleanValue();}
public Set<String> getAdded() {return Collections.unmodifiableSet(diff.getAdded());}
public Set<String> getNames(String section) {return getNames(section, null);}
public DescribeCacheClustersResult describeCacheClusters(DescribeCacheClustersRequest request) {request = beforeClientExecution(request);return executeDescribeCacheClusters(request);}
public List<String> getUnmergedPaths() {return unmergedPaths;}
public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length != 2) {return ErrorEval.VALUE_INVALID;}return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}
public int addString(UnicodeString string){field_1_num_strings++;UnicodeString ucs = ( string == null ) ? EMPTY_STRING: string;int rval;int index = field_3_strings.getIndex(ucs);if ( index != -1 ) {rval = index;} else {rval = field_3_strings.size();field_2_num_unique_strings++;SSTDeserializer.addToStringTable( field_3_strings, ucs );}return rval;}
public long getDeltaSearchMemoryLimit() {return deltaSearchMemoryLimit;}
public String toString() {return "Token(\"" + new String(surfaceForm, offset, length) + "\" pos=" + position + " length=" + length +" posLen=" + positionLength + " type=" + type + " wordId=" + wordId +" leftID=" + dictionary.getLeftId(wordId) + ")";}
public String toFormulaString(FormulaRenderingWorkbook book) {return ExternSheetNameResolver.prependSheetName(book, field_1_index_extern_sheet, formatReferenceAsString());}
public E get(int index) {return (E) elements[index];}
public byte[] getCachedBytes() {return data;}
public DescribeConnectionsResult describeConnections() {return describeConnections(new DescribeConnectionsRequest());}
public void ensureCapacity(int minimumCapacity) {Object[] a = array;if (a.length < minimumCapacity) {Object[] newArray = new Object[minimumCapacity];System.arraycopy(a, 0, newArray, 0, size);array = newArray;modCount++;}}
public DeleteLifecycleHookResult deleteLifecycleHook(DeleteLifecycleHookRequest request) {request = beforeClientExecution(request);return executeDeleteLifecycleHook(request);}
public final float maxBytesPerChar() {return maxBytesPerChar;}
public BlankCellRectangleGroup(int firstRowIndex, int firstColumnIndex, int lastColumnIndex) {_firstRowIndex = firstRowIndex;_firstColumnIndex = firstColumnIndex;_lastColumnIndex = lastColumnIndex;_lastRowIndex = firstRowIndex;}
public int findEndOfRowOutlineGroup(int row) {int level = getRow( row ).getOutlineLevel();int currentRow;for (currentRow = row; currentRow < getLastRowNum(); currentRow++) {if (getRow(currentRow) == null || getRow(currentRow).getOutlineLevel() < level) {break;}}return currentRow-1;}
public String getEncoding() {if (encoder == null) {return null;}return HistoricalCharsetNames.get(encoder.charset());}
public void clearAllCachedResultValues() {_cache.clear();_sheetIndexesBySheet.clear();_workbook.clearAllCachedResultValues();}
public final String toString() {StringBuilder sb = new StringBuilder();String recordName = getRecordName();sb.append("[").append(recordName).append("]\n");sb.append("    .row    = ").append(HexDump.shortToHex(getRow())).append("\n");sb.append("    .col    = ").append(HexDump.shortToHex(getColumn())).append("\n");if (isBiff2()) {sb.append("    .cellattrs = ").append(HexDump.shortToHex(getCellAttrs())).append("\n");} else {sb.append("    .xfindex   = ").append(HexDump.shortToHex(getXFIndex())).append("\n");}appendValueText(sb);sb.append("\n");sb.append("[/").append(recordName).append("]\n");return sb.toString();}
public DescribeDBClusterEndpointsResult describeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {request = beforeClientExecution(request);return executeDescribeDBClusterEndpoints(request);}
public boolean renameTo(final String newName){boolean rval = false;if (!isRoot()){rval = _parent.changeName(getName(), newName);}return rval;}
public Explanation explain(Explanation freq, long norm) {List<Explanation> subs = new ArrayList<>();for (SimScorer subScorer : subScorers) {subs.add(subScorer.explain(freq, norm));}return Explanation.match(score(freq.getValue().floatValue(), norm), "sum of:", subs);}
public DocTermsIndexDocValues(ValueSource vs, LeafReaderContext context, String field) throws IOException {this(vs, open(context, field));}
public static int compareTo(Ref o1, Ref o2) {return o1.getName().compareTo(o2.getName());}
public Dimension getImageDimension(){InternalWorkbook iwb = getPatriarch().getSheet().getWorkbook().getWorkbook();EscherBSERecord bse = iwb.getBSERecord(getPictureIndex());byte[] data = bse.getBlipRecord().getPicturedata();int type = bse.getBlipTypeWin32();return ImageUtils.getImageDimension(new ByteArrayInputStream(data), type);}
public static double var(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = devsq(v) / (v.length - 1);}return r;}
public UpdateCloudFrontOriginAccessIdentityRequest(CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig, String id, String ifMatch) {setCloudFrontOriginAccessIdentityConfig(cloudFrontOriginAccessIdentityConfig);setId(id);setIfMatch(ifMatch);}
public DiffCommand setDestinationPrefix(String destinationPrefix) {this.destinationPrefix = destinationPrefix;return this;}
public int available() throws IOException {return IoBridge.available(fd);}
final public SrndQuery NotQuery() throws ParseException {SrndQuery q;ArrayList<SrndQuery> queries = null;Token oprt = null;q = NQuery();label_4:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case NOT:;break;default:jj_la1[2] = jj_gen;break label_4;}oprt = jj_consume_token(NOT);if (queries == null) {queries = new ArrayList<SrndQuery>();queries.add(q);}q = NQuery();queries.add(q);}{if (true) return (queries == null) ? q : getNotQuery(queries, oprt);}throw new Error("Missing return statement in function");}
public String toString() {StringBuilder sb = new StringBuilder();sb.append('[').append("USERSVIEWEND").append("] (0x");sb.append(Integer.toHexString(sid).toUpperCase(Locale.ROOT)).append(")\n");sb.append("  rawData=").append(HexDump.toHex(_rawData)).append("\n");sb.append("[/").append("USERSVIEWEND").append("]\n");return sb.toString();}
public FloatBuffer asReadOnlyBuffer() {FloatToByteBufferAdapter buf = new FloatToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}
public LogCommand log() {return new LogCommand(repo);}
public CreateDomainResult createDomain(CreateDomainRequest request) {request = beforeClientExecution(request);return executeCreateDomain(request);}
public int getWeight() {return WEIGHT_UNKNOWN;}
public ChartStartObjectRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();iObjectKind = in.readShort();iObjectContext = in.readShort();iObjectInstance1 = in.readShort();iObjectInstance2 = in.readShort();}
public void remove() {if (lastReturned == null)throw new IllegalStateException();ConcurrentHashMap.this.remove(lastReturned.key);lastReturned = null;}
public DescribeMetricCollectionTypesResult describeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request) {request = beforeClientExecution(request);return executeDescribeMetricCollectionTypes(request);}
public UpdateFieldLevelEncryptionProfileResult updateFieldLevelEncryptionProfile(UpdateFieldLevelEncryptionProfileRequest request) {request = beforeClientExecution(request);return executeUpdateFieldLevelEncryptionProfile(request);}
public Ref getLeaf() {return this;}
public int lastIndexOf(Object object) {if (object != null) {for (int i = a.length - 1; i >= 0; i--) {if (object.equals(a[i])) {return i;}}} else {for (int i = a.length - 1; i >= 0; i--) {if (a[i] == null) {return i;}}}return -1;}
public DefaultBulkScorer(Scorer scorer) {if (scorer == null) {throw new NullPointerException();}this.scorer = scorer;this.iterator = scorer.iterator();this.twoPhase = scorer.twoPhaseIterator();}
public CreateRepoAuthorizationRequest() {super("cr", "2016-06-07", "CreateRepoAuthorization", "cr");setUriPattern("/repos/[RepoNamespace]/[RepoName]/authorizations");setMethod(MethodType.PUT);}
public TokenStream create(TokenStream input) {return new PortugueseLightStemFilter(input);}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[TABLESTYLES]\n");buffer.append("    .rt      =").append(HexDump.shortToHex(rt)).append('\n');buffer.append("    .grbitFrt=").append(HexDump.shortToHex(grbitFrt)).append('\n');buffer.append("    .unused  =").append(HexDump.toHex(unused)).append('\n');buffer.append("    .cts=").append(HexDump.intToHex(cts)).append('\n');buffer.append("    .rgchDefListStyle=").append(rgchDefListStyle).append('\n');buffer.append("    .rgchDefPivotStyle=").append(rgchDefPivotStyle).append('\n');buffer.append("[/TABLESTYLES]\n");return buffer.toString();}
public synchronized Enumeration<K> keys() {return new KeyEnumeration();}
public DescribeInstanceTypesResult describeInstanceTypes(DescribeInstanceTypesRequest request) {request = beforeClientExecution(request);return executeDescribeInstanceTypes(request);}
public RefUpdate.Result getResult() {return rc;}
public UpdateBasePathMappingResult updateBasePathMapping(UpdateBasePathMappingRequest request) {request = beforeClientExecution(request);return executeUpdateBasePathMapping(request);}
public UpdateDocumentResult updateDocument(UpdateDocumentRequest request) {request = beforeClientExecution(request);return executeUpdateDocument(request);}
public void setStreamFileThreshold(int newLimit) {streamFileThreshold = newLimit;}
public String toString() {StringBuilder buffer = new StringBuilder();buffer.append("[EXTSST]\n");buffer.append("    .dsst           = ").append(Integer.toHexString(_stringsPerBucket)).append("\n");buffer.append("    .numInfoRecords = ").append(_sstInfos.length).append("\n");for (int k = 0; k < _sstInfos.length; k++){buffer.append("    .inforecord     = ").append(k).append("\n");buffer.append("    .streampos      = ").append(Integer.toHexString(_sstInfos[k].getStreamPos())).append("\n");buffer.append("    .sstoffset      = ").append(Integer.toHexString(_sstInfos[k].getBucketSSTOffset())).append("\n");}buffer.append("[/EXTSST]\n");return buffer.toString();}
public void setCRC(int crc) {this.crc = crc;}
public RevFilter getRevFilter() {return filter;}
public SrndPrefixQuery(String prefix, boolean quoted, char truncator) {super(quoted);this.prefix = prefix;prefixRef = new BytesRef(prefix);this.truncator = truncator;}
public byte readByte() throws IOException {int v = is.read();if (v == -1) throw new EOFException();return (byte) v;}
public GetWorkGroupResult getWorkGroup(GetWorkGroupRequest request) {request = beforeClientExecution(request);return executeGetWorkGroup(request);}
public PutBlockPublicAccessConfigurationResult putBlockPublicAccessConfiguration(PutBlockPublicAccessConfigurationRequest request) {request = beforeClientExecution(request);return executePutBlockPublicAccessConfiguration(request);}
public String toString() {final StringBuilder r = new StringBuilder();r.append('[');for (int i = 0; i < count; i++) {if (i > 0)r.append(", "); r.append(entries[i]);}r.append(']');return r.toString();}
public int get(int index) {checkIndex(index);return byteBuffer.getInt(index * SizeOf.INT);}
public CreateAlbumRequest() {super("CloudPhoto", "2017-07-11", "CreateAlbum", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public FileTreeIterator(File root, FS fs, WorkingTreeOptions options) {this(root, fs, options, DefaultFileModeStrategy.INSTANCE);}
public int byteAt(int idx) {return bytes[idx].value;}
public DescribeTypeRegistrationResult describeTypeRegistration(DescribeTypeRegistrationRequest request) {request = beforeClientExecution(request);return executeDescribeTypeRegistration(request);}
public TerminateInstancesResult terminateInstances(TerminateInstancesRequest request) {request = beforeClientExecution(request);return executeTerminateInstances(request);}
public DoubleBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());DoubleToByteBufferAdapter buf = new DoubleToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}
public OR(SemanticContext a, SemanticContext b) {Set<SemanticContext> operands = new HashSet<SemanticContext>();if ( a instanceof OR ) operands.addAll(Arrays.asList(((OR)a).opnds));else operands.add(a);if ( b instanceof OR ) operands.addAll(Arrays.asList(((OR)b).opnds));else operands.add(b);List<PrecedencePredicate> precedencePredicates = filterPrecedencePredicates(operands);if (!precedencePredicates.isEmpty()) {PrecedencePredicate reduced = Collections.max(precedencePredicates);operands.add(reduced);}this.opnds = operands.toArray(new SemanticContext[operands.size()]);}
public void serialize(LittleEndianOutput out) {out.writeShort(_formats.length);for(int i=0; i<_formats.length; i++){_formats[i].serialize(out);}}
public DescribeAvailabilityOptionsResult describeAvailabilityOptions(DescribeAvailabilityOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeAvailabilityOptions(request);}
public int getOffset() {return offset;}
public static float[] grow(float[] array) {return grow(array, 1 + array.length);}
public ListMetricsResult listMetrics() {return listMetrics(new ListMetricsRequest());}
public int findFirstRecordLocBySid(short sid) {int index = 0;for (org.apache.poi.hssf.record.Record record : records.getRecords() ) {if (record.getSid() == sid) {return index;}index ++;}return -1;}
public DeleteVpnConnectionRouteResult deleteVpnConnectionRoute(DeleteVpnConnectionRouteRequest request) {request = beforeClientExecution(request);return executeDeleteVpnConnectionRoute(request);}