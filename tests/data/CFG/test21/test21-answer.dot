digraph  {
6 [label="1_\ public\ class\ Test\ ", type_label=class_declaration];
10 [label="3_\ \ public\ void\ run\ \(\)", type_label=method_declaration];
16 [label="4_\ long\ lastReopenStartNS\ =\ System\.nanoTime\(\);", type_label=expression_statement];
24 [label="5_\ while\(!finish\)", type_label=while];
29 [label="6_\ while\(!finish\)", type_label=while];
34 [label="7_\ reopenLock\.lock\(\);", type_label=expression_statement];
39 [label="8_\ try", type_label=try];
41 [label="9_\ boolean\ hasWaiting\ =\ waitingGen\ >\ searchingGen;", type_label=expression_statement];
48 [label="10_\ final\ long\ nextReopenStartNS\ =\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ lastReopenStartNS\ \+\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \(hasWaiting\ \?\ targetMinStaleNS\ :\ targetMaxStaleNS\);", type_label=expression_statement];
60 [label="13_\ final\ long\ sleepNS\ =\ nextReopenStartNS\ \-\ System\.nanoTime\(\);", type_label=expression_statement];
71 [label="14_\ if\(sleepNS\ >\ 0\)", type_label=if];
77 [label="15_\ reopenCond\.awaitNanos\(sleepNS\);", type_label=expression_statement];
84 [label="17_\ break;", type_label=expression_statement];
85 [label="19_\ catch\ \(InterruptedException\ ie\)", type_label=catch];
91 [label="20_\ Thread\.currentThread\(\)\.interrupt\(\);", type_label=expression_statement];
99 [label="21_\ return;", type_label=return];
100 [label="22_\ finally", type_label=finally];
102 [label="23_\ reopenLock\.unlock\(\);", type_label=expression_statement];
107 [label="26_\ if\(finish\)", type_label=if];
111 [label="27_\ break;", type_label=expression_statement];
112 [label="29_\ lastReopenStartNS\ =\ System\.nanoTime\(\);", type_label=expression_statement];
119 [label="30_\ refreshStartGen\ =\ writer\.getMaxCompletedSequenceNumber\(\);", type_label=expression_statement];
126 [label="31_\ try", type_label=try];
128 [label="32_\ manager\.maybeRefreshBlocking\(\);", type_label=expression_statement];
133 [label="33_\ catch\ \(IOException\ ioe\)", type_label=catch];
139 [label="34_\ throw\ new\ RuntimeException\(ioe\);", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
10 -> 16  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
16 -> 24  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
24 -> 29  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 107  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
34 -> 39  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
39 -> 41  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
41 -> 48  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
41 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
48 -> 60  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
48 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
60 -> 71  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
60 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
71 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
71 -> 100  [color=red, controlflow_type=try_exit, edge_type=CFG_edge, key=0, label=try_exit];
71 -> 77  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
71 -> 84  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
77 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
84 -> 85  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
84 -> 107  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
85 -> 91  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
91 -> 99  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
100 -> 102  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
102 -> 29  [color=red, controlflow_type=finally_exit, edge_type=CFG_edge, key=0, label=finally_exit];
107 -> 111  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
107 -> 112  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
112 -> 119  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
119 -> 126  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
126 -> 128  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
128 -> 133  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
128 -> 24  [color=red, controlflow_type=try_exit, edge_type=CFG_edge, key=0, label=try_exit];
133 -> 139  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
1 -> 10  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
