digraph  {
6 [label="1_\ public\ class\ Test\ ", type_label=class_declaration];
10 [label="2_\ \ protected\ void\ handleBodyLinks\ \(JsonNode\ jsonBody,\ Map<String,\ Map<URI,\ String>>\ links,\ Map<String,\ String>\ linkTemplates\)", type_label=method_declaration];
37 [label="3_\ if\(jsonBody\.getNodeType\(\)\ !=\ JsonNodeType\.OBJECT\)", type_label=if];
48 [label="4_\ return;", type_label=return];
49 [label="7_\ JsonNode\ linksNode\ =\ jsonBody\.get\(\"_links\"\);", type_label=expression_statement];
58 [label="8_\ if\(linksNode\ ==\ null\)", type_label=if];
64 [label="9_\ linksNode\ =\ jsonBody\.get\(\"links\"\);", type_label=expression_statement];
72 [label="11_\ if\(linksNode\ ==\ null\)", type_label=if];
78 [label="12_\ return;", type_label=return];
79 [label="15_\ linksNode\.fields\(\)\.forEachRemaining\(\);", type_label=expression_statement];
87 [label="15_\ x\ \->\ ", type_label=expression_statement];
90 [label="16_\ String\ rel\ =\ x\.getKey\(\);", type_label=expression_statement];
98 [label="17_\ Map<URI,\ String>\ linksForRel\ =\ getOrAdd\(links,\ rel\);", type_label=expression_statement];
111 [label="19_\ switch\ \(x\.getValue\(\)\.getNodeType\(\)\)\ ", type_label=switch];
121 [label="20_\ case\ ARRAY:", type_label=case];
124 [label="21_\ x\.getValue\(\)\.forEach\(\);", type_label=expression_statement];
132 [label="21_\ subobj\ \->\ ", type_label=expression_statement];
135 [label="22_\ if\(subobj\.getNodeType\(\)\ ==\ JsonNodeType\.OBJECT\)", type_label=if];
146 [label="23_\ parseLinkObject\(rel,\ \(ObjectNode\)\ subobj,\ linksForRel,\ linkTemplates\);", type_label=expression_statement];
156 [label="26_\ break;", type_label=expression_statement];
157 [label="27_\ case\ OBJECT:", type_label=case];
160 [label="28_\ parseLinkObject\(rel,\ \(ObjectNode\)\ x\.getValue\(\),\ linksForRel,\ linkTemplates\);", type_label=expression_statement];
173 [label="29_\ break;", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
10 -> 37  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
37 -> 48  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
37 -> 49  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
49 -> 58  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
58 -> 64  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
58 -> 72  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
64 -> 72  [color=red, controlflow_type="next_line 2", edge_type=CFG_edge, key=0, label="next_line 2"];
72 -> 78  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
72 -> 79  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
79 -> 87  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
87 -> 90  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
90 -> 98  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
98 -> 111  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
111 -> 121  [color=red, controlflow_type=switch_case, edge_type=CFG_edge, key=0, label=switch_case];
111 -> 157  [color=red, controlflow_type=switch_case, edge_type=CFG_edge, key=0, label=switch_case];
111 -> 79  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
121 -> 124  [color=red, controlflow_type=case_next, edge_type=CFG_edge, key=0, label=case_next];
124 -> 156  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
124 -> 132  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
132 -> 135  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
135 -> 146  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
135 -> 124  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
146 -> 124  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
156 -> 79  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
157 -> 160  [color=red, controlflow_type=case_next, edge_type=CFG_edge, key=0, label=case_next];
160 -> 173  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
173 -> 79  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
1 -> 10  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
