{"directed": true, "multigraph": true, "graph": {}, "nodes": [{"label": "1_ public class Test ", "type_label": "class_declaration", "id": 6}, {"label": "3_  public final QueryNode DisjQuery (CharSequence field) throws ParseException", "type_label": "method_declaration", "id": 10}, {"label": "4_ QueryNode first, c;", "type_label": "expression_statement", "id": 21}, {"label": "5_ Vector<QueryNode> clauses = null;", "type_label": "expression_statement", "id": 27}, {"label": "6_ first = ConjQuery(field);", "type_label": "expression_statement", "id": 35}, {"label": "7_ label_2:", "type_label": "label", "id": 42}, {"label": "7_ while(true)", "type_label": "while", "id": 44}, {"label": "8_ switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) ", "type_label": "switch", "id": 48}, {"label": "9_ case OR:", "type_label": "case", "id": 61}, {"label": "10_ break;", "type_label": "expression_statement", "id": 64}, {"label": "11_ default:", "type_label": "case", "id": 65}, {"label": "12_ jj_la1[3] = jj_gen;", "type_label": "expression_statement", "id": 67}, {"label": "13_ break label_2;", "type_label": "expression_statement", "id": 73}, {"label": "15_ jj_consume_token(OR);", "type_label": "expression_statement", "id": 75}, {"label": "16_ c = ConjQuery(field);", "type_label": "expression_statement", "id": 80}, {"label": "17_ if(clauses == null)", "type_label": "if", "id": 87}, {"label": "18_ clauses = new Vector<QueryNode>();", "type_label": "expression_statement", "id": 93}, {"label": "19_ clauses.addElement(first);", "type_label": "expression_statement", "id": 102}, {"label": "21_ clauses.addElement(c);", "type_label": "expression_statement", "id": 108}, {"label": "23_ if(clauses != null)", "type_label": "if", "id": 114}, {"label": "25_ if(true)", "type_label": "if", "id": 121}, {"label": "25_ return new OrQueryNode(clauses);", "type_label": "return", "id": 124}, {"label": "29_ if(true)", "type_label": "if", "id": 131}, {"label": "29_ return first;", "type_label": "return", "id": 134}, {"label": "32_ throw new Error(\"Missing return statement in function\");", "type_label": "expression_statement", "id": 136}, {"label": "1_ start_node", "type_label": "start", "id": 1}], "links": [{"controlflow_type": "first_next_line", "edge_type": "CFG_edge", "label": "first_next_line", "color": "red", "source": 10, "target": 21, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 21, "target": 27, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 27, "target": 35, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 35, "target": 42, "key": 0}, {"controlflow_type": "first_next_line", "edge_type": "CFG_edge", "label": "first_next_line", "color": "red", "source": 42, "target": 44, "key": 0}, {"controlflow_type": "pos_next", "edge_type": "CFG_edge", "label": "pos_next", "color": "red", "source": 44, "target": 48, "key": 0}, {"controlflow_type": "neg_next", "edge_type": "CFG_edge", "label": "neg_next", "color": "red", "source": 44, "target": 114, "key": 0}, {"controlflow_type": "switch_case", "edge_type": "CFG_edge", "label": "switch_case", "color": "red", "source": 48, "target": 61, "key": 0}, {"controlflow_type": "switch_case", "edge_type": "CFG_edge", "label": "switch_case", "color": "red", "source": 48, "target": 65, "key": 0}, {"controlflow_type": "case_next", "edge_type": "CFG_edge", "label": "case_next", "color": "red", "source": 61, "target": 64, "key": 0}, {"controlflow_type": "jump_next", "edge_type": "CFG_edge", "label": "jump_next", "color": "red", "source": 64, "target": 75, "key": 0}, {"controlflow_type": "case_next", "edge_type": "CFG_edge", "label": "case_next", "color": "red", "source": 65, "target": 67, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 67, "target": 73, "key": 0}, {"controlflow_type": "jump_next", "edge_type": "CFG_edge", "label": "jump_next", "color": "red", "source": 73, "target": 114, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 75, "target": 80, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 80, "target": 87, "key": 0}, {"controlflow_type": "pos_next", "edge_type": "CFG_edge", "label": "pos_next", "color": "red", "source": 87, "target": 93, "key": 0}, {"controlflow_type": "next_line 6", "edge_type": "CFG_edge", "label": "next_line 6", "color": "red", "source": 87, "target": 108, "key": 0}, {"controlflow_type": "next_line 1", "edge_type": "CFG_edge", "label": "next_line 1", "color": "red", "source": 93, "target": 102, "key": 0}, {"controlflow_type": "next_line 2", "edge_type": "CFG_edge", "label": "next_line 2", "color": "red", "source": 102, "target": 108, "key": 0}, {"controlflow_type": "loop_control", "edge_type": "CFG_edge", "label": "loop_control", "color": "red", "source": 108, "target": 44, "key": 0}, {"controlflow_type": "pos_next", "edge_type": "CFG_edge", "label": "pos_next", "color": "red", "source": 114, "target": 121, "key": 0}, {"controlflow_type": "neg_next", "edge_type": "CFG_edge", "label": "neg_next", "color": "red", "source": 114, "target": 131, "key": 0}, {"controlflow_type": "pos_next", "edge_type": "CFG_edge", "label": "pos_next", "color": "red", "source": 121, "target": 124, "key": 0}, {"controlflow_type": "next_line 6", "edge_type": "CFG_edge", "label": "next_line 6", "color": "red", "source": 121, "target": 136, "key": 0}, {"controlflow_type": "pos_next", "edge_type": "CFG_edge", "label": "pos_next", "color": "red", "source": 131, "target": 134, "key": 0}, {"controlflow_type": "next_line 6", "edge_type": "CFG_edge", "label": "next_line 6", "color": "red", "source": 131, "target": 136, "key": 0}, {"controlflow_type": "next", "edge_type": "CFG_edge", "label": "next", "color": "red", "source": 1, "target": 10, "key": 0}]}