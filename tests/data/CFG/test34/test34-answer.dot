digraph  {
6 [label="1_\ public\ class\ Test\ ", type_label=class_declaration];
10 [label="2_\ \ protected\ void\ delete\ \(\)", type_label=method_declaration];
16 [label="3_\ String\ question\ =\ \"Are\ you\ sure\ you\ want\ to\ delete\ the\ data\ from\ the\ server\?\";", type_label=expression_statement];
21 [label="4_\ ConfirmDialog\.show\(getUI\(\),\ question,\ new\ ConfirmDialog\.Listener\(\)\ \);", type_label=expression_statement];
36 [label="5_\ \ @Override\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ public\ void\ onClose\ \(ConfirmDialog\ cd\)", type_label=method_declaration];
47 [label="7_\ if\(cd\.isConfirmed\(\)\)", type_label=if];
54 [label="8_\ try", type_label=try];
56 [label="9_\ endpoint\.delete\(\);", type_label=expression_statement];
61 [label="10_\ close\(\);", type_label=expression_statement];
65 [label="11_\ catch\ \(IOException\ \|\ IllegalArgumentException\ \|\ IllegalAccessException\ \|\ IllegalStateException\ ex\)", type_label=catch];
74 [label="12_\ onError\(ex\);", type_label=expression_statement];
79 [label="13_\ catch\ \(RuntimeException\ ex\)", type_label=catch];
85 [label="16_\ getUI\(\)\.getErrorHandler\(\)\.error\(new\ com\.vaadin\.server\.ErrorEvent\(ex\)\);", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
10 -> 16  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
16 -> 21  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
36 -> 47  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
47 -> 54  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
54 -> 56  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
56 -> 61  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
56 -> 65  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
56 -> 79  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
61 -> 65  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
61 -> 79  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
65 -> 74  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
79 -> 85  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
1 -> 10  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
