digraph  {
6 [label="1_\ public\ class\ Test\ ", type_label=class_declaration];
10 [label="2_\ \ void\ loadSubdivisions\ \(\)", type_label=method_declaration];
15 [label="3_\ InputStream\ iso3166_2Resource\ =\ this\.getClass\(\)\.getResourceAsStream\(ISO_3166_2_LOCATION\);", type_label=expression_statement];
27 [label="4_\ if\(iso3166_2Resource\ ==\ null\)", type_label=if];
33 [label="5_\ throw\ new\ IllegalStateException\(\\n\ \ \ \ \ \ \ \ \ \ \"Can't\ find\ the\ list\ of\ subdivisions!\ Expected\ location\ was:\"\ \+\\n\ \ \ \ \ \ \ \ \ \ ISO_3166_2_LOCATION\\n\ \ \ \ \ \ \ \ \);", type_label=expression_statement];
40 [label="10_\ XmlConverter<ISO3166_2_CountryEntity>\ converter\ =\ new\ XmlConverter<>\(\\n\ \ \ \ \ \ \ \ \"iso_3166_country\",\\n\ \ \ \ \ \ \ \ ISO3166_2_CountryEntity\.class\\n\ \ \ \ \ \ \);", type_label=expression_statement];
55 [label="14_\ ObservableList<ISO3166_2_CountryEntity>\ subdivisionsEntities\ =\ FXCollections\.observableArrayList\(\);", type_label=expression_statement];
66 [label="15_\ try", type_label=try];
68 [label="16_\ DataReader<ISO3166_2_CountryEntity>\ dataSource\ =\ new\ InputStreamSource<>\(\\n\ \ \ \ \ \ \ \ \ \ iso3166_2Resource,\\n\ \ \ \ \ \ \ \ \ \ converter\\n\ \ \ \ \ \ \ \ \);", type_label=expression_statement];
82 [label="20_\ ListDataProvider<ISO3166_2_CountryEntity>\ listDataProvider\ =\ new\ ListDataProvider<>\(\\n\ \ \ \ \ \ \ \ \ \ dataSource\\n\ \ \ \ \ \ \ \ \);", type_label=expression_statement];
95 [label="23_\ listDataProvider\.setResultObservableList\(subdivisionsEntities\);", type_label=expression_statement];
101 [label="24_\ Worker<ObservableList<ISO3166_2_CountryEntity>>\ worker\ =\ listDataProvider\.retrieve\(\);", type_label=expression_statement];
115 [label="25_\ worker\.stateProperty\(\)\.addListener\(\);", type_label=expression_statement];
123 [label="25_\ obs\ \->\ ", type_label=expression_statement];
126 [label="26_\ if\(worker\.getState\(\)\ ==\ Worker\.State\.SUCCEEDED\)", type_label=if];
139 [label="27_\ subdivisionsEntities\.forEach\(\);", type_label=expression_statement];
144 [label="27_\ entity\ \->\ ", type_label=expression_statement];
147 [label="28_\ if\(entity\.subsets\ !=\ null\ \&\&\ !entity\.subsets\.isEmpty\(\)\)", type_label=if];
163 [label="29_\ Country\ country\ =\ findCountryByCode\(entity\.code\);", type_label=expression_statement];
173 [label="30_\ if\(!countryCodeSubdivisionMap\.containsKey\(country\)\)", type_label=if];
182 [label="31_\ countryCodeSubdivisionMap\.put\(country,\ new\ ArrayList<>\(\)\);", type_label=expression_statement];
193 [label="33_\ List<Subdivision>\ subdivisionList\ =\ countryCodeSubdivisionMap\.get\(\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ country\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \);", type_label=expression_statement];
205 [label="36_\ entity\.subsets\.forEach\(\);", type_label=expression_statement];
212 [label="36_\ subset\ \->\ ", type_label=expression_statement];
215 [label="37_\ subset\.entryList\.forEach\(\);", type_label=expression_statement];
222 [label="37_\ entry\ \->\ ", type_label=expression_statement];
225 [label="38_\ subdivisionList\.add\(new\ Subdivision\(entry\.name,\ entry\.code,\ country\)\);", type_label=expression_statement];
240 [label="42_\ String\ subdivisionName\ =\ entity\.subsets\.stream\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.map\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.collect\(Collectors\.joining\(\"/\"\)\);", type_label=expression_statement];
254 [label="43_\ subset\ \->\ subset\.subdivisionType", type_label=expression_statement];
266 [label="46_\ countryCodeSubdivisionNameMap\.put\(country,\ subdivisionName\);", type_label=expression_statement];
273 [label="49_\ inProgress\.set\(false\);", type_label=expression_statement];
279 [label="52_\ catch\ \(IOException\ e\)", type_label=catch];
285 [label="53_\ LOG\.error\(\"A\ problem\ was\ detected\ while\ loading\ the\ XML\ file\ with\ the\ available\ subdivisions\.\",\ e\);", type_label=expression_statement];
1 [label="1_\ start_node", type_label=start];
10 -> 15  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
15 -> 27  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
27 -> 33  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
27 -> 40  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
40 -> 55  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
55 -> 66  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
66 -> 68  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
68 -> 82  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
68 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
82 -> 95  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
82 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
95 -> 101  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
95 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
101 -> 115  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
101 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
115 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
115 -> 123  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
123 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
123 -> 126  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
126 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
126 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
126 -> 115  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
139 -> 273  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
139 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
139 -> 144  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
144 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
144 -> 147  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
147 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
147 -> 163  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
147 -> 139  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
163 -> 173  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
163 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
173 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
173 -> 182  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
173 -> 193  [color=red, controlflow_type="next_line 6", edge_type=CFG_edge, key=0, label="next_line 6"];
182 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
182 -> 193  [color=red, controlflow_type="next_line 2", edge_type=CFG_edge, key=0, label="next_line 2"];
193 -> 205  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
193 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
205 -> 240  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
205 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
205 -> 212  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
212 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
212 -> 215  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
215 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
215 -> 205  [color=red, controlflow_type="lambda_return 3", edge_type=CFG_edge, key=0, label="lambda_return 3"];
215 -> 222  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
222 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
222 -> 225  [color=red, controlflow_type=lambda_next, edge_type=CFG_edge, key=0, label=lambda_next];
225 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
225 -> 215  [color=red, controlflow_type="lambda_return 3", edge_type=CFG_edge, key=0, label="lambda_return 3"];
240 -> 266  [color=red, controlflow_type="next_line 1", edge_type=CFG_edge, key=0, label="next_line 1"];
240 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
240 -> 254  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
254 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
254 -> 240  [color=red, controlflow_type="lambda_return 2", edge_type=CFG_edge, key=0, label="lambda_return 2"];
266 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
266 -> 139  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
273 -> 279  [color=red, controlflow_type=catch_exception, edge_type=CFG_edge, key=0, label=catch_exception];
273 -> 115  [color=red, controlflow_type="lambda_return 1", edge_type=CFG_edge, key=0, label="lambda_return 1"];
279 -> 285  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
1 -> 10  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
