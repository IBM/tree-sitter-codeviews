digraph  {
6 [label="1_\ public\ class\ Test\ ", type_label=class_declaration];
10 [label="2_\ \ public\ static\ Optional<Boolean>\ isTarget\ \(EventModel\ eventModel,\ Identifiable\ identifiable\)", type_label=method_declaration];
25 [label="3_\ if\(eventModel\.getListResourceContainer\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.providesResource\(Collections\.singletonList\(SelectorResource\.RESOURCE_ID\)\)\)", type_label=if];
42 [label="5_\ return\ Optional\.of\(eventModel\.getListResourceContainer\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.provideResource\(SelectorResource\.RESOURCE_ID\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.stream\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.map\(ResourceModel::getResource\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.filter\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.map\(\)\\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \.anyMatch\(identifiable::isOwner\)\);", type_label=expression_statement];
71 [label="9_\ resource\ \->\ resource\ instanceof\ Identification", type_label=expression_statement];
78 [label="10_\ object\ \->\ \(Identification\)\ object", type_label=expression_statement];
89 [label="13_\ return\ Optional\.empty\(\);", type_label=return];
1 [label="1_\ start_node", type_label=start];
10 -> 25  [color=red, controlflow_type=first_next_line, edge_type=CFG_edge, key=0, label=first_next_line];
25 -> 42  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 89  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
42 -> 78  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
42 -> 71  [color=red, controlflow_type=lambda_invocation, edge_type=CFG_edge, key=0, label=lambda_invocation];
71 -> 42  [color=red, controlflow_type="lambda_return 2", edge_type=CFG_edge, key=0, label="lambda_return 2"];
78 -> 42  [color=red, controlflow_type="lambda_return 2", edge_type=CFG_edge, key=0, label="lambda_return 2"];
1 -> 10  [color=red, controlflow_type=next, edge_type=CFG_edge, key=0, label=next];
}
